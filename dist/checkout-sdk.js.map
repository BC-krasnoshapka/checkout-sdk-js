{"version":3,"file":"checkout-sdk.js","mappings":"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gCp4C,EAAO,IAAI,IAP/C,IAWR4d,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA,IAAI,GACAnpC,EACAwpC,EACA,IAAI,GAAe,IAAI,GAAqBvyB,KARpD,IAaR2G,EAASxU,SACL,eACA,WAAM,WAAI,GAA0BpJ,EAAOopC,EAAoBI,EAAzD,IAGV5rB,EAASxU,SACL,cACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAD,EACA8wE,EALJ,IASRz8F,EAASxU,SACL,yBACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GACIp4C,EACA,IAAI,GACA,IAAI,GAAoB,IAAI,GAAsBiX,WAG1Dhb,EACA,IAAI,GAAoB,IAAI,GAAsBgb,IAdtD,IAkBR2G,EAASxU,SACL,qBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAD,EACA8wE,EALJ,IASRz8F,EAASxU,SACL,oBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAD,EACA8wE,EALJ,IASRz8F,EAASxU,SACL,4BACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAD,EACA8wE,GACA,EANJ,IAURz8F,EAASxU,SACL,4BACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAiL,GAA4Cp9B,EAAcL,GAC1D,IAAI,GAAyBK,GARjC,IAYR2G,EAASxU,SACL,SACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAD,EACAmxE,EACA,IAAI,GAAiBzjG,GACrB,IAAI,GAA2B,MAPnC,IAWR2G,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACAI,EACA,IAAI,GAAoBtyB,GACxBy7B,EAPJ,IAWR90B,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA3vB,EALJ,IASRoE,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAy6G,EACArxE,EACAI,EACAD,EACA0wE,EACAS,EACA,IAAI,GAAqBzjG,GAR7B,IAYR2G,EAASxU,SACL,gBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA,IAAI,GACAnpC,EACAwpC,EACAD,EACA,IAAI,GAAe,IAAI,GAAqBtyB,KATpD,IAcR2G,EAASxU,SACL,kBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA,IAAI,GACAnpC,EACAwpC,EACA,IAAI,GAAe,IAAI,GAAqBvyB,KARpD,IAaR2G,EAASxU,SACL,QACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA,IAAI,GACAnpC,EACAwpC,EACA,IAAI,GAAe,IAAI,GAAqBvyB,KARpD,IAaR2G,EAASxU,SACL,6BACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GAAgCp4C,EAAO,IAAI,IAP/C,IAWR4d,EAASxU,SACL,kBACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GAAgCp4C,EAAO,IAAI,IAP/C,IAWR4d,EAASxU,SACL,gBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA3vB,EALJ,IASRoE,EAASxU,SACL,oBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EAJJ,IAQRvrB,EAASxU,SACL,sBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EAJJ,IAQRvrB,EAASxU,SACL,2BACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GACIp4C,EACA,IAAI,GAAgC4W,IAExC,IAAI,GAXR,IAeRgH,EAASxU,SACL,sBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EAJJ,IAQRvrB,EAASxU,SACL,qBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EAJJ,IAQRvrB,EAASxU,SACL,cACA,WACI,WAAI,GACApJ,EACAkpC,EACAE,EACAI,EACAD,EACAqxE,EACAhkG,EACA,IAAI,GAAqBK,GACzB,IAAI,GAAgBA,GATxB,IAaR2G,EAASxU,SACL,iBACA,WACI,WAAI,GACApJ,EACAupC,EACAH,EACAI,EACAkxE,EACA,IAAI,GAAyBzjG,GAAc,IAAAu6C,wBAC3CnoB,EAPJ,IAWRzrB,EAASxU,SACL,WACA,WACI,WAAI,GACApJ,EACAopC,EACAG,EACA2wE,EACA,IAAI,GAAmBjjG,GAL3B,IASR2G,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAopC,EACA8wE,EACA,IAAI,GAAqBjjG,GACzB,IAAI,GAAqBL,GAL7B,IASRgH,EAASxU,SACL,SACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAhwB,EACA+vB,EALJ,IASR3rB,EAASxU,SACL,eACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACA,IAAI,GAAuBvyB,GAC3By7B,EALJ,IASR90B,EAASxU,SACL,WACA,WACI,WAAI,GACA+/B,EACAnpC,EACA,IAAI,GAAmBiX,GACvBmyB,EACAI,EALJ,IASR5rB,EAASxU,SACL,YACA,WACI,WAAI,GACA+/B,EACAnpC,EACAopC,EACAI,EACAkxE,EALJ,IASR98F,EAASxU,SACL,QACA,WACI,WAAI,GACApJ,EACAopC,EACAG,EACA0xE,EACAzxE,EACA,IAAI,GAAgBvyB,GANxB,IAUR2G,EAASxU,SACL,uBACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GAAgCp4C,EAAO,IAAI,IAP/C,IAWR4d,EAASxU,SACL,WACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA,IAAI,GACAnpC,EACAwpC,EACAD,EACA,IAAI,GAAe,IAAI,GAAqBtyB,KATpD,IAcR2G,EAASxU,SACL,mBACA,WACI,WAAI,GACApJ,EACAopC,EACA,IAAI,GAAmBnyB,GAH3B,IAOR2G,EAASxU,SACL,oBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACA49C,GACInwE,EACAL,EACA5W,EACAopC,EACAI,GAEJ,IAAI,GACJ,IAAI,GAA4B5yB,GAChC,IAAI,GAAiB,CAAEgoB,OAAQ,CAAE3yB,gBAAiB,WAbtD,IAiBR2R,EAASxU,SACL,wCACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACA49C,GACInwE,EACAL,EACA5W,EACAopC,EACAI,GAEJ,IAAI,GACJ,IAAI,GAA4B5yB,GAChC,IAAI,GAAiB,CAAEgoB,OAAQ,CAAE3yB,gBAAiB,WAbtD,IAiBR2R,EAASxU,SACL,0BACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACA49C,GACInwE,EACAL,EACA5W,EACAopC,EACAI,GAEJ,IAAI,GACJ,IAAI,GAA4B5yB,GAChC,IAAI,GAAiB,CAAEgoB,OAAQ,CAAE3yB,gBAAiB,WAbtD,IAiBR2R,EAASxU,SACL,gCACA,WACI,WAAI,GACApJ,EACAupC,EACA,IAAI,GACA69C,GACInwE,EACAL,EACA5W,EACAopC,EACAI,IAGRJ,EACAI,EAbJ,IAiBR5rB,EAASxU,SACL,0BACA,WACI,WAAI,GACApJ,EACAopC,EACA,IAAI,GAAmBnyB,GAH3B,IAOR2G,EAASxU,SACL,UACA,WACI,WAAI8xG,GACAl7G,EACAopC,EG91ByB,SACrCppC,EACAopC,EACAxyB,EACAikG,EACA1xE,GAEA,IAAMvrB,EAAW,IAAIu9F,GAWrB,OATAv9F,EAASxU,SACLi/E,GAAgB0D,MAChB,WAAM,WAAIqvB,GAAgBp7G,EAAOopC,EAAoBD,EAAmB0xE,EAAlE,IAGVj9F,EAASxU,SAASi/E,GAAgB2D,MAAM,WAAM,WAAIqvB,GAAgBzkG,EAAeikG,EAAnC,IAE9Cj9F,EAASxU,SAASi/E,GAAgB6D,aAAa,WAAM,IAE9CtuE,CACX,CH40BgB09F,CACIt7G,EACAopC,EACAxyB,EACAikG,EACA1xE,GAEJ,IAAIoyE,GAAe3kG,EAAeikG,GAClC,IAAI,GAAe,SAXvB,IAeRj9F,EAASxU,SACL,YACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAD,EACAmxE,EACAR,EACAe,EAPJ,IAWRr9F,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA3vB,EALJ,IASRoE,EAASxU,SACL,WACA,WACI,WAAI,GACApJ,EACAkpC,EACAE,EACAI,EACAD,EACAqxE,EACAhkG,EACA,IAAI,GAAmBK,GAR3B,IAYR2G,EAASxU,SACL,sBACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GAAgCp4C,EAAO,IAAI,IAP/C,IAWR4d,EAASxU,SACL,0BACA,WACI,WAAI,GACApJ,EACAkpC,EACAK,EACAqxE,EACApxE,EACAJ,EACAgP,GAAgCp4C,EAAO,IAAI,IAP/C,IAWR4d,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,EACAupC,EACAC,EACAJ,EACA,IAAI,GAAqBnyB,GACzByjG,EACAvxE,EACAuJ,EARJ,IAYR90B,EAASxU,SACL,eACA,WACI,WAAI,GACApJ,EACAupC,EACAC,EACAJ,EACA,IAAI,GAAsBnyB,GAC1ByjG,EACArxE,EAPJ,IAWRzrB,EAASxU,SACL,WACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EACA,IAAI,GAAgBlyB,GALxB,IASR2G,EAASxU,SACL,mBACA,WACI,WAAI,GACApJ,EACAopC,EACAI,EACAL,EAJJ,IAQRvrB,EAASxU,SACL,QACA,WACI,WAAI,GACApJ,EACAupC,EACAmxE,EACAR,EACA9wE,EACA6xE,EACAzxE,EAPJ,IAWD5rB,CACX,CFz1BY,CACI5d,EACAkiC,EACAtrB,EACA8iG,EACAhnE,GAEJqnE,EACA3wE,EACAwwE,GAEJ,IAAI,GAA0B,IAAI,GAA0BhjG,IAC5D,IAAI,GACA,IAAI,GAA6BA,EAAe,CAAE87B,OAAM,KAE5D,IAAI,GMnKG,SACX1yC,EACA4W,GAEA,IAAMgH,EAAW,IAAI,GACf47F,EAAwB,IAAI,GAAsB5iG,GAClD4kG,EAA2B,IAAI,GAAyB5kG,GACxD0yB,EAA2B,IAAI,GACjCkyE,EACAhC,GAEEjwE,EAA6B,IAAI,GACnC,IAAI,GAA2B3yB,IAE7BK,GAAe,IAAAwG,mBA8BrB,OA5BAG,EAASxU,SACL,aACA,WACI,WAAI,GACApJ,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AI,IAC3CokH,EALJ,IASRxmG,EAASxU,SACL,wBACA,WACI,WAAI,GACApJ,EACAwZ,EACA0vB,EACAkP,GACIp4C,EACA,IAAI,GAA8BikH,IAEtCG,EARJ,IAYRxmG,EAASxU,SACL,0BACA,WACI,WAAI,GACApJ,EACAwZ,EACA0vB,EACAkP,GACIp4C,EACA,IAAI,GAAgC4W,IAExCwtG,EARJ,IAYRxmG,EAASxU,SACL,4BACA,WACI,WAAI,GACApJ,EACAwZ,EACA0vB,EACAkP,GAAgCp4C,EAAO,IAAI,IAC3CokH,EALJ,IASRxmG,EAASxU,SACL,sBACA,WACI,WAAI,GACApJ,EACAwZ,EACA0vB,EACAkP,GAAgCp4C,EAAO,IAAI,IAC3CokH,EALJ,IASRxmG,EAASxU,SACL,qBACA,WACI,WAAI,GACApJ,EACAwZ,EACA0vB,EACAkP,GAAgCp4C,EAAO,IAAI,IAC3CokH,EALJ,IASRxmG,EAASxU,SACL,wBACA,WACI,WAAI,GACApJ,EACAwZ,EACA0vB,EACAkP,GAAgCp4C,EAAO,IAAI,IAC3CokH,EALJ,IASRxmG,EAASxU,SACL,eACA,WACI,WAAI,GACApJ,EACAkpC,EACA,IAAI,GAAuBjyB,GAC3By7B,EAJJ,IAQR90B,EAASxU,SACL,kBACA,WACI,WAAI,GACApJ,EACAkpC,EACA,IAAI,GAAmBjyB,GACvBuC,EACA7C,EALJ,IASRiH,EAASxU,SACL,mBACA,WACI,WAAI,GACApJ,EACAkpC,EACAk7E,EACA5qG,EACA6tE,EACA5tE,EACA6vB,EACAD,EACAG,EACAJ,EAVJ,IAcRxrB,EAASxU,SACL,0BACA,WACI,WAAI,GACApJ,EACAkpC,EACAk7E,EACA5qG,EACA6tE,EACA5tE,EACA2vB,EACAE,EACAD,EACAG,EAVJ,IAcR5rB,EAASxU,SACL,wBACA,WACI,WAAI,GACApJ,EACAkpC,EACAk7E,EACA5qG,EACA6tE,EACA5tE,EANJ,IAURmE,EAASxU,SACL,yBACA,WACI,WAAI,GACApJ,EACAkpC,EACAk7E,EACA5qG,EACA6tE,EACA5tE,EANJ,IAUDmE,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","sources":["webpack://@bigcommerce/checkout-sdk/external commonjs \"iframe-resizer\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/create-customer-strategy-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/bolt/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/bolt/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripe-upe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/amazon-pay-v2/amazon-pay-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/apple-pay/apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/bolt/bolt-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/braintree/braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/braintree/braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/default/default-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/googlepay/googlepay-customer-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/square/square-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripe-upe/stripe-upe.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/strategies/stripe-upe/stripe-upe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/adyenv2.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/adyenv2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/create-adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/adyenv3.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/adyenv3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/create-adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/create-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/create-external-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/legacy-integration/src/legacy-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/legacy-integration/src/create-legacy-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/no-payment-data-required-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/create-no-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offline-integration/src/offline-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offline-integration/src/create-offline-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/offsite-integration/src/offsite-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offsite-integration/src/create-offsite-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/sezzle-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/create-sezzle-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/is-squarev2-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/create-squarev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-strategy-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"local-storage-fallback\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/analytics/analytics-extra-items-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/storage/browser-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/ppsdk-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/storefront-payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/adyenv3/adyenv3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/affirm/affirm-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/affirm/affirmJs.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-finalization-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/barclays/barclays-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/bnz/bnz-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/analytics/is-analytics-step-tracker-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/bolt/bolt-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/bolt/bolt-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/with-account-creation.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-payment-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-regular-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/is-braintree-form-fields-map.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-hosted-form.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@braintree/browser-detection\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/is-credit-card-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cardinal/cardinal-three-d-secure-flow-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-credit-card-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cardinal/cardinal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cardinal/cardinal-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-declined-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cba-mpgs/cba-mpgs-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cba-mpgs/cba-mpgs.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cba-mpgs/cba-mpgs-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/chasepay/chasepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-response-body.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/checkoutcom-custom/checkoutcom-custom-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/checkoutcom-custom/checkoutcom-apm/checkoutcom-apm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/checkoutcom-custom/checkoutcom-sepa/checkoutcom-fawry-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/checkoutcom-custom/checkoutcom-ideal/checkoutcom-ideal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/checkoutcom-custom/checkoutcom-sepa/checkoutcom-sepa-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/clearpay/clearpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/clearpay/clearpay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/credit-card-redirect/credit-card-redirect-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/cybersourcev2/cybersourcev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/digitalriver/digitalriver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/digitalriver/digitalriver-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/digitalriver/digitalriver-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/digitalriver/digitalriver-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/adyenv2/adyenv2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-execute-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/humm/humm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/klarnav2/klarna-supported-countries.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/klarna/klarna-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/klarnav2/klarnav2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/klarnav2/klarnav2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/klarnav2/klarnav2-token-updater.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/mollie/mollie-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/mollie/mollie-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/moneris/moneris-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/opy/opy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/opy/opy-payment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/opy/opy-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/opy/opy-library.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/opy/opy-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/create-paypal-commerce-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-funding-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-regular-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-hosted-form.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"query-string\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/redirect/RedirectionState.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/ppsdk-sub-strategy-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/continue-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/redirect/redirect.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/human-verification/human-verification.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/step-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/success.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/failure.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/ppsdk-completed-payments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/ppsdk-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/get-ppsdk-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/ppsdk-sub-strategy-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/initialization-strategies/card.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/initialization-strategies/none.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/sub-strategies/card-sub-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/sub-strategies/none-sub-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/ppsdk-payment-resumer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/quadpay/quadpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/square/square-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/square/square-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/square/square-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripe-upe/stripe-upe-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripe-upe/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripe-upe/stripe-upe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripev3/stripev3.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripev3/stripev3-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/worldpayaccess/worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/zip/zip-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/date-time/is-future.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/date-time/add-minutes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-response-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/map-to-paypal-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/map-to-bank-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/map-to-card-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/strategies/amazon-pay-v2/amazon-pay-v2-shipping-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/strategies/stripe-upe/stripe-upe-shipping-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-shallow-equal-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-message-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/to-single-line.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-service-error-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-store-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-store-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-store-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/create-customer-strategy-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-strategy-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/step-handler/create-step-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/ppsdk/create-ppsdk-sub-strategy-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/create-shipping-strategy-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/apple-pay/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-inline/paypal-commerce-inline-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-inline/create-paypal-commerce-inline-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/embedded-checkout-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/embedded-checkout.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/resizable-iframe-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-resizer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/embed-checkout.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/custom-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"messageformat\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/locale/language-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/locale/create-language-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/analytics/analytics-tracker-ga.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/analytics/analytics-step-tracker.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/analytics/noop-step-tracker.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/analytics/create-step-tracker.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/bodl/analytics-steps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/bodl/bodl-emitter-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/bodl/noop-bodl-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/bodl/create-bodl-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/bodl/is-bodl-enabled.ts"],"sourcesContent":["module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyCouponAction,\n    CouponAction,\n    CouponActionType,\n    RemoveCouponAction,\n} from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(private _couponRequestSender: CouponRequestSender) {}\n\n    applyCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n                this._couponRequestSender\n                    .applyCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.ApplyCouponFailed, response),\n                        );\n                    });\n            });\n    }\n\n    removeCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n                this._couponRequestSender\n                    .removeCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.RemoveCouponFailed, response),\n                        );\n                    });\n            });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES, CheckoutIncludes } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyGiftCertificateAction,\n    GiftCertificateActionType,\n    RemoveGiftCertificateAction,\n} from './gift-certificate-actions';\n\nimport { GiftCertificateRequestSender } from '.';\n\nexport default class GiftCertificateActionCreator {\n    constructor(private _giftCertificateRequestSender: GiftCertificateRequestSender) {}\n\n    applyGiftCertificate(\n        giftCertificate: string,\n        options?: RequestOptions,\n    ): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(GiftCertificateActionType.ApplyGiftCertificateRequested),\n                );\n\n                this._giftCertificateRequestSender\n                    .applyGiftCertificate(checkout.id, giftCertificate, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                GiftCertificateActionType.ApplyGiftCertificateSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                GiftCertificateActionType.ApplyGiftCertificateFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    removeGiftCertificate(\n        giftCertificate: string,\n        options?: RequestOptions,\n    ): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(GiftCertificateActionType.RemoveGiftCertificateRequested),\n                );\n\n                this._giftCertificateRequestSender\n                    .removeGiftCertificate(checkout.id, giftCertificate, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                GiftCertificateActionType.RemoveGiftCertificateSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                GiftCertificateActionType.RemoveGiftCertificateFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyGiftCertificate(\n        checkoutId: string,\n        giftCertificateCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(\n        checkoutId: string,\n        giftCertificateCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matched = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0)[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nconst style = {\n    width: '160px',\n    backgroundColor: '#000',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '100% 60%',\n    padding: '1.5rem',\n    backgroundImage: '-webkit-named-image(apple-pay-logo-white)',\n    borderRadius: '4px',\n    backgroundRepeat: 'no-repeat',\n};\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = document.createElement('button');\n\n        button.setAttribute('type', 'button');\n        button.setAttribute('aria-label', 'Apple Pay');\n        Object.assign(button.style, style);\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalUpdateOrderRequestBody,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: PayPalCreateOrderRequestBody,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(requestBody: PayPalUpdateOrderRequestBody) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nconst PAYPAL_SDK_VERSION = '5.0.5';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n    private paypalSdk?: PayPalSDK;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PayPalSDK> {\n        if (!this.paypalSdk) {\n            this.paypalSdk = await this.loadPayPalSDK(\n                this.getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this.paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypalLoadScript) {\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this.window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this.window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit =\n            shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = !shouldShowInlineCheckout && !isHostedCheckoutEnabled; // should disable APMs if Inline (Accelerated) Checkout or Shipping Options feature is enabled\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from '../paypal-commerce-script-loader';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PaypalCommerceCustomerInitializeOptions, {\n    WithPayPalCommerceCustomerInitializeOptions,\n} from './paypal-commerce-customer-initialize-options';\n\nexport default class PayPalCommerceCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        this.onError = paypalcommerce.onError || noop;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n        );\n\n        this.renderButton(methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PaypalCommerceCustomerInitializeOptions,\n    ): void {\n        const paypalSdk = this.getPayPalSdkOrThrow();\n        const { container, onComplete } = paypalcommerce;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.`,\n            );\n        }\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: {\n                height: 40,\n            },\n            createOrder: () => this.createOrder(),\n            ...paypalCallbacks,\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.removeElement(container);\n        }\n    }\n\n    private tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            action: 'set_external_checkout',\n            order_id: orderId,\n            payment_type: 'paypal',\n            provider: methodId,\n        });\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            if (cart.lineItems.physicalItems.length > 0) {\n                const { payer, purchase_units } = orderDetails;\n                const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n                const address = this.getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: shippingAddress.address_line_1,\n                    city: shippingAddress.admin_area_2,\n                    countryCode: shippingAddress.country_code,\n                    postalCode: shippingAddress.postal_code,\n                    stateOrProvinceCode: shippingAddress.admin_area_1,\n                });\n\n                await this.paymentIntegrationService.updateBillingAddress(address);\n                await this.paymentIntegrationService.updateShippingAddress(address);\n                await this.updateOrder();\n            } else {\n                const { payer } = orderDetails;\n\n                const address = this.getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: payer.address.address_line_1,\n                    city: payer.address.admin_area_2,\n                    countryCode: payer.address.country_code,\n                    postalCode: payer.address.postal_code,\n                    stateOrProvinceCode: payer.address.admin_area_1,\n                });\n\n                await this.paymentIntegrationService.updateBillingAddress(address);\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.submitPayment(methodId, data.orderID);\n\n            if (onComplete) {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({ methodId, paymentData });\n    }\n\n    private async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        await this.paypalCommerceRequestSender.updateOrder({\n            availableShippingOptions: consignment.availableShippingOptions,\n            cartId: cart.id,\n            selectedShippingOption: consignment.selectedShippingOption,\n        });\n    }\n\n    private getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const consignment = this.paymentIntegrationService.getState().getConsignmentsOrThrow()[0];\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private async createOrder(): Promise<string> {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder('paypalcommerce', {\n            cartId: cart.id,\n        });\n\n        return orderId;\n    }\n\n    private getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    private removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PayPalCommerceRequestSender, PayPalCommerceScriptLoader } from '../index';\n\nimport PayPalCommerceCustomerStrategy from './paypal-commerce-customer-strategy';\n\nconst createPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCustomerStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceCustomerStrategy(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceCustomerStrategy, [{ id: 'paypalcommerce' }]);\n","import {\n    CustomerStrategy,\n    CustomerStrategyFactory,\n    CustomerStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCustomerStrategyFactories from '../generated/customer-strategies';\n\nexport interface CustomerStrategyFactories {\n    [key: string]: CustomerStrategyFactory<CustomerStrategy>;\n}\n\nexport default function createCustomerStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    customerStrategyFactories: CustomerStrategyFactories = defaultCustomerStrategyFactories,\n): ResolveIdRegistry<CustomerStrategy, CustomerStrategyResolveId> {\n    const registry = new ResolveIdRegistry<CustomerStrategy, CustomerStrategyResolveId>();\n\n    for (const [, createCustomerStrategy] of Object.entries(customerStrategyFactories)) {\n        if (\n            !isResolvableModule<\n                CustomerStrategyFactory<CustomerStrategy>,\n                CustomerStrategyResolveId\n            >(createCustomerStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCustomerStrategy.resolveIds) {\n            registry.register(resolverId, () => createCustomerStrategy(paymentIntegrationService));\n        }\n    }\n\n    return registry;\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\n        Response<InternalCustomerResponseBody>\n    > {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { CustomerStrategy as CustomerStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyExecutePaymentMethodCheckoutAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport CustomerStrategyRegistryV2 from './customer-strategy-registry-v2';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>,\n        private _strategyRegistryV2: CustomerStrategyRegistryV2,\n    ) {}\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(CustomerStrategyActionType.SignInRequested, undefined, meta),\n            );\n\n            const promise: Promise<InternalCheckoutSelectors | void> = this._getStrategy(\n                methodId,\n            ).signIn(credentials, options);\n\n            promise\n                .then(() => {\n                    observer.next(\n                        createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta),\n                    );\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta),\n            );\n\n            const promise: Promise<InternalCheckoutSelectors | void> =\n                this._getStrategy(methodId).signOut(options);\n\n            promise\n                .then(() => {\n                    observer.next(\n                        createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta),\n                    );\n                });\n        });\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Observable<CustomerStrategyExecutePaymentMethodCheckoutAction> {\n        return Observable.create(\n            (observer: Observer<CustomerStrategyExecutePaymentMethodCheckoutAction>) => {\n                const methodId = options && options.methodId;\n                const meta = { methodId };\n\n                observer.next(\n                    createAction(\n                        CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested,\n                        undefined,\n                        meta,\n                    ),\n                );\n\n                const promise: Promise<InternalCheckoutSelectors | void> =\n                    this._getStrategy(methodId).executePaymentMethodCheckout(options);\n\n                promise\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed,\n                                error,\n                                meta,\n                            ),\n                        );\n                    });\n            },\n        );\n    }\n\n    initialize(\n        options?: CustomerInitializeOptions,\n    ): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n                const state = store.getState();\n                const methodId = options && options.methodId;\n                const meta = { methodId };\n\n                if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta),\n                );\n\n                const promise: Promise<InternalCheckoutSelectors | void> =\n                    this._getStrategy(methodId).initialize(options);\n\n                promise\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                CustomerStrategyActionType.InitializeSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                CustomerStrategyActionType.InitializeFailed,\n                                error,\n                                meta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deinitialize(\n        options?: CustomerRequestOptions,\n    ): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n                const state = store.getState();\n                const methodId = options && options.methodId;\n                const meta = { methodId };\n\n                if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta),\n                );\n\n                const promise: Promise<InternalCheckoutSelectors | void> =\n                    this._getStrategy(methodId).deinitialize(options);\n\n                promise\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                CustomerStrategyActionType.DeinitializeSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                CustomerStrategyActionType.DeinitializeFailed,\n                                error,\n                                meta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    widgetInteraction(\n        method: () => Promise<any>,\n        options?: CustomerRequestOptions,\n    ): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta),\n            );\n\n            method()\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            CustomerStrategyActionType.WidgetInteractionFinished,\n                            undefined,\n                            meta,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(\n                            CustomerStrategyActionType.WidgetInteractionFailed,\n                            error,\n                            meta,\n                        ),\n                    );\n                });\n        });\n    }\n\n    private _getStrategy(methodId?: string): CustomerStrategy | CustomerStrategyV2 {\n        let strategy: CustomerStrategy | CustomerStrategyV2;\n\n        try {\n            strategy = this._strategyRegistryV2.get({ id: methodId || '' });\n        } catch {\n            strategy = this._strategyRegistry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({\n                    ...options,\n                    useCache: true,\n                    params: { ...options?.params, checkoutId: id },\n                }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() =>\n                    this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) =>\n                            createAction(CheckoutActionType.LoadCheckoutSucceeded, body),\n                        ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error)),\n        );\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig(),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(\n        orderId: number,\n        { timeout, params }: RequestOptions<OrderParams> = {},\n    ): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([...include, ...((params && params.include) || [])]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\",\n    PAYPALCOMMERCE = \"paypalcommerce\",\n    PAYPALCOMMERCE_CREDIT = \"paypalcommercecredit\",\n    PAYPALCOMMERCE_APMS = \"paypalcommercealternativemethods\",\n    PAYPALCOMMERCE_INLINE = \"paypalcommerceinline\",\n    PAYPALCOMMERCE_VENMO = \"paypalcommercevenmo\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '../utility';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(event.origin) === -1 ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport { ConsignmentActionCreator } from '../shipping';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(methodId: string): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        customerActionCreator,\n    );\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: {\n        createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    }): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\ninterface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutSettings } from '../../../../src/config/config';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _buttonParentContainer?: HTMLDivElement;\n    private _amazonPayV2Button?: AmazonPayV2Button;\n\n    constructor(private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n        this._buttonParentContainer =\n            this._buttonParentContainer || this._createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2Button = undefined;\n        this._buttonParentContainer?.remove();\n        this._buttonParentContainer = undefined;\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>): void {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        const requestConfig = {\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n        };\n\n        this._getAmazonPayV2Button().onClick(() =>\n            this._getAmazonPayV2Button().initCheckout(requestConfig),\n        );\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this._getButtonParentContainer());\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this._getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this._getButtonParentContainer();\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private _createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData: {\n                checkoutLanguage,\n                checkoutSessionMethod,\n                createCheckoutSessionConfig,\n                extractAmazonCheckoutSessionId,\n                ledgerCurrency,\n                publicKeyId,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        const cart = getCart();\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType:\n                cart && getShippableItemsCount(cart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n            placement,\n            buttonColor: AmazonPayV2ButtonColor.Gold,\n        };\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this._isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this._getOrThrow(this._amazonPayV2SDK);\n    }\n\n    private _getButtonParentContainer(): HTMLDivElement {\n        return this._getOrThrow(this._buttonParentContainer);\n    }\n\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\n        return this._getOrThrow(this._amazonPayV2Button);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const { initializationData: { region = 'us' } = {} } = method;\n\n        const amazonPayV2Region = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import { assertApplePayWindow } from './is-apple-pay-window';\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","export interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: {}, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): void;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, public _window: BoltHostWindow = window) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltCheckout> {\n        if (this._window.BoltCheckout) {\n            return this._window.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await Promise.all([\n            this._scriptLoader.loadScript(\n                `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n                this._getScriptOptions('bolt-connect', publishableKey),\n            ),\n            this._scriptLoader.loadScript(\n                `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n                this._getScriptOptions('bolt-track', publishableKey),\n            ),\n        ]);\n\n        if (!this._window.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this._scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this._window.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.Bolt(publishableKey);\n    }\n\n    private getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private _getScriptOptions(id: string, publishableKey: string): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayCreator,\n    GooglePaymentData,\n    TokenizePayload,\n} from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(\n        request?: GooglePayBraintreeDataRequest,\n    ): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n    PAYPAL_COMPONENTS,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: { currency: string },\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                components: PAYPAL_COMPONENTS.toString(),\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ? module.then((mod) => mod.teardown()) : Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window,\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(\n            `//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`,\n        );\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(\n        clientToken: string,\n        options: VisaCheckoutInitializeOptions,\n    ): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout().then((visaCheckout) =>\n            visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(\n        payment: VisaCheckoutPaymentSuccessPayload,\n        shipping?: Address,\n        billing?: Address,\n    ): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout().then((braintreeVisaCheckout) =>\n            Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ]).then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm(\n                    {\n                        ...tokenizedPayload,\n                        shippingAddress,\n                        billingAddress,\n                    },\n                    dataCollector,\n                );\n            }),\n        );\n    }\n\n    private _postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender,\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window,\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n            )\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, public _window: ChasePayHostWindow = window) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(\n                `//pwc${\n                    testMode ? 'psb' : ''\n                }.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`,\n            )\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(public error?: Error) {\n        super(\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\n        );\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport {\n    BraintreeModuleCreator,\n    BraintreeVerifyPayload,\n    GooglePayBraintreeSDK,\n} from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(\n        checkout: Checkout | void,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n        publishableKey?: string,\n    ): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport type GooglePayTransactionInfo = Pick<GooglePayPaymentDataRequestV2, 'transactionInfo'>;\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload,\n} from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n    private _isBuyNowFlow = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default,\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updatePaymentDataRequest(payloadToUpdate: { currencyCode: string; totalPrice: string }) {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo.currencyCode = payloadToUpdate.currencyCode;\n        paymentDataRequest.transactionInfo.totalPrice = payloadToUpdate.totalPrice;\n\n        this._paymentDataRequest = paymentDataRequest;\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer\n            .parseResponse(paymentData)\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\n            ),\n        );\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow: boolean): void {\n        this._isBuyNowFlow = isBuyNowFlow;\n    }\n\n    private _configureWallet(): Promise<void> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options =\n            features && features['INT-5826.google_hostname_alias']\n                ? { params: { origin: window.location.hostname } }\n                : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then((state) => {\n                const checkout = this._getCheckout(state);\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(\n                        checkout,\n                        paymentMethod,\n                        hasShippingAddress,\n                    ),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient\n                        .isReadyToPay({\n                            allowedPaymentMethods: [\n                                {\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                    parameters: {\n                                        allowedAuthMethods:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedAuthMethods,\n                                        allowedCardNetworks:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedCardNetworks,\n                                    },\n                                },\n                            ],\n                            apiVersion: paymentDataRequest.apiVersion,\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                        })\n                        .then((response) => {\n                            if (response.result) {\n                                return;\n                            }\n\n                            throw new PaymentMethodInvalidError();\n                        });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getCheckout(state: InternalCheckoutSelectors): Checkout | void {\n        if (this._isBuyNowFlow) {\n            return;\n        }\n\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return checkout;\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(\n        paymentData: GooglePaymentData,\n        id: string,\n        customerEmail?: string,\n    ): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2:\n                paymentData.paymentMethodData.info.billingAddress.address2 +\n                paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode:\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n        const buyNowCartId = this._isBuyNowFlow\n            ? this._store.getState().cart.getCartOrThrow().id\n            : undefined;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            },\n        });\n    }\n\n    private _updateBillingAddress(\n        paymentData: GooglePaymentData,\n    ): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\n            paymentData,\n            remoteBillingAddress.id,\n            remoteBillingAddress.email,\n        );\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window,\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\n            if (!this._window.google) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.google;\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(\n    store: CheckoutStore,\n    initializer: GooglePayInitializer,\n): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender),\n        ),\n        requestSender,\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizationSpecification,\n    TokenizePayload,\n} from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(\n            paymentGatewaySpecification,\n            supportedCards,\n        );\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo: {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(\n        tokenizationSpecification: TokenizationSpecification,\n        supportedCards: string[],\n    ) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map((card) =>\n                    card === 'MC' ? 'MASTERCARD' : card,\n                ),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\nimport {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n} from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator\n            .getGooglePaymentComponent()\n            .then((googleBraintreePaymentInstance) => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress,\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token)\n            .androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout | undefined,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice,\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(\n                googlePayBraintreePaymentDataRequest,\n            ),\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n        googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks:\n                            googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'braintree',\n                            'braintree:apiVersion': 'v1',\n                            'braintree:authorizationFingerprint':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:authorizationFingerprint'],\n                            'braintree:merchantId':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:merchantId'],\n                            'braintree:sdkVersion':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:sdkVersion'],\n                        },\n                    },\n                },\n            ],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(private _requestSender: RequestSender) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress,\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(\n        testMode: boolean,\n        checkoutcomkey: string,\n        token: CheckoutcomGooglePayToken,\n    ): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\n            testMode,\n            checkoutcomkey,\n            {\n                type: 'googlepay',\n                token_data: token,\n            },\n        );\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(\n        testMode: boolean,\n        checkoutcomKey: string,\n        data = {},\n    ): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'checkoutltd',\n                            gatewayMerchantId: initializationData.checkoutcomkey,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'chase',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n            consignments,\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired:\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                    ? false\n                    : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (\n            !payload.id ||\n            !payload.type ||\n            !payload.card ||\n            !payload.card.brand ||\n            !payload.card.last4\n        ) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode, decimalPlaces },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, decimalPlaces).toFixed(decimalPlaces),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    StripeElements,\n    StripeElementsOptions,\n    StripeHostWindow,\n    StripeUPEClient,\n} from './stripe-upe';\n\nexport default class StripeUPEScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: StripeHostWindow = window) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this._window.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this._window, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    getElements(stripeClient: StripeUPEClient, options: StripeElementsOptions): StripeElements {\n        let stripeElements = this._window.bcStripeElements;\n\n        if (!stripeElements) {\n            stripeElements = stripeClient.elements(options);\n\n            Object.assign(this._window, { bcStripeElements: stripeElements });\n        } else {\n            stripeElements.fetchUpdates();\n            stripeElements.update(options);\n        }\n\n        return stripeElements;\n    }\n\n    private async load() {\n        await this._scriptLoader.loadScript('https://js.stripe.com/v3/');\n\n        if (!this._window.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.Stripe;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay?.container) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId: amazonpay.container,\n            methodId,\n            placement: AmazonPayV2Placement.Checkout,\n        });\n\n        return this._store.getState();\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return this._store.getState();\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.',\n        );\n    }\n\n    async signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        await this._amazonPayV2PaymentProcessor.signout();\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport {\n    Checkout,\n    CheckoutActionCreator,\n    CheckoutStore,\n    InternalCheckoutSelectors,\n} from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n} from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport {\n    ApplePaySessionFactory,\n    assertApplePayWindow,\n} from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport {\n    CustomerInitializeOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nconst style = {\n    width: '160px',\n    backgroundColor: '#000',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '100% 60%',\n    padding: '1.5rem',\n    backgroundImage: '-webkit-named-image(apple-pay-logo-white)',\n    borderRadius: '4px',\n    backgroundRepeat: 'no-repeat',\n};\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = () => {},\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = document.createElement('button');\n\n        button.setAttribute('type', 'button');\n        button.setAttribute('aria-label', 'Apple Pay');\n        Object.assign(button.style, style);\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(\n                    this._remoteCheckoutActionCreator.signOut(paymentMethod.id),\n                );\n\n                return await this._store.dispatch(\n                    this._checkoutActionCreator.loadCurrentCheckout(),\n                );\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            return this._onError(error);\n        }\n\n        const state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}` },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._store.dispatch(this._consignmentActionCreator.selectShippingOption(optionId));\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                }),\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    useStoreCredit: false,\n                }),\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { noop } from 'rxjs';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { PaymentMethodFailedError, PaymentMethodInvalidError } from '../../../payment/errors';\nimport { BoltCheckout, BoltScriptLoader } from '../../../payment/strategies/bolt';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport {\n    CheckoutPaymentMethodExecutedOptions,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BoltCustomerStrategy implements CustomerStrategy {\n    private _boltClient?: BoltCheckout;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _boltScriptLoader: BoltScriptLoader,\n        private _customerActionCreator: CustomerActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, bolt } = options;\n        const { onInit } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethods(),\n        );\n\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!paymentMethod || !paymentMethod.initializationData.publishableKey) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { developerConfig, publishableKey } = paymentMethod.initializationData;\n\n        this._boltClient = await this._boltScriptLoader.loadBoltClient(\n            publishableKey,\n            paymentMethod.config.testMode,\n            developerConfig,\n        );\n\n        if (onInit && typeof onInit === 'function') {\n            const email = this._getCustomerEmail();\n            const hasBoltAccount = await this._hasBoltAccount(email);\n\n            onInit(hasBoltAccount, email);\n        }\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._boltClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n    }\n\n    async executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions) {\n        const {\n            continueWithCheckoutCallback = noop,\n            checkoutPaymentMethodExecuted,\n            methodId,\n        } = options || {};\n        const email = this._getCustomerEmail();\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (continueWithCheckoutCallback && typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        if (!email) {\n            continueWithCheckoutCallback();\n\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._openBoltCheckoutModal(\n            email,\n            methodId,\n            continueWithCheckoutCallback,\n            checkoutPaymentMethodExecuted,\n        );\n    }\n\n    private async _openBoltCheckoutModal(\n        email: string,\n        methodId: string,\n        continueWithCheckoutCallback: () => void,\n        checkoutPaymentMethodExecuted?: (payload: CheckoutPaymentMethodExecutedOptions) => void,\n    ): Promise<InternalCheckoutSelectors> {\n        const boltClient = this._getBoltClient();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        try {\n            if (paymentMethod?.initializationData?.embeddedOneClickEnabled) {\n                const hasBoltAccount = await this._hasBoltAccount(email);\n\n                if (hasBoltAccount) {\n                    const callbacks = {\n                        close: () => {\n                            continueWithCheckoutCallback();\n                        },\n                    };\n\n                    await boltClient.openCheckout(email, callbacks);\n                } else {\n                    continueWithCheckoutCallback();\n                }\n\n                if (typeof checkoutPaymentMethodExecuted === 'function') {\n                    checkoutPaymentMethodExecuted({ hasBoltAccount });\n                }\n            } else {\n                continueWithCheckoutCallback();\n            }\n        } catch (error) {\n            if (error.name !== 'MissingDataError' && error.name !== 'NotInitializedError') {\n                throw new PaymentMethodFailedError(error.message);\n            }\n\n            throw error;\n        }\n\n        return this._store.getState();\n    }\n\n    private _getBoltClient() {\n        const boltClient = this._boltClient;\n\n        if (!boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return boltClient;\n    }\n\n    private async _hasBoltAccount(email: string) {\n        const boltClient = this._getBoltClient();\n\n        try {\n            return await boltClient.hasBoltAccount(email);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private _getCustomerEmail() {\n        const state = this._store.getState();\n        const customer = state.customer.getCustomer();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        return customer?.email || billingAddress?.email || '';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeVisaCheckoutPaymentProcessor,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutScriptLoader,\n} from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader,\n        private _formPoster: FormPoster,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { container, onError = () => {} } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(\n                        this._paymentMethod.clientToken,\n                        initOptions,\n                    ),\n                ])\n                    .then(([visaCheckout, initOptions]) => {\n                        const signInButton = this._createSignInButton(\n                            container,\n                            this._buttonClassName,\n                        );\n\n                        visaCheckout.init(initOptions);\n                        visaCheckout.on(\n                            'payment.success',\n                            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                                this._paymentInstrumentSelected(paymentSuccessPayload).catch(\n                                    (error) => onError(error),\n                                ),\n                        );\n                        visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                        return signInButton;\n                    })\n                    .then((signInButton) => {\n                        signInButton.style.visibility = 'visible';\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor\n            .deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(\n                () => {\n                    return this._braintreeVisaCheckoutPaymentProcessor\n                        .handleSuccess(\n                            paymentSuccessPayload,\n                            state.shippingAddress.getShippingAddress(),\n                            state.billingAddress.getBillingAddress(),\n                        )\n                        .then(async () => {\n                            await this._store.dispatch(\n                                this._checkoutActionCreator.loadCurrentCheckout(),\n                            );\n                            this._onPaymentSelectComplete();\n                        });\n                },\n                { methodId },\n            ),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (\n            (container.querySelector(`.${buttonClass}`) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass)\n        );\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport mapToLegacyBillingAddress from '../../../checkout-buttons/strategies/braintree/map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from '../../../checkout-buttons/strategies/braintree/map-to-legacy-shipping-address';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport BraintreePaypalCustomerInitializeOptions from './braintree-paypal-customer-options';\n\nexport default class BraintreePaypalCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreepaypal, methodId } = options;\n        const { container, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.cart.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                container,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, container, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: {\n                    height: 40,\n                },\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypal),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        braintreepaypal,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<string | void> {\n        try {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n\n            const amount = state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.cart.getCartOrThrow().currency.code;\n            const customer = state.customer.getCustomer();\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: false,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n            this._handleError(error, container, onError);\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n            this._handleError(error, container, onError);\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError | StandardError,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalButtonStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport mapToLegacyBillingAddress from '../../../checkout-buttons/strategies/braintree/map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from '../../../checkout-buttons/strategies/braintree/map-to-legacy-shipping-address';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleColorOption,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport BraintreePaypalCreditCustomerInitializeOptions from './braintree-paypal-credit-customer-options';\n\nexport default class BraintreePaypalCreditCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreepaypalcredit, methodId } = options;\n        const { container } = braintreepaypalcredit || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"braintreepaypalcredit.container\" argument is not provided.`,\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.cart.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, braintreepaypalcredit);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { container } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = {\n                height: 40,\n                color: PaypalButtonStyleColorOption.GOLD,\n            };\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(braintreePaypalCheckout, braintreepaypalcredit),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${container}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(container);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<string | undefined> {\n        try {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n\n            const customer = state.customer.getCustomer();\n            const amount = state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = state.cart.getCartOrThrow().currency.code;\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n            });\n        } catch (error) {\n            this._handleError(error, braintreepaypalcredit);\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<BraintreeTokenizePayload | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            this._handleError(error, braintreepaypalcredit);\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): void {\n        const { container, onError } = braintreepaypalcredit;\n\n        this._removeElement(container);\n\n        if (onError) {\n            onError(error);\n        } else {\n            throw error;\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.chasepay\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (\n                    !this._paymentMethod ||\n                    !this._paymentMethod.initializationData.digitalSessionId\n                ) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader\n                    .load(this._paymentMethod.config.testMode)\n                    .then((JPMC) => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store\n                                .dispatch(\n                                    this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n                                )\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId =\n                                        method &&\n                                        method.initializationData &&\n                                        method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(\n                            ChasePay.EventType.COMPLETE_CHECKOUT,\n                            (payload: ChasePaySuccessPayload) => {\n                                const state = this._store.getState();\n                                const method = state.paymentMethods.getPaymentMethod(methodId);\n                                const requestId =\n                                    method &&\n                                    method.initializationData &&\n                                    method.initializationData.merchantRequestId;\n\n                                if (requestId) {\n                                    this._setExternalCheckoutData(payload, requestId).then(() => {\n                                        this._reloadPage();\n                                    });\n                                }\n                            },\n                        );\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _setExternalCheckoutData(\n        payload: ChasePaySuccessPayload,\n        requestId: string,\n    ): Promise<Response<any>> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport {\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator,\n    ) {}\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","enum GooglePayCustomerMethodType {\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_ADYENV3 = 'googlepayadyenv3',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BNZ = 'googlepaybnz',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_CYBERSOURCEV2 = 'googlepaycybersourcev2',\n    GOOGLEPAY_ORBITAL = 'googlepayorbital',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    GOOGLEPAY_STRIPEUPE = 'googlepaystripeupe',\n}\n\nexport default GooglePayCustomerMethodType;\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { getShippableItemsCount } from '../../../shipping';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\nimport { default as MethodType } from './googlepay-customer-method-type';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor\n            .initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(\n                    googlePayOptions.container,\n                    googlePayOptions,\n                );\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize().then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayCustomerInitializeOptions,\n    ): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(\n            this._handleWalletButtonClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(\n        options: CustomerInitializeOptions,\n    ): GooglePayCustomerInitializeOptions {\n        if (options.methodId === MethodType.GOOGLEPAY_ADYENV2 && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_ADYENV3 && options.googlepayadyenv3) {\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === MethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_BRAINTREE && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_CHECKOUTCOM && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === MethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_ORBITAL && options.googlepayorbital) {\n            return options.googlepayorbital;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_STRIPE && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_STRIPEUPE && options.googlepaystripeupe) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        const checkoutUrl = this._store.getState().config.getStoreConfigOrThrow().links.siteLink;\n\n        this._formPoster.postForm(\n            window.location.pathname === '/embedded-checkout'\n                ? `${checkoutUrl}/checkout`\n                : '/checkout.php',\n            {\n                headers: {\n                    Accept: 'text/html',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    ...SDK_VERSION_HEADERS,\n                },\n            },\n        );\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.masterpass\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: this._paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: this._paymentMethod.config.testMode,\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader\n                    .load(masterpassScriptLoaderParams)\n                    .then((Masterpass) => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (this._paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = this._paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = this._paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CustomFont, PaymentIntent, StripeConfigurationOptions } from '../stripev3';\n\nexport { StripeAdditionalAction } from '../stripev3';\n\nexport interface StripeError {\n    /**\n     * type of error. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user.\n     */\n    type: string;\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n}\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n\n    /**\n     * The change event is triggered when the Element's value changes. The event payload always contains certain keys,\n     * in addition to some Element-specific keys.\n     * https://stripe.com/docs/js/element/events/on_change?type=paymentElement\n     */\n    on(event: 'change' | 'ready', handler: (event: StripeEventType) => void): void;\n}\n\nexport interface StripeEvent {\n    complete: boolean;\n    elementType: string;\n    empty: boolean;\n}\n\nexport interface StripeCustomerEvent extends StripeEvent {\n    collapsed?: boolean;\n    authenticated: boolean;\n    value: {\n        email: string;\n    };\n}\n\nexport interface StripeShippingEvent extends StripeEvent {\n    isNewAddress?: boolean;\n    value: {\n        address: {\n            city: string;\n            country: string;\n            line1: string;\n            line2?: string;\n            postal_code: string;\n            state: string;\n        };\n        name: string;\n    };\n}\n\nexport type StripeEventType = StripeShippingEvent | StripeCustomerEvent;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping\n */\nexport interface AddressOptions {\n    city?: string;\n    country?: string;\n    state?: string;\n    postal_code?: string;\n    line1?: string;\n    line2?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface AddressProperties {\n    city?: AutoOrNever;\n    country?: AutoOrNever;\n    state?: AutoOrNever;\n    postalCode?: AutoOrNever;\n    line1?: AutoOrNever;\n    line2?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsOptions {\n    name?: string;\n    email?: string;\n    address?: AddressOptions;\n    phone?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsProperties {\n    name?: AutoOrNever;\n    email?: AutoOrNever;\n    address?: AutoOrNever | AddressProperties;\n    phone?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface PaymentMethodDataOptions {\n    billing_details: BillingDetailsOptions;\n}\n\n/**\n * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n */\nexport interface StripeUPEConfirmParams {\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n    payment_method_data?: PaymentMethodDataOptions;\n}\n\n/**\n * Data to be sent with a `stripe.confirmPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/js/payment_intents/confirm_payment) for a full list of parameters.\n */\nexport interface StripeConfirmPaymentData {\n    /**\n     * The Elements instance that was used to create the Payment Element.\n     */\n    elements: StripeElements;\n\n    /**\n     * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n     */\n    confirmParams?: StripeUPEConfirmParams;\n\n    /**\n     * By default, confirmPayment will always redirect to your return_url after a successful confirmation.\n     * If you set redirect: \"if_required\", then confirmPayment will only redirect if your user chooses a redirect-based payment method.\n     */\n    redirect?: StripeStringConstants.ALWAYS | StripeStringConstants.IF_REQUIRED;\n}\n\nexport interface FieldsOptions {\n    billingDetails?: AutoOrNever | BillingDetailsProperties;\n}\n\nexport interface WalletOptions {\n    applePay?: AutoOrNever;\n    googlePay?: AutoOrNever;\n}\n\n/**\n * All available options are here https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface StripeElementsCreateOptions {\n    fields?: FieldsOptions;\n    wallets?: WalletOptions;\n    allowedCountries?: string[];\n    defaultValues?: ShippingDefaultValues | CustomerDefaultValues;\n}\n\ninterface ShippingDefaultValues {\n    name: string;\n    address: {\n        line1: string;\n        line2: string;\n        city: string;\n        state: string;\n        postal_code: string;\n        country: string;\n    };\n}\n\ninterface CustomerDefaultValues {\n    email: string;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates an Elements instance, which manages a group of elements.\n     * https://stripe.com/docs/js/elements_object/create\n     */\n    create(elementType: StripeElementType, options?: StripeElementsCreateOptions): StripeElement;\n\n    /**\n     * Looks up a previously created element.\n     * https://stripe.com/docs/js/elements_object/get_payment_element or\n     * https://stripe.com/docs/js/elements_object/get_link_authentication_element\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n\n    /**\n     * Updates options on an existing instance of Elements.\n     * https://stripe.com/docs/js/elements_object/update\n     */\n    update(options?: StripeUpdateElementsOptions): StripeElement;\n\n    /**\n     * Fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements,\n     * and reflects these updates in the Payment Element.\n     * https://stripe.com/docs/js/elements_object/fetch_updates\n     */\n    fetchUpdates(): void;\n}\n\n/**\n * All available options are here https://stripe.com/docs/stripe-js/appearance-api#supported-css-properties\n */\nexport interface StripeUPEAppearanceOptions {\n    variables?: {\n        colorPrimary?: string;\n        colorBackground?: string;\n        colorText?: string;\n        colorDanger?: string;\n        colorTextSecondary?: string;\n        colorTextPlaceholder?: string;\n        colorIcon?: string;\n        colorIconCardError?: string;\n        colorIconRedirect?: string;\n        spacingUnit?: string;\n        borderRadius?: string;\n    };\n\n    rules?: {\n        '.Input'?: {\n            borderColor?: string;\n            color?: string;\n            boxShadow?: string;\n        };\n    };\n}\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n     * The client secret can be used to complete a payment from your frontend.\n     * It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer.\n     * Make sure that you have TLS enabled on any page that includes the client secret.\n     * Refer to our docs to accept a payment and learn about how client_secret should be handled.\n     */\n    clientSecret: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeUPEAppearanceOptions;\n}\n\nexport interface StripeUpdateElementsOptions {\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeUPEAppearanceOptions;\n}\n\nexport interface StripeUPEClient {\n    /**\n     * Use confirmPayment to confirm a PaymentIntent using data collected by the Payment Element.\n     * When called, confirmPayment will attempt to complete any required actions,\n     * such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\n     */\n    confirmPayment(\n        options: StripeConfirmPaymentData,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /**\n     * When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n     */\n    confirmCardPayment(\n        clientSecret: string,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options: StripeElementsOptions): StripeElements;\n}\n\nexport interface StripeHostWindow extends Window {\n    bcStripeClient?: StripeUPEClient;\n    bcStripeElements?: StripeElements;\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeUPEClient;\n}\n\nexport enum StripePaymentMethodType {\n    CreditCard = 'card',\n    SOFORT = 'sofort',\n    EPS = 'eps',\n    GRABPAY = 'grabpay',\n    BANCONTACT = 'bancontact',\n    IDEAL = 'ideal',\n    GIROPAY = 'giropay',\n    ALIPAY = 'alipay',\n    KLARNA = 'klarna',\n}\n\ntype AutoOrNever = StripeStringConstants.AUTO | StripeStringConstants.NEVER;\n\nexport enum StripeStringConstants {\n    NEVER = 'never',\n    AUTO = 'auto',\n    ALWAYS = 'always',\n    PAYMENT = 'payment',\n    IF_REQUIRED = 'if_required',\n}\n\nexport enum StripeElementType {\n    PAYMENT = 'payment',\n    AUTHENTICATION = 'linkAuthentication',\n    SHIPPING = 'shippingAddress',\n}\n","import { createAction } from '@bigcommerce/data-store';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    StripeElements,\n    StripeElementType,\n    StripeEventType,\n    StripeScriptLoader,\n    StripeUPEAppearanceOptions,\n    StripeUPEClient,\n} from '../../../payment/strategies/stripe-upe';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport { CustomerActionType } from '../../customer-actions';\nimport CustomerCredentials from '../../customer-credentials';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class StripeUPECustomerStrategy implements CustomerStrategy {\n    private _stripeElements?: StripeElements;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _stripeUPEScriptLoader: StripeScriptLoader,\n        private _customerActionCreator: CustomerActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        let stripeUPEClient: StripeUPEClient;\n\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { container, gatewayId, methodId, onEmailChange, getStyles, isLoading } =\n            options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n            customer: { getCustomerOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            }),\n        );\n        const {\n            clientToken,\n            initializationData: { stripePublishableKey, stripeConnectedAccount } = {},\n        } = getPaymentMethodOrThrow(methodId, gatewayId);\n        const { email, isStripeLinkAuthenticated } = getCustomerOrThrow();\n\n        if (!email) {\n            if (!stripePublishableKey || !clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n            }\n\n            let appearance: StripeUPEAppearanceOptions | undefined;\n            const styles = typeof getStyles === 'function' && getStyles();\n\n            if (styles) {\n                appearance = {\n                    variables: {\n                        colorPrimary: styles.fieldInnerShadow,\n                        colorBackground: styles.fieldBackground,\n                        colorText: styles.labelText,\n                        colorDanger: styles.fieldErrorText,\n                        colorTextSecondary: styles.labelText,\n                        colorTextPlaceholder: styles.fieldPlaceholderText,\n                    },\n                    rules: {\n                        '.Input': {\n                            borderColor: styles.fieldBorder,\n                            color: styles.fieldText,\n                            boxShadow: styles.fieldInnerShadow,\n                        },\n                    },\n                };\n            } else {\n                appearance = {};\n            }\n\n            stripeUPEClient = await this._stripeUPEScriptLoader.getStripeClient(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            this._stripeElements = this._stripeUPEScriptLoader.getElements(stripeUPEClient, {\n                clientSecret: clientToken,\n                appearance,\n            });\n\n            const {\n                billingAddress: { getBillingAddress },\n                consignments: { getConsignments },\n            } = this._store.getState();\n            const consignments = getConsignments();\n            const id = consignments?.[0]?.id;\n            const { email: billingEmail } = getBillingAddress() || {};\n            const options = billingEmail ? { defaultValues: { email: billingEmail } } : {};\n            const linkAuthenticationElement =\n                this._stripeElements.getElement(StripeElementType.AUTHENTICATION) ||\n                this._stripeElements.create(StripeElementType.AUTHENTICATION, options);\n\n            linkAuthenticationElement.on('change', (event: StripeEventType) => {\n                if (!('authenticated' in event)) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCustomer);\n                }\n\n                this._store.dispatch(\n                    createAction(CustomerActionType.StripeLinkAuthenticated, event.authenticated),\n                );\n                event.complete\n                    ? onEmailChange(event.authenticated, event.value.email)\n                    : onEmailChange(false, '');\n\n                if (isLoading) {\n                    isLoading(false);\n                }\n\n                if (isStripeLinkAuthenticated === undefined && event.authenticated && id) {\n                    this._store.dispatch(this._consignmentActionCreator.deleteConsignment(id));\n                }\n            });\n\n            linkAuthenticationElement.mount(`#${container}`);\n        }\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._stripeElements?.getElement(StripeElementType.AUTHENTICATION)?.unmount();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","export enum AdyenActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenAction {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        },\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenV2ValidationState, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenV2ValidationState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenAction,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: CardState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /**\n     * If your shoppers use a language that isn't supported by the Components, you can create your own localization.\n     * To create a localization:\n     * Add a translations object to your payment page, specifying:\n     * The localization you want to create.\n     * An object containing the fields that are used in the Components, as well as the text you want displayed for each field.\n     *\n     * \"en\": {\n     *  \"paymentMethods.moreMethodsButton\": \"More payment methods\",\n     *  \"payButton\": \"Pay\",\n     *  \"storeDetails\": \"Save for my next payment\",\n     *   ...\n     * }\n     */\n    translations?: {\n        [index: string]: {\n            [index: string]: string;\n        };\n    };\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    holderName?: string;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new (configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions extends AdyenBaseCardComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    caretColor?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport type AdyenComponentState = CardState | WechatState;\n\nexport interface AdyenV2ValidationState {\n    valid: boolean;\n    fieldType?: AdyenV2CardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenV2CardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenComponentOptions =\n    | AdyenCreditCardComponentOptions\n    | AdyenIdealComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport function isCardState(param: any): param is CardState {\n    return (\n        (param && typeof param.data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof param.data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n\nexport function isAccountState(param: any): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf(param.data.paymentMethod.type) !== -1;\n}\n","import { some } from 'lodash';\n\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    HostedInstrument,\n    InvalidArgumentError,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AdyenAction,\n    AdyenActionType,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    CardStateErrors,\n    isAccountState,\n    isCardState,\n} from './adyenv2';\nimport AdyenV2PaymentInitializeOptions, {\n    WithAdyenV2PaymentInitializeOptions,\n} from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV2ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv2\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(options.methodId);\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (paymentMethod.initializationData.originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = paymentMethod.initializationData.originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = paymentMethod.initializationData.clientKey;\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.initializationData.environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument;\n\n        if (!payment) {\n            return Promise.reject(new PaymentArgumentInvalidError(['payment']));\n        }\n\n        this._validateCardData();\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState;\n\n        if (!componentState) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            if (isCardState(componentState) || isAccountState(componentState)) {\n                try {\n                    await this._paymentIntegrationService.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    ...bigpayToken,\n                                    token: paymentData.instrumentId,\n                                },\n                                origin: window.location.origin,\n                                browser_info: getBrowserInfo(),\n                                set_as_default_stored_instrument:\n                                    shouldSetAsDefaultInstrument || null,\n                            },\n                        },\n                    });\n\n                    return;\n                } catch (error) {\n                    await this._processAdditionalAction(\n                        error,\n                        shouldSaveInstrument,\n                        shouldSetAsDefaultInstrument,\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                ...componentState.data.paymentMethod,\n                                origin: window.location.origin,\n                            }),\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv2\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { additionalActionOptions, threeDS2Options } = this._getPaymentInitializeOptions();\n        const widgetSize = additionalActionOptions.widgetSize || threeDS2Options?.widgetSize;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } =\n                this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenActionType.ThreeDS2Challenge ||\n                        adyenAction.type === AdyenActionType.QRCode,\n                );\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(billingAddress?: BillingAddress): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: `${firstName} ${lastName}`,\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    styles: {\n                        ...adyenv2.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv2.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv2.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv2.validateCardFields(validateState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact: {\n                    const billingAddress = this._paymentIntegrationService\n                        .getState()\n                        .getBillingAddress();\n\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                        ...adyenv2.options,\n                        onChange: (componentState) => this._updateComponentState(componentState),\n                        data: this._mapAdyenPlaceholderData(billingAddress),\n                    });\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    break;\n                }\n\n                case AdyenPaymentMethodType.IDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: (componentState) =>\n                                this._updateComponentState(componentState),\n                        });\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(\n                                new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                ),\n                            );\n                        }\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Klarna:\n                case AdyenPaymentMethodType.KlarnaPayNow:\n                case AdyenPaymentMethodType.KlarnaAccount:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentState) {\n        this._componentState = componentState;\n    }\n\n    private _validateCardData(): void {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv2.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n\n        if (\n            cardComponent?.props?.type === 'ideal' ||\n            !cardComponent?.componentRef?.showValidation ||\n            !cardComponent.state\n        ) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        if (Object.keys(cardComponent.state).length === 0 || !cardComponent.state.isValid) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV2PaymentStrategy from './adyenv2-payment-strategy';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nconst createAdyenV2PaymentStrategy: PaymentStrategyFactory<AdyenV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV2PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV2PaymentStrategy, [{ gateway: 'adyenv2' }]);\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","export enum AdyenActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2 = 'threeDS2',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface CardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenAction {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        },\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n\n    showBrandsUnderCardNumber?: boolean;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenV3ComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenV3ValidationState, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenV3ValidationState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenAction,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: CardState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    showPayButton?: boolean;\n\n    /**\n     * If your shoppers use a language that isn't supported by the Components, you can create your own localization.\n     * To create a localization:\n     * Add a translations object to your payment page, specifying:\n     * The localization you want to create.\n     * An object containing the fields that are used in the Components, as well as the text you want displayed for each field.\n     *\n     * \"en\": {\n     *  \"paymentMethods.moreMethodsButton\": \"More payment methods\",\n     *  \"payButton\": \"Pay\",\n     *  \"storeDetails\": \"Save for my next payment\",\n     *   ...\n     * }\n     */\n    translations?: {\n        [index: string]: {\n            [index: string]: string;\n        };\n    };\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    holderName?: string;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenV3CreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\ntype AdyenClientConstructor = new (configuration: AdyenConfiguration) => AdyenClient;\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: AdyenClientConstructor;\n}\nexport interface AdyenV3IdealComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVv3/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    caretColor?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeWindowSize?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenV3ValidationState {\n    valid: boolean;\n    fieldType?: AdyenV3CardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenV3CardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenV3ComponentState = CardState | WechatState;\n\nexport type AdyenComponentOptions =\n    | AdyenV3CreditCardComponentOptions\n    | AdyenV3IdealComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport function isCardState(param: unknown): param is CardState {\n    return (\n        (typeof param === 'object' &&\n            !!param &&\n            typeof (param as CardState).data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof (param as CardState).data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n","import { some } from 'lodash';\n\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AdyenAction,\n    AdyenActionType,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV3ComponentState,\n    CardStateErrors,\n    isCardState,\n} from './adyenv3';\nimport AdyenV3PaymentInitializeOptions, {\n    WithAdyenV3PaymentInitializeOptions,\n} from './adyenv3-initialize-options';\nimport AdyenV3ScriptLoader from './adyenv3-script-loader';\n\nexport default class Adyenv3PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenV3ComponentState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV3PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV3ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV3PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv3 } = options;\n\n        if (!adyenv3) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv3\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv3;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(options.methodId);\n        const {\n            initializationData: { environment, clientKey, paymentMethodsResponse },\n        } = paymentMethod;\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            clientKey,\n            paymentMethodsResponse,\n            showPayButton: false,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        this._validateCardData();\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState || {\n            data: { paymentMethod: { type: payment.methodId } },\n        };\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            try {\n                await this._paymentIntegrationService.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        formattedPayload: {\n                            bigpay_token: {\n                                ...bigpayToken,\n                                token: paymentData.instrumentId,\n                            },\n                            origin: window.location.origin,\n                            browser_info: getBrowserInfo(),\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                        },\n                    },\n                });\n\n                return;\n            } catch (error) {\n                await this._processAdditionalAction(\n                    error,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                );\n\n                return;\n            }\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                ...componentState.data.paymentMethod,\n                                type: payment.methodId,\n                                origin: window.location.origin,\n                            }),\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _updateComponentState(componentState: AdyenV3ComponentState) {\n        this._componentState = componentState;\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV3PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv3\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete, widgetSize } =\n                additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                challengeWindowSize: widgetSize || '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenActionType.ThreeDS2 ||\n                        adyenAction.type === AdyenActionType.QRCode,\n                );\n            }\n\n            additionalActionComponent.mount(`#${containerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(billingAddress?: BillingAddress): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: `${firstName} ${lastName}`,\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv3.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv3.options,\n                    styles: {\n                        ...adyenv3.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv3.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv3.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv3.validateCardFields(validateState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv3.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._paymentIntegrationService.getState().getBillingAddress();\n\n            paymentComponent = adyenClient.create(paymentMethod.method, {\n                ...adyenv3.options,\n                showBrandsUnderCardNumber: false,\n                onChange: (componentState) => this._updateComponentState(componentState),\n                ...(billingAddress ? { data: this._mapAdyenPlaceholderData(billingAddress) } : {}),\n            });\n\n            try {\n                paymentComponent.mount(`#${adyenv3.containerId}`);\n            } catch (error) {\n                reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _validateCardData(): void {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv3.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n\n        if (\n            cardComponent?.props?.type === 'ideal' ||\n            !cardComponent?.componentRef?.showValidation ||\n            !cardComponent.state\n        ) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        if (Object.keys(cardComponent.state).length === 0 || !cardComponent.state.isValid) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenHostWindow } from './adyenv3';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.24.0/adyen.css`,\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.24.0/adyen.js`,\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV3PaymentStrategy from './adyenv3-payment-strategy';\nimport AdyenV3ScriptLoader from './adyenv3-script-loader';\n\nconst createAdyenV3PaymentStrategy: PaymentStrategyFactory<AdyenV3PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV3PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV3PaymentStrategy, [{ gateway: 'adyenv3' }]);\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    Cart,\n    Checkout,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(cart, checkout, config, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed()}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: cart.currency.code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(cart.currency.decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CreditCardPaymentStrategy from './credit-card-payment-strategy';\n\nconst createCreditCardPaymentStrategy: PaymentStrategyFactory<CreditCardPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CreditCardPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCreditCardPaymentStrategy, [{ default: true }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            return new Promise(() => this.redirectUrl(redirect_url));\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(payload, options);\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport LegacyPaymentStrategy from './legacy-payment-strategy';\n\nconst createLegacyPaymentStrategy: PaymentStrategyFactory<LegacyPaymentStrategy> = (\n    paymentIntegrationService,\n) => new LegacyPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createLegacyPaymentStrategy, [{ id: 'testgateway' }]);\n","import { omit } from 'lodash';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(omit(payload, 'payment'), options);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport NoPaymentDataRequiredPaymentStrategy from './no-payment-data-required-strategy';\n\nconst createNoPaymentStrategy: PaymentStrategyFactory<NoPaymentDataRequiredPaymentStrategy> = (\n    paymentIntegrationService,\n) => new NoPaymentDataRequiredPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createNoPaymentStrategy, [{ id: 'nopaymentdatarequired' }]);\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n            },\n            options,\n        );\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OfflinePaymentStrategy from './offline-payment-strategy';\n\nconst createOfflinePaymentStrategy: PaymentStrategyFactory<OfflinePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OfflinePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOfflinePaymentStrategy, [{ type: 'PAYMENT_TYPE_OFFLINE' }]);\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId =\n            (paymentData && isVaultedInstrument(paymentData) && paymentData.instrumentId) ||\n            undefined;\n        const shouldSaveInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSaveInstrument) ||\n            undefined;\n        const shouldSetAsDefaultInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSetAsDefaultInstrument) ||\n            undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        await this._paymentIntegrationService.submitOrder(orderPayload, options);\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId,\n            gatewayId,\n            instrumentId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return (\n            payment.gatewayId === 'adyen' ||\n            payment.gatewayId === 'barclaycard' ||\n            payment.methodId === 'ccavenuemars'\n        );\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OffsitePaymentStrategy from './offsite-payment-strategy';\n\nconst createOffsitePaymentStrategy: PaymentStrategyFactory<OffsitePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OffsitePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOffsitePaymentStrategy, [{ type: 'PAYMENT_TYPE_HOSTED' }]);\n","import { ExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/external-integration';\n\nexport default class SezzlePaymentStrategy extends ExternalPaymentStrategy {\n    protected redirectUrl(url: string): void {\n        window.location.replace(url);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SezzlePaymentStrategy from './sezzle-payment-strategy';\n\nconst createSezzlePaymentStrategy: PaymentStrategyFactory<SezzlePaymentStrategy> = (\n    paymentIntegrationService,\n) => new SezzlePaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createSezzlePaymentStrategy, [{ id: 'sezzle' }]);\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { fromEvent, merge, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport {\n    BillingAddress,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SquareV2PaymentInitializeOptions from './squarev2-payment-initialize-options';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\nimport {\n    BillingContact,\n    Card,\n    CardInputEvent,\n    CardInputEventTypes,\n    ChargeVerifyBuyerDetails,\n    Payments,\n    SqEvent,\n} from './types';\n\nexport interface SquareV2PaymentProcessorOptions {\n    applicationId: string;\n    locationId?: string;\n    testMode?: boolean;\n}\n\nexport default class SquareV2PaymentProcessor {\n    private _payments?: Payments;\n    private _card?: Card;\n    private _formValidationSubscription?: Subscription;\n\n    constructor(\n        private _scriptLoader: SquareV2ScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize({\n        testMode,\n        applicationId,\n        locationId,\n    }: SquareV2PaymentProcessorOptions): Promise<void> {\n        const square = await this._scriptLoader.load(testMode);\n\n        this._payments = square.payments(applicationId, locationId);\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this._formValidationSubscription) {\n            this._formValidationSubscription.unsubscribe();\n        }\n\n        if (this._card) {\n            await this._card.destroy();\n        }\n\n        this._formValidationSubscription = undefined;\n        this._card = undefined;\n        this._payments = undefined;\n    }\n\n    async initializeCard({\n        containerId,\n        style,\n        onValidationChange,\n    }: SquareV2PaymentInitializeOptions): Promise<void> {\n        const { postalCode } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        this._card = await this._getPayments().card();\n        await this._card.attach(`#${containerId}`);\n\n        try {\n            await this._card.configure({ postalCode, style });\n        } catch (_error) {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        if (onValidationChange) {\n            this._formValidationSubscription = this._subscribeToFormValidation(\n                this._card,\n                onValidationChange,\n            );\n        }\n    }\n\n    async tokenize(): Promise<string> {\n        const result = await this._getCard().tokenize();\n\n        if (result.status !== 'OK' || !result.token) {\n            let errorMessage = `Tokenization failed with status: ${result.status}`;\n\n            if (result.errors) {\n                errorMessage += ` and errors: ${JSON.stringify(result.errors)}`;\n            }\n\n            throw new Error(errorMessage);\n        }\n\n        return result.token;\n    }\n\n    async verifyBuyer(token: string): Promise<string> {\n        const { getCheckoutOrThrow, getBillingAddressOrThrow } =\n            this._paymentIntegrationService.getState();\n        const { outstandingBalance, cart } = getCheckoutOrThrow();\n\n        const details: ChargeVerifyBuyerDetails = {\n            amount: outstandingBalance.toString(),\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            currencyCode: cart.currency.code,\n            intent: 'CHARGE',\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n\n    private _getPayments(): Payments {\n        return guard(\n            this._payments,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _subscribeToFormValidation(\n        card: Card,\n        observer: Required<SquareV2PaymentInitializeOptions>['onValidationChange'],\n    ): Subscription {\n        const invalidFields = new Set<string>(['cardNumber', 'expirationDate', 'cvv']);\n        const eventObservables = [\n            'focusClassAdded',\n            'focusClassRemoved',\n            'errorClassAdded',\n            'errorClassRemoved',\n            'cardBrandChanged',\n            'postalCodeChanged',\n        ].map((eventType) => fromEvent(card, eventType as CardInputEventTypes));\n\n        return merge(...eventObservables)\n            .pipe(\n                map((event: SqEvent<CardInputEvent>): boolean => {\n                    const {\n                        detail: {\n                            field,\n                            currentState: { isCompletelyValid },\n                        },\n                    } = event;\n\n                    invalidFields[isCompletelyValid ? 'delete' : 'add'](field);\n\n                    return invalidFields.size === 0;\n                }),\n                distinctUntilChanged(),\n            )\n            .subscribe(observer);\n    }\n\n    private _getCard(): Card {\n        return guard(\n            this._card,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _mapToSquareBillingContact({\n        firstName: givenName,\n        lastName: familyName,\n        address1,\n        address2,\n        city,\n        stateOrProvinceCode: state,\n        postalCode,\n        countryCode,\n        email,\n        phone,\n    }: BillingAddress): BillingContact {\n        return {\n            givenName,\n            familyName,\n            addressLines: [address1, address2],\n            city,\n            state,\n            postalCode,\n            countryCode,\n            email,\n            phone,\n        };\n    }\n}\n","import {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithSquareV2PaymentInitializeOptions } from './squarev2-payment-initialize-options';\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\n\nexport default class SquareV2PaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _squareV2PaymentProcessor: SquareV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithSquareV2PaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.squarev2?.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { methodId, squarev2 } = options;\n        const {\n            config: { testMode },\n            initializationData: { applicationId, locationId },\n        } = this._paymentIntegrationService.getState().getPaymentMethodOrThrow(methodId);\n\n        await this._squareV2PaymentProcessor.initialize({\n            applicationId,\n            locationId,\n            testMode,\n        });\n        await this._squareV2PaymentProcessor.initializeCard(squarev2);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        let nonce = await this._squareV2PaymentProcessor.tokenize();\n\n        if (this._shouldVerify()) {\n            nonce = JSON.stringify({\n                nonce,\n                token: await this._squareV2PaymentProcessor.verifyBuyer(nonce),\n            });\n        }\n\n        await this._paymentIntegrationService.submitOrder();\n        await this._paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: { nonce },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return this._squareV2PaymentProcessor.deinitialize();\n    }\n\n    private _shouldVerify(): boolean {\n        const { features } = this._paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PROJECT-3828.add_3ds_support_on_squarev2'];\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport assertSquareV2Window from './is-squarev2-window';\nimport { Square } from './types';\n\nexport enum SquareV2WebPaymentsSdkEnv {\n    LIVE = 'https://web.squarecdn.com/v1/square.js',\n    SANDBOX = 'https://sandbox.web.squarecdn.com/v1/square.js',\n}\n\nexport default class SquareV2ScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async load(testMode = false): Promise<Square> {\n        await this._scriptLoader.loadScript(\n            testMode ? SquareV2WebPaymentsSdkEnv.SANDBOX : SquareV2WebPaymentsSdkEnv.LIVE,\n        );\n\n        assertSquareV2Window(window);\n\n        return window.Square;\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport type { Square } from './types';\n\ninterface SquareV2HostWindow extends Window {\n    Square: Square;\n}\n\nfunction isSquareV2Window(window: Window): window is SquareV2HostWindow {\n    return 'Square' in window;\n}\n\nexport default function assertSquareV2Window(window: Window): asserts window is SquareV2HostWindow {\n    if (!isSquareV2Window(window)) {\n        throw new PaymentMethodClientUnavailableError();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    NotImplementedError,\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport SquareV2PaymentStrategy from './squarev2-payment-strategy';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\n\nconst createSquareV2PaymentStrategy: PaymentStrategyFactory<SquareV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const useV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings.features[\n        'PROJECT-4113.squarev2_web_payments_sdk'\n    ];\n\n    if (useV1) {\n        throw new NotImplementedError();\n    }\n\n    return new SquareV2PaymentStrategy(\n        paymentIntegrationService,\n        new SquareV2PaymentProcessor(\n            new SquareV2ScriptLoader(getScriptLoader()),\n            paymentIntegrationService,\n        ),\n    );\n};\n\nexport default toResolvableModule(createSquareV2PaymentStrategy, [{ id: 'squarev2' }]);\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(private _countryRequestSender: CountryRequestSender) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender\n                .loadCountries(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(CountryActionType.LoadCountriesSucceeded, response.body.data),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(CountryActionType.LoadCountriesFailed, response),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import {\n    isResolvableModule,\n    PaymentIntegrationService,\n    PaymentStrategy,\n    PaymentStrategyFactory,\n    PaymentStrategyResolveId,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultPaymentStrategyFactories from '../generated/payment-strategies';\n\nexport interface PaymentStrategyFactories {\n    [key: string]: PaymentStrategyFactory<PaymentStrategy>;\n}\n\nexport default function createPaymentStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    paymentStrategyFactories: PaymentStrategyFactories = defaultPaymentStrategyFactories,\n    options: { useFallback: boolean } = { useFallback: false },\n): ResolveIdRegistry<PaymentStrategy, PaymentStrategyResolveId> {\n    const { useFallback } = options;\n    const registry = new ResolveIdRegistry<PaymentStrategy, PaymentStrategyResolveId>(useFallback);\n\n    for (const [, createPaymentStrategy] of Object.entries(paymentStrategyFactories)) {\n        if (\n            !isResolvableModule<PaymentStrategyFactory<PaymentStrategy>, PaymentStrategyResolveId>(\n                createPaymentStrategy,\n            )\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createPaymentStrategy.resolveIds) {\n            registry.register(resolverId, () => createPaymentStrategy(paymentIntegrationService));\n        }\n    }\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    ADYENV3 = 'adyenv3',\n    ADYENV3_GOOGLEPAY = 'googlepayadyenv3',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAY = 'amazonpay',\n    APPLEPAY = 'applepay',\n    BARCLAYS = 'barclays',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CBA_MPGS = 'cba_mpgs',\n    CHECKOUTCOM = 'checkoutcom',\n    CHECKOUTCOM_APM = 'checkoutcomapm',\n    CHECKOUTCOM_FAWRY = 'checkoutcomfawry',\n    CHECKOUTCOM_SEPA = 'checkoutcomsepa',\n    CHECKOUTCOM_IDEAL = 'checkoutcomideal',\n    CREDIT_CARD = 'creditcard',\n    CHECKOUTCOM_GOOGLE_PAY = 'googlepaycheckoutcom',\n    CLEARPAY = 'clearpay',\n    CONVERGE = 'converge',\n    CYBERSOURCE = 'cybersource',\n    CYBERSOURCEV2 = 'cybersourcev2',\n    BNZ = 'bnz',\n    BNZ_GOOGLEPAY = 'googlepaybnz',\n    DIGITALRIVER = 'digitalriver',\n    CYBERSOURCEV2_GOOGLE_PAY = 'googlepaycybersourcev2',\n    HUMM = 'humm',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LAYBUY = 'laybuy',\n    LEGACY = 'legacy',\n    MOLLIE = 'mollie',\n    MONERIS = 'moneris',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    OPY = 'opy',\n    ORBITAL_GOOGLE_PAY = 'googlepayorbital',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    PAYPAL_COMMERCE_CREDIT_CARD = 'paypalcommercecreditcards',\n    PAYPAL_COMMERCE_ALTERNATIVE_METHODS = 'paypalcommercealternativemethods',\n    PAYPAL_COMMERCE_VENMO = 'paypalcommercevenmo',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n    QUADPAY = 'quadpay',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    STRIPE_UPE = 'stripeupe',\n    STRIPE_UPE_GOOGLE_PAY = 'googlepaystripeupe',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_VENMO = 'braintreevenmo',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    WORLDPAYACCESS = 'worldpayaccess',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    SEZZLE = 'sezzle',\n    ZIP = 'zip',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { PaymentStrategy as PaymentStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    LoadOrderPaymentsAction,\n    OrderActionCreator,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n} from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyRegistryV2 from './payment-strategy-registry-v2';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _strategyRegistryV2: PaymentStrategyRegistryV2,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    execute(\n        payload: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return (store) => {\n            const { checkout } = store.getState();\n            const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n            return concat(\n                shouldExecuteSpamCheck\n                    ? this._spamProtectionActionCreator.verifyCheckoutSpamProtection()(store)\n                    : empty(),\n                of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n                defer(() => {\n                    const state = store.getState();\n\n                    let strategy: PaymentStrategy | PaymentStrategyV2;\n\n                    if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                        const method = state.paymentMethods.getPaymentMethod(\n                            payment.methodId,\n                            payment.gatewayId,\n                        );\n\n                        if (!method) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n\n                        strategy = this._getStrategy(method);\n                    } else {\n                        strategy = this._strategyRegistryV2.get({\n                            id: PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED,\n                        });\n                    }\n\n                    const promise: Promise<InternalCheckoutSelectors | void> = strategy.execute(\n                        payload,\n                        {\n                            ...options,\n                            methodId: payment.methodId,\n                            gatewayId: payment.gatewayId,\n                        },\n                    );\n\n                    return promise.then(() =>\n                        createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta),\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    finalize(\n        options?: RequestOptions,\n    ): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n                this._loadOrderPaymentsIfNeeded(store, options),\n                defer(async () => {\n                    const state = store.getState();\n                    const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                    const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                    if (!method) {\n                        throw new OrderFinalizationNotRequiredError();\n                    }\n\n                    const strategy = this._getStrategy(method);\n\n                    await strategy.finalize({\n                        ...options,\n                        methodId: method.id,\n                        gatewayId: method.gateway,\n                    });\n\n                    return createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, {\n                        methodId: method.id,\n                    });\n                }),\n            ).pipe(\n                catchError((error) => {\n                    const state = store.getState();\n                    const payment = state.payment.getPaymentId();\n\n                    return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, {\n                        methodId: payment && payment.providerId,\n                    });\n                }),\n            );\n    }\n\n    initialize(\n        options: PaymentInitializeOptions,\n    ): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                    return empty();\n                }\n\n                const strategy = this._getStrategy(method);\n\n                const promise: Promise<InternalCheckoutSelectors | void> = strategy.initialize({\n                    ...options,\n                    methodId,\n                    gatewayId,\n                });\n\n                return concat(\n                    of(\n                        createAction(PaymentStrategyActionType.InitializeRequested, undefined, {\n                            methodId,\n                        }),\n                    ),\n                    promise.then(() =>\n                        createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, {\n                            methodId,\n                        }),\n                    ),\n                );\n            }).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, {\n                        methodId,\n                    }),\n                ),\n            );\n    }\n\n    deinitialize(\n        options: PaymentRequestOptions,\n    ): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                    return empty();\n                }\n\n                const strategy = this._getStrategy(method);\n\n                const promise: Promise<InternalCheckoutSelectors | void> = strategy.deinitialize({\n                    ...options,\n                    methodId,\n                    gatewayId,\n                });\n\n                return concat(\n                    of(\n                        createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, {\n                            methodId,\n                        }),\n                    ),\n                    promise.then(() =>\n                        createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, {\n                            methodId,\n                        }),\n                    ),\n                );\n            }).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, {\n                        methodId,\n                    }),\n                ),\n            );\n    }\n\n    widgetInteraction(\n        method: () => Promise<any>,\n        options?: PaymentRequestOptions,\n    ): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() =>\n                    createAction(\n                        PaymentStrategyActionType.WidgetInteractionFinished,\n                        undefined,\n                        meta,\n                    ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta),\n            ),\n        );\n    }\n\n    private _getStrategy(method: PaymentMethod): PaymentStrategy | PaymentStrategyV2 {\n        let strategy: PaymentStrategy | PaymentStrategyV2;\n\n        try {\n            strategy = this._strategyRegistry.getByMethod(method);\n        } catch {\n            strategy = this._strategyRegistryV2.get({\n                id: method.id,\n                gateway: method.gateway,\n                type: method.type,\n            });\n        }\n\n        return strategy;\n    }\n\n    private _loadOrderPaymentsIfNeeded(\n        store: ReadableCheckoutStore,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"local-storage-fallback\");","import { LineItemMap } from '../cart';\n\nimport { ExtraItemsData } from './analytics-step-tracker';\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nexport default class AnalyticsExtraItemsManager {\n    constructor(private storage: StorageFallback) {}\n\n    saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [...lineItems.physicalItems, ...lineItems.digitalItems].reduce<ExtraItemsData>(\n            (result, item) => {\n                result[item.productId] = {\n                    brand: item.brand ? item.brand : '',\n                    category: item.categoryNames ? item.categoryNames.join(', ') : '',\n                };\n\n                return result;\n            },\n            {},\n        );\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            return item ? JSON.parse(item) : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n}\n","import { LoadingIndicatorStyles } from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(options?: { styles?: LoadingIndicatorStyles }) {\n        this._styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(private _namespace: string) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import PaymentMethod from './payment-method';\nimport PaymentStrategyType from './payment-strategy-type';\n\ntype PPSDKRequiredProperties = 'initializationStrategy';\n\nexport type PPSDKPaymentMethod = PaymentMethod & {\n    type: PaymentStrategyType.PPSDK;\n} & Required<Pick<PaymentMethod, PPSDKRequiredProperties>>;\n\nexport const isPPSDKPaymentMethod = (\n    paymentMethod: PaymentMethod,\n): paymentMethod is PPSDKPaymentMethod => {\n    const { type, initializationStrategy } = paymentMethod;\n\n    return type === PaymentStrategyType.PPSDK && typeof initializationStrategy?.type === 'string';\n};\n","import { ReadableDataStore } from '@bigcommerce/data-store';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { isPPSDKPaymentMethod } from './ppsdk-payment-method';\nimport { PaymentStrategy } from './strategies';\n\nconst checkoutcomStrategies: {\n    [key: string]: PaymentStrategyType;\n} = {\n    card: PaymentStrategyType.CHECKOUTCOM,\n    credit_card: PaymentStrategyType.CHECKOUTCOM,\n    sepa: PaymentStrategyType.CHECKOUTCOM_SEPA,\n    ideal: PaymentStrategyType.CHECKOUTCOM_IDEAL,\n    fawry: PaymentStrategyType.CHECKOUTCOM_FAWRY,\n};\n\nexport default class PaymentStrategyRegistry extends Registry<\n    PaymentStrategy,\n    PaymentStrategyType\n> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions,\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter((value) => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n\n        if (\n            paymentMethod.id === 'squarev2' &&\n            features &&\n            features['PROJECT-4113.squarev2_web_payments_sdk']\n        ) {\n            throw new Error('SquareV2 requires using registryV2');\n        }\n\n        if (isPPSDKPaymentMethod(paymentMethod)) {\n            return PaymentStrategyType.PPSDK;\n        }\n\n        if (paymentMethod.gateway === 'klarna') {\n            return PaymentStrategyType.KLARNAV2;\n        }\n\n        if (paymentMethod.id === PaymentStrategyType.PAYPAL_COMMERCE_CREDIT) {\n            return PaymentStrategyType.PAYPAL_COMMERCE;\n        }\n\n        if (paymentMethod.gateway === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS) {\n            return PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS;\n        }\n\n        if (paymentMethod.id === PaymentStrategyType.PAYPAL_COMMERCE_VENMO) {\n            return PaymentStrategyType.PAYPAL_COMMERCE_VENMO;\n        }\n\n        if (paymentMethod.gateway === PaymentStrategyType.CHECKOUTCOM) {\n            return paymentMethod.id in checkoutcomStrategies\n                ? checkoutcomStrategies[paymentMethod.id]\n                : PaymentStrategyType.CHECKOUTCOM_APM;\n        }\n\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        throw new InvalidArgumentError(`'${methodId}' is not registered.`);\n    }\n\n    private _hasFactoryForMethod(methodId: string): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenClient, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenClient, AdyenConfiguration, AdyenHostWindow } from './adyenv3';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/5.24.0/adyen.css`,\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/5.24.0/adyen.js`,\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n} from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    Affirm,\n    AffirmAddress,\n    AffirmDiscount,\n    AffirmFailResponse,\n    AffirmItem,\n    AffirmRequestData,\n    AffirmSuccessResponse,\n} from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    config: { testMode },\n                    clientToken: publicKey,\n                } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then((affirm) => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled'\n                                ? reject(new PaymentMethodCancelledError())\n                                : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: (successObject) => {\n                            resolve(successObject);\n                        },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then((result) => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(\n                    this._paymentActionCreator.submitPayment(paymentPayload),\n                );\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption\n            ? consignment.selectedShippingOption.type\n            : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return [[]];\n        }\n\n        return categories.map((categoryTree) => categoryTree.map((category) => category.name));\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(public _window: AffirmHostWindow = window) {}\n\n    load(apikey = '', testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nimport { Affirm, AffirmHostWindow } from './affirm';\n\ninterface AffirmConfig {\n    public_api_key: string;\n    script: string;\n}\n\nexport default function loadAffirmJS(apiKey: string, scriptURL: string) {\n    const _AFFIRM_CONFIG: AffirmConfig = {\n        public_api_key: apiKey,\n        script: scriptURL,\n    };\n\n    (function foo(\n        m: AffirmHostWindow | any,\n        g: AffirmConfig,\n        n: 'affirm',\n        d: 'checkout',\n        a: 'ui',\n        e: 'script',\n        h: 'ready',\n        c: 'jsReady',\n    ) {\n        const b = m[n] || {};\n        const k = document.createElement(e);\n        const p = document.getElementsByTagName(e)[0];\n        const l = function bar(a: Affirm | any, b: keyof Affirm, c: string) {\n            return function baz() {\n                a[b]._.push([c, arguments]); /* eslint-disable-line */\n            };\n        };\n\n        b[d] = l(b, d, 'set');\n\n        const f = b[d];\n\n        b[a] = {};\n        b[a]._ = [];\n        f._ = [];\n        b._ = [];\n        b[a][h] = l(b, a, h);\n\n        b[c] = function qux() {\n            b._.push([h, arguments]); /* eslint-disable-line */\n        };\n\n        let a1 = 0;\n\n        for (\n            const c1 = 'set add save post open empty reset on off trigger ready setProduct'.split(\n                ' ',\n            );\n            a1 < c1.length;\n            a1++\n        ) {\n            f[c1[a1]] = l(b, d, c1[a1]);\n        }\n\n        let a2 = 0;\n\n        for (const c2 = ['get', 'token', 'url', 'items']; a2 < c2.length; a2++) {\n            f[c2[a2]] = function foobar() {};\n        }\n\n        k.async = !0;\n        k.src = g[e];\n\n        if (p.parentNode) {\n            p.parentNode.insertBefore(k, p);\n        }\n\n        delete (g as Partial<AffirmConfig>)[e];\n        f(g);\n        m[n] = b;\n    })(window, _AFFIRM_CONFIG, 'affirm', 'checkout', 'ui', 'script', 'ready', 'jsReady');\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the order finalization request\n * was not completed successfully.\n */\nexport default class OrderFinalizationNotCompletedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The current order could not be finalized successfully');\n\n        this.name = 'OrderFinalizationNotCompletedError';\n        this.type = 'order_finalization_not_completed';\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { RequestOptions } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotCompletedError } from '../../../order/errors';\nimport { RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n            options.gatewayId,\n        );\n        const currencyCode = state.cart.getCart()?.currency.code || '';\n        const countryCode = this._mapCurrencyToISO2(currencyCode);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, countryCode);\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { gatewayId, methodId } = payload.payment;\n\n        if (!gatewayId || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        let state = this._store.getState();\n        const currencyCode = state.cart.getCart()?.currency.code || '';\n        const countryCode = this._mapCurrencyToISO2(currencyCode);\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._loadPaymentMethod(gatewayId, methodId, options);\n\n        await this._redirectToAfterpay(\n            countryCode,\n            state.paymentMethods.getPaymentMethod(methodId, gatewayId),\n        );\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            await this._remoteCheckoutRequestSender.forgetCheckout();\n            await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods());\n\n            throw new OrderFinalizationNotCompletedError(error.body?.errors?.[0]?.message);\n        }\n    }\n\n    private _redirectToAfterpay(countryCode: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode });\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCurrencyToISO2(currencyCode: string): string {\n        const countryByCurrency: { [key: string]: string } = {\n            AUD: 'AU',\n            NZD: 'NZ',\n            CAD: 'CA',\n            USD: 'US',\n        };\n\n        return countryByCurrency[currencyCode] || 'AU';\n    }\n\n    private async _loadPaymentMethod(\n        gatewayId: string,\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        try {\n            return await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                    ...options,\n                    params: { ...options?.params, method: methodId },\n                }),\n            );\n        } catch (error) {\n            if (error instanceof RequestError && error.body?.status === 422) {\n                throw new InvalidArgumentError(\n                    \"Afterpay can't process your payment for this order, please try another payment method\",\n                );\n            }\n\n            throw error;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     *\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader\n            .loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutSettings } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2Placement } from './amazon-pay-v2';\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n    private _amazonPayButton?: HTMLDivElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const { features } = this._store.getState().config.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId);\n        const {\n            initializationData: { paymentToken, region },\n        } = paymentMethod;\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (this._isReadyToPay(paymentToken)) {\n            if (amazonpay?.editButtonId) {\n                this._bindEditButton(\n                    amazonpay.editButtonId,\n                    paymentToken,\n                    'changePayment',\n                    this._isModalFlow(region),\n                );\n            }\n        } else {\n            const { id: containerId } = this._createContainer();\n\n            this._amazonPayButton = this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: this._store.getState(),\n                containerId,\n                decoupleCheckoutInitiation: this._isOneTimeTransaction(\n                    features,\n                    region.toUpperCase(),\n                ),\n                methodId,\n                placement: AmazonPayV2Placement.Checkout,\n            });\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const { features } = this._store.getState().config.getStoreConfigOrThrow().checkoutSettings;\n        const { region, paymentToken } = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId).initializationData;\n\n        if (\n            this._isReadyToPay(paymentToken) ||\n            this._isOneTimeTransaction(features, region.toUpperCase())\n        ) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken || 'apb' },\n            };\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n            try {\n                return await this._store.dispatch(\n                    this._paymentActionCreator.submitPayment(paymentPayload),\n                );\n            } catch (error) {\n                if (\n                    error instanceof RequestError &&\n                    error.body.status === 'additional_action_required'\n                ) {\n                    if (paymentToken) {\n                        return new Promise(() =>\n                            window.location.assign(\n                                error.body.additional_action_required.data.redirect_url,\n                            ),\n                        );\n                    }\n\n                    this._amazonPayV2PaymentProcessor.prepareCheckout(\n                        JSON.parse(error.body.additional_action_required.data.redirect_url),\n                    );\n                } else {\n                    throw error;\n                }\n            }\n        }\n\n        this._getAmazonPayButton().click();\n\n        // Focus of parent window used to try and detect the user cancelling the Amazon log in modal\n        // Should be refactored if/when Amazon add a modal close hook to their SDK\n        if (this._isModalFlow(region)) {\n            return new Promise((_, reject) => {\n                const onFocus = () => {\n                    window.removeEventListener('focus', onFocus);\n                    reject(\n                        new PaymentMethodCancelledError(\n                            'Shopper needs to login to Amazonpay to continue',\n                        ),\n                    );\n                };\n\n                window.addEventListener('focus', onFocus);\n            });\n        }\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        this._amazonPayButton = undefined;\n\n        return this._store.getState();\n    }\n\n    private _bindEditButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        isModalFlow: boolean,\n    ): void {\n        const button = document.getElementById(buttonId);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (!isModalFlow) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => this._showLoadingSpinner());\n        }\n\n        this._amazonPayV2PaymentProcessor.bindButton(buttonId, sessionId, changeAction);\n    }\n\n    private _isModalFlow(region: string) {\n        return region === 'us';\n    }\n\n    private _showLoadingSpinner(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._paymentStrategyActionCreator.widgetInteraction(() => new Promise(noop)),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _createContainer(): HTMLDivElement {\n        let container = document.getElementById('AmazonPayButton') as HTMLDivElement;\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _getAmazonPayButton() {\n        return guard(\n            this._amazonPayButton,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _isOneTimeTransaction(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        return (\n            this._amazonPayV2PaymentProcessor.isPh4Enabled(features, storeCountryCode) &&\n            features['INT-6399.amazon_pay_apb']\n        );\n    }\n\n    private _isReadyToPay(paymentToken?: string): boolean {\n        return !!paymentToken;\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory,\n    ) {}\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve(this._store.getState());\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            config.getStoreConfig() || {};\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._hostedFormFactory.create(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return this._store.getState();\n        });\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    protected _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(\n                    this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n                ),\n            );\n    }\n\n    protected _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return form\n            .validate()\n            .then(() => this._store.dispatch(this._orderActionCreator.submitOrder(order, options)))\n            .then(() => form.submit(payment))\n            .then(() => this._store.dispatch(this._orderActionCreator.loadCurrentOrder()));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(options?: PaymentInitializeOptions): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlowV2 } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class BarclaysPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport { BlueSnapV2PaymentInitializeOptions } from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options));\n\n        return this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment({\n                methodId: payment.methodId,\n                gatewayId: payment.gatewayId,\n                shouldSaveInstrument: false,\n                target: frame.name,\n                promise: promise.promise,\n            }),\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (\n            order &&\n            (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)\n        ) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.setAttribute(\n            'sandbox',\n            'allow-top-navigation allow-scripts allow-forms allow-same-origin',\n        );\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border as string;\n            iframe.style.height = height as string;\n            iframe.style.width = width as string;\n        }\n\n        return iframe;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlowV2 } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class BNZPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const { methodId } = payload.payment;\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean((window as AnalyticsTrackerWindow).analytics);\n}\n","import { PaymentErrorData } from '../../../common/error';\nimport { StandardError } from '../../../common/error/errors';\n\nexport default class BoltError extends StandardError {\n    private static getError(errorCode: string): PaymentErrorData {\n        switch (errorCode) {\n            case '1000':\n            case '2000':\n            case '3000':\n                return { code: 'invalid_number' };\n\n            case '1001':\n            case '2001':\n            case '3001':\n                return { code: 'invalid_expiry_date' };\n\n            case '1002':\n            case '2002':\n                return { code: 'invalid_cvc' };\n\n            case '1003':\n                return { code: 'invalid_zip' };\n\n            case '2003':\n                return { code: 'incorrect_zip' };\n\n            default:\n                return { code: 'general_error' };\n        }\n    }\n\n    body: { errors: PaymentErrorData[] };\n\n    constructor(public errorCode: string) {\n        super();\n\n        this.name = 'BoltPaymentsFieldError';\n        this.type = 'bolt_payments_field_error';\n        this.body = { errors: [BoltError.getError(errorCode)] };\n    }\n}\n","import AnalyticsExtraItemsManager from '../../../analytics/analytics-extra-items-manager';\nimport { isAnalyticsTrackerWindow } from '../../../analytics/is-analytics-step-tracker-window';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentMethodInvalidError,\n} from '../../errors';\nimport { withAccountCreation } from '../../index';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    BoltCheckout,\n    BoltEmbedded,\n    BoltEmbeddedTokenize,\n    BoltEmbededField,\n    BoltTransaction,\n} from './bolt';\nimport BoltError from './bolt-error';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltPaymentStrategy implements PaymentStrategy {\n    private _boltClient?: BoltCheckout;\n    private _boltEmbedded?: BoltEmbedded;\n    private _embeddedField?: BoltEmbededField;\n    private _useBoltClient = false;\n    private _useBoltEmbedded = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _boltScriptLoader: BoltScriptLoader,\n        private _analyticsExtraItemsManager: AnalyticsExtraItemsManager,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { bolt, methodId } = options;\n        const { containerId, onPaymentSelect, useBigCommerceCheckout } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (useBigCommerceCheckout) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n            const { initializationData, config } = paymentMethod || {};\n            const { publishableKey, developerConfig, embeddedOneClickEnabled } =\n                initializationData || {};\n            const { testMode } = config || {};\n\n            if (!paymentMethod || !publishableKey) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._boltClient = await this._boltScriptLoader.loadBoltClient(\n                publishableKey,\n                testMode,\n                developerConfig,\n            );\n\n            this._useBoltClient = useBigCommerceCheckout && !embeddedOneClickEnabled;\n            this._useBoltEmbedded = useBigCommerceCheckout && embeddedOneClickEnabled;\n\n            if (this._useBoltEmbedded) {\n                if (!containerId) {\n                    throw new InvalidArgumentError(\n                        'Unable to initialize payment because \"options.bolt.containerId\" argument is not provided.',\n                    );\n                }\n\n                if (!onPaymentSelect) {\n                    throw new InvalidArgumentError(\n                        'Unable to initialize payment because \"options.bolt.onPaymentSelect\" argument is not provided.',\n                    );\n                }\n\n                this._boltEmbedded = await this._boltScriptLoader.loadBoltEmbedded(\n                    publishableKey,\n                    testMode,\n                    developerConfig,\n                );\n\n                this._mountBoltEmbeddedField(containerId);\n\n                const hasBoltAccount = await this._hasBoltAccount();\n\n                onPaymentSelect(hasBoltAccount);\n            }\n        } else {\n            // info: calling loadBoltClient method without providing any params is necessary for Bolt Full Checkout and Fraud Protection\n            this._boltClient = await this._boltScriptLoader.loadBoltClient();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._embeddedField?.unmount();\n\n        this._boltClient = undefined;\n        this._boltEmbedded = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        this._setExtraItemsForAnalytics();\n\n        if (this._useBoltClient) {\n            return this._executeWithBoltClient(payload, options);\n        }\n\n        if (this._useBoltEmbedded) {\n            return this._executeWithBoltEmbedded(payload, options);\n        }\n\n        return this._executeWithBoltFullCheckout(payload, options);\n    }\n\n    /**\n     * The method triggers when Bolt have 'Fraud Protection Only' configuration mode enabled\n     *\n     * @param payload OrderRequestBody\n     * @param options PaymentRequestOptions\n     * @returns Promise<InternalCheckoutSelectors>\n     */\n    private async _executeWithBoltClient(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const boltClient = this._getBoltClient();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const orderToken = paymentMethod.clientToken;\n\n        const transaction: BoltTransaction = await new Promise((resolve, reject) => {\n            const onSuccess = (transaction: BoltTransaction, callback: () => void) => {\n                if (!transaction.reference) {\n                    reject(\n                        new PaymentMethodFailedError(\n                            'Unable to proceed because transaction reference is unavailable. Please try again later.',\n                        ),\n                    );\n                } else {\n                    resolve(transaction);\n                }\n\n                callback();\n            };\n\n            const onClose = () => {\n                reject(new PaymentMethodCancelledError());\n            };\n\n            const callbacks = {\n                success: onSuccess,\n                close: onClose,\n            };\n\n            boltClient.configure({ orderToken }, {}, callbacks).open();\n        });\n\n        const { shouldSaveInstrument } = payment.paymentData as NonceInstrument;\n\n        const paymentPayload = {\n            methodId: payment.methodId,\n            paymentData: {\n                nonce: transaction.reference,\n                shouldSaveInstrument,\n            },\n        };\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    /**\n     * The method triggers when Bolt have 'Embed One Click' configuration mode enabled\n     * and temporary for 'Bolt Accounts' configuration mode too\n     *\n     * @param payload OrderRequestBody\n     * @param options PaymentRequestOptions\n     * @returns Promise<InternalCheckoutSelectors>\n     */\n    private async _executeWithBoltEmbedded(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentData || !withAccountCreation(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const tokenizeResult = await this._embeddedField?.tokenize();\n\n        if (!tokenizeResult) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (tokenizeResult instanceof Error) {\n            throw new BoltError(tokenizeResult.message);\n        }\n\n        this._validateTokenizeResult(tokenizeResult);\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const paymentPayload = {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: {\n                        token: tokenizeResult.token,\n                        last_four_digits: tokenizeResult.last4,\n                        iin: tokenizeResult.bin,\n                        expiration_month: +tokenizeResult.expiration.split('-')[1],\n                        expiration_year: +tokenizeResult.expiration.split('-')[0],\n                    },\n                    provider_data: {\n                        create_account: paymentData.shouldCreateAccount || false,\n                        embedded_checkout: true,\n                    },\n                },\n            },\n        };\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    /**\n     * The method triggers when Bolt have 'Full Checkout with Fraud Protection' configuration mode enabled\n     *\n     * @param payload OrderRequestBody\n     * @param options PaymentRequestOptions\n     * @returns Promise<InternalCheckoutSelectors>\n     */\n    private async _executeWithBoltFullCheckout(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const boltClient = this._getBoltClient();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        await this._setBoltOrderId();\n\n        const transactionReference = await boltClient.getTransactionReference();\n\n        if (!transactionReference) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        return this._store.dispatch(\n            this._paymentActionCreator.submitPayment({\n                methodId,\n                paymentData: {\n                    ...paymentData,\n                    nonce: transactionReference,\n                },\n            }),\n        );\n    }\n\n    private _getBoltClient() {\n        const boltClient = this._boltClient;\n\n        if (!boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return boltClient;\n    }\n\n    private _getBoltEmbedded() {\n        const boltEmbedded = this._boltEmbedded;\n\n        if (!boltEmbedded) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return boltEmbedded;\n    }\n\n    private async _hasBoltAccount() {\n        const state = this._store.getState();\n        const customer = state.customer.getCustomer();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const email = customer?.email || billingAddress?.email || '';\n        const boltClient = this._getBoltClient();\n\n        try {\n            return await boltClient.hasBoltAccount(email);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private async _setBoltOrderId() {\n        const state = this._store.getState();\n        const order = state.order.getOrderOrThrow();\n        const boltClient = this._getBoltClient();\n\n        try {\n            await boltClient.setOrderId(order.orderId);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private _mountBoltEmbeddedField(containerId: string) {\n        const boltEmbedded = this._getBoltEmbedded();\n\n        const styles = { backgroundColor: '#fff' };\n        const embeddedField = boltEmbedded.create('payment_field', {\n            styles,\n            renderSeparateFields: true,\n        });\n\n        embeddedField.mount(`#${containerId}`);\n\n        this._embeddedField = embeddedField;\n    }\n\n    private _validateTokenizeResult(tokenizeResult: BoltEmbeddedTokenize) {\n        const { token, last4, bin, expiration } = tokenizeResult;\n        const lastFourDigits = +last4;\n        const iin = +bin;\n        const expirationMonth = +`${expiration}`.split('-')[1];\n        const expirationYear = +`${expiration}`.split('-')[0];\n\n        if (\n            !token ||\n            isNaN(lastFourDigits) ||\n            isNaN(iin) ||\n            isNaN(expirationMonth) ||\n            isNaN(expirationYear)\n        ) {\n            throw new PaymentArgumentInvalidError();\n        }\n    }\n\n    private _setExtraItemsForAnalytics() {\n        const state = this._store.getState();\n        const config = state.config.getConfig();\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (\n            config?.storeConfig.checkoutSettings.isAnalyticsEnabled &&\n            isAnalyticsTrackerWindow(window)\n        ) {\n            const {\n                cart: { id, lineItems },\n            } = checkout;\n\n            this._analyticsExtraItemsManager.saveExtraItemsData(id, lineItems);\n        }\n    }\n}\n","import { WithAccountCreation } from './payment';\n\nexport default function withAccountCreation(\n    paymentData: unknown,\n): paymentData is WithAccountCreation {\n    return (\n        typeof paymentData === 'object' &&\n        paymentData !== null &&\n        'shouldCreateAccount' in paymentData\n    );\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => (this._element.style.opacity = '1'));\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => (this._element.style.opacity = '0'));\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton = false,\n            innerHtml = null,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className = classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(\n            getOverlayStyle({\n                id,\n                background,\n                transitionDuration,\n                classLayout,\n                classOverlayText,\n                classClose,\n            }),\n        );\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(\n        element?: HTMLElement,\n        onClick?: (event: MouseEvent) => void,\n    ): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = (event) => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } =\n        options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { BraintreeVerifyPayload } from './braintree';\n\n/**\n * A set of options that are required to initialize the Braintree payment\n * method. You need to provide the options if you want to support 3D Secure\n * authentication flow.\n *\n * ```html\n * <!-- These containers are where the hosted (iframed) credit card fields will be inserted -->\n * <div id=\"card-number\"></div>\n * <div id=\"card-name\"></div>\n * <div id=\"card-expiry\"></div>\n * <div id=\"card-code\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'braintree',\n *     braintree: {\n *         form: {\n *             fields: {\n *                 cardNumber: { containerId: 'card-number' },\n *                 cardName: { containerId: 'card-name' },\n *                 cardExpiry: { containerId: 'card-expiry' },\n *                 cardCode: { containerId: 'card-code' },\n *             },\n *         },\n *     },\n * });\n * ```\n *\n * Additional options can be passed in to customize the fields and register\n * event callbacks.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'braintree',\n *     creditCard: {\n *         form: {\n *             fields: {\n *                 cardNumber: { containerId: 'card-number' },\n *                 cardName: { containerId: 'card-name' },\n *                 cardExpiry: { containerId: 'card-expiry' },\n *                 cardCode: { containerId: 'card-code' },\n *             },\n *             styles: {\n *                 default: {\n *                     color: '#000',\n *                 },\n *                 error: {\n *                     color: '#f00',\n *                 },\n *                 focus: {\n *                     color: '#0f0',\n *                 },\n *             },\n *             onBlur({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onFocus({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onEnter({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onCardTypeChange({ cardType }) {\n *                 console.log(cardType);\n *             },\n *             onValidate({ errors, isValid }) {\n *                 console.log(errors);\n *                 console.log(isValid);\n *             },\n *         },\n *     },\n * });\n * ```\n */\nexport interface BraintreePaymentInitializeOptions {\n    threeDSecure?: BraintreeThreeDSecureOptions;\n\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    form?: BraintreeFormOptions;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\nexport interface BraintreeThreeDSecureOptions {\n    /**\n     * A callback that gets called when the iframe is ready to be added to the\n     * current page. It is responsible for determining where the iframe should\n     * be inserted in the DOM.\n     *\n     * @param error - Any error raised during the verification process;\n     * undefined if there is none.\n     * @param iframe - The iframe element containing the verification web page\n     * provided by the card issuer.\n     * @param cancel - A function, when called, will cancel the verification\n     * process and remove the iframe.\n     */\n    addFrame(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n\n    /**\n     * A callback that gets called when the iframe is about to be removed from\n     * the current page.\n     */\n    removeFrame(): void;\n}\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n","import { InvalidArgumentError } from '../../../common/error/errors';\n\nimport {\n    BraintreeFormFieldOptions,\n    BraintreeFormFieldStyles,\n    BraintreeFormFieldStylesMap,\n} from './braintree-payment-options';\n\nexport default class BraintreeRegularField {\n    private _input: HTMLInputElement;\n\n    constructor(\n        private _options: BraintreeFormFieldOptions,\n        private _styles?: BraintreeFormFieldStylesMap,\n    ) {\n        this._input = document.createElement('input');\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.placeholder = this._options.placeholder || '';\n\n        this._input.setAttribute('aria-label', this._options.accessibilityLabel || '');\n\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n\n        this._applyStyles(this._styles?.default);\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    attach(): void {\n        const container = document.getElementById(this._options.containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError();\n        }\n\n        container.appendChild(this._input);\n    }\n\n    detach(): void {\n        this._input.parentNode?.removeChild(this._input);\n    }\n\n    on(event: string, callback: () => void): void {\n        this._input.addEventListener(event, callback);\n    }\n\n    off(event: string, callback: () => void): void {\n        this._input.removeEventListener(event, callback);\n    }\n\n    private _applyStyles(styles?: BraintreeFormFieldStyles): void {\n        if (!styles) {\n            return;\n        }\n\n        const styleKeys = Object.keys(styles) as Array<keyof BraintreeFormFieldStyles>;\n\n        styleKeys.forEach((key) => {\n            this._input.style[key] = styles[key] || '';\n        });\n    }\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.default);\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.focus);\n    };\n}\n","import { BraintreeFormFieldsMap, BraintreeStoredCardFieldsMap } from './braintree-payment-options';\n\nexport function isBraintreeFormFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeFormFieldsMap {\n    return !!(fields as BraintreeFormFieldsMap).cardNumber;\n}\n\nexport function isBraintreeStoredCardFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeStoredCardFieldsMap {\n    return !!(\n        (fields as BraintreeStoredCardFieldsMap).cardCodeVerification ||\n        (fields as BraintreeStoredCardFieldsMap).cardNumberVerification\n    );\n}\n","import { Dictionary, isEmpty, isNil, omitBy } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentInvalidFormError, PaymentInvalidFormErrorDetails } from '../../errors';\nimport { NonceInstrument } from '../../payment';\n\nimport {\n    BraintreeBillingAddressRequestData,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeHostedFieldsState,\n    BraintreeHostedFormError,\n} from './braintree';\nimport {\n    BraintreeFormFieldsMap,\n    BraintreeFormFieldStyles,\n    BraintreeFormFieldStylesMap,\n    BraintreeFormFieldType,\n    BraintreeFormFieldValidateErrorData,\n    BraintreeFormFieldValidateEventData,\n    BraintreeFormOptions,\n    BraintreeStoredCardFieldsMap,\n} from './braintree-payment-options';\nimport BraintreeRegularField from './braintree-regular-field';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { isBraintreeFormFieldsMap } from './is-braintree-form-fields-map';\n\nenum BraintreeHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class BraintreeHostedForm {\n    private _cardFields?: BraintreeHostedFields;\n    private _cardNameField?: BraintreeRegularField;\n    private _formOptions?: BraintreeFormOptions;\n    private _type?: BraintreeHostedFormType;\n    private _isInitializedHostedForm = false;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    async initialize(options: BraintreeFormOptions): Promise<void> {\n        this._formOptions = options;\n\n        this._type = isBraintreeFormFieldsMap(options.fields)\n            ? BraintreeHostedFormType.CreditCard\n            : BraintreeHostedFormType.StoredCardVerification;\n\n        const fields = this._mapFieldOptions(options.fields);\n\n        if (isEmpty(fields)) {\n            this._isInitializedHostedForm = false;\n\n            return;\n        }\n\n        this._cardFields = await this._braintreeSDKCreator.createHostedFields({\n            fields,\n            styles: options.styles && this._mapStyleOptions(options.styles),\n        });\n\n        this._cardFields.on('blur', this._handleBlur);\n        this._cardFields.on('focus', this._handleFocus);\n        this._cardFields.on('cardTypeChange', this._handleCardTypeChange);\n        this._cardFields.on('validityChange', this._handleValidityChange);\n        this._cardFields.on('inputSubmitRequest', this._handleInputSubmitRequest);\n\n        if (isBraintreeFormFieldsMap(options.fields)) {\n            this._cardNameField = new BraintreeRegularField(\n                options.fields.cardName,\n                options.styles,\n            );\n            this._cardNameField.on('blur', this._handleNameBlur);\n            this._cardNameField.on('focus', this._handleNameFocus);\n            this._cardNameField.attach();\n        }\n\n        this._isInitializedHostedForm = true;\n    }\n\n    isInitialized(): boolean {\n        return !!this._isInitializedHostedForm;\n    }\n\n    async deinitialize(): Promise<void> {\n        this._isInitializedHostedForm = false;\n\n        await this._cardFields?.teardown();\n        this._cardNameField?.detach();\n    }\n\n    async tokenize(billingAddress: Address): Promise<NonceInstrument> {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const { nonce } = await this._cardFields.tokenize(\n                omitBy(\n                    {\n                        billingAddress: billingAddress && this._mapBillingAddress(billingAddress),\n                        cardholderName: this._cardNameField?.getValue(),\n                    },\n                    isNil,\n                ),\n            );\n\n            this._formOptions?.onValidate?.({\n                isValid: true,\n                errors: {},\n            });\n\n            return { nonce };\n        } catch (error) {\n            const errors = this._mapTokenizeError(error);\n\n            if (errors) {\n                this._formOptions?.onValidate?.({\n                    isValid: false,\n                    errors,\n                });\n\n                throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n            }\n\n            throw error;\n        }\n    }\n\n    async tokenizeForStoredCardVerification(): Promise<NonceInstrument> {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const { nonce } = await this._cardFields.tokenize(\n                omitBy(\n                    {\n                        cardholderName: this._cardNameField?.getValue(),\n                    },\n                    isNil,\n                ),\n            );\n\n            this._formOptions?.onValidate?.({\n                isValid: true,\n                errors: {},\n            });\n\n            return { nonce };\n        } catch (error) {\n            const errors = this._mapTokenizeError(error);\n\n            if (errors) {\n                this._formOptions?.onValidate?.({\n                    isValid: false,\n                    errors,\n                });\n\n                throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n            }\n\n            throw error;\n        }\n    }\n\n    private _mapBillingAddress(billingAddress: Address): BraintreeBillingAddressRequestData {\n        return {\n            countryName: billingAddress.country,\n            postalCode: billingAddress.postalCode,\n            streetAddress: billingAddress.address2\n                ? `${billingAddress.address1} ${billingAddress.address2}`\n                : billingAddress.address1,\n        };\n    }\n\n    private _mapFieldOptions(\n        fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n    ): BraintreeHostedFieldsCreatorConfig['fields'] {\n        if (isBraintreeFormFieldsMap(fields)) {\n            return omitBy(\n                {\n                    number: {\n                        container: `#${fields.cardNumber.containerId}`,\n                        placeholder: fields.cardNumber.placeholder,\n                    },\n                    expirationDate: {\n                        container: `#${fields.cardExpiry.containerId}`,\n                        placeholder: fields.cardExpiry.placeholder,\n                    },\n                    cvv: fields.cardCode && {\n                        container: `#${fields.cardCode.containerId}`,\n                        placeholder: fields.cardCode.placeholder,\n                    },\n                },\n                isNil,\n            );\n        }\n\n        return omitBy(\n            {\n                number: fields.cardNumberVerification && {\n                    container: `#${fields.cardNumberVerification.containerId}`,\n                    placeholder: fields.cardNumberVerification.placeholder,\n                },\n                cvv: fields.cardCodeVerification && {\n                    container: `#${fields.cardCodeVerification.containerId}`,\n                    placeholder: fields.cardCodeVerification.placeholder,\n                },\n            },\n            isNil,\n        );\n    }\n\n    private _mapStyleOptions(\n        options: BraintreeFormFieldStylesMap,\n    ): BraintreeHostedFieldsCreatorConfig['styles'] {\n        const mapStyles = (styles: BraintreeFormFieldStyles = {}) =>\n            omitBy(\n                {\n                    color: styles.color,\n                    'font-family': styles.fontFamily,\n                    'font-size': styles.fontSize,\n                    'font-weight': styles.fontWeight,\n                },\n                isNil,\n            ) as Dictionary<string>;\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private _mapFieldType(type: string): BraintreeFormFieldType {\n        switch (type) {\n            case 'number':\n                return this._type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardNumberVerification\n                    : BraintreeFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return BraintreeFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this._type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardCodeVerification\n                    : BraintreeFormFieldType.CardCode;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private _mapValidationErrors(\n        fields: BraintreeHostedFieldsState['fields'],\n    ): BraintreeFormFieldValidateEventData['errors'] {\n        return (Object.keys(fields) as Array<keyof BraintreeHostedFieldsState['fields']>).reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this._mapFieldType(fieldKey)]: fields[fieldKey]?.isValid\n                    ? undefined\n                    : [this._createInvalidError(this._mapFieldType(fieldKey))],\n            }),\n            {},\n        );\n    }\n\n    private _mapTokenizeError(\n        error: BraintreeHostedFormError,\n    ): BraintreeFormFieldValidateEventData['errors'] | undefined {\n        if (error.code === 'HOSTED_FIELDS_FIELDS_EMPTY') {\n            return {\n                [this._mapFieldType('cvv')]: [this._createRequiredError(this._mapFieldType('cvv'))],\n                [this._mapFieldType('expirationDate')]: [\n                    this._createRequiredError(this._mapFieldType('expirationDate')),\n                ],\n                [this._mapFieldType('number')]: [\n                    this._createRequiredError(this._mapFieldType('number')),\n                ],\n            };\n        }\n\n        return error.details?.invalidFieldKeys?.reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this._mapFieldType(fieldKey)]: [\n                    this._createInvalidError(this._mapFieldType(fieldKey)),\n                ],\n            }),\n            {},\n        );\n    }\n\n    private _createRequiredError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        switch (fieldType) {\n            case BraintreeFormFieldType.CardCodeVerification:\n            case BraintreeFormFieldType.CardCode:\n                return {\n                    fieldType,\n                    message: 'CVV is required',\n                    type: 'required',\n                };\n\n            case BraintreeFormFieldType.CardNumberVerification:\n            case BraintreeFormFieldType.CardNumber:\n                return {\n                    fieldType,\n                    message: 'Credit card number is required',\n                    type: 'required',\n                };\n\n            case BraintreeFormFieldType.CardExpiry:\n                return {\n                    fieldType,\n                    message: 'Expiration date is required',\n                    type: 'required',\n                };\n\n            case BraintreeFormFieldType.CardName:\n                return {\n                    fieldType,\n                    message: 'Full name is required',\n                    type: 'required',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Field is required',\n                    type: 'required',\n                };\n        }\n    }\n\n    private _createInvalidError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        switch (fieldType) {\n            case BraintreeFormFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case BraintreeFormFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case BraintreeFormFieldType.CardCode:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case BraintreeFormFieldType.CardExpiry:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            case BraintreeFormFieldType.CardNumber:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private _handleBlur: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onBlur?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleNameBlur: () => void = () => {\n        this._formOptions?.onBlur?.({\n            fieldType: BraintreeFormFieldType.CardName,\n        });\n    };\n\n    private _handleFocus: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onFocus?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleNameFocus: () => void = () => {\n        this._formOptions?.onFocus?.({\n            fieldType: BraintreeFormFieldType.CardName,\n        });\n    };\n\n    private _handleCardTypeChange: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onCardTypeChange?.({\n            cardType:\n                event.cards.length === 1\n                ? event.cards[0].type.replace(/^master\\-card$/, 'mastercard') /* eslint-disable-line */\n                    : undefined,\n        });\n    };\n\n    private _handleInputSubmitRequest: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onEnter?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleValidityChange: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onValidate?.({\n            isValid: (\n                Object.keys(event.fields) as Array<keyof BraintreeHostedFieldsState['fields']>\n            ).every((key) => event.fields[key]?.isValid),\n            errors: this._mapValidationErrors(event.fields),\n        });\n    };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@braintree/browser-detection\");","import { supportsPopups } from '@braintree/browser-detection';\nimport { isEmpty } from 'lodash';\n\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n} from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport {\n    BraintreePaypal,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeTokenizePayload,\n    BraintreeVerifyPayload,\n} from './braintree';\nimport BraintreeHostedForm from './braintree-hosted-form';\nimport {\n    BraintreeFormOptions,\n    BraintreePaymentInitializeOptions,\n    BraintreeThreeDSecureOptions,\n} from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport isCreditCardInstrumentLike from './is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _braintreeHostedForm: BraintreeHostedForm,\n        private _overlay: Overlay,\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options?.threeDSecure;\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    async tokenizeCard(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n    ): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this._getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this._mapToCreditCard(paymentData, billingAddress);\n        const client = await this._braintreeSDKCreator.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return { nonce: creditCards[0].nonce };\n    }\n\n    async verifyCard(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const { nonce } = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(nonce, amount);\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this._braintreeSDKCreator\n            .getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this._overlay.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector().then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then((paymentData) =>\n                Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]),\n            )\n            .then(([paymentData, { deviceData }]) => ({\n                ...paymentData,\n                deviceSessionId: deviceData,\n            }));\n    }\n\n    async initializeHostedForm(options: BraintreeFormOptions): Promise<void> {\n        return this._braintreeHostedForm.initialize(options);\n    }\n\n    isInitializedHostedForm(): boolean {\n        return this._braintreeHostedForm.isInitialized();\n    }\n\n    async deinitializeHostedForm(): Promise<void> {\n        await this._braintreeHostedForm.deinitialize();\n    }\n\n    tokenizeHostedForm(billingAddress: Address): Promise<NonceInstrument> {\n        return this._braintreeHostedForm.tokenize(billingAddress);\n    }\n\n    tokenizeHostedFormForStoredCardVerification(): Promise<NonceInstrument> {\n        return this._braintreeHostedForm.tokenizeForStoredCardVerification();\n    }\n\n    async verifyCardWithHostedForm(\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const { nonce } = await this._braintreeHostedForm.tokenize(billingAddress);\n\n        return this.challenge3DSVerification(nonce, amount);\n    }\n\n    async challenge3DSVerification(nonce: string, amount: number): Promise<NonceInstrument> {\n        const threeDSecure = await this._braintreeSDKCreator.get3DS();\n\n        return this._present3DSChallenge(threeDSecure, amount, nonce);\n    }\n\n    private _getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private _present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        nonce: string,\n    ): Promise<BraintreeVerifyPayload> {\n        if (!this._threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    addFrame(error, iframe, cancelVerifyCard);\n                },\n                amount: Number(roundedAmount),\n                challengeRequested: true,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n\n    private _mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CreditCardInstrument } from '../../payment';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: any,\n): instrument is CreditCardInstrument {\n    return (\n        instrument &&\n        typeof instrument.ccExpiry === 'object' &&\n        typeof instrument.ccNumber === 'string' &&\n        typeof instrument.ccName === 'string'\n    );\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport { isHostedInstrumentLike, PaymentMethod } from '../../index';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport {\n    CreditCardInstrument,\n    NonceInstrument,\n    PaymentInstrument,\n    PaymentInstrumentMeta,\n} from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n    private _isHostedFormInitialized?: boolean;\n    private _deviceSessionId?: string;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._paymentMethod?.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this._braintreePaymentProcessor.initialize(\n                this._paymentMethod.clientToken,\n                options.braintree,\n            );\n\n            if (\n                this._isHostedPaymentFormEnabled(options.methodId, options.gatewayId) &&\n                options.braintree?.form\n            ) {\n                await this._braintreePaymentProcessor.initializeHostedForm(options.braintree.form);\n                this._isHostedFormInitialized =\n                    this._braintreePaymentProcessor.isInitializedHostedForm();\n            }\n\n            this._is3dsEnabled = this._paymentMethod.config.is3dsEnabled;\n            this._deviceSessionId = await this._braintreePaymentProcessor.getSessionId();\n        } catch (error) {\n            this._handleError(error);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = await this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options),\n        );\n\n        const {\n            billingAddress: { getBillingAddressOrThrow },\n            order: { getOrderOrThrow },\n            payment: { isPaymentDataRequired },\n        } = state;\n\n        if (!isPaymentDataRequired(order.useStoreCredit)) {\n            return state;\n        }\n\n        const billingAddress = getBillingAddressOrThrow();\n        const orderAmount = getOrderOrThrow().orderAmount;\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: this._isHostedFormInitialized\n                        ? await this._prepareHostedPaymentData(payment, billingAddress, orderAmount)\n                        : await this._preparePaymentData(payment, billingAddress, orderAmount),\n                }),\n            );\n        } catch (error) {\n            return this._processAdditionalAction(error, payment, orderAmount);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._isHostedFormInitialized = false;\n\n        await Promise.all([\n            this._braintreePaymentProcessor.deinitialize(),\n            this._braintreePaymentProcessor.deinitializeHostedForm(),\n        ]);\n\n        return this._store.getState();\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private async _preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this._deviceSessionId };\n\n        if (this._isSubmittingWithStoredCard(payment) || this._isStoringNewCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this._shouldPerform3DSVerification(payment)\n            ? await this._braintreePaymentProcessor.verifyCard(payment, billingAddress, orderAmount)\n            : await this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return {\n            ...commonPaymentData,\n            nonce,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n    }\n\n    private async _prepareHostedPaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this._deviceSessionId };\n\n        if (this._isSubmittingWithStoredCard(payment)) {\n            const { nonce } =\n                await this._braintreePaymentProcessor.tokenizeHostedFormForStoredCardVerification();\n\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n                nonce,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this._shouldPerform3DSVerification(payment)\n            ? await this._braintreePaymentProcessor.verifyCardWithHostedForm(\n                  billingAddress,\n                  orderAmount,\n              )\n            : await this._braintreePaymentProcessor.tokenizeHostedForm(billingAddress);\n\n        return {\n            ...commonPaymentData,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n            nonce,\n        };\n    }\n\n    private async _processAdditionalAction(\n        error: Error,\n        payment: OrderPaymentRequestBody,\n        orderAmount: number,\n    ): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return this._handleError(error);\n        }\n\n        try {\n            const { payer_auth_request: storedCreditCardNonce } = error.body.three_ds_result || {};\n            const { nonce } = await this._braintreePaymentProcessor.challenge3DSVerification(\n                storedCreditCardNonce,\n                orderAmount,\n            );\n\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        deviceSessionId: this._deviceSessionId,\n                        nonce,\n                    },\n                }),\n            );\n        } catch (error) {\n            return this._handleError(error);\n        }\n    }\n\n    private _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isSubmittingWithStoredCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && isVaultedInstrument(payment.paymentData));\n    }\n\n    private _isStoringNewCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(\n            payment.paymentData &&\n            (payment.paymentData as CreditCardInstrument | NonceInstrument).shouldSaveInstrument\n        );\n    }\n\n    private _shouldPerform3DSVerification(payment: OrderPaymentRequestBody): boolean {\n        return !!(this._is3dsEnabled && !this._isSubmittingWithStoredCard(payment));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '../../errors';\nimport { isHostedInstrumentLike } from '../../index';\nimport isVaultedInstrument, { isHostedVaultedInstrument } from '../../is-vaulted-instrument';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { BraintreePaymentInitializeOptions } from '../../strategies/braintree';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\nimport mapToBraintreeShippingAddressOverride from './map-to-braintree-shipping-address-override';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        if (!this._paymentMethod || !this._paymentMethod.nonce) {\n            this._paymentMethod = this._store\n                .getState()\n                .paymentMethods.getPaymentMethodOrThrow(methodId);\n        }\n\n        if (this._paymentMethod.clientToken) {\n            return this._loadPaypal(braintreeOptions);\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._loadPaypal(braintreeOptions);\n    }\n\n    execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (\n            payment\n                ? this._preparePaymentData(payment, order.useStoreCredit)\n                : Promise.resolve(payment)\n        )\n            .then((payment) =>\n                Promise.all([\n                    payment,\n                    this._store.dispatch(this._orderActionCreator.submitOrder(order, options)),\n                ]),\n            )\n            .then(([payment]) =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment)),\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize().then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private async _preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        useStoreCredit?: boolean,\n    ): Promise<Payment> {\n        const state = this._store.getState();\n\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            currency,\n            storeProfile: { storeLanguage },\n        } = config;\n        const {\n            nonce,\n            config: { isVaultingEnabled },\n        } = this._paymentMethod;\n        const { methodId, paymentData = {} } = payment;\n\n        if (nonce) {\n            const state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n            );\n\n            this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n            return Promise.resolve({ ...payment, paymentData: this._formattedPayload(nonce) });\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError(\n                    'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n                );\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (!isHostedInstrumentLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = paymentData;\n\n        if (shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but shouldSaveInstrument is set to true',\n            );\n        }\n\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress\n            ? mapToBraintreeShippingAddressOverride(shippingAddress)\n            : undefined;\n\n        return Promise.all([\n            this._braintreePaymentProcessor.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this._credit,\n                shippingAddressOverride,\n                shouldSaveInstrument: shouldSaveInstrument || false,\n            }),\n            this._braintreePaymentProcessor.getSessionId(),\n        ]).then(([{ nonce, details } = {} as any, sessionId]) => ({\n            ...payment,\n            paymentData: this._formattedPayload(\n                nonce,\n                details && details.email,\n                sessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            ),\n        }));\n    }\n\n    private _formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n        vaultPaymentInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private _loadPaypal(\n        braintreeOptions?: BraintreePaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this._braintreePaymentProcessor.initialize(\n                this._paymentMethod.clientToken,\n                braintreeOptions,\n            );\n\n            this._braintreePaymentProcessor.preloadPaypal();\n        } catch (error) {\n            this._handleError(error);\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = noop, onPaymentSelect = noop } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(\n                        this._paymentMethod.clientToken,\n                        initOptions,\n                    ),\n                ]).then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on(\n                        'payment.success',\n                        (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                            this._paymentInstrumentSelected(paymentSuccessPayload)\n                                .then(() => onPaymentSelect())\n                                .catch((error) => onError(error)),\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        if (\n            !this._paymentMethod ||\n            !this._paymentMethod.initializationData ||\n            !this._paymentMethod.initializationData.nonce\n        ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(\n                    this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: { nonce },\n                    }),\n                ),\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor\n            .deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._paymentStrategyActionCreator.widgetInteraction(\n                () => {\n                    return this._braintreeVisaCheckoutPaymentProcessor\n                        .handleSuccess(\n                            paymentSuccessPayload,\n                            state.shippingAddress.getShippingAddress(),\n                            state.billingAddress.getBillingAddress(),\n                        )\n                        .then(() =>\n                            Promise.all([\n                                this._store.dispatch(\n                                    this._checkoutActionCreator.loadCurrentCheckout(),\n                                ),\n                                this._store.dispatch(\n                                    this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n                                ),\n                            ]),\n                        );\n                },\n                { methodId },\n            ),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedForm } from '../../../hosted-form';\nimport { OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { InstrumentSelector } from '../../instrument';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { CardinalThreeDSecureToken } from './cardinal';\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlowV2 {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<InternalCheckoutSelectors> {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const { payment = { methodId: '' } } = payload;\n        const { paymentData = {} } = payment;\n\n        try {\n            return await execute(payload, options);\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                const token = error.body.additional_action_required?.data?.token;\n                const xid = error.body.three_ds_result?.payer_auth_request;\n\n                await this._cardinalClient.configure(token);\n\n                const bin = this._getBin(paymentData, getCardInstrument, hostedForm);\n\n                if (bin) {\n                    await this._cardinalClient.runBinProcess(bin);\n                }\n\n                try {\n                    return await this._submitPayment(payment, { xid }, hostedForm);\n                } catch (error) {\n                    if (\n                        error instanceof RequestError &&\n                        some(error.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        const threeDsResult = error.body.three_ds_result;\n                        const token = threeDsResult?.payer_auth_request;\n\n                        await this._cardinalClient.getThreeDSecureData(\n                            threeDsResult,\n                            this._getOrderData(),\n                        );\n\n                        return await this._submitPayment(payment, { token }, hostedForm);\n                    }\n\n                    throw error;\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const store = this._store.getState();\n        const billingAddress = store.billingAddress.getBillingAddressOrThrow();\n        const shippingAddress = store.shippingAddress.getShippingAddress();\n        const {\n            cart: {\n                currency: { code: currencyCode },\n                cartAmount: amount,\n            },\n        } = store.checkout.getCheckoutOrThrow();\n        const id = store.order.getOrderOrThrow().orderId.toString();\n\n        return { billingAddress, shippingAddress, currencyCode, id, amount };\n    }\n\n    private async _submitPayment(\n        payment: OrderPaymentRequestBody,\n        threeDSecure: CardinalThreeDSecureToken,\n        hostedForm?: HostedForm,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentPayload = merge({}, payment, { paymentData: { threeDSecure } });\n\n        if (!hostedForm) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        }\n\n        await hostedForm.submit(paymentPayload);\n\n        return this._store.getState();\n    }\n\n    private _getBin(\n        paymentData: NonNullable<OrderPaymentRequestBody['paymentData']>,\n        getCardInstrument: InstrumentSelector['getCardInstrument'],\n        hostedForm?: HostedForm,\n    ): string {\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const ccNumber = isCreditCardLike(paymentData) && paymentData.ccNumber;\n        const bin = instrument ? instrument.iin : hostedForm ? hostedForm.getBin() : ccNumber;\n\n        return bin || '';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(\n    instrument: PaymentInstrument,\n): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return (\n        !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string'\n    );\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '../../payment';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedForm } from '../../../hosted-form';\nimport { OrderRequestBody } from '../../../order';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<InternalCheckoutSelectors> {\n        const {\n            instruments: { getCardInstrument },\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                return await this._store.dispatch(\n                    this._paymentActionCreator.submitPayment(\n                        merge(payload.payment, {\n                            paymentData: { threeDSecure },\n                        }),\n                    ),\n                );\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n\n            return this._store.getState();\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(method.id),\n        );\n\n        return getPaymentMethodOrThrow(method.id).clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckoutOrThrow();\n        const order = state.order.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'The selected payment method was declined. Please select another payment method.',\n        );\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { noop, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentMethodDeclinedError,\n    PaymentMethodFailedError,\n} from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport {\n    RestApiResponse,\n    THREE_D_SECURE_AVAILABLE,\n    THREE_D_SECURE_BUSY,\n    THREE_D_SECURE_PROCEED,\n    ThreeDSjs,\n} from './cba-mpgs';\nimport CBAMPGSScriptLoader from './cba-mpgs-script-loader';\n\nexport default class CBAMPGSPaymentStrategy extends CreditCardPaymentStrategy {\n    private _threeDSjs?: ThreeDSjs;\n    private _sessionId = '';\n\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _CBAMGPSScriptLoader: CBAMPGSScriptLoader,\n        private _locale: string,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { methodId } = options;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const {\n            clientToken,\n            initializationData: { isTestModeFlagEnabled = false, merchantId },\n            config: { is3dsEnabled },\n        } = paymentMethod;\n\n        if (is3dsEnabled) {\n            this._threeDSjs = await this._CBAMGPSScriptLoader.load(isTestModeFlagEnabled);\n\n            if (!this._threeDSjs) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (!clientToken || !merchantId) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._sessionId = clientToken;\n\n            await this._threeDSjs.configure({\n                merchantId,\n                sessionId: this._sessionId,\n                callback: () => {\n                    if (this._threeDSjs?.isConfigured()) {\n                        return this._store.getState();\n                    }\n\n                    throw new PaymentMethodFailedError('Failed to configure 3DS API.');\n                },\n                configuration: {\n                    userLanguage: this._locale,\n                    wsVersion: 62,\n                },\n            });\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(payment.methodId);\n\n        const { is3dsEnabled } = paymentMethod.config;\n\n        if (is3dsEnabled) {\n            const newPaymentData = {\n                ...paymentData,\n                threeDSecure: { token: this._sessionId },\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error) => {\n            if (\n                !is3dsEnabled ||\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            const state = this._store.getState();\n            const order = state.order.getOrder();\n            const {\n                storeProfile: { storeId },\n            } = state.config.getStoreConfigOrThrow();\n\n            if (!order || !this._sessionId) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const orderId = `${storeId}_${order.orderId}`;\n\n            const {\n                three_ds_result: { token: transactionId },\n            } = error.body;\n\n            if (!transactionId) {\n                return Promise.reject(error);\n            }\n\n            return this._initiateAuthentication(orderId, transactionId);\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._threeDSjs = undefined;\n        this._sessionId = '';\n\n        return super.deinitialize();\n    }\n\n    private async _initiateAuthentication(\n        orderId: string,\n        transactionId: string,\n    ): Promise<InternalCheckoutSelectors> {\n        const response: RestApiResponse = await new Promise((resolve, reject) => {\n            if (!this._threeDSjs) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._threeDSjs.initiateAuthentication(orderId, transactionId, (data) => {\n                const error = data.error;\n\n                if (error) {\n                    return reject(new PaymentMethodDeclinedError(error.msg));\n                }\n\n                if (this._threeDSjs && data.gatewayRecommendation === THREE_D_SECURE_PROCEED) {\n                    return resolve(data.restApiResponse);\n                }\n\n                return reject(new PaymentMethodDeclinedError());\n            });\n        });\n\n        if (\n            response.transaction &&\n            response.transaction.authenticationStatus === THREE_D_SECURE_AVAILABLE\n        ) {\n            return this._authenticatePayer(orderId, transactionId);\n        }\n\n        throw new PaymentMethodDeclinedError();\n    }\n\n    private async _authenticatePayer(\n        orderId: string,\n        transactionId: string,\n        attempt = 1,\n    ): Promise<InternalCheckoutSelectors | never> {\n        return new Promise((_resolve, reject) => {\n            if (!this._threeDSjs) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this._threeDSjs.authenticatePayer(\n                orderId,\n                transactionId,\n                async (data) => {\n                    const error = data.error;\n\n                    if (error) {\n                        if (error.cause && error.cause === THREE_D_SECURE_BUSY && attempt < 5) {\n                            // Wait 3 seconds for MPGS server to process the `initiateAuthentication` call\n                            // See: Step 1: Initiate Authentication ->  Initiate Authentication Request:\n                            // https://ap-gateway.mastercard.com/api/documentation/integrationGuidelines/supportedFeatures/pickAdditionalFunctionality/authentication/3DS/integrationModelAPI.html?locale=en_US#x_3DSTest\n                            await new Promise((resolve) => setTimeout(resolve, 3000));\n\n                            return this._authenticatePayer(orderId, transactionId, ++attempt);\n                        }\n\n                        return reject(new PaymentMethodDeclinedError());\n                    }\n\n                    // ThreeDSjs will handle the redirect so return a promise that doesn't really resolve\n                    return new Promise<never>(noop);\n                },\n                { fullScreenRedirect: true },\n            );\n        });\n    }\n}\n","export const THREE_D_SECURE_PROCEED = 'PROCEED';\nexport const THREE_D_SECURE_BUSY = 'SERVER_BUSY';\nexport const THREE_D_SECURE_AVAILABLE = 'AUTHENTICATION_AVAILABLE';\n\nexport interface CBAMPGSHostWindow extends Window {\n    ThreeDS?: ThreeDSjs;\n}\n\nexport interface ThreeDSjs {\n    // Configuration method for initializing the API.\n    configure(config: ThreeDSConfiguration): Promise<void>;\n    // Convenience method to check if the API has been configured successfully.\n    isConfigured(): boolean;\n    // Authentication for the arguments passed.\n    initiateAuthentication(\n        orderId: string,\n        transactionId: string,\n        callback: (data: ThreeDSAuthenticationResponse) => void,\n    ): void;\n    authenticatePayer(\n        orderId: string,\n        transactionId: string,\n        callback: (data: ThreeDSAuthenticationResponse) => void,\n        optionalParams?: AuthenticatePayerOptionalParams,\n    ): void;\n}\n\nexport interface RestApiResponse {\n    transaction: {\n        authenticationStatus: string;\n    };\n}\n\n// Configuration required to configure ThreeDS\nexport interface ThreeDSConfiguration {\n    merchantId: string;\n    sessionId: string;\n    configuration: ThreeDSAPIConfiguration;\n    callback(): void;\n}\n\nexport interface ThreeDSAuthenticationResponse {\n    error?: ThreeDSAuthenticationError;\n    restApiResponse: RestApiResponse;\n    gatewayRecommendation: string;\n}\n\nexport interface AuthenticatePayerOptionalParams {\n    fullScreenRedirect: boolean;\n}\n\nexport interface ThreeDSAuthenticationError {\n    code: string;\n    msg: string;\n    cause?: string;\n}\n\n// JSON value supporting data elements like userLanguage, REST API version (wsVersion)\nexport interface ThreeDSAPIConfiguration {\n    // A language identifier or IETF language tag to control the language of the payment page displayed to the payer.\n    //  For example, \"en_US\", es, \"fr-CA\". By default, the language is \"en_US\".\n    userLanguage: string;\n    // The Web Services API version that you submitted the request in. IE: 62\n    wsVersion: number;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CBAMPGSHostWindow, ThreeDSjs } from './cba-mpgs';\n\nexport default class CBAMPGSScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CBAMPGSHostWindow = window) {}\n\n    async load(testMode?: boolean): Promise<ThreeDSjs> {\n        await this._scriptLoader.loadScript(\n            `//${\n                testMode ? 'test' : 'ap'\n            }-gateway.mastercard.com/static/threeDS/1.3.0/three-ds.min.js`,\n        );\n\n        if (!this._window.ThreeDS) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.ThreeDS;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp: boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(\n        eventType: ChasePayEventType,\n        callback: ChasePayEventMap[ChasePayEventType],\n    ): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient,\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.chasepay\" argument is not provided.',\n            );\n        }\n\n        const walletButton =\n            options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay).then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch((error) => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet().then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then((payment) => this._createOrder(payment, payload.useStoreCredit, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader\n            .load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(\n                    ChasePayEventType.CompleteCheckout,\n                    (payload: ChasePaySuccessPayload) => {\n                        this._setSessionToken(payload.sessionToken).then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                    },\n                );\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._paymentStrategyActionCreator.widgetInteraction(\n                () => {\n                    this._store\n                        .dispatch(\n                            this._paymentMethodActionCreator.loadPaymentMethod(this._methodId),\n                        )\n                        .then((state) => {\n                            const paymentMethod = state.paymentMethods.getPaymentMethod(\n                                this._methodId,\n                            );\n\n                            if (!this._chasePayClient) {\n                                throw new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                );\n                            }\n\n                            if (!paymentMethod) {\n                                throw new MissingDataError(\n                                    MissingDataErrorType.MissingPaymentMethod,\n                                );\n                            }\n\n                            this._chasePayClient.showLoadingAnimation();\n                            this._chasePayClient.startCheckout(\n                                paymentMethod.initializationData.digitalSessionId,\n                            );\n                        });\n\n                    // Wait for payment selection\n                    return new Promise<void>((resolve, reject) => {\n                        this._walletEvent$\n                            .pipe(take(1))\n                            .subscribe((event: { type: ChasePayEventType }) => {\n                                if (event.type === ChasePayEventType.CancelCheckout) {\n                                    reject(new PaymentMethodCancelledError());\n                                } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                                    resolve();\n                                }\n                            });\n                    });\n                },\n                { methodId: this._methodId },\n            ),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId =\n            paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return (\n            this._requestSender\n                .post('checkout.php', {\n                    headers: {\n                        Accept: 'text/html',\n                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    body: {\n                        action: 'set_external_checkout',\n                        provider: this._methodId,\n                        sessionToken,\n                        merchantRequestId,\n                    },\n                })\n                // Re-hydrate checkout data\n                .then(() =>\n                    Promise.all([\n                        this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                        this._store.dispatch(\n                            this._paymentMethodActionCreator.loadPaymentMethod(this._methodId),\n                        ),\n                    ]),\n                )\n                .then(() => this._store.getState())\n        );\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient\n                        .initialize()\n                        .then((client) => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then((riskToken) => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(\n        payment: Payment,\n        useStoreCredit?: boolean,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface PaymentResponseBody {\n    status: string;\n    id: string;\n    avs_result: AvsResult | {};\n    cvv_result: CvvResult | {};\n    three_ds_result: ThreeDsResult | {};\n    fraud_review: boolean;\n    transaction_type: string;\n    additional_action_required?: AdditionalActionRequired;\n    errors?: Array<{\n        code: string;\n        message: string;\n    }>;\n}\n\nexport interface AvsResult {\n    code: string;\n    message: string;\n    street_match: string;\n    postal_match: string;\n}\n\nexport interface CvvResult {\n    code: string;\n    message: string;\n}\n\nexport interface ThreeDsResult {\n    acs_url: string;\n    payer_auth_request: string;\n    merchant_data: string;\n    callback_url: string;\n}\n\nexport interface AdditionalActionRequired {\n    type: AdditionalActionType;\n    data: AdditionalRedirectData;\n}\n\nexport interface AdditionalRedirectData {\n    redirect_url: string;\n    transaction_id?: string;\n}\n\nexport enum AdditionalActionType {\n    OffsiteRedirect = 'offsite_redirect',\n}\n","import { InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport { AdditionalActionRequired, AdditionalActionType } from '../../payment-response-body';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CheckoutcomCustomPaymentStrategy extends CreditCardPaymentStrategy {\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n            await form.submit(payment);\n        } catch (error) {\n            return this._processResponse(error);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n    }\n\n    protected _processResponse(error: RequestError): Promise<InternalCheckoutSelectors> {\n        if (!(error instanceof RequestError)) {\n            return Promise.reject(error);\n        }\n\n        const additionalActionRequired: AdditionalActionRequired =\n            error.body.additional_action_required;\n\n        // TODO validate all possible responses and perform respective additional actions\n        if (\n            additionalActionRequired &&\n            additionalActionRequired.type === AdditionalActionType.OffsiteRedirect\n        ) {\n            return this._performRedirect(additionalActionRequired);\n        }\n\n        return Promise.reject(error);\n    }\n\n    private _performRedirect(\n        additionalActionRequired: AdditionalActionRequired,\n    ): Promise<InternalCheckoutSelectors> {\n        return new Promise(() => {\n            window.location.replace(additionalActionRequired.data.redirect_url);\n        });\n    }\n}\n","import { InternalCheckoutSelectors } from '../../../../checkout';\nimport { OrderRequestBody } from '../../../../order';\nimport { PaymentArgumentInvalidError } from '../../../errors';\nimport { PaymentInstrument, WithDocumentInstrument } from '../../../payment';\nimport { PaymentRequestOptions } from '../../../payment-request-options';\nimport CheckoutcomCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst DOCUMENT_SUPPORTED_APMS = ['boleto', 'oxxo', 'qpay', 'ideal'];\n\nexport default class CheckoutcomAPMPaymentStrategy extends CheckoutcomCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        formattedPayload: this._createFormattedPayload(\n                            payment.methodId,\n                            paymentData,\n                        ),\n                    },\n                }),\n            );\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithDocumentInstrument {\n        const formattedPayload: WithDocumentInstrument = { ccDocument: '' };\n        const ccDocument = 'ccDocument' in paymentData ? paymentData.ccDocument : '';\n\n        if (DOCUMENT_SUPPORTED_APMS.indexOf(methodId) !== -1 && ccDocument) {\n            formattedPayload.ccDocument = ccDocument;\n        }\n\n        return formattedPayload;\n    }\n}\n","import { InternalCheckoutSelectors } from '../../../../checkout';\nimport { OrderRequestBody } from '../../../../order';\nimport { PaymentArgumentInvalidError } from '../../../errors';\nimport { PaymentInstrument, WithCheckoutcomFawryInstrument } from '../../../payment';\nimport { PaymentRequestOptions } from '../../../payment-request-options';\nimport CheckoutcomCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_FAWRY_PAYMENT_METHOD = 'fawry';\n\nexport default class CheckoutcomFawryPaymentStrategy extends CheckoutcomCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        formattedPayload: this._createFormattedPayload(\n                            payment.methodId,\n                            paymentData,\n                        ),\n                    },\n                }),\n            );\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomFawryInstrument | undefined {\n        if (\n            CHECKOUTCOM_FAWRY_PAYMENT_METHOD === methodId &&\n            'customerMobile' in paymentData &&\n            'customerEmail' in paymentData\n        ) {\n            return {\n                customerMobile: paymentData.customerMobile,\n                customerEmail: paymentData.customerEmail,\n            };\n        }\n    }\n}\n","import { InternalCheckoutSelectors } from '../../../../checkout';\nimport { OrderRequestBody } from '../../../../order';\nimport { PaymentArgumentInvalidError } from '../../../errors';\nimport { PaymentInstrument, WithCheckoutcomiDealInstrument } from '../../../payment';\nimport { PaymentRequestOptions } from '../../../payment-request-options';\nimport CheckoutcomCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_IDEAL_PAYMENT_METHOD = 'ideal';\n\nexport default class CheckoutcomiDealPaymentStrategy extends CheckoutcomCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        formattedPayload: this._createFormattedPayload(\n                            payment.methodId,\n                            paymentData,\n                        ),\n                    },\n                }),\n            );\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomiDealInstrument | undefined {\n        if (CHECKOUTCOM_IDEAL_PAYMENT_METHOD === methodId && 'bic' in paymentData) {\n            return { bic: paymentData.bic };\n        }\n    }\n}\n","import { InternalCheckoutSelectors } from '../../../../checkout';\nimport { OrderRequestBody } from '../../../../order';\nimport { PaymentArgumentInvalidError } from '../../../errors';\nimport { PaymentInstrument, WithCheckoutcomSEPAInstrument } from '../../../payment';\nimport { PaymentRequestOptions } from '../../../payment-request-options';\nimport CheckoutcomCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_SEPA_PAYMENT_METHOD = 'sepa';\n\nexport default class CheckoutcomSEPAPaymentStrategy extends CheckoutcomCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        formattedPayload: this._createFormattedPayload(\n                            payment.methodId,\n                            paymentData,\n                        ),\n                    },\n                }),\n            );\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomSEPAInstrument {\n        const formattedPayload: WithCheckoutcomSEPAInstrument = { iban: '', bic: '' };\n        const { iban, bic } = 'iban' in paymentData ? paymentData : formattedPayload;\n\n        if (methodId === CHECKOUTCOM_SEPA_PAYMENT_METHOD && document) {\n            formattedPayload.iban = iban;\n            formattedPayload.bic = bic;\n        }\n\n        return formattedPayload;\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { RequestOptions } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotCompletedError } from '../../../order/errors';\nimport { RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport ClearpayScriptLoader from './clearpay-script-loader';\nimport ClearpaySdk from './clearpay-sdk';\n\nexport default class ClearpayPaymentStrategy implements PaymentStrategy {\n    private _clearpaySdk?: ClearpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _clearpayScriptLoader: ClearpayScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId, options.gatewayId);\n\n        this._clearpaySdk = await this._clearpayScriptLoader.load(paymentMethod);\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._clearpaySdk = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { gatewayId, methodId } = payload.payment;\n\n        if (!gatewayId || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n        let state = this._store.getState();\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        const { countryCode } = this._store.getState().billingAddress.getBillingAddressOrThrow();\n\n        if (!this._isCountrySupported(countryCode)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because billing country is not supported.',\n            );\n        }\n\n        state = await this._loadPaymentMethod(gatewayId, methodId, options);\n\n        await this._redirectToClearpay(\n            countryCode,\n            state.paymentMethods.getPaymentMethod(methodId, gatewayId),\n        );\n\n        // Clearpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise(noop);\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            await this._remoteCheckoutRequestSender.forgetCheckout();\n            await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods());\n\n            throw new OrderFinalizationNotCompletedError(error.body?.errors?.[0]?.message);\n        }\n    }\n\n    private _redirectToClearpay(countryCode: string, paymentMethod?: PaymentMethod): void {\n        if (!this._clearpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._clearpaySdk.initialize({ countryCode });\n        this._clearpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _isCountrySupported(countryCode: string): boolean {\n        return countryCode === 'GB';\n    }\n\n    private async _loadPaymentMethod(\n        gatewayId: string,\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        try {\n            return await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                    ...options,\n                    params: { ...options?.params, method: methodId },\n                }),\n            );\n        } catch (error) {\n            if (error instanceof RequestError && error.body?.status === 422) {\n                throw new InvalidArgumentError(\n                    \"Clearpay can't process your payment for this order, please try another payment method\",\n                );\n            }\n\n            throw error;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport ClearpaySdk from './clearpay-sdk';\nimport ClearpayWindow from './clearpay-window';\n\nconst SCRIPTS_DEFAULT = {\n    PROD: '//portal.clearpay.co.uk/afterpay-async.js',\n    SANDBOX: '//portal.sandbox.clearpay.co.uk/afterpay-async.js',\n};\n\nexport default class ClearpayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, public _window: ClearpayWindow = window) {}\n\n    async load(method: PaymentMethod): Promise<ClearpaySdk> {\n        await this._scriptLoader.loadScript(this._getScriptUrl(method.config.testMode));\n\n        if (!this._window.AfterPay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.AfterPay;\n    }\n\n    private _getScriptUrl(testMode?: boolean): string {\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class ConvergePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options).catch((error) => {\n            if (\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                    PaReq: error.body.three_ds_result.payer_auth_request,\n                    TermUrl: error.body.three_ds_result.callback_url,\n                    MD: error.body.three_ds_result.merchant_data,\n                });\n            });\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CreditCardRedirectPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory,\n        protected _formPoster: FormPoster,\n    ) {\n        super(_store, _orderActionCreator, _paymentActionCreator, _hostedFormFactory);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n            );\n        } catch (error) {\n            if (\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() =>\n                this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                    PaReq: error.body.three_ds_result.payer_auth_request || null,\n                    TermUrl: error.body.three_ds_result.callback_url || null,\n                    MD: error.body.three_ds_result.merchant_data || null,\n                }),\n            );\n        }\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n            await form.submit(payment);\n        } catch (error) {\n            if (\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() =>\n                this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                    PaReq: error.body.three_ds_result.payer_auth_request || null,\n                    TermUrl: error.body.three_ds_result.callback_url || null,\n                    MD: error.body.three_ds_result.merchant_data || null,\n                }),\n            );\n        }\n\n        return this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlowV2 } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CyberSourceV2PaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","export interface DigitalRiverWindow extends Window {\n    /**\n     * Object to create an instance of the DigitalRiver object. This is called a Digital River publishable API key\n     * This function accepts an optional options object using the following format DigitalRiver(publishableApiKey{, options})\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/digitalriver.js/reference/digital-river-publishable-api-key\n     */\n    DigitalRiver?: DigitalRiverClass;\n}\n\nexport type DigitalRiverClass = new (\n    apiKey: string,\n    options?: DigitalRiverJSOptions,\n) => DigitalRiverJS;\n\nexport default interface DigitalRiverJS {\n    createDropin(configuration: DigitalRiverDropInConfiguration): DigitalRiverDropIn;\n    authenticateSource(\n        data: DigitalRiverAuthenticateSourceRequest,\n    ): Promise<DigitalRiverAuthenticateSourceResponse>;\n    createElement(type: string, options: DigitalRiverElementOptions): DigitalRiverElement;\n}\n\nexport interface DigitalRiverElementOptions {\n    classes: {\n        base: string;\n    };\n    compliance: {\n        entity: string;\n    };\n}\n\ninterface DigitalRiverAuthenticateSourceRequest {\n    sessionId: string;\n    sourceId: string;\n    sourceClientSecret: string;\n}\n\nexport interface DigitalRiverAdditionalProviderData {\n    source_id: string;\n    source_client_secret: string;\n}\n\nexport interface DigitalRiverAuthenticateSourceResponse {\n    status: AuthenticationSourceStatus;\n}\n\nexport enum AuthenticationSourceStatus {\n    complete = 'complete',\n    authentication_not_required = 'authentication_not_required',\n    failed = 'failed',\n}\n\nexport interface DigitalRiverJSOptions {\n    /**\n     * The locale used to localize the various display and error strings within DigitalRiver.js\n     * Currently supported locales:\n     * ar-EG, cs-CZ, da-DK, de-AT, de-CH, de-DE, el-GR, en-AU, en-BE, en-CA, en-CH, en-DK, en-FI, en-GB, en-IE, en-IN,\n     * en-MY, en-NL, en-NO, en-NZ, en-PR, en-SE, en-SG, en-US, en-ZA, es-AR, es-CL, es-CO, es-EC, es-ES, es-MX, es-PE,\n     * es-VE, et-EE, fi-FI, fr-BE, fr-CA, fr-CH, fr-FR, hu-HU, it-CH, it-IT, iw-IL, ja-JP, ko-KR, lt-LT, lv-LV, nl-BE,\n     * nl-NL, no-NO, pl-PL, pt-BR, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sr-YU, sv-SE, th-TH, tr-TR, zh-CN, zh-HK, zh-TW\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/digitalriver.js/reference/digital-river-publishable-api-key\n     */\n    locale?: string;\n}\n\n/**\n * Create a Configuration object for Drop-in\n * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#step-5-configure-hydrate\n */\nexport interface DigitalRiverDropInConfiguration {\n    /**\n     * The  payment session identifier returned by Digital River.\n     */\n    sessionId: string;\n\n    /**\n     * you can specify options to trigger different features or functionality\n     */\n    options?: OptionsResponse;\n    billingAddress: {\n        firstName: string;\n        lastName: string;\n        email: string;\n        phoneNumber: string;\n        address: {\n            line1: string;\n            line2?: string;\n            city?: string;\n            state?: string;\n            postalCode: string;\n            country: string;\n        };\n    };\n\n    /**\n     * Additional configuration details for configuration structure (classes, styles etc..)\n     */\n    paymentMethodConfiguration?: BaseElementOptions;\n\n    /**\n     * The function called when the shopper has authorized payment and a payment source has been successfully created.\n     */\n    onSuccess?(data: OnSuccessResponse): void;\n\n    /**\n     * The function called when the shopper cancels the payment process before authorizing payment.\n     */\n    onCancel?(error: OnCancelOrErrorResponse): void;\n\n    /**\n     * The function called when an error has occurred.\n     */\n    onError?(error: OnCancelOrErrorResponse): void;\n\n    /**\n     * The function called when Drop-in is ready for user interaction.\n     */\n    onReady?(data: OnReadyResponse): void;\n}\n\nexport interface OnCancelOrErrorResponse {\n    /**\n     * If an error occurs, Drop-in emits an event that identifies the payment method associated with the error.\n     * Instruct your customer to provide a new method of payment.\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#onerror\n     * Or When your customer chooses to pay with a specific payment method and decides to cancel during the redirect phase,\n     * Drop-in emits an event that identifies the cancelled payment method.\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#oncancel\n     */\n    errors: ErrorData[];\n}\n\nexport interface ErrorData {\n    code: string;\n    message: string;\n}\n\nexport interface OnReadyResponse {\n    /**\n     * When ready, Drop-in will emit an event that contains a \"paymentMethodTypes\" array of the available payment methods.\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#onready\n     */\n    paymentMethodTypes: string[];\n}\n\n/**\n * When creating your Drop-in instance, you can specify options to trigger different features or functionality.\n * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#drop-in-options\n */\nexport interface OptionsResponse {\n    /**\n     * Use this option if you are using Drop-in within a standard checkout flow. Example Value: \"checkout\"\n     */\n    flow?: string;\n\n    /**\n     * When enabled, presents the customer with an option to save their payment details for future use within Drop-in.\n     * Enabling this feature will show the appropriate check boxes and localized disclosure statements and facilitate\n     * any necessary Strong Customer Authentication.\n     * If disabled, Drop-in will not present the customer with an option to save their payment details.\n     */\n    showSavePaymentAgreement?: boolean;\n\n    /**\n     * Will show a localized compliance link section as part of Drop-in. This is an important piece for accessing the Digital River business model.\n     */\n    showComplianceSection?: boolean;\n\n    /**\n     * Use this option to customize the text of the Drop-in button.\n     */\n    button?: ButtonResponse;\n\n    /**\n     * Use this option to specify the future use of a source.\n     */\n    usage?: string;\n\n    /**\n     * Use this option to show the required terms of sale disclosure. These localized terms automatically update if recurring products are purchased.\n     */\n    showTermsOfSaleDisclosure?: boolean;\n\n    /**\n     * Additional configuration details for drop-in.\n     */\n    paymentMethodConfiguration?: BaseElementOptions;\n}\n\nexport interface ButtonResponse {\n    /**\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#customizing-the-text-of-the-drop-in-button\n     * The text of the Drop-in button is customizable. You can either display pre-configured text or you can specify a unique text\n     * Examples type: \"payNow\" || type: \"buyNow\" || type: \"completeOrder\" || type: \"submitOrder\"\n     */\n    type: string;\n}\n\nexport interface OnSuccessResponse {\n    /**\n     * Event that gets triggered after the customer's payment has provided with the necessary details for payment\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#onsuccess\n     */\n    source: {\n        id: string;\n        reusable: boolean;\n        browserInfo?: {\n            browserIp?: string;\n        };\n        owner?: {\n            email: string;\n            firstName: string;\n            lastName: string;\n            phoneNumber: string;\n            address: {\n                city: string;\n                country: string;\n                line1: string;\n                postalCode: string;\n                state: string;\n            };\n        };\n    };\n\n    /**\n     * Indicates whether the source has been enabled for future use.\n     * Important: If this value is true, it does not mean the customer can use this source multiple times.\n     * This flag identifies whether the necessary downstream actions have been triggered to prepare the source for storage.\n     * You must attach the source to your customer for it to be truly reusable.\n     */\n    readyForStorage: boolean;\n}\n\nexport interface DigitalRiverDropIn {\n    /**\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#step-7-place-drop-in-on-your-checkout-or-customer-page\n     * example \"drop-in\"\n     */\n    mount(dropInId: string): void;\n}\n\ninterface DigitalRiverElement {\n    /**\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#step-7-place-drop-in-on-your-checkout-or-customer-page\n     * example \"drop-in\"\n     */\n    mount(dropInId: string): void;\n}\n\ninterface BaseElementOptions {\n    /**\n     * Set custom class names on the container DOM element when the Digital River element is in a particular state.\n     */\n    classes?: DigitalRiverElementClasses;\n    /**\n     * Use disabledPaymentMethods to disable specific payment methods.\n     */\n    disabledPaymentMethods?: string[];\n}\n\n/**\n * Custom classes\n * You can specify custom classes as part of a Class object included within the Options object when you create or\n * update an element. If you do not provide custom classes, the system uses the default options.\n * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/digitalriver.js/reference/elements#custom-classes\n */\nexport interface DigitalRiverElementClasses {\n    /**\n     * The Element is in its base state. The user either has not entered anything into the input field or is currently typing.\n     */\n    base?: string;\n\n    /**\n     * The Element is in its complete state. The user has input value, and it meets the basic validation requirements of that field.\n     */\n    complete?: string;\n\n    /**\n     * The Element is empty. The Element once had value but is now empty.\n     */\n    empty?: string;\n\n    /**\n     * The Element has focus.\n     */\n    focus?: string;\n\n    /**\n     * The Element has value, but it does not meet the basic validation requirements of the field.\n     */\n    invalid?: string;\n\n    /**\n     * The element has a value that has been automatically filled by the browser.\n     */\n    webkitAutofill?: string;\n}\n\nexport interface DigitalRiverInitializeToken {\n    sessionId: string;\n    checkoutData: DigitalRiverCheckoutData;\n}\n\ninterface DigitalRiverCheckoutData {\n    checkoutId: string;\n    sellingEntity: string;\n}\n","import { StandardError } from '../../../common/error/errors';\n\nconst defaultMessage =\n    'There was an error while processing your payment. Please try again or contact us.';\n\nexport default class DigitalRiverError extends StandardError {\n    constructor(type: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.type = type;\n        this.name = name;\n    }\n}\n","import { some } from 'lodash';\n\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, isVaultedInstrument } from '../../index';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport DigitalRiverJS, {\n    AuthenticationSourceStatus,\n    DigitalRiverAdditionalProviderData,\n    DigitalRiverAuthenticateSourceResponse,\n    DigitalRiverDropIn,\n    DigitalRiverElementOptions,\n    DigitalRiverInitializeToken,\n    OnCancelOrErrorResponse,\n    OnReadyResponse,\n    OnSuccessResponse,\n} from './digitalriver';\nimport DigitalRiverError from './digitalriver-error';\nimport DigitalRiverPaymentInitializeOptions from './digitalriver-payment-initialize-options';\nimport DigitalRiverScriptLoader from './digitalriver-script-loader';\n\nexport default class DigitalRiverPaymentStrategy implements PaymentStrategy {\n    private _digitalRiverJS?: DigitalRiverJS;\n    private _digitalRiverDropComponent?: DigitalRiverDropIn;\n    private _submitFormEvent?: () => void;\n    private _loadSuccessResponse?: OnSuccessResponse;\n    private _digitalRiverCheckoutData?: DigitalRiverInitializeToken;\n    private _unsubscribe?: () => void;\n    private _digitalRiverInitializeOptions?: DigitalRiverPaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _digitalRiverScriptLoader: DigitalRiverScriptLoader,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._digitalRiverInitializeOptions = options.digitalriver;\n\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        const { publicKey, paymentLanguage: locale } = paymentMethod.initializationData;\n        const { containerId } = this._getDigitalRiverInitializeOptions();\n\n        this._digitalRiverJS = await this._digitalRiverScriptLoader.load(publicKey, locale);\n\n        this._unsubscribe = await this._store.subscribe(\n            async (state) => {\n                if (state.paymentStrategies.isInitialized(options.methodId)) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        container.innerHTML = '';\n\n                        this._digitalRiverJS = await this._digitalRiverScriptLoader.load(\n                            publicKey,\n                            locale,\n                        );\n                    }\n\n                    await this._loadWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        return this._loadWidget(options);\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        const { containerId } = this._getDigitalRiverInitializeOptions();\n        const container = document.getElementById(containerId);\n\n        if (container) {\n            container.innerHTML = '';\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, methodId } = payment;\n        const { shouldSetAsDefaultInstrument = false } = paymentData as HostedInstrument;\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        if (!this._digitalRiverCheckoutData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (isVaultedInstrument(paymentData)) {\n            try {\n                return await this._submitVaultedInstrument(\n                    methodId,\n                    paymentData.instrumentId,\n                    this._digitalRiverCheckoutData.checkoutData.checkoutId,\n                    shouldSetAsDefaultInstrument,\n                    false,\n                );\n            } catch (error) {\n                if (!this._isAuthenticateSourceAction(error)) {\n                    throw error;\n                }\n\n                const confirm = await this._authenticateSource(error.body.provider_data);\n\n                return await this._submitVaultedInstrument(\n                    methodId,\n                    paymentData.instrumentId,\n                    this._digitalRiverCheckoutData.checkoutData.checkoutId,\n                    shouldSetAsDefaultInstrument,\n                    confirm,\n                );\n            }\n        } else {\n            if (!this._loadSuccessResponse) {\n                throw new PaymentArgumentInvalidError(['this._loadSuccessResponse']);\n            }\n\n            const paymentPayload = {\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                checkoutId: this._digitalRiverCheckoutData.checkoutData.checkoutId,\n                                source: this._loadSuccessResponse,\n                                sessionId: this._digitalRiverCheckoutData.sessionId,\n                            }),\n                        },\n                        vault_payment_instrument: this._loadSuccessResponse.readyForStorage,\n                        set_as_default_stored_instrument: false,\n                    },\n                },\n            };\n\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getDigitalRiverJs(): DigitalRiverJS {\n        if (!this._digitalRiverJS) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._digitalRiverJS;\n    }\n\n    private _getErrorMessage(error: OnCancelOrErrorResponse): string {\n        const { errors } = error;\n\n        return errors.map((e) => `code: ${e.code} message: ${e.message}`).join('\\n');\n    }\n\n    private async _onSuccessResponse(data?: OnSuccessResponse): Promise<void> {\n        const error = new InvalidArgumentError(\n            'Unable to initialize payment because success argument is not provided.',\n        );\n\n        if (data && this._submitFormEvent) {\n            const { browserInfo, owner } = data.source;\n\n            this._loadSuccessResponse = browserInfo\n                ? {\n                      source: {\n                          id: data.source.id,\n                          reusable: data.source.reusable,\n                          ...browserInfo,\n                      },\n                      readyForStorage: data.readyForStorage,\n                  }\n                : {\n                      source: {\n                          id: data.source.id,\n                          reusable: data.source.reusable,\n                      },\n                      readyForStorage: data.readyForStorage,\n                  };\n\n            if (owner) {\n                const billingAddressPayPal = {\n                    firstName: owner.firstName,\n                    lastName: owner.lastName,\n                    city: owner.address.city,\n                    company: '',\n                    address1: owner.address.line1,\n                    address2: '',\n                    postalCode: owner.address.postalCode,\n                    countryCode: owner.address.country,\n                    phone: owner.phoneNumber,\n                    stateOrProvince: owner.address.state,\n                    stateOrProvinceCode: owner.address.country,\n                    customFields: [],\n                    email: owner.email || owner.email,\n                };\n\n                this._loadSuccessResponse.source.owner = data.source.owner;\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(billingAddressPayPal),\n                );\n            }\n\n            return this._submitFormEvent();\n        }\n\n        return this._getDigitalRiverInitializeOptions().onError?.(error);\n    }\n\n    private _onReadyResponse(data?: OnReadyResponse): void {\n        if (data) {\n            this._getDigitalRiverInitializeOptions().onRenderButton?.();\n        }\n    }\n\n    private _getDigitalRiverInitializeOptions(): DigitalRiverPaymentInitializeOptions {\n        if (!this._digitalRiverInitializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._digitalRiverInitializeOptions;\n    }\n\n    private async _loadWidget(\n        options: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        try {\n            const state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId),\n            );\n            const billing = state.billingAddress.getBillingAddressOrThrow();\n            const customer = state.customer.getCustomerOrThrow();\n            const { features } = state.config.getStoreConfigOrThrow().checkoutSettings;\n            const { paymentMethodConfiguration } =\n                this._getDigitalRiverInitializeOptions().configuration;\n            const { containerId, configuration } = this._getDigitalRiverInitializeOptions();\n            const { clientToken } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n            if (!clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._digitalRiverCheckoutData = JSON.parse(clientToken);\n\n            if (!this._digitalRiverCheckoutData) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._mountComplianceSection(this._digitalRiverCheckoutData.checkoutData.sellingEntity);\n\n            this._submitFormEvent = this._getDigitalRiverInitializeOptions().onSubmitForm;\n\n            const disabledPaymentMethods = features['PROJECT-4802.digital_river_paypal_support']\n                ? []\n                : ['payPal'];\n\n            const digitalRiverConfiguration = {\n                sessionId: this._digitalRiverCheckoutData.sessionId,\n                options: {\n                    ...configuration,\n                    showSavePaymentAgreement:\n                        Boolean(customer.email) && configuration.showSavePaymentAgreement,\n                },\n                billingAddress: {\n                    firstName: billing.firstName,\n                    lastName: billing.lastName,\n                    email: billing.email || customer.email,\n                    phoneNumber: billing.phone,\n                    address: {\n                        line1: billing.address1,\n                        line2: billing.address2,\n                        city: billing.city,\n                        state: billing.stateOrProvinceCode,\n                        postalCode: billing.postalCode,\n                        country: billing.countryCode,\n                    },\n                },\n                paymentMethodConfiguration: {\n                    ...paymentMethodConfiguration,\n                    disabledPaymentMethods,\n                },\n                onSuccess: (data?: OnSuccessResponse) => {\n                    this._onSuccessResponse(data);\n                },\n                onReady: (data?: OnReadyResponse) => {\n                    this._onReadyResponse(data);\n                },\n                onError: (error: OnCancelOrErrorResponse) => {\n                    const descriptiveError = new Error(this._getErrorMessage(error));\n\n                    this._getDigitalRiverInitializeOptions().onError?.(descriptiveError);\n                },\n            };\n\n            this._digitalRiverDropComponent = await this._getDigitalRiverJs().createDropin(\n                digitalRiverConfiguration,\n            );\n            this._digitalRiverDropComponent.mount(containerId);\n\n            return state;\n        } catch {\n            throw new DigitalRiverError(\n                'payment.digitalriver_checkout_error',\n                'digitalRiverCheckoutError',\n            );\n        }\n    }\n\n    private _isAuthenticateSourceAction(error: unknown): boolean {\n        return !(\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        );\n    }\n\n    private async _authenticateSource(\n        additionalAction: DigitalRiverAdditionalProviderData,\n    ): Promise<boolean> {\n        if (!this._digitalRiverCheckoutData) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because payload payment argument is not provided.',\n            );\n        }\n\n        const authenticateSourceResponse: DigitalRiverAuthenticateSourceResponse =\n            await this._getDigitalRiverJs().authenticateSource({\n                sessionId: this._digitalRiverCheckoutData.sessionId,\n                sourceId: additionalAction.source_id,\n                sourceClientSecret: additionalAction.source_client_secret,\n            });\n\n        if (authenticateSourceResponse.status === AuthenticationSourceStatus.failed) {\n            throw new Error('Source authentication failed, please try again');\n        }\n\n        return (\n            authenticateSourceResponse.status === AuthenticationSourceStatus.complete ||\n            authenticateSourceResponse.status ===\n                AuthenticationSourceStatus.authentication_not_required\n        );\n    }\n\n    private async _submitVaultedInstrument(\n        methodId: string,\n        instrumentId: string,\n        checkoutId: string,\n        shouldSetAsDefaultInstrument: boolean,\n        confirm: boolean,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentPayload = {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                    credit_card_token: {\n                        token: JSON.stringify({\n                            checkoutId,\n                        }),\n                    },\n                    confirm,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                },\n            },\n        };\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _mountComplianceSection(sellingEntity: string) {\n        const complianceDiv = document.getElementById('compliance');\n\n        const complianceOptions: DigitalRiverElementOptions = {\n            classes: {\n                base: 'DRElement',\n            },\n            compliance: {\n                entity: sellingEntity,\n            },\n        };\n\n        if (complianceDiv) {\n            complianceDiv.innerHTML = '';\n\n            const complianceElement = this._getDigitalRiverJs().createElement(\n                'compliance',\n                complianceOptions,\n            );\n\n            complianceElement.mount('compliance');\n        } else {\n            const drfooter = document.createElement('div');\n\n            drfooter.setAttribute('id', 'compliance');\n            drfooter.style.cssText = 'min-height: 45px;';\n            drfooter.classList.add('layout');\n            document.body.appendChild(drfooter);\n\n            const complianceElement = this._getDigitalRiverJs().createElement(\n                'compliance',\n                complianceOptions,\n            );\n\n            complianceElement.mount('compliance');\n        }\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport DigitalRiverJS, { DigitalRiverWindow } from './digitalriver';\n\nexport default class DigitalRiverScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: DigitalRiverWindow = window,\n    ) {}\n\n    async load(publicKey: string, locale: string): Promise<DigitalRiverJS> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://js.digitalriverws.com/v1/css/DigitalRiver.css`,\n            ),\n            this._scriptLoader.loadScript(`https://js.digitalriverws.com/v1/DigitalRiver.js`),\n        ]);\n\n        if (!this._window.DigitalRiver) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(new this._window.DigitalRiver(publicKey, { locale }));\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    return {\n        color_depth: screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language: navigator.language || (navigator as any).userLanguage,\n        screen_height: screen.height,\n        screen_width: screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export enum AdyenActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenAction {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        },\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenV2ValidationStateForLoader, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenV2ValidationStateForLoader, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenAction,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: CardState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    holderName?: string;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new (configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport type AdyenComponentState = CardState | WechatState;\n\nexport interface AdyenV2ValidationStateForLoader {\n    valid: boolean;\n    fieldType?: AdyenV2CardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenV2CardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenComponentOptions =\n    | AdyenCreditCardComponentOptions\n    | AdyenIdealComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport function isCardState(param: any): param is CardState {\n    return (\n        (param && typeof param.data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof param.data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n\nexport function isAccountState(param: any): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf(param.data.paymentMethod.type) !== -1;\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { PaymentStrategyType } from '../../index';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport { AdyenPaymentMethodType } from '../adyenv2';\nimport {\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSDKCreator,\n    BraintreeVerifyPayload,\n} from '../braintree';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    GooglePaymentData,\n    GooglePayProviderProcessor,\n    GooglePayVerifyPayload,\n    PaymentMethodData,\n} from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _walletButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n    private _is3dsEnabled?: boolean;\n    private _buttonClickEventHandler?: (event: Event) => Promise<InternalCheckoutSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _googlePayProviderProcessor?: GooglePayProviderProcessor,\n        private _braintreeSDKCreator?: BraintreeSDKCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        this._is3dsEnabled =\n            state.paymentMethods.getPaymentMethodOrThrow(\n                methodId,\n            ).initializationData.isThreeDSecureEnabled;\n\n        this._googlePayOptions = this._getGooglePayOptions(options);\n\n        this._buttonClickEventHandler = this._handleButtonClickedEvent(methodId);\n\n        if (this._paymentMethod.clientToken) {\n            this._braintreeSDKCreator?.initialize(this._paymentMethod.clientToken);\n        }\n\n        await this._googlePayPaymentProcessor.initialize(methodId);\n\n        if (!this._googlePayOptions.walletButton) {\n            throw new InvalidArgumentError('walletButton argument is missing');\n        }\n\n        const walletButton = document.getElementById(this._googlePayOptions.walletButton);\n\n        if (!walletButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet, walletButton ID could not be found',\n            );\n        }\n\n        this._walletButton = walletButton;\n        this._walletButton.addEventListener('click', this._buttonClickEventHandler);\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._buttonClickEventHandler) {\n            this._walletButton.removeEventListener('click', this._buttonClickEventHandler);\n        }\n\n        this._buttonClickEventHandler = undefined;\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize().then(() => this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.googlepay\" argument is not provided.',\n            );\n        }\n\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payload.payment;\n\n        if (this._paymentMethod?.initializationData.nonce !== '') {\n            const state = this._store.getState();\n\n            this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        }\n\n        let payment = await this._getPayment(methodId);\n\n        if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n            const { onError, onPaymentSelect } = this._googlePayOptions;\n\n            await this._displayWallet(methodId, onPaymentSelect, onError);\n            payment = await this._getPayment(methodId, true);\n        }\n\n        if (!payment.paymentData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        try {\n            const state = await this._store.dispatch(\n                this._orderActionCreator.submitOrder(\n                    { useStoreCredit: payload.useStoreCredit },\n                    options,\n                ),\n            );\n            let verification;\n\n            if (this._is3dsEnabled) {\n                const {\n                    order: { getOrderOrThrow },\n                } = state;\n\n                verification = await this._verifyCard(\n                    methodId,\n                    getOrderOrThrow().orderAmount,\n                    payment,\n                );\n            }\n\n            const newPayment = {\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    nonce: verification?.nonce || payment.paymentData.nonce,\n                },\n            };\n\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment(newPayment));\n        } catch (error) {\n            return this._processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayProviderProcessor) {\n            return Promise.reject(error);\n        }\n\n        return this._googlePayProviderProcessor.processAdditionalAction(error);\n    }\n\n    private async _verifyCard(\n        methodId: string,\n        amount: number,\n        payment: PaymentMethodData,\n    ): Promise<GooglePayVerifyPayload> {\n        if (methodId === PaymentStrategyType.BRAINTREE_GOOGLE_PAY) {\n            const { nonce } = payment.paymentData;\n            const threeDSecure = await this._braintreeSDKCreator?.get3DS();\n\n            if (!nonce || !threeDSecure) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            return this._braintreePresent3DSChallenge(threeDSecure, amount, nonce);\n        }\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n    ): Promise<BraintreeVerifyPayload> {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n\n    /* tslint:disable:cyclomatic-complexity */\n    private _getGooglePayOptions(\n        options: PaymentInitializeOptions,\n    ): GooglePayPaymentInitializeOptions {\n        if (\n            options.methodId === PaymentStrategyType.ADYENV2_GOOGLEPAY &&\n            options.googlepayadyenv2\n        ) {\n            if (!this._googlePayProviderProcessor) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._googlePayProviderProcessor.initialize(options);\n\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.ADYENV3_GOOGLEPAY &&\n            options.googlepayadyenv3\n        ) {\n            if (!this._googlePayProviderProcessor) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._googlePayProviderProcessor.initialize(options);\n\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === PaymentStrategyType.BNZ_GOOGLEPAY && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.CHECKOUTCOM_GOOGLE_PAY &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.CYBERSOURCEV2_GOOGLE_PAY &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.ORBITAL_GOOGLE_PAY &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.BRAINTREE_GOOGLE_PAY &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === PaymentStrategyType.STRIPE_GOOGLE_PAY && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.STRIPE_UPE_GOOGLE_PAY &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError(\n            'Unable to initialize payment because \"options.googlepay\" argument is not provided.',\n        );\n    }\n    /* tslint:enable:cyclomatic-complexity */\n\n    private async _getPayment(\n        methodId: string,\n        requireRenewNonce = false,\n    ): Promise<PaymentMethodData> {\n        if (!methodId || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const card_information = this._paymentMethod.initializationData.card_information;\n        let nonce = this._paymentMethod.initializationData.nonce;\n\n        if (nonce) {\n            this._paymentMethod = { ...this._paymentMethod, initializationData: { nonce: '' } };\n        }\n\n        if (requireRenewNonce) {\n            const state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n            );\n\n            this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            nonce = this._paymentMethod.initializationData.nonce;\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                method: methodId,\n                cardInformation: card_information,\n                nonce: await this._encodeNonce(methodId, nonce),\n            },\n        };\n    }\n\n    private async _encodeNonce(methodId: string, nonce: string) {\n        if (methodId === PaymentStrategyType.ADYENV2_GOOGLEPAY) {\n            return JSON.stringify({\n                type: AdyenPaymentMethodType.GooglePay,\n                googlePayToken: nonce,\n                browser_info: getBrowserInfo(),\n            });\n        }\n\n        if (methodId === PaymentStrategyType.ADYENV3_GOOGLEPAY) {\n            return JSON.stringify({\n                type: AdyenPaymentMethodType.GooglePay,\n                googlePayToken: nonce,\n            });\n        }\n\n        return nonce;\n    }\n\n    private async _paymentInstrumentSelected(paymentData: GooglePaymentData, methodId: string) {\n        if (!methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        return Promise.all([\n            this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n        ]);\n    }\n\n    private _handleButtonClickedEvent(\n        methodId: string,\n    ): (event?: Event) => Promise<InternalCheckoutSelectors> {\n        return (event?: Event) => {\n            event?.preventDefault();\n\n            if (!methodId || !this._googlePayOptions) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onError, onPaymentSelect } = this._googlePayOptions;\n\n            return this._store.dispatch(\n                this._paymentStrategyActionCreator.widgetInteraction(\n                    async () => this._displayWallet(methodId, onPaymentSelect, onError),\n                    { methodId },\n                ),\n                { queueId: 'widgetInteraction' },\n            );\n        };\n    }\n\n    private async _displayWallet(\n        methodId: string,\n        onPaymentSelect = noop,\n        onError = noop,\n    ): Promise<void> {\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._paymentInstrumentSelected(paymentData, methodId);\n\n            return onPaymentSelect();\n        } catch (error) {\n            if (error.statusCode === 'CANCELED') {\n                throw new Error('CANCELED');\n            }\n\n            onError(error);\n        }\n    }\n}\n","import { some } from 'lodash';\n\nimport { Payment, PaymentActionCreator, PaymentInitializeOptions } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV2ScriptLoader,\n} from '../adyenv2';\n\nimport { GooglePayProviderProcessor } from './googlepay';\n\nexport default class GooglePayAdyenV2PaymentProcessor implements GooglePayProviderProcessor {\n    private _adyenClient?: AdyenClient;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _scriptLoader: AdyenV2ScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions) {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (paymentMethod.initializationData.originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = paymentMethod.initializationData.originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = paymentMethod.initializationData.clientKey;\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n        } catch (error) {\n            return this.processAdditionalAction(error);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { some } from 'lodash';\n\nimport { Payment, PaymentActionCreator, PaymentInitializeOptions } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV3ScriptLoader,\n} from '../adyenv3';\n\nimport { GooglePayProviderProcessor } from './googlepay';\n\nexport default class GooglePayAdyenV3PaymentProcessor implements GooglePayProviderProcessor {\n    private _adyenClient?: AdyenClient;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _scriptLoader: AdyenV3ScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions) {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n            clientKey: paymentMethod.initializationData.clientKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n        } catch (error) {\n            return this.processAdditionalAction(error);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                challengeWindowSize: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { PaymentInitializeOptions } from '../../payment-request-options';\n\nimport { GooglePayProviderProcessor } from './googlepay';\n\nexport default class GooglePayCheckoutcomPaymentProcessor implements GooglePayProviderProcessor {\n    initialize(_options: PaymentInitializeOptions): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        const redirectUrl = error.body.three_ds_result.acs_url;\n\n        return this._performRedirect(redirectUrl);\n    }\n\n    private _performRedirect(redirectUrl: string): Promise<InternalCheckoutSelectors> {\n        return new Promise(() => {\n            window.location.assign(redirectUrl);\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { PaymentStrategy } from '..';\nimport { PaymentActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentExecuteError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({ methodId: payment.methodId }),\n            );\n        } catch (error) {\n            if (this._isOffsiteRedirectResponse(error)) {\n                return this._handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<never> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise(() => {\n            this._formPoster.postForm(url, JSON.parse(data));\n        });\n    }\n\n    private _isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n\ninterface OffsiteRedirectResponse {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n        status: string;\n        provider_data: string;\n    };\n}\n","export const supportedCountries = [\n    'AT',\n    'BE',\n    'CA',\n    'CH',\n    'CZ',\n    'DE',\n    'DK',\n    'ES',\n    'FI',\n    'FR',\n    'GB',\n    'GR',\n    'IE',\n    'IT',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'SE',\n];\nexport const supportedCountriesRequiringStates = ['AU'];\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { supportedCountries, supportedCountriesRequiringStates } from '../klarnav2';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, {\n    KlarnaAddress,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: () => void;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader\n            .load()\n            .then((klarnaCredit) => {\n                this._klarnaCredit = klarnaCredit;\n            })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    (state) => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    (state) => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    },\n                    (state) => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.coupons;\n                    },\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { paymentData, ...paymentPayload },\n        } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) =>\n                this._store.dispatch(\n                    this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, {\n                        authorizationToken,\n                    }),\n                ),\n            )\n            .then(() =>\n                this._store.dispatch(\n                    this._orderActionCreator.submitOrder(\n                        {\n                            ...payload,\n                            payment: paymentPayload,\n                            useStoreCredit: payload.useStoreCredit,\n                        },\n                        options,\n                    ),\n                ),\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarna\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            klarna: { container, onLoad },\n        } = options;\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(\n                (state) =>\n                    new Promise<KlarnaLoadResponse>((resolve) => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                        if (!paymentMethod) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n\n                        if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                            throw new NotInitializedError(\n                                NotInitializedErrorType.PaymentNotInitialized,\n                            );\n                        }\n\n                        this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                        this._klarnaCredit.load({ container }, (response) => {\n                            if (onLoad) {\n                                onLoad(response);\n                            }\n\n                            resolve(response);\n                        });\n                    }),\n            );\n    }\n\n    private _getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, (res) => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader\n            .loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaPayments, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-payments';\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from './klarna-supported-countries';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nexport default class KlarnaV2PaymentStrategy implements PaymentStrategy {\n    private _klarnaPayments?: KlarnaPayments;\n    private _unsubscribe?: () => void;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnav2ScriptLoader: KlarnaV2ScriptLoader,\n        private _klarnav2TokenUpdater: KlarnaV2TokenUpdater,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnav2ScriptLoader\n            .load()\n            .then((klarnaPayments) => {\n                this._klarnaPayments = klarnaPayments;\n            })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    (state) => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadPaymentsWidget(options);\n                        }\n                    },\n                    (state) => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    },\n                    (state) => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.coupons;\n                    },\n                );\n\n                return this._loadPaymentsWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { paymentData, ...paymentPayload },\n        } = payload;\n        const { gatewayId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        return this._authorize(paymentPayload.methodId)\n            .then(({ authorization_token: authorizationToken }) =>\n                this._store.dispatch(\n                    this._remoteCheckoutActionCreator.initializePayment(gatewayId, {\n                        authorizationToken,\n                    }),\n                ),\n            )\n            .then(() =>\n                this._store.dispatch(\n                    this._orderActionCreator.submitOrder(\n                        {\n                            ...payload,\n                            payment: paymentPayload,\n                            useStoreCredit: payload.useStoreCredit,\n                        },\n                        options,\n                    ),\n                ),\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async _loadPaymentsWidget(\n        options: PaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarnav2\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            gatewayId,\n            klarnav2: { container, onLoad },\n        } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this._store.getState();\n        const cartId = state.cart.getCartOrThrow().id;\n        const params = { params: cartId };\n\n        await this._klarnav2TokenUpdater.updateClientToken(gatewayId, { params }).catch(() => {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        });\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!this._klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this._klarnaPayments.load(\n                { container, payment_method_category: paymentMethod.id },\n                (response) => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    resolve(response);\n                },\n            );\n        });\n    }\n\n    private _getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(methodId: string): Promise<KlarnaAuthorizationResponse> {\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            if (!this._klarnaPayments) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.authorize(\n                { payment_method_category: methodId },\n                updateSessionData,\n                (res) => {\n                    if (res.approved) {\n                        return resolve(res);\n                    }\n\n                    if (res.show_form) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n            );\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    load(): Promise<KlarnaPayments> {\n        return this._scriptLoader\n            .loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaV2Window).Klarna.Payments);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../../../common/http-request';\nimport PaymentMethod from '../../payment-method';\n\nexport default class KlarnaV2TokenUpdater {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateClientToken(\n        gatewayId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${gatewayId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport formatLocale from './format-locale';\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const masterpassScriptLoaderParams = {\n            useMasterpassSrc: this._paymentMethod.initializationData.isMasterpassSrcEnabled,\n            language: formatLocale(this._locale),\n            testMode: this._paymentMethod.config.testMode,\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n        };\n\n        return this._masterpassScriptLoader\n            .load(masterpassScriptLoaderParams)\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError(\n                        'Unable to initialize payment because \"options.masterpass\" argument is not provided.',\n                    );\n                }\n\n                const walletButton =\n                    options.masterpass.walletButton &&\n                    document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        if (\n            !this._paymentMethod ||\n            !this._paymentMethod.initializationData ||\n            !this._paymentMethod.initializationData.gateway\n        ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(\n                    this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n                ),\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { each, some } from 'lodash';\n\nimport { PaymentActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory, HostedFormOptions } from '../../../hosted-form';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { MollieClient, MollieElement } from './mollie';\nimport MolliePaymentInitializeOptions from './mollie-initialize-options';\nimport MollieScriptLoader from './mollie-script-loader';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst methodsNotAllowedWhenDigitalOrder = ['klarnapaylater', 'klarnasliceit'];\n\nexport default class MolliePaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: MolliePaymentInitializeOptions;\n    private _mollieClient?: MollieClient;\n    private _cardHolderElement?: MollieElement;\n    private _cardNumberElement?: MollieElement;\n    private _verificationCodeElement?: MollieElement;\n    private _expiryDateElement?: MollieElement;\n    private _locale?: string;\n\n    private _hostedForm?: HostedForm;\n\n    private _unsubscribe?: () => void;\n\n    constructor(\n        private _hostedFormFactory: HostedFormFactory,\n        private _store: CheckoutStore,\n        private _mollieScriptLoader: MollieScriptLoader,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { mollie, methodId, gatewayId } = options;\n\n        if (!mollie) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.mollie\" argument is not provided.',\n            );\n        }\n\n        if (!methodId || !gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" and/or \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        const controllers = document.querySelectorAll('.mollie-components-controller');\n\n        each(controllers, (controller) => controller.remove());\n\n        const state = this._store.getState();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._initializeOptions = mollie;\n\n        const paymentMethods = state.paymentMethods;\n        const paymentMethod = paymentMethods.getPaymentMethodOrThrow(methodId, gatewayId);\n        const {\n            config: { merchantId, testMode },\n        } = paymentMethod;\n        const { locale } = paymentMethod.initializationData;\n\n        this._locale = locale;\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"merchantId\" argument is not provided.',\n            );\n        }\n\n        if (\n            this.isCreditCard(methodId) &&\n            mollie.form &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId)\n        ) {\n            this._hostedForm = await this._mountCardVerificationfields(mollie.form);\n        } else if (this.isCreditCard(methodId)) {\n            this._mollieClient = await this._loadMollieJs(\n                merchantId,\n                storeConfig.storeProfile.storeLanguage,\n                testMode,\n            );\n            this._mountElements();\n        }\n\n        this._unsubscribe = this._store.subscribe(\n            async (state) => {\n                if (state.paymentStrategies.isInitialized(methodId)) {\n                    const element = document.getElementById(`${gatewayId}-${methodId}-paragraph`);\n\n                    if (element) {\n                        element.remove();\n                    }\n\n                    mollie.disableButton(false);\n\n                    this._loadPaymentMethodsAllowed(mollie, methodId, gatewayId, state);\n                }\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        this._loadPaymentMethodsAllowed(mollie, methodId, gatewayId, state);\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !payment.gatewayId || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment', 'gatewayId', 'paymentData']);\n        }\n\n        try {\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n            if (isVaultedInstrument(paymentData)) {\n                return await this.executeWithVaulted(payment);\n            }\n\n            if (this.isCreditCard(payment.methodId)) {\n                return await this.executeWithCC(payment);\n            }\n\n            return await this.executeWithAPM(payment);\n        } catch (error) {\n            return this._processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        if (options && options.methodId && options.gatewayId && !this._hostedForm) {\n            const element = document.getElementById(`${options.gatewayId}-${options.methodId}`);\n\n            if (element) {\n                element.remove();\n            }\n        } else if (options && options.methodId && this.isCreditCard(options.methodId)) {\n            if (\n                this._cardHolderElement &&\n                this._cardNumberElement &&\n                this._verificationCodeElement &&\n                this._expiryDateElement\n            ) {\n                this._cardHolderElement.unmount();\n                this._cardHolderElement = undefined;\n\n                this._cardNumberElement.unmount();\n                this._cardNumberElement = undefined;\n\n                this._verificationCodeElement.unmount();\n                this._verificationCodeElement = undefined;\n\n                this._expiryDateElement.unmount();\n                this._expiryDateElement = undefined;\n            }\n        }\n\n        this._mollieClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    protected async executeWithCC(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentData = payment.paymentData;\n        const shouldSaveInstrument = (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument = (paymentData as HostedInstrument)\n            .shouldSetAsDefaultInstrument;\n\n        const { token, error } = await this._getMollieClient().createToken();\n\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        const formattedPayload = {\n            credit_card_token: {\n                token,\n            },\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            browser_info: getBrowserInfo(),\n            shopper_locale: this._getShopperLocale(),\n        };\n\n        return this._store.dispatch(\n            this._paymentActionCreator.submitPayment({\n                ...payment,\n                paymentData: {\n                    formattedPayload,\n                },\n            }),\n        );\n    }\n\n    protected async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        if (this._isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId)) {\n            const form = this._hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n        }\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n    }\n\n    protected async executeWithAPM(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentData = payment.paymentData;\n        const issuer = paymentData && 'issuer' in paymentData ? paymentData.issuer : '';\n\n        return this._store.dispatch(\n            this._paymentActionCreator.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: {\n                        issuer,\n                        shopper_locale: this._getShopperLocale(),\n                    },\n                },\n            }),\n        );\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === MolliePaymentMethodType.creditcard;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this._isHostedPaymentFormEnabled(methodId, gatewayId) && this._isHostedFieldAvailable()\n        );\n    }\n\n    private _mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        /* eslint-disable */\n        return new Promise(async (resolve , reject) => {\n            try {\n                const { config } = this._store.getState();\n                const bigpayBaseUrl = config.getStoreConfig()?.paymentSettings.bigpayBaseUrl;\n\n                if (!bigpayBaseUrl) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const form = this._hostedFormFactory.create(bigpayBaseUrl, formOptions);\n\n                await form.attach();\n\n                resolve(form);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    private _isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(): boolean {\n        const options = this._getInitializeOptions();\n\n        return !!options.form?.fields;\n    }\n\n    private _processAdditionalAction(error: any): Promise<InternalCheckoutSelectors> {\n        if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'additional_action_required'})) {\n            return Promise.reject(error);\n        }\n        const { additional_action_required: { data : { redirect_url } } } = error.body;\n\n        return new Promise(() => window.location.replace(redirect_url));\n    }\n\n    private _getInitializeOptions(): MolliePaymentInitializeOptions {\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._initializeOptions;\n    }\n\n    private _loadMollieJs(merchantId: string, locale: string, testmode = false): Promise<MollieClient> {\n        if (this._mollieClient) {\n            return Promise.resolve(this._mollieClient);\n        }\n\n        return this._mollieScriptLoader\n            .load(merchantId, locale, testmode);\n    }\n\n    private _getMollieClient(): MollieClient {\n        if (!this._mollieClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._mollieClient;\n    }\n\n    private _getShopperLocale(): string {\n        if (!this._locale) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._locale;\n    }\n\n    /**\n     * ContainerId is use in Mollie for determined either its showing or not the\n     * container, because when Mollie has Vaulted Instruments it gets hide,\n     * and shows an error because can't mount Provider Components\n     *\n     * We had to add a settimeout because Mollie sets de tab index after mounting\n     * each component, but without a setTimeOut Mollie is not able to find the\n     * components as they are hidden so we need to wait until they are shown\n     */\n    private _mountElements() {\n        const { containerId, cardNumberId, cardCvcId, cardExpiryId, cardHolderId, styles } = this._getInitializeOptions();\n        let container: HTMLElement | null;\n\n        if (containerId) {\n            container = document.getElementById(containerId);\n        }\n\n        setTimeout(() => {\n            if (!containerId || container?.style.display !== 'none') {\n                const mollieClient = this._getMollieClient();\n\n                this._cardHolderElement = mollieClient.createComponent('cardHolder', { styles });\n                this._cardHolderElement.mount(`#${cardHolderId}`);\n\n                this._cardNumberElement = mollieClient.createComponent('cardNumber', { styles });\n                this._cardNumberElement.mount(`#${cardNumberId}`);\n\n                this._verificationCodeElement = mollieClient.createComponent('verificationCode', { styles });\n                this._verificationCodeElement.mount(`#${cardCvcId}`);\n\n                this._expiryDateElement = mollieClient.createComponent('expiryDate', { styles });\n                this._expiryDateElement.mount(`#${cardExpiryId}`);\n            }\n        }, 0);\n    }\n\n    private _loadPaymentMethodsAllowed(mollie: MolliePaymentInitializeOptions, methodId: string, gatewayId: string, state: InternalCheckoutSelectors){\n        if (methodsNotAllowedWhenDigitalOrder.includes(methodId)) {\n            const cart = state.cart.getCartOrThrow();\n            const cartDigitalItems = cart.lineItems.digitalItems;\n\n            if (cartDigitalItems && cartDigitalItems.length > 0) {\n                const { containerId } = this._getInitializeOptions();\n\n                if (containerId) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        const paragraph = document.createElement('p') ;\n                        paragraph.setAttribute(\"id\",`${gatewayId}-${methodId}-paragraph`)\n\n                        if (mollie.unsupportedMethodMessage) {\n                            paragraph.innerText = mollie.unsupportedMethodMessage;\n                            container.appendChild(paragraph);\n                            mollie.disableButton(true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { MollieClient, MollieHostWindow } from './mollie';\n\nexport default class MollieScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: Window = window) {}\n\n    _isMollieWindow(window: Window): window is MollieHostWindow {\n        const mollieWindow: MollieHostWindow = window as MollieHostWindow;\n\n        return !!mollieWindow.Mollie;\n    }\n\n    async load(merchantId: string, locale: string, testmode: boolean): Promise<MollieClient> {\n        await this._scriptLoader.loadScript('https://js.mollie.com/v1/mollie.js');\n\n        if (!this._isMollieWindow(this._window)) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.Mollie(merchantId, {\n            locale,\n            testmode,\n        });\n    }\n}\n","import { isEmpty, map, omitBy } from 'lodash';\n\nimport { isHostedInstrumentLike } from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory, HostedFormOptions } from '../../../hosted-form';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport MonerisStylingProps, {\n    MoneriesHostedFieldsQueryParams,\n    MonerisInitializationData,\n    MonerisResponseData,\n} from './moneris';\nimport MonerisPaymentInitializeOptions from './moneris-payment-initialize-options';\n\nconst IFRAME_NAME = 'moneris-payment-iframe';\nconst RESPONSE_SUCCESS_CODE = '001';\n\nexport default class MonerisPaymentStrategy implements PaymentStrategy {\n    private _iframe?: HTMLIFrameElement;\n    private _initializeOptions?: MonerisPaymentInitializeOptions;\n    private _windowEventListener?: (response: MessageEvent) => void;\n\n    private _hostedForm?: HostedForm;\n\n    constructor(\n        private _hostedFormFactory: HostedFormFactory,\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        const { moneris: monerisOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!monerisOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.moneris\" argument is not provided.',\n            );\n        }\n\n        this._initializeOptions = monerisOptions;\n\n        const { config, initializationData } =\n            state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!initializationData?.profileId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (monerisOptions.form && this._shouldShowTSVHostedForm(methodId)) {\n            this._hostedForm = await this._mountCardVerificationfields(monerisOptions.form);\n        }\n\n        if (!this._iframe) {\n            this._iframe = this._createIframe(\n                monerisOptions.containerId,\n                initializationData,\n                !!config.testMode,\n            );\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n            return this._executeWithVaulted(payment);\n        }\n\n        return this._executeWithCC(payment);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        if (this._windowEventListener) {\n            window.removeEventListener('message', this._windowEventListener);\n            this._windowEventListener = undefined;\n        }\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _executeWithCC(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(payment.methodId);\n\n        const testMode = paymentMethod.config.testMode;\n        const paymentData = payment.paymentData || {};\n        const instrumentSettings = isHostedInstrumentLike(paymentData)\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = instrumentSettings;\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            if (!this._iframe) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const frameref = this._iframe.contentWindow;\n\n            frameref?.postMessage('tokenize', this._monerisURL(!!testMode));\n\n            this._windowEventListener = (response: MessageEvent) => {\n                if (typeof response.data !== 'string') {\n                    return;\n                }\n\n                try {\n                    resolve(this._handleMonerisResponse(response));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            window.addEventListener('message', this._windowEventListener);\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    methodId: payment.methodId,\n                    paymentData: { nonce, shouldSaveInstrument, shouldSetAsDefaultInstrument },\n                }),\n            );\n        }\n\n        return this._store.getState();\n    }\n\n    private async _executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            const form = this._hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n        }\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n    }\n\n    private _shouldShowTSVHostedForm(methodId: string): boolean {\n        return this._isHostedPaymentFormEnabled(methodId) && this._isHostedFieldAvailable();\n    }\n\n    private _isHostedPaymentFormEnabled(methodId: string): boolean {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private _isHostedFieldAvailable(): boolean {\n        const options = this._getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private _getInitializeOptions(): MonerisPaymentInitializeOptions {\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._initializeOptions;\n    }\n\n    private async _mountCardVerificationfields(\n        formOptions: HostedFormOptions,\n    ): Promise<HostedForm> {\n        const { config } = this._store.getState();\n        const bigpayBaseUrl = config.getStoreConfig()?.paymentSettings.bigpayBaseUrl;\n\n        if (!bigpayBaseUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const form = this._hostedFormFactory.create(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private _createIframe(\n        containerId: string,\n        initializationData: MonerisInitializationData,\n        testMode: boolean,\n        style?: MonerisStylingProps,\n    ): HTMLIFrameElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create iframe without valid container ID.');\n        }\n\n        const iframe = document.createElement('iframe');\n        const monerisQueryParams: MoneriesHostedFieldsQueryParams = {\n            id: initializationData.profileId,\n            pmmsg: true,\n            display_labels: 1,\n            enable_exp: 1,\n            enable_cvd: 1,\n            css_body:\n                style?.cssBody ||\n                'font-family: Arial, Helvetica,sans-serif;background: transparent;',\n            css_textbox:\n                style?.cssTextbox ||\n                'border-radius:4px;border: 2px solid rgb(00,00,00);width: 100%;font-weight: 600;padding: 8px 8px;outline: 0;',\n            css_textbox_pan: style?.cssTextboxCardNumber || 'width: 240px;',\n            css_textbox_exp:\n                style?.cssTextboxExpiryDate || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_textbox_cvd: style?.cssTextboxCVV || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_input_label:\n                style?.cssInputLabel ||\n                'font-size: 10px;position: relative;top: 8px;left: 6px;background: rgb(255,255,255);padding: 3px 2px;color: rgb(66,66,66);font-weight: 600;z-index: 2;',\n            pan_label: initializationData.creditCardLabel || 'Credit Card Number',\n            exp_label: initializationData.expiryDateLabel || 'Expiration',\n            cvd_label: initializationData.cvdLabel || 'CVD',\n        };\n\n        const queryString = map(monerisQueryParams, (value, key) => `${key}=${value}`).join('&');\n\n        iframe.width = '100%';\n        iframe.height = '100%';\n        iframe.name = IFRAME_NAME;\n        iframe.id = IFRAME_NAME;\n        iframe.style.border = 'none';\n        iframe.src = `${this._monerisURL(testMode)}?${queryString}`;\n\n        container.appendChild(iframe);\n\n        return iframe;\n    }\n\n    private _handleMonerisResponse(response: MessageEvent): string {\n        const monerisResponse: MonerisResponseData = JSON.parse(response.data);\n\n        if (monerisResponse.responseCode[0] !== RESPONSE_SUCCESS_CODE) {\n            throw new Error(monerisResponse.errorMessage);\n        }\n\n        return monerisResponse.dataKey;\n    }\n\n    private _monerisURL(testMode: boolean): string {\n        return `https://${testMode ? 'esqa' : 'www3'}.moneris.com/HPPtoken/index.php`;\n    }\n}\n","import PaymentMethod from '../../payment-method';\n\nimport { OpyWidgetConfig } from './opy-library';\n\nexport enum ActionTypes {\n    FORM_POST = 'FormPost',\n    WAIT_FOR_CUSTOMER = 'WaitForCustomer',\n}\n\ninterface FormPost {\n    type: ActionTypes.FORM_POST;\n    formPost: {\n        formPostUrl: string;\n        formFields: [\n            {\n                fieldName: string;\n                fieldValue: string;\n            },\n        ];\n    };\n}\n\ninterface WaitForCustomer {\n    type: ActionTypes.WAIT_FOR_CUSTOMER;\n}\n\nexport interface OpyPaymentMethod extends PaymentMethod {\n    initializationData: {\n        nextAction?: FormPost | WaitForCustomer;\n        widgetConfig: OpyWidgetConfig;\n    };\n}\n\nexport function isOpyPaymentMethod(\n    paymentMethod: PaymentMethod,\n): paymentMethod is OpyPaymentMethod {\n    return !!paymentMethod.initializationData?.widgetConfig;\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport enum OpyErrorType {\n    InvalidCart = 'invalid_cart',\n}\nexport default class OpyError extends StandardError {\n    subtype: string;\n\n    constructor(subtype: OpyErrorType, displayName: string) {\n        super(getErrorMessage(subtype, displayName));\n\n        this.name = 'OpyError';\n        this.type = 'opy_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: OpyErrorType, displayName: string): string {\n    switch (type) {\n        case OpyErrorType.InvalidCart:\n            return `Cart price is different to ${displayName} plan amount.`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport StorefrontPaymentRequestSender from '../../storefront-payment-request-sender';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { ActionTypes, isOpyPaymentMethod } from './opy';\nimport { OpyWidgetConfig } from './opy-library';\nimport OpyError, { OpyErrorType } from './opy-payment-error';\nimport OpyScriptLoader from './opy-script-loader';\n\nexport default class OpyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _scriptLoader: OpyScriptLoader,\n    ) {}\n\n    async initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (options?.opy?.containerId) {\n            const {\n                methodId,\n                opy: { containerId },\n            } = options;\n\n            const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n            if (paymentMethod && isOpyPaymentMethod(paymentMethod)) {\n                const {\n                    initializationData: { widgetConfig },\n                } = paymentMethod;\n\n                await this._installWidget(containerId, widgetConfig);\n            }\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (!isOpyPaymentMethod(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            clientToken: nonce,\n            initializationData: { nextAction },\n        } = paymentMethod;\n\n        if (!nextAction) {\n            const { displayName = 'Openpay' } = paymentMethod.config;\n\n            throw new OpyError(OpyErrorType.InvalidCart, displayName);\n        }\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        await this._storefrontPaymentRequestSender.saveExternalId(methodId, nonce);\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({ methodId, paymentData: { nonce } }),\n            );\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                if (nextAction.type === ActionTypes.FORM_POST) {\n                    const { formPostUrl, formFields } = nextAction.formPost;\n\n                    const url = new URL(formPostUrl.replace(/\\/$/, ''));\n\n                    formFields.forEach(({ fieldName, fieldValue }) => {\n                        url.searchParams.append(fieldName, fieldValue);\n                    });\n\n                    return new Promise(() => window.location.assign(decodeURI(url.href)));\n                }\n\n                throw new NotImplementedError(`Unsupported action type: ${nextAction.type}`);\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _installWidget(containerId: string, config: OpyWidgetConfig): Promise<void> {\n        const widgetContainer = document.getElementById(containerId);\n\n        if (widgetContainer) {\n            try {\n                const widget = await this._scriptLoader.loadOpyWidget(config.region);\n\n                widget.Config(config);\n            } catch (error) {\n                return;\n            }\n\n            widgetContainer.appendChild(document.createElement('opy-learn-more-button'));\n        }\n    }\n}\n","export enum OpyRegion {\n    AU = 'AU',\n    UK = 'UK',\n    US = 'US',\n}\n\n/**\n * https://widgets.openpay.com.au/config\n */\nexport interface OpyWidgetConfig {\n    /**\n     * The region your store is located in.\n     */\n    region: OpyRegion;\n    /**\n     * The currency symbol used in the widgets.\n     */\n    currency: '$' | '£';\n    /**\n     * An array of available plan tiers you have available in months.\n     */\n    planTiers: number[];\n    /**\n     * The minimum eligible amount required before Opy is eligible.\n     */\n    minEligibleAmount: number;\n    /**\n     * The maximum eligible amount required before Opy is eligible.\n     */\n    maxEligibleAmount: number;\n    /**\n     * Type of your store.\n     */\n    type: 'Online';\n}\n\nexport interface OpyWidget {\n    /**\n     * Initialize the library.\n     *\n     * @param config Properties with the correct purchase limits, plan tiers, etc.\n     */\n    Config(config: OpyWidgetConfig): void;\n}\n\nexport interface OpyHostWindow extends Window {\n    /**\n     * The Opy widgets library.\n     */\n    OpenpayWidgets?: OpyWidget;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { OpyHostWindow, OpyRegion, OpyWidget } from './opy-library';\n\nconst AU_REGION_URL = 'https://widgets.openpay.com.au/lib/openpay-widgets.min.js';\n\nconst SOURCES = {\n    AU: AU_REGION_URL,\n    UK: AU_REGION_URL,\n    US: 'https://widgets.opy.com/lib/openpay-widgets.min.js',\n};\n\nexport default class OpyScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: OpyHostWindow = window) {}\n\n    async loadOpyWidget(region = OpyRegion.AU): Promise<OpyWidget> {\n        await this._scriptLoader.loadScript(SOURCES[region]);\n\n        if (!this._window.OpenpayWidgets) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.OpenpayWidgets;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { ACKNOWLEDGE } from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const {\n            payment: { getPaymentStatus },\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentStatus() === ACKNOWLEDGE) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder(\n                    {\n                        ...payload,\n                        payment: { methodId },\n                    },\n                    options,\n                ),\n            );\n        }\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow =\n            (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader\n            .loadPaypal()\n            .then((paypal) => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store\n                .dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then((state) => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(noop);\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then((state) => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(noop);\n            })\n            .catch((error) => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return (\n            state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE ||\n            state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE\n        );\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { ShippingOption } from '../../../shipping';\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => PayPalOrderDetails;\n    };\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\n// TODO: this type should be merged with PayPalCheckoutButtonOptions in the future\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string | void>; // TODO: this method should return only Promise<void>\n    onApprove?(data: ApproveCallbackPayload, actions?: ApproveCallbackActions): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalCheckoutButtonOptions {\n    experience: string;\n    style?: PaypalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onError(error: Error): void;\n    onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onApprove(data: ApproveCallbackPayload, actions: ApproveCallbackActions): Promise<boolean>;\n    onComplete(data: CompleteCallbackDataPayload): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    OXXO: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport const NON_INSTANT_PAYMENT_METHODS = ['oxxo'];\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions | PaypalCheckoutButtonOptions): PaypalCommerceButtons;\n    PaymentFields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\n\nexport type EnableFundingType = FundingType | string;\n\nexport enum PayPalCommerceIntent {\n    authorize = 'authorize',\n    capture = 'capture',\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PaypalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport interface UpdateOrderPayload {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalCreateOrderRequestBody {\n    cartId: string;\n    instrumentId?: string;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, TimeoutError } from '../../../common/error/errors';\nimport { LoadingIndicator } from '../../../common/loading-indicator';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodInvalidError } from '../../errors';\nimport { PaymentStrategyType } from '../../index';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    NON_INSTANT_PAYMENT_METHODS,\n    PaypalCommerceCreditCardPaymentInitializeOptions,\n    PaypalCommerceFundingKeyResolver,\n    PaypalCommercePaymentInitializeOptions,\n    PaypalCommercePaymentProcessor,\n    PaypalCommerceRequestSender,\n} from './index';\n\nconst ORDER_STATUS_APPROVED = 'APPROVED';\nconst ORDER_STATUS_CREATED = 'CREATED';\nconst PAYER_ACTION_REQUIRED = 'PAYER_ACTION_REQUIRED';\nconst POLLING_INTERVAL = 3000;\nconst POLLING_MAX_TIME = 600000;\n\nexport default class PaypalCommercePaymentStrategy implements PaymentStrategy {\n    private _orderId?: string;\n    private _isAPM?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor,\n        private _paypalCommerceFundingKeyResolver: PaypalCommerceFundingKeyResolver,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _loadingIndicator: LoadingIndicator,\n        private _pollingInterval?: number,\n        private _pollingTimer = 0,\n    ) {}\n\n    async initialize({\n        gatewayId,\n        methodId,\n        paypalcommerce,\n    }: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n            cart: { getCartOrThrow },\n            billingAddress: { getBillingAddressOrThrow },\n        } = this._store.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n        const { initializationData } = paymentMethod;\n        const { orderId, buttonStyle, shouldRenderFields } = initializationData ?? {};\n\n        this._isAPM = gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS;\n\n        if (orderId) {\n            this._orderId = orderId;\n\n            return this._store.getState();\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.',\n            );\n        }\n\n        if (!this._isPaypalCommerceOptionsPayments(paypalcommerce)) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce\" argument should contain \"container\", \"onRenderButton\", \"submitForm\".',\n            );\n        }\n\n        const {\n            container,\n            apmFieldsContainer,\n            apmFieldsStyles,\n            onRenderButton,\n            submitForm,\n            onValidate,\n        } = paypalcommerce;\n        const {\n            id: cartId,\n            currency: { code: currencyCode },\n        } = getCartOrThrow();\n        const { firstName, lastName, email } = getBillingAddressOrThrow();\n\n        const loadingIndicatorContainerId = container.split('#')[1];\n\n        const buttonParams: ButtonsOptions = {\n            style: buttonStyle,\n            onApprove: (data) => {\n                this._deinitializePollingTimer(gatewayId);\n                this._tokenizePayment(data, submitForm);\n                this._loadingIndicator.hide();\n            },\n            onClick: async (_, actions) => {\n                this._initializePollingMechanism(submitForm, gatewayId, methodId, paypalcommerce);\n\n                const onValidationPassed = () => {\n                    this._loadingIndicator.show(loadingIndicatorContainerId);\n\n                    return actions.resolve();\n                };\n\n                return onValidate(onValidationPassed, actions.reject);\n            },\n            onCancel: () => {\n                this._deinitializePollingTimer(gatewayId);\n                this._loadingIndicator.hide();\n            },\n            onError: (e: Error) => {\n                this._deinitializePollingTimer(gatewayId);\n                this._loadingIndicator.hide();\n                paypalcommerce.onError?.(e);\n            },\n        };\n\n        await this._paypalCommercePaymentProcessor.initialize(paymentMethod, currencyCode);\n\n        const fundingKey = this._paypalCommerceFundingKeyResolver.resolve(methodId, gatewayId);\n\n        if (this._isAPM && shouldRenderFields) {\n            const fullName = `${firstName} ${lastName}`;\n\n            if (!apmFieldsContainer) {\n                throw new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.paypalcommerce\" argument should contain \"apmFieldsContainer\".',\n                );\n            }\n\n            this._paypalCommercePaymentProcessor.renderFields({\n                apmFieldsContainer,\n                fundingKey,\n                apmFieldsStyles,\n                fullName,\n                email,\n            });\n        }\n\n        this._paypalCommercePaymentProcessor.renderButtons(cartId, container, buttonParams, {\n            onRenderButton,\n            fundingKey,\n            paramsForProvider: { isCheckout: true },\n        });\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: payment.methodId,\n                paypal_account: {\n                    order_id: this._orderId,\n                },\n            },\n        };\n\n        if (NON_INSTANT_PAYMENT_METHODS.indexOf(options.methodId) === -1) {\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        }\n\n        return this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize({ gatewayId }: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._deinitializePollingTimer(gatewayId);\n        this._orderId = undefined;\n        this._paypalCommercePaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _initializePollingMechanism(\n        submitForm: () => void,\n        gatewayId?: string,\n        methodId?: any,\n        paypalcommerce?: any,\n    ) {\n        if (!this._isAPM || NON_INSTANT_PAYMENT_METHODS.indexOf(methodId) > -1) {\n            this._loadingIndicator.hide();\n\n            return;\n        }\n\n        this._pollingInterval = window.setTimeout(async () => {\n            try {\n                this._pollingTimer += POLLING_INTERVAL;\n\n                const { status } = await this._paypalCommerceRequestSender.getOrderStatus();\n\n                if (status === ORDER_STATUS_APPROVED) {\n                    this._deinitializePollingTimer(gatewayId);\n                    this._tokenizePayment(\n                        { orderID: this._paypalCommercePaymentProcessor.getOrderId() },\n                        submitForm,\n                    );\n                } else if (\n                    (status === ORDER_STATUS_CREATED || status === PAYER_ACTION_REQUIRED) &&\n                    this._pollingTimer < POLLING_MAX_TIME\n                ) {\n                    this._initializePollingMechanism(\n                        submitForm,\n                        gatewayId,\n                        methodId,\n                        paypalcommerce,\n                    );\n                } else {\n                    this._reinitializeButtons({ gatewayId, methodId, paypalcommerce });\n                    this._loadingIndicator.hide();\n                    throw new TimeoutError();\n                }\n            } catch (e) {\n                this._deinitializePollingTimer(gatewayId);\n                paypalcommerce.onError?.(e);\n            }\n        }, POLLING_INTERVAL);\n    }\n\n    private _reinitializeButtons({\n        gatewayId,\n        methodId,\n        paypalcommerce,\n    }: PaymentInitializeOptions) {\n        this.deinitialize({ methodId, gatewayId });\n        this.initialize({ gatewayId, methodId, paypalcommerce });\n    }\n\n    private _deinitializePollingTimer(gatewayId?: string) {\n        if (gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS) {\n            clearTimeout(this._pollingInterval);\n            this._pollingTimer = 0;\n        }\n    }\n\n    private _isPaypalCommerceOptionsPayments(\n        options:\n            | PaypalCommercePaymentInitializeOptions\n            | PaypalCommerceCreditCardPaymentInitializeOptions,\n    ): options is PaypalCommercePaymentInitializeOptions {\n        return !!(options as PaypalCommercePaymentInitializeOptions).container;\n    }\n\n    private _tokenizePayment({ orderID }: ApproveCallbackPayload, submitForm: () => void) {\n        this._orderId = orderID;\n        submitForm();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    FundingType,\n    PaypalCommerceHostWindow,\n    PaypalCommerceInitializationData,\n    PaypalCommerceScriptParams,\n    PaypalCommerceSDK,\n} from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n    private _paypalSdk?: Promise<PaypalCommerceSDK>;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._paypalSdk) {\n            this._paypalSdk = this.loadPayPalSDK(\n                this._getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this._paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PaypalCommerceScriptParams,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._window.paypalLoadScript) {\n            const PAYPAL_SDK_VERSION = '5.0.5';\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    private _getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PaypalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit =\n            shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = !shouldShowInlineCheckout && !isHostedCheckoutEnabled; // should disable APMs if Inline Checkout or Shipping Options feature enabled\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport {\n    OrderData,\n    OrderStatus,\n    PayPalCreateOrderRequestBody,\n    UpdateOrderPayload,\n} from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n    isVenmo?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    // TODO: this method should be removed when provider will be passed as an argument\n    // (to prevent containing unnecessary provider detecting logic inside)\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM, isVenmo } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        if (isVenmo && !isAPM) {\n            provider = isCheckout ? 'paypalcommercevenmocheckout' : 'paypalcommercevenmo';\n        }\n\n        if (isAPM) {\n            provider = isCheckout\n                ? 'paypalcommercealternativemethodscheckout'\n                : 'paypalcommercealternativemethod';\n        }\n\n        return this.createOrder(provider, { cartId });\n    }\n\n    async createOrder(\n        providerId: string,\n        requestBody: PayPalCreateOrderRequestBody,\n    ): Promise<OrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post<OrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, { headers });\n\n        return res.body;\n    }\n\n    async updateOrder(payload: UpdateOrderPayload) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = payload;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { HostedInstrument, PaymentMethod, VaultedInstrument } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentStrategyType from '../../payment-strategy-type';\n\nimport {\n    ButtonsOptions,\n    FieldsOptions,\n    NON_INSTANT_PAYMENT_METHODS,\n    ParamsForProvider,\n    PaypalButtonStyleOptions,\n    PaypalCommerceButtons,\n    PaypalCommerceFields,\n    PaypalCommerceHostedFields,\n    PaypalCommerceHostedFieldsApprove,\n    PaypalCommerceHostedFieldsRenderOptions,\n    PaypalCommerceHostedFieldsState,\n    PaypalCommerceHostedFieldsSubmitOptions,\n    PaypalCommerceInitializationData,\n    PaypalCommerceMessages,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    PaypalCommerceSDKFunding,\n    PaypalFieldsStyleOptions,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonLayout,\n    StyleButtonShape,\n} from './index';\n\nexport interface OptionalParamsRenderButtons {\n    paramsForProvider?: ParamsForProvider;\n    fundingKey?: keyof PaypalCommerceSDKFunding;\n    onRenderButton?(): void;\n}\n\nexport interface ParamsRenderHostedFields {\n    fields: PaypalCommerceHostedFieldsRenderOptions['fields'];\n    styles?: PaypalCommerceHostedFieldsRenderOptions['styles'];\n}\n\ninterface EventsHostedFields {\n    blur?(event: PaypalCommerceHostedFieldsState): void;\n    focus?(event: PaypalCommerceHostedFieldsState): void;\n    cardTypeChange?(event: PaypalCommerceHostedFieldsState): void;\n    validityChange?(event: PaypalCommerceHostedFieldsState): void;\n    inputSubmitRequest?(event: PaypalCommerceHostedFieldsState): void;\n}\n\nexport interface RenderApmFieldsParams {\n    apmFieldsContainer: string;\n    fundingKey: keyof PaypalCommerceSDKFunding;\n    apmFieldsStyles?: PaypalFieldsStyleOptions;\n    fullName?: string;\n    email?: string;\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _paypal?: PaypalCommerceSDK;\n    private _paypalButtons?: PaypalCommerceButtons;\n    private _paypalFields?: PaypalCommerceFields;\n    private _paypalMessages?: PaypalCommerceMessages;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _fundingSource?: string;\n    private _orderId?: string;\n    private _gatewayId?: string;\n    private _isVenmoEnabled?: boolean;\n\n    constructor(\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        this._paypal = await this._paypalScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n        this._gatewayId = paymentMethod.gateway;\n        this._isVenmoEnabled = paymentMethod.initializationData?.isVenmoEnabled;\n\n        return this._paypal;\n    }\n\n    renderButtons(\n        cartId: string,\n        container: string,\n        params: ButtonsOptions = {},\n        optionalParams: OptionalParamsRenderButtons = {},\n    ): PaypalCommerceButtons {\n        if (!this._paypal || !this._paypal.Buttons) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { paramsForProvider, fundingKey, onRenderButton } = optionalParams;\n\n        const buttonParams: ButtonsOptions = {\n            ...params,\n            createOrder: () => this._setupPayment(cartId, paramsForProvider),\n\n            onClick: async (data, actions) => {\n                this._fundingSource = data.fundingSource;\n\n                return params.onClick?.(data, actions);\n            },\n        };\n\n        if (params.style) {\n            buttonParams.style = this._validateStyleParams(params.style);\n        }\n\n        if (fundingKey) {\n            this._fundingSource = this._paypal.FUNDING[fundingKey];\n            buttonParams.fundingSource = this._fundingSource;\n        }\n\n        this._paypalButtons = this._paypal.Buttons(buttonParams);\n\n        if (!this._paypalButtons.isEligible()) {\n            this._processNotEligible(buttonParams, fundingKey);\n        }\n\n        onRenderButton?.();\n\n        this._paypalButtons.render(container);\n\n        return this._paypalButtons;\n    }\n\n    renderFields({\n        apmFieldsContainer,\n        fundingKey,\n        apmFieldsStyles,\n        fullName,\n        email,\n    }: RenderApmFieldsParams): PaypalCommerceFields {\n        if (!this._paypal || !this._paypal.PaymentFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const fieldsParams: FieldsOptions = {\n            fundingSource: this._paypal.FUNDING[fundingKey],\n            style: apmFieldsStyles,\n            fields: {\n                name: {\n                    value: fullName,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        this._paypalFields = this._paypal.PaymentFields(fieldsParams);\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        this._paypalFields.render(apmFieldsContainer);\n\n        return this._paypalFields;\n    }\n\n    getOrderId(): string {\n        if (!this._orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._orderId;\n    }\n\n    renderMessages(cartTotal: number, container: string): PaypalCommerceMessages {\n        if (!this._paypal || !this._paypal.Messages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        this._paypalMessages = this._paypal.Messages({\n            amount: cartTotal,\n            placement: 'cart',\n            style: {\n                layout: 'text',\n            },\n        });\n        this._paypalMessages.render(container);\n\n        return this._paypalMessages;\n    }\n\n    async renderHostedFields(\n        cartId: string,\n        params: ParamsRenderHostedFields,\n        events?: EventsHostedFields,\n        getInstrumentParams?: () => HostedInstrument | VaultedInstrument,\n    ): Promise<void> {\n        if (!this._paypal || !this._paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { fields, styles } = params;\n\n        if (!this._paypal.HostedFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._hostedFields = await this._paypal.HostedFields.render({\n            fields,\n            styles,\n            paymentsSDK: true,\n            createOrder: async () => {\n                const providerId = 'paypalcommercecreditcardscheckout';\n                const orderCreationRequestBody =\n                    getInstrumentParams && typeof getInstrumentParams === 'function'\n                        ? { cartId, ...getInstrumentParams() }\n                        : { cartId };\n\n                const { orderId } = await this._paypalCommerceRequestSender.createOrder(\n                    providerId,\n                    orderCreationRequestBody,\n                );\n\n                return orderId;\n            },\n        });\n\n        if (events) {\n            (Object.keys(events) as Array<keyof EventsHostedFields>).forEach((key) => {\n                (this._hostedFields as PaypalCommerceHostedFields).on(\n                    key,\n                    events[key] as (event: PaypalCommerceHostedFieldsState) => void,\n                );\n            });\n        }\n    }\n\n    async submitHostedFields(\n        options?: PaypalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PaypalCommerceHostedFieldsApprove> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit(omitBy(options, isNil));\n    }\n\n    getHostedFieldsValidationState(): {\n        isValid: boolean;\n        fields: PaypalCommerceHostedFieldsState['fields'];\n    } {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { fields } = this._hostedFields.getState();\n\n        const isValid = (\n            Object.keys(fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>\n        ).every((key) => fields[key]?.isValid);\n\n        return { isValid, fields };\n    }\n\n    deinitialize() {\n        this._paypalButtons?.close();\n        this._paypal = undefined;\n        this._paypalButtons = undefined;\n        this._fundingSource = undefined;\n        this._hostedFields = undefined;\n    }\n\n    private async _setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<string> {\n        const paramsForProvider = {\n            ...params,\n            isCredit: this._fundingSource === 'credit' || this._fundingSource === 'paylater',\n        };\n        const isAPM = this._gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS;\n        const isVenmo = this._fundingSource === 'venmo' && this._isVenmoEnabled;\n\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(cartId, {\n            ...paramsForProvider,\n            isAPM,\n            isVenmo,\n        });\n\n        this._orderId = orderId;\n\n        const methodId = this._fundingSource;\n\n        if (methodId && NON_INSTANT_PAYMENT_METHODS.indexOf(methodId) > -1) {\n            await this._patchNonInstantPaymentMethods(methodId);\n        }\n\n        return orderId;\n    }\n\n    private async _patchNonInstantPaymentMethods(\n        methodId: string,\n    ): Promise<InternalCheckoutSelectors> {\n        const gatewayId = this._gatewayId;\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: this._orderId,\n                },\n            },\n        };\n\n        const order = { useStoreCredit: false };\n        const paymentRequestOptions = {\n            gatewayId,\n            methodId,\n        };\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, { params: paymentRequestOptions }),\n        );\n\n        return this._store.dispatch(\n            this._paymentActionCreator.submitPayment({\n                gatewayId,\n                methodId,\n                paymentData,\n            }),\n        );\n    }\n\n    private _validateStyleParams = (style: PaypalButtonStyleOptions): PaypalButtonStyleOptions => {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25 ? 25 : height > 55 ? 55 : height;\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (\n            typeof tagline !== 'boolean' ||\n            (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])\n        ) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    };\n\n    private _processNotEligible(\n        buttonParams: ButtonsOptions,\n        fundingKey?: keyof PaypalCommerceSDKFunding,\n    ): void {\n        if (fundingKey?.toUpperCase() === this._paypal?.FUNDING.PAYLATER.toUpperCase()) {\n            buttonParams.fundingSource = this._paypal?.FUNDING.CREDIT;\n\n            this._paypalButtons = this._paypal?.Buttons(buttonParams);\n\n            if (this._paypalButtons?.isEligible()) {\n                return;\n            }\n        }\n\n        throw new NotImplementedError(\n            `PayPal ${\n                this._fundingSource || ''\n            } is not available for your region. Please use PayPal Checkout instead.`,\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { OrderActionCreator } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\n\nimport {\n    PaypalCommercePaymentProcessor,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n} from './index';\n\nexport default function createPaypalCommercePaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender,\n    store: CheckoutStore,\n    orderActionCreator: OrderActionCreator,\n    paymentActionCreator: PaymentActionCreator,\n) {\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    return new PaypalCommercePaymentProcessor(\n        paypalScriptLoader,\n        paypalCommerceRequestSender,\n        store,\n        orderActionCreator,\n        paymentActionCreator,\n    );\n}\n","import PaymentStrategyType from '../../payment-strategy-type';\n\nimport { PaypalCommerceSDKFunding } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceFundingKeyResolver {\n    resolve(methodId: string, gatewayId?: string): keyof PaypalCommerceSDKFunding {\n        if (methodId === PaymentStrategyType.PAYPAL_COMMERCE) {\n            return 'PAYPAL';\n        }\n\n        if (methodId === PaymentStrategyType.PAYPAL_COMMERCE_CREDIT) {\n            return 'PAYLATER';\n        }\n\n        if (methodId === PaymentStrategyType.PAYPAL_COMMERCE_VENMO) {\n            return 'VENMO';\n        }\n\n        if (gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS) {\n            switch (methodId) {\n                case 'bancontact':\n                    return 'BANCONTACT';\n\n                case 'giropay':\n                    return 'GIROPAY';\n\n                case 'p24':\n                    return 'P24';\n\n                case 'eps':\n                    return 'EPS';\n\n                case 'ideal':\n                    return 'IDEAL';\n\n                case 'mybank':\n                    return 'MYBANK';\n\n                case 'sofort':\n                    return 'SOFORT';\n\n                case 'blik':\n                    return 'BLIK';\n\n                case 'trustly':\n                    return 'TRUSTLY';\n\n                case 'sepa':\n                    return 'SEPA';\n\n                case 'venmo':\n                    return 'VENMO';\n\n                case 'oxxo':\n                    return 'OXXO';\n            }\n        }\n\n        throw new Error('Unable to resolve funding key');\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isHostedInstrumentLike from '../../is-hosted-intrument-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument, PaymentInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    PaypalCommerceCreditCardPaymentInitializeOptions,\n    PaypalCommerceHostedForm,\n    PaypalCommercePaymentInitializeOptions,\n} from './index';\n\nexport default class PaypalCommerceCreditCardPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData: PaymentInstrument | undefined;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paypalCommerceHostedForm: PaypalCommerceHostedForm,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize({\n        methodId,\n        paypalcommerce,\n    }: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!paypalcommerce || !this._isPaypalCommerceOptionsPayments(paypalcommerce)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.paypalcommerce.form\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const cart = state.cart.getCartOrThrow();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._paypalCommerceHostedForm.initialize(\n            paypalcommerce.form,\n            cart,\n            paymentMethod,\n            this._getInstrumentParams.bind(this),\n        );\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this._paypalCommerceHostedForm.validate();\n\n        this.executionPaymentData = payload.payment?.paymentData;\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId),\n        );\n        const { orderId } = await this._paypalCommerceHostedForm.submit(\n            getPaymentMethodOrThrow(payment.methodId).config.is3dsEnabled,\n        );\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        return this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paypalCommerceHostedForm.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private _isPaypalCommerceOptionsPayments(\n        options:\n            | PaypalCommercePaymentInitializeOptions\n            | PaypalCommerceCreditCardPaymentInitializeOptions,\n    ): options is PaypalCommerceCreditCardPaymentInitializeOptions {\n        return !!(options as PaypalCommerceCreditCardPaymentInitializeOptions).form;\n    }\n}\n","import { InvalidArgumentError } from '../../../common/error/errors';\n\nimport {\n    PaypalCommerceFormFieldOptions,\n    PaypalCommerceFormFieldStyles,\n    PaypalCommerceFormFieldStylesMap,\n} from './index';\n\nexport default class PaypalCommerceRegularField {\n    private _input: HTMLInputElement;\n\n    constructor(\n        private _options: PaypalCommerceFormFieldOptions,\n        private _styles?: PaypalCommerceFormFieldStylesMap,\n    ) {\n        this._input = document.createElement('input');\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.placeholder = this._options.placeholder || '';\n\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n\n        this._applyStyles(this._styles?.default);\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    attach(): void {\n        const container = document.getElementById(this._options.containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError();\n        }\n\n        container.appendChild(this._input);\n    }\n\n    detach(): void {\n        this._input.parentNode?.removeChild(this._input);\n    }\n\n    private _applyStyles(styles?: PaypalCommerceFormFieldStyles): void {\n        if (!styles) {\n            return;\n        }\n\n        const styleKeys = Object.keys(styles) as Array<keyof PaypalCommerceFormFieldStyles>;\n\n        styleKeys.forEach((key) => {\n            this._input.style[key] = styles[key] || '';\n        });\n    }\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.default);\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles?.focus);\n    };\n}\n","import { PaypalFieldsStyleOptions } from './index';\n\n/**\n * A set of options that are required to initialize the PayPal Commerce payment\n * method could be used for PayPal Smart Payment Buttons or PayPal Credit Card methods.\n */\nexport type PaypalCommerceInitializeOptions =\n    | PaypalCommercePaymentInitializeOptions\n    | PaypalCommerceCreditCardPaymentInitializeOptions;\n\n/**\n * A set of options that are required to initialize the PayPal Commerce payment\n * method for presenting its PayPal button.\n *\n * Please note that the minimum version of checkout-sdk is 1.100\n *\n * Also, PayPal (also known as PayPal Commerce Platform) requires specific options to initialize the PayPal Smart Payment Button on checkout page that substitutes a standard submit button\n * ```html\n * <!-- This is where the PayPal button will be inserted -->\n * <div id=\"container\"></div>\n * <!-- This is where the PayPal alternative payment methods fields will be inserted.  -->\n * <div id=\"apm-fields-container\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'paypalcommerce',\n *     paypalcommerce: {\n *         container: '#container',\n *         apmFieldsContainer: '#apm-fields-container',\n *         apmFieldsStyles: {\n *             base: {\n *                   backgroundColor: 'transparent',\n *               },\n *               input: {\n *                   backgroundColor: 'white',\n *                   fontSize: '1rem',\n *                   color: '#333',\n *                   borderColor: '#d9d9d9',\n *                   borderRadius: '4px',\n *                   borderWidth: '1px',\n *                   padding: '1rem',\n *               },\n *               invalid: {\n *                   color: '#ed6a6a',\n *               },\n *               active: {\n *                   color: '#4496f6',\n *               },\n *         },\n *         clientId: 'YOUR_CLIENT_ID',\n * // Callback for submitting payment form that gets called when a buyer approves PayPal payment\n *         submitForm: () => {\n *         // Example function\n *             this.submitOrder(\n *                {\n *                   payment: { methodId: 'paypalcommerce', }\n *               }\n *            );\n *         },\n * // Callback is used to define the state of the payment form, validate if it is applicable for submit.\n *         onValidate: (resolve, reject) => {\n *         // Example function\n *             const isValid = this.validatePaymentForm();\n *             if (isValid) {\n *                 return resolve();\n *             }\n *             return reject();\n *         },\n * // Callback that is called right before render of a Smart Payment Button. It gets called when a buyer is eligible for use of the particular PayPal method. This callback can be used to hide the standard submit button.\n *         onRenderButton: () => {\n *         // Example function\n *             this.hidePaymentSubmitButton();\n *         }\n *     },\n * });\n * ```\n */\nexport interface PaypalCommercePaymentInitializeOptions {\n    /**\n     * The CSS selector of a container where the payment widget should be inserted into.\n     */\n    container: string;\n\n    /**\n     *  The Client ID of the Paypal App\n     */\n    clientId: string;\n\n    /**\n     * The CSS selector of a container where the alternative payment methods fields widget should be inserted into.\n     * It's necessary to specify this parameter when using Alternative Payment Methods.\n     * Without it alternative payment methods will not work.\n     */\n    apmFieldsContainer?: string;\n\n    /**\n     * Object with styles to customize alternative payment methods fields.\n     */\n    apmFieldsStyles?: PaypalFieldsStyleOptions;\n\n    /**\n     * A callback that gets called when a buyer click on Smart Payment Button\n     * and should validate payment form.\n     *\n     * @param resolve - A function, that gets called if form is valid.\n     * @param reject - A function, that gets called if form is not valid.\n     *\n     * @returns reject() or resolve()\n     */\n    onValidate(resolve: () => void, reject: () => void): Promise<void>;\n\n    /**\n     * A callback for submitting payment form that gets called\n     * when buyer approved PayPal account.\n     */\n    submitForm(): void;\n\n    /**\n     * A callback right before render Smart Payment Button that gets called when\n     * Smart Payment Button is eligible. This callback can be used to hide the standard submit button.\n     */\n    onRenderButton?(): void;\n    /**\n     * A callback for displaying error popup. This callback requires error object as parameter.\n     */\n    onError?(error: Error): void;\n}\n\n/**\n * A set of options that are required to initialize the PayPal Commerce payment\n * method for presenting its credit card form.\n *\n * ```html\n * <!-- These containers are where the hosted (iframed) credit card fields will be inserted -->\n * <div id=\"card-number\"></div>\n * <div id=\"card-name\"></div>\n * <div id=\"card-expiry\"></div>\n * <div id=\"card-code\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'paypalcommerce',\n *     paypalcommerce: {\n *         form: {\n *             fields: {\n *                 cardNumber: { containerId: 'card-number' },\n *                 cardName: { containerId: 'card-name' },\n *                 cardExpiry: { containerId: 'card-expiry' },\n *                 cardCode: { containerId: 'card-code' },\n *             },\n *         },\n *     },\n * });\n * ```\n *\n * Additional options can be passed in to customize the fields and register\n * event callbacks.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'paypalcommerce',\n *     creditCard: {\n *         form: {\n *             fields: {\n *                 cardNumber: { containerId: 'card-number', placeholder: 'Number of card' },\n *                 cardName: { containerId: 'card-name', placeholder: 'Name of card' },\n *                 cardExpiry: { containerId: 'card-expiry', placeholder: 'Expiry of card' },\n *                 cardCode: { containerId: 'card-code', placeholder: 'Code of card' },\n *             },\n *             styles: {\n *                 default: {\n *                     color: '#000',\n *                 },\n *                 error: {\n *                     color: '#f00',\n *                 },\n *                 focus: {\n *                     color: '#0f0',\n *                 },\n *             },\n *             onBlur({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onFocus({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onEnter({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onCardTypeChange({ cardType }) {\n *                 console.log(cardType);\n *             },\n *             onValidate({ errors, isValid }) {\n *                 console.log(errors);\n *                 console.log(isValid);\n *             },\n *         },\n *     },\n * });\n * ```\n */\nexport interface PaypalCommerceCreditCardPaymentInitializeOptions {\n    /**\n     * The form is data for Credit Card Form\n     */\n    form: PaypalCommerceFormOptions;\n}\n\nexport interface PaypalCommerceFormOptions {\n    /**\n     * Containers for fields can be to present in one set of values\n     *\n     * ```js\n     * { cardNumber: { containerId: 'card-number' },\n     *   cardName: { containerId: 'card-name' },\n     *   cardExpiry: { containerId: 'card-expiry' },\n     *   cardCode: { containerId: 'card-code' }, }\n     * ```\n     *\n     *   Or in another set of values.\n     *\n     * ```js\n     * { cardCodeVerification: { containerId: 'card-number' },\n     *   cardNumberVerification: { containerId: 'card-name' }, }\n     * ```\n     */\n    fields: PaypalCommerceFormFieldsMap | PaypalCommerceStoredCardFieldsMap;\n\n    /**\n     * Styles for inputs. Change the width, height and other styling.\n     *\n     * ```js\n     *  default: { color: '#000' },\n     *  error: { color: '#f00' },\n     *  focus: { color: '#0f0' }\n     * ```\n     */\n    styles?: PaypalCommerceFormFieldStylesMap;\n\n    /**\n     * A callback that gets called when a field loses focus.\n     */\n    onBlur?(data: PaypalCommerceFormFieldBlurEventData): void;\n\n    /**\n     * A callback that gets called when activity within\n     * the number field has changed such that the possible\n     * card type has changed.\n     */\n    onCardTypeChange?(data: PaypalCommerceFormFieldCardTypeChangeEventData): void;\n\n    /**\n     * A callback that gets called when a field gains focus.\n     */\n    onFocus?(data: PaypalCommerceFormFieldFocusEventData): void;\n\n    /**\n     * A callback that gets called when the validity of a field has changed.\n     */\n    onValidate?(data: PaypalCommerceFormFieldValidateEventData): void;\n\n    /**\n     * A callback that gets called when the user requests submission\n     * of an input field, by pressing the Enter or Return key\n     * on their keyboard, or mobile equivalent.\n     */\n    onEnter?(data: PaypalCommerceFormFieldEnterEventData): void;\n}\n\nexport enum PaypalCommerceFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface PaypalCommerceFormFieldsMap {\n    [PaypalCommerceFormFieldType.CardCode]?: PaypalCommerceFormFieldOptions;\n    [PaypalCommerceFormFieldType.CardExpiry]: PaypalCommerceFormFieldOptions;\n    [PaypalCommerceFormFieldType.CardName]: PaypalCommerceFormFieldOptions;\n    [PaypalCommerceFormFieldType.CardNumber]: PaypalCommerceFormFieldOptions;\n}\n\nexport interface PaypalCommerceStoredCardFieldsMap {\n    [PaypalCommerceFormFieldType.CardCodeVerification]?: PaypalCommerceStoredCardFieldOptions;\n    [PaypalCommerceFormFieldType.CardNumberVerification]?: PaypalCommerceStoredCardFieldOptions;\n}\n\nexport interface PaypalCommerceFormFieldOptions {\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceStoredCardFieldOptions extends PaypalCommerceFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface PaypalCommerceFormFieldStylesMap {\n    default?: PaypalCommerceFormFieldStyles;\n    error?: PaypalCommerceFormFieldStyles;\n    focus?: PaypalCommerceFormFieldStyles;\n}\n\nexport type PaypalCommerceFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface PaypalCommerceFormFieldKeyboardEventData {\n    fieldType: string;\n}\n\nexport type PaypalCommerceFormFieldBlurEventData = PaypalCommerceFormFieldKeyboardEventData;\nexport type PaypalCommerceFormFieldEnterEventData = PaypalCommerceFormFieldKeyboardEventData;\nexport type PaypalCommerceFormFieldFocusEventData = PaypalCommerceFormFieldKeyboardEventData;\n\nexport interface PaypalCommerceFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface PaypalCommerceFormFieldValidateEventData {\n    errors: {\n        [PaypalCommerceFormFieldType.CardCode]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardExpiry]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardName]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardNumber]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardCodeVerification]?: PaypalCommerceFormFieldValidateErrorData[];\n        [PaypalCommerceFormFieldType.CardNumberVerification]?: PaypalCommerceFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n","import { isNil, kebabCase, omitBy } from 'lodash';\n\nimport { Cart } from '../../../cart';\nimport { HostedInstrument, PaymentMethod, VaultedInstrument } from '../../../payment';\nimport {\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n} from '../../errors';\n\nimport {\n    PaypalCommerceFormFieldsMap,\n    PaypalCommerceStoredCardFieldsMap,\n} from './paypal-commerce-payment-initialize-options';\n\nimport {\n    PaypalCommerceFormFieldStyles,\n    PaypalCommerceFormFieldStylesMap,\n    PaypalCommerceFormFieldType,\n    PaypalCommerceFormFieldValidateErrorData,\n    PaypalCommerceFormFieldValidateEventData,\n    PaypalCommerceFormOptions,\n    PaypalCommerceHostedFieldsApprove,\n    PaypalCommerceHostedFieldsRenderOptions,\n    PaypalCommerceHostedFieldsState,\n    PaypalCommerceHostedFieldsSubmitOptions,\n    PaypalCommerceInitializationData,\n    PaypalCommercePaymentProcessor,\n    PaypalCommerceRegularField,\n} from './index';\n\nenum PaypalCommerceHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class PaypalCommerceHostedForm {\n    private _formOptions?: PaypalCommerceFormOptions;\n    private _cardNameField?: PaypalCommerceRegularField;\n    private _type?: PaypalCommerceHostedFormType;\n\n    constructor(private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor) {}\n\n    async initialize(\n        options: PaypalCommerceFormOptions,\n        cart: Cart,\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        getInstrumentParams?: () => HostedInstrument | VaultedInstrument,\n    ) {\n        await this._paypalCommercePaymentProcessor.initialize(paymentMethod, cart.currency.code);\n\n        this._formOptions = options;\n        this._type = this._isPaypalCommerceFormFieldsMap(options.fields)\n            ? PaypalCommerceHostedFormType.CreditCard\n            : PaypalCommerceHostedFormType.StoredCardVerification;\n\n        const params = {\n            fields: this._mapFieldOptions(options.fields),\n            styles: options.styles && this._mapStyleOptions(options.styles),\n        };\n        const events = {\n            blur: this._handleBlur,\n            focus: this._handleFocus,\n            cardTypeChange: this._handleCardTypeChange,\n            validityChange: this._handleValidityChange,\n            inputSubmitRequest: this._handleInputSubmitRequest,\n        };\n\n        await this._paypalCommercePaymentProcessor.renderHostedFields(\n            cart.id,\n            params,\n            events,\n            getInstrumentParams,\n        );\n\n        if (this._isPaypalCommerceFormFieldsMap(options.fields)) {\n            this._cardNameField = new PaypalCommerceRegularField(\n                options.fields.cardName,\n                options.styles,\n            );\n            this._cardNameField.attach();\n        }\n    }\n\n    async submit(is3dsEnabled?: boolean): Promise<PaypalCommerceHostedFieldsApprove> {\n        this.validate();\n\n        const options: PaypalCommerceHostedFieldsSubmitOptions = {\n            cardholderName: this._cardNameField?.getValue(),\n            contingencies: is3dsEnabled ? ['3D_SECURE'] : undefined,\n        };\n\n        const result = await this._paypalCommercePaymentProcessor.submitHostedFields(options);\n\n        if (\n            is3dsEnabled &&\n            (result.liabilityShift === 'NO' || result.liabilityShift === 'UNKNOWN')\n        ) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n\n        return result;\n    }\n\n    validate(): void {\n        const { isValid, fields } =\n            this._paypalCommercePaymentProcessor.getHostedFieldsValidationState();\n\n        if (isValid) {\n            return;\n        }\n\n        const errors = this._mapValidationErrors(fields);\n\n        this._formOptions?.onValidate?.({\n            errors,\n            isValid: false,\n        });\n\n        throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n    }\n\n    deinitialize(): void {\n        this._paypalCommercePaymentProcessor.deinitialize();\n    }\n\n    private _mapFieldOptions(\n        fields: PaypalCommerceFormFieldsMap | PaypalCommerceStoredCardFieldsMap,\n    ): PaypalCommerceHostedFieldsRenderOptions['fields'] {\n        if (this._isPaypalCommerceFormFieldsMap(fields)) {\n            return omitBy(\n                {\n                    number: {\n                        selector: `#${fields.cardNumber.containerId}`,\n                        placeholder: fields.cardNumber.placeholder,\n                    },\n                    expirationDate: {\n                        selector: `#${fields.cardExpiry.containerId}`,\n                        placeholder: fields.cardExpiry.placeholder,\n                    },\n                    cvv: fields.cardCode && {\n                        selector: `#${fields.cardCode.containerId}`,\n                        placeholder: fields.cardCode.placeholder,\n                    },\n                },\n                isNil,\n            );\n        }\n\n        return omitBy(\n            {\n                number: fields.cardNumberVerification && {\n                    selector: `#${fields.cardNumberVerification.containerId}`,\n                    placeholder: fields.cardNumberVerification.placeholder,\n                },\n                cvv: fields.cardCodeVerification && {\n                    selector: `#${fields.cardCodeVerification.containerId}`,\n                    placeholder: fields.cardCodeVerification.placeholder,\n                },\n            },\n            isNil,\n        );\n    }\n\n    private _mapStyleOptions(\n        options: PaypalCommerceFormFieldStylesMap,\n    ): PaypalCommerceHostedFieldsRenderOptions['styles'] {\n        const mapStyles = (styles: PaypalCommerceFormFieldStyles = {}) => {\n            return (Object.keys(styles) as Array<keyof PaypalCommerceFormFieldStyles>).reduce(\n                (updatedStyles, key) =>\n                    styles[key]\n                        ? { ...updatedStyles, [kebabCase(key)]: styles[key] }\n                        : updatedStyles,\n                {},\n            );\n        };\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private _isPaypalCommerceFormFieldsMap(\n        fields: PaypalCommerceFormFieldsMap | PaypalCommerceStoredCardFieldsMap,\n    ): fields is PaypalCommerceFormFieldsMap {\n        return !!(fields as PaypalCommerceFormFieldsMap).cardNumber;\n    }\n\n    private _mapFieldType(type: string): PaypalCommerceFormFieldType {\n        switch (type) {\n            case 'number':\n                return this._type === PaypalCommerceHostedFormType.StoredCardVerification\n                    ? PaypalCommerceFormFieldType.CardNumberVerification\n                    : PaypalCommerceFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return PaypalCommerceFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this._type === PaypalCommerceHostedFormType.StoredCardVerification\n                    ? PaypalCommerceFormFieldType.CardCodeVerification\n                    : PaypalCommerceFormFieldType.CardCode;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private _mapValidationErrors(\n        fields: PaypalCommerceHostedFieldsState['fields'],\n    ): PaypalCommerceFormFieldValidateEventData['errors'] {\n        return (\n            Object.keys(fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>\n        ).reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this._mapFieldType(fieldKey)]: fields[fieldKey]?.isValid\n                    ? undefined\n                    : [this._createInvalidError(this._mapFieldType(fieldKey))],\n            }),\n            {},\n        );\n    }\n\n    private _createInvalidError(\n        fieldType: PaypalCommerceFormFieldType,\n    ): PaypalCommerceFormFieldValidateErrorData {\n        switch (fieldType) {\n            case PaypalCommerceFormFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case PaypalCommerceFormFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case PaypalCommerceFormFieldType.CardCode:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case PaypalCommerceFormFieldType.CardExpiry:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            case PaypalCommerceFormFieldType.CardNumber:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private _handleBlur: (event: PaypalCommerceHostedFieldsState) => void = (event) => {\n        this._formOptions?.onBlur?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleFocus: (event: PaypalCommerceHostedFieldsState) => void = (event) => {\n        this._formOptions?.onFocus?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleCardTypeChange: (event: PaypalCommerceHostedFieldsState) => void = (event) => {\n        this._formOptions?.onCardTypeChange?.({\n            cardType: event.cards[0]?.type,\n        });\n    };\n\n    private _handleInputSubmitRequest: (event: PaypalCommerceHostedFieldsState) => void = (\n        event,\n    ) => {\n        this._formOptions?.onEnter?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleValidityChange: (event: PaypalCommerceHostedFieldsState) => void = (event) => {\n        this._formOptions?.onValidate?.({\n            isValid: (\n                Object.keys(event.fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>\n            ).every((key) => event.fields[key]?.isValid),\n            errors: this._mapValidationErrors(event.fields),\n        });\n    };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"query-string\");","import { exclude, ParsedUrl, parseUrl, stringifyUrl } from 'query-string';\n\nexport const PENDING_REDIRECT_PARAM = 'redirecting';\n\nexport class RedirectionState {\n    private _isRedirecting: boolean;\n\n    constructor() {\n        this._isRedirecting = this.currentUrlHasRedirectingParam();\n    }\n\n    isRedirecting() {\n        return this._isRedirecting;\n    }\n\n    setRedirecting(value: boolean) {\n        if (value) {\n            this.setRedirectingParamOnUrl();\n        } else {\n            this.removeRedirectingParamFromUrl();\n        }\n\n        this._isRedirecting = value;\n    }\n\n    private currentUrlHasRedirectingParam(): boolean {\n        return PENDING_REDIRECT_PARAM in this.getCurrentUrl().query;\n    }\n\n    private getCurrentUrl(): ParsedUrl {\n        return parseUrl(window.location.href);\n    }\n\n    private replaceCurrentUrl(url: string) {\n        window.history.replaceState(null, '', url);\n    }\n\n    private setRedirectingParamOnUrl() {\n        if (this.currentUrlHasRedirectingParam()) {\n            return;\n        }\n\n        const currentUrl = this.getCurrentUrl();\n        const updatedUrl = {\n            ...currentUrl,\n            query: {\n                ...currentUrl.query,\n                [PENDING_REDIRECT_PARAM]: 'true',\n            },\n        };\n\n        this.replaceCurrentUrl(stringifyUrl(updatedUrl));\n    }\n\n    private removeRedirectingParamFromUrl() {\n        if (!this.currentUrlHasRedirectingParam()) {\n            return;\n        }\n\n        this.replaceCurrentUrl(exclude(window.location.href, [PENDING_REDIRECT_PARAM]));\n    }\n}\n","export enum SubStrategyType {\n    CARD = 'card_ui',\n    NONE = 'none',\n    UNSUPPORTED = 'unsupported',\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { overSome } from 'lodash';\n\nimport { PaymentHumanVerificationHandler } from '../../../../../spam-protection';\nimport PaymentAdditionalAction from '../../../../payment-additional-action';\nimport { PaymentsAPIResponse } from '../../ppsdk-payments-api-response';\n\nimport {\n    handleHumanVerification,\n    HumanVerification,\n    isHumanVerification,\n} from './human-verification';\nimport { handleRedirect, isRedirect, Redirect } from './redirect';\n\nexport type Continue = Redirect | HumanVerification;\n\nconst isAnyContinue = overSome([isRedirect, isHumanVerification]);\n\nexport const isContinue = (body: PaymentsAPIResponse['body']): body is Continue =>\n    isAnyContinue(body);\n\nexport interface ContinueCallbacks {\n    humanVerification?(additionalAction: PaymentAdditionalAction): Promise<void>;\n}\n\nexport class ContinueHandler {\n    constructor(\n        private _formPoster: FormPoster,\n        private _humanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    handle(body: Continue, callbacks?: ContinueCallbacks): Promise<void> {\n        switch (body.code) {\n            case 'redirect':\n                return handleRedirect(body.parameters, this._formPoster);\n\n            case 'resubmit_with_human_verification':\n                return handleHumanVerification(\n                    body.parameters,\n                    this._humanVerificationHandler,\n                    callbacks?.humanVerification,\n                );\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { get, isObject, isString, isUndefined, noop } from 'lodash';\n\nimport { PaymentMethodCancelledError } from '../../../../../errors';\nimport { PaymentsAPIResponse } from '../../../ppsdk-payments-api-response';\n\nimport { RedirectionState } from './RedirectionState';\n\ninterface Parameters {\n    url: string;\n    form_fields?: Record<string, string | number | boolean>;\n}\n\nexport interface Redirect {\n    type: 'continue';\n    code: 'redirect';\n    parameters: Parameters;\n}\n\nconst isParameters = (x: unknown): x is Parameters => {\n    const formFields = get(x, 'form_fields');\n\n    return isString(get(x, 'url')) && (isUndefined(formFields) || isObject(formFields));\n};\n\nexport const isRedirect = (body: PaymentsAPIResponse['body']): body is Redirect =>\n    get(body, 'type') === 'continue' &&\n    get(body, 'code') === 'redirect' &&\n    isParameters(get(body, 'parameters'));\n\nexport const handleRedirect = (\n    { url, form_fields }: Parameters,\n    formPoster: FormPoster,\n): Promise<never> => {\n    const redirectionState = new RedirectionState();\n\n    if (redirectionState.isRedirecting()) {\n        redirectionState.setRedirecting(false);\n\n        return Promise.reject(new PaymentMethodCancelledError());\n    }\n\n    redirectionState.setRedirecting(true);\n\n    if (form_fields) {\n        formPoster.postForm(url, form_fields);\n    } else {\n        window.location.assign(url);\n    }\n\n    return new Promise(noop);\n};\n","import { get, isArray } from 'lodash';\n\nimport { PaymentHumanVerificationHandler } from '../../../../../../spam-protection';\nimport PaymentAdditionalAction from '../../../../../payment-additional-action';\nimport { PaymentsAPIResponse } from '../../../ppsdk-payments-api-response';\n\ninterface VerificationMethod {\n    id: string;\n    parameters: Record<string, string>;\n}\n\ninterface Parameters {\n    available_methods: VerificationMethod[];\n}\n\nexport interface HumanVerification {\n    type: 'continue';\n    code: 'resubmit_with_human_verification';\n    parameters: Parameters;\n}\n\nconst isParameters = (x: unknown): x is Parameters => {\n    const availableMethods = get(x, 'available_methods');\n\n    return isArray(availableMethods);\n};\n\nexport const isHumanVerification = (body: PaymentsAPIResponse['body']): body is HumanVerification =>\n    get(body, 'type') === 'continue' &&\n    get(body, 'code') === 'resubmit_with_human_verification' &&\n    isParameters(get(body, 'parameters'));\n\nexport const handleHumanVerification = async (\n    { available_methods }: Parameters,\n    humanVerificationHandler?: PaymentHumanVerificationHandler,\n    callback?: (additionalAction: PaymentAdditionalAction) => Promise<void>,\n): Promise<void> => {\n    if (!callback) {\n        throw new Error('PPSDK human verification callback function is missing.');\n    }\n\n    if (!humanVerificationHandler) {\n        throw new Error('PPSDK human verification handler is missing.');\n    }\n\n    if (available_methods.length === 0) {\n        throw Error('Human verification method is missing.');\n    }\n\n    // Only one method is expected because google recaptcha only is supported\n    const { id, parameters } = available_methods[0];\n\n    const additionalAction: PaymentAdditionalAction = await humanVerificationHandler.handle(\n        id,\n        parameters.key,\n    );\n\n    return callback(additionalAction);\n};\n","import { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nimport { ContinueCallbacks, ContinueHandler, isContinue } from './continue-handler';\nimport { handleError, isError } from './error';\nimport { handleFailure, isFailure } from './failure';\nimport { handleSuccess, isSuccess } from './success';\nimport { handleUnsupported } from './unsupported';\n\ninterface StepHandlerCallbacks {\n    continue?: ContinueCallbacks;\n}\n\nexport class StepHandler {\n    constructor(private _continueHandler: ContinueHandler) {}\n\n    handle(response: PaymentsAPIResponse, callbacks?: StepHandlerCallbacks): Promise<void> {\n        const { body } = response;\n\n        if (isSuccess(body)) {\n            return handleSuccess();\n        }\n\n        if (isContinue(body)) {\n            return this._continueHandler.handle(body, callbacks?.continue);\n        }\n\n        if (isFailure(response)) {\n            return handleFailure(response);\n        }\n\n        if (isError(response)) {\n            return handleError(response);\n        }\n\n        return handleUnsupported(response);\n    }\n}\n","import { get } from 'lodash';\n\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nexport interface Success {\n    type: 'success';\n}\n\nexport const isSuccess = (body: PaymentsAPIResponse['body']): body is Success =>\n    get(body, 'type') === 'success';\n\nexport const handleSuccess = () => Promise.resolve();\n","import { get, isString } from 'lodash';\n\nimport { RequestError } from '../../../../common/error/errors';\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nexport interface FailureResponse extends PaymentsAPIResponse {\n    body: {\n        type: 'failure';\n        code: string;\n    };\n}\n\nexport const isFailure = (response: PaymentsAPIResponse): response is FailureResponse =>\n    get(response.body, 'type') === 'failure' && isString(get(response.body, 'code'));\n\nconst toRequestErrorFormat = (failureResponse: FailureResponse) => ({\n    ...failureResponse,\n    body: {\n        errors: [{ code: failureResponse.body.code }],\n    },\n});\n\nexport const handleFailure = (response: FailureResponse): Promise<void> =>\n    Promise.reject(new RequestError(toRequestErrorFormat(response)));\n","import { get } from 'lodash';\n\nimport { RequestError } from '../../../../common/error/errors';\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nexport interface ErrorResponse extends PaymentsAPIResponse {\n    body: {\n        type: 'error';\n    };\n}\n\nexport const isError = (response: PaymentsAPIResponse): response is ErrorResponse =>\n    get(response.body, 'type') === 'error';\n\nexport const handleError = (response: ErrorResponse) => Promise.reject(new RequestError(response));\n","import { BrowserStorage } from '../../../common/storage';\n\ntype CompletedPayments = string[];\n\nconst COMPLETED_PAYMENTS_KEY = 'completed-payments';\n\nexport class PPSDKCompletedPayments {\n    constructor(private _browserStorage: BrowserStorage) {}\n\n    isCompleted(paymentId: string): boolean {\n        return this.getCompletedPayments().indexOf(paymentId) >= 0;\n    }\n\n    setCompleted(paymentId: string): void {\n        const completedPayments = this.getCompletedPayments();\n\n        completedPayments.push(paymentId);\n\n        this.setCompletedPayments(completedPayments);\n    }\n\n    private getCompletedPayments(): CompletedPayments {\n        return this._browserStorage.getItem<CompletedPayments>(COMPLETED_PAYMENTS_KEY) || [];\n    }\n\n    private setCompletedPayments(completedPayments: CompletedPayments): void {\n        this._browserStorage.setItem<CompletedPayments>(COMPLETED_PAYMENTS_KEY, completedPayments);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { BrowserStorage } from '../../../common/storage';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { getPPSDKMethod } from './get-ppsdk-payment-method';\nimport { PPSDKCompletedPayments } from './ppsdk-completed-payments';\nimport { PaymentResumer } from './ppsdk-payment-resumer';\nimport { SubStrategy } from './ppsdk-sub-strategy';\nimport { SubStrategyRegistry } from './ppsdk-sub-strategy-registry';\n\nexport class PPSDKStrategy implements PaymentStrategy {\n    private _subStrategy?: SubStrategy;\n    private _completedPayments: PPSDKCompletedPayments;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _subStrategyRegistry: SubStrategyRegistry,\n        private _paymentResumer: PaymentResumer,\n        browserStorage: BrowserStorage,\n    ) {\n        this._completedPayments = new PPSDKCompletedPayments(browserStorage);\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { bigpayBaseUrl } = this._store\n            .getState()\n            .config.getStoreConfigOrThrow().paymentSettings;\n\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n        const { payment, ...order } = payload;\n        const { _subStrategy: subStrategy } = this;\n\n        if (!subStrategy) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const token = this._store.getState().order.getOrderMeta()?.token;\n\n        if (!token) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        await subStrategy.execute({ methodId, payment, bigpayBaseUrl, token });\n\n        return this._store.getState();\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = this._store.getState().order.getOrderOrThrow();\n\n        if (order.isComplete) {\n            return this._store.getState();\n        }\n\n        const { bigpayBaseUrl } = this._store\n            .getState()\n            .config.getStoreConfigOrThrow().paymentSettings;\n\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentId = this._store.getState().order.getPaymentId(options.methodId);\n\n        if (!paymentId || !order || this._completedPayments.isCompleted(paymentId)) {\n            throw new OrderFinalizationNotRequiredError();\n        }\n\n        const { orderId } = order;\n\n        await this._paymentResumer.resume({ paymentId, bigpayBaseUrl, orderId }).catch((error) => {\n            this._completedPayments.setCompleted(paymentId);\n            throw error;\n        });\n\n        return this._store.getState();\n    }\n\n    async initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = getPPSDKMethod(this._store, options.methodId);\n\n        if (!paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._subStrategy = this._subStrategyRegistry.getByMethod(paymentMethod);\n\n        if (!this._subStrategy) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._subStrategy.initialize(options);\n\n        return this._store.getState();\n    }\n\n    async deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._subStrategy?.deinitialize();\n\n        return this._store.getState();\n    }\n}\n","import { CheckoutStore } from '../../../checkout';\nimport { isPPSDKPaymentMethod, PPSDKPaymentMethod } from '../../ppsdk-payment-method';\n\ntype GetPPSDKMethod = (store: CheckoutStore, methodId: string) => PPSDKPaymentMethod | undefined;\n\nexport const getPPSDKMethod: GetPPSDKMethod = (store, methodId) => {\n    const paymentMethod = store.getState().paymentMethods.getPaymentMethod(methodId);\n\n    if (!paymentMethod || !isPPSDKPaymentMethod(paymentMethod)) {\n        return;\n    }\n\n    return paymentMethod;\n};\n","import { cond, constant, stubTrue } from 'lodash';\n\nimport { Registry } from '../../../common/registry';\nimport { PPSDKPaymentMethod } from '../../ppsdk-payment-method';\n\nimport { isCard, isNone } from './initialization-strategies';\nimport { SubStrategy } from './ppsdk-sub-strategy';\nimport { SubStrategyType } from './ppsdk-sub-strategy-type';\n\nconst getToken = cond([\n    [isCard, constant(SubStrategyType.CARD)],\n    [isNone, constant(SubStrategyType.NONE)],\n    [stubTrue, constant(SubStrategyType.UNSUPPORTED)],\n]);\n\nexport class SubStrategyRegistry extends Registry<SubStrategy | undefined, SubStrategyType> {\n    getByMethod(paymentMethod: PPSDKPaymentMethod): SubStrategy | undefined {\n        const token = getToken(paymentMethod.initializationStrategy);\n\n        return this.get(token);\n    }\n}\n","import { InitializationStrategy } from '../../../';\n\ninterface Card {\n    type: 'card_ui';\n}\n\nexport const isCard = (strategy: Pick<InitializationStrategy, 'type'>): strategy is Card =>\n    strategy.type === 'card_ui';\n","import { InitializationStrategy } from '../../../';\n\ninterface None {\n    type: 'none';\n}\n\nexport const isNone = (strategy: Pick<InitializationStrategy, 'type'>): strategy is None =>\n    strategy.type === 'none';\n","import { CheckoutStore } from '../../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../../hosted-form';\nimport { OrderActionCreator } from '../../../../order';\nimport { PaymentArgumentInvalidError } from '../../../errors';\nimport PaymentAdditionalAction from '../../../payment-additional-action';\nimport { PaymentInitializeOptions } from '../../../payment-request-options';\nimport { SubStrategy, SubStrategySettings } from '../ppsdk-sub-strategy';\nimport { StepHandler } from '../step-handler';\n\nexport class CardSubStrategy implements SubStrategy {\n    protected _hostedForm?: HostedForm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _ppsdkStepHandler: StepHandler,\n    ) {}\n\n    async execute(settings: SubStrategySettings): Promise<void> {\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { additionalAction, payment } = settings;\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await form.validate();\n\n        const { payload } = await form.submit(payment, additionalAction);\n\n        const { response } = payload;\n\n        const humanVerificationCallback = async (\n            additionalAction: PaymentAdditionalAction,\n        ): Promise<void> => this.execute({ additionalAction, ...settings });\n\n        await this._ppsdkStepHandler.handle(response, {\n            continue: {\n                humanVerification: humanVerificationCallback,\n            },\n        });\n\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n    }\n\n    async initialize(options?: PaymentInitializeOptions): Promise<void> {\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            config.getStoreConfig() || {};\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = formOptions && this._hostedFormFactory.create(host, formOptions);\n\n        await form.attach();\n\n        this._hostedForm = form;\n    }\n\n    deinitialize(): void {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\nimport { SubStrategy, SubStrategySettings } from '../ppsdk-sub-strategy';\nimport { StepHandler } from '../step-handler';\n\nexport class NoneSubStrategy implements SubStrategy {\n    constructor(private _requestSender: RequestSender, private _stepHandler: StepHandler) {}\n\n    execute({ methodId, bigpayBaseUrl, token }: SubStrategySettings): Promise<void> {\n        const body = { payment_method_id: methodId };\n        const options = {\n            credentials: false,\n            body,\n            headers: {\n                authorization: token,\n                'X-XSRF-TOKEN': null,\n            },\n        };\n\n        return this._requestSender\n            .post<PaymentsAPIResponse['body']>(`${bigpayBaseUrl}/payments`, options)\n            .then((response) => this._stepHandler.handle(response));\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): void {}\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\n\nimport { PaymentsAPIResponse } from './ppsdk-payments-api-response';\nimport { StepHandler } from './step-handler';\n\ninterface ResumeSettings {\n    orderId: number;\n    paymentId: string;\n    bigpayBaseUrl: string;\n}\n\nexport class PaymentResumer {\n    constructor(private _requestSender: RequestSender, private _stepHandler: StepHandler) {}\n\n    async resume({ paymentId, bigpayBaseUrl, orderId }: ResumeSettings): Promise<void> {\n        const token = await this._getToken(orderId).catch(() => {\n            throw new OrderFinalizationNotRequiredError();\n        });\n\n        const options = {\n            credentials: false,\n            headers: {\n                authorization: token,\n                'X-XSRF-TOKEN': null,\n            },\n        };\n\n        return this._requestSender\n            .get<PaymentsAPIResponse['body']>(`${bigpayBaseUrl}/payments/${paymentId}`, options)\n            .then((response) => this._stepHandler.handle(response));\n    }\n\n    private async _getToken(orderId: number): Promise<string> {\n        const url = `/api/storefront/payments/auth-token`;\n        const options = {\n            params: {\n                order_id: orderId,\n            },\n        };\n\n        return this._requestSender\n            .get<{ auth_token: string }>(url, options)\n            .then(({ body }) => body.auth_token);\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport StorefrontPaymentRequestSender from '../../storefront-payment-request-sender';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class QuadpayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n        const { clientToken, initializationData: { redirectUrl } = {} } =\n            getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const paymentPayload = {\n            methodId,\n            paymentData: { nonce },\n        };\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, { useStoreCredit }),\n        );\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                window.location.replace(redirectUrl);\n\n                return new Promise(noop);\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this._storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData } = payment;\n\n        if (!paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (this._isThreeDSTwoExperimentOn()) {\n            const newPaymentData = {\n                ...paymentData,\n                browser_info: getBrowserInfo(),\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error: Error) => {\n            if (\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                let payload;\n\n                if (this._isThreeDSTwoExperimentOn() && !error.body.three_ds_result.merchant_data) {\n                    payload = {\n                        creq: error.body.three_ds_result.payer_auth_request,\n                    };\n                } else {\n                    payload = {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    };\n                }\n\n                this._formPoster.postForm(\n                    error.body.three_ds_result.acs_url,\n                    payload,\n                    undefined,\n                    '_top',\n                );\n            });\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return super.finalize(options);\n    }\n\n    private _isThreeDSTwoExperimentOn(): boolean {\n        return (\n            this._store.getState().config.getStoreConfigOrThrow().checkoutSettings.features[\n                'INT-4994.Opayo_3DS2'\n            ] === true\n        );\n    }\n}\n","import { NonceInstrument } from '../../payment';\n\nexport default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n    verifyBuyer(\n        source?: string,\n        verificationDetails?: VerificationDetails,\n        callback?: VerifyBuyerResponse,\n    ): void;\n}\n\nexport type VerifyBuyerResponse = (\n    errors: SquareVerificationError,\n    verificationResult: SquareVerificationResult,\n) => void;\n\nexport interface SquareVerificationError {\n    type: string;\n    message: string;\n}\n\nexport interface SquareVerificationResult {\n    token: string;\n    userChallenged: boolean;\n}\n\nexport enum SquareIntent {\n    CHARGE = 'CHARGE',\n    STORE = 'STORE',\n}\n\nexport interface VerificationDetails {\n    intent: string;\n    amount?: string;\n    currencyCode?: string;\n    billingContact?: Contact;\n}\n\nexport type SquarePaymentFormConstructor = new (options: SquareFormOptions) => SquarePaymentForm;\n\nexport type SquareScriptCallBack = (options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact,\n    ): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface DeferredPromise {\n    resolve(resolution?: SquareNonceInstrument): void;\n    reject(reason?: any): void;\n}\n\nexport interface SquareNonceInstrument extends NonceInstrument {\n    token?: string;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { get, isEmpty, noop, omit } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DeferredPromise,\n    DigitalWalletType,\n    SquareFormOptions,\n    SquareIntent,\n    SquarePaymentRequest,\n    SquareVerificationError,\n    SquareVerificationResult,\n    VerificationDetails,\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, gatewayId, square: squareOptions } = options;\n\n        if (!squareOptions) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.square\" argument is not provided.',\n            );\n        }\n\n        this._squareOptions = squareOptions;\n\n        this._syncPaymentMethod(methodId);\n\n        /* eslint-disable */\n        return new Promise(async (resolve, reject) => {\n            const state = this._store.getState();\n            const { config: { testMode } } = state.paymentMethods.getPaymentMethodOrThrow(methodId, gatewayId);\n            try {\n                const createSquareForm = await this._scriptLoader.load(testMode);\n\n                this._paymentForm = createSquareForm(\n                    this._getFormOptions({ resolve, reject })\n                );\n\n                this._getPaymentForm().build();\n            } catch (e: unknown) {\n                reject(new PaymentMethodClientUnavailableError());\n            }\n        }).then(() => this._store.getState());\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        const paymentData = await this._getNonceInstrument(payment.methodId);\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options));\n        await this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData}));\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument | undefined> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument | undefined>((resolve, reject?) => {\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._getPaymentForm().requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(deferred: DeferredPromise): SquareFormOptions {\n        return {\n            ...this._getInitializeOptions(),\n            ...this._paymentMethod?.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    const deferredRequest = this._getDeferredRequestNonce();\n                    const { onError = noop } = this._getInitializeOptions();\n\n                    if (!nonce) {\n                        onError(errors);\n\n                        return deferredRequest.reject(get(errors, '0', {}));\n                    }\n\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none && nonce) {\n                        this._handleWalletNonceResponse(nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        if (this._is3DSExperimentOn()) {\n                            this._getPaymentForm().verifyBuyer(\n                                nonce,\n                                this._getVerificationDetails(),\n                                (error: SquareVerificationError, verificationResults: SquareVerificationResult) => {\n\n                                    if (!isEmpty(error)) {\n                                        onError(error);\n\n                                        return deferredRequest.reject(get(error, '0', {}));\n                                    }\n\n                                    deferredRequest.resolve({ nonce: JSON.stringify({ nonce, token: verificationResults.token }) });\n                                }\n                            );\n                        } else {\n                            deferredRequest.resolve({ nonce });\n                        }\n                    }\n                },\n                createPaymentRequest: this._paymentRequestPayload.bind(this),\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _getInitializeOptions(): SquarePaymentInitializeOptions {\n        if (!this._squareOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._squareOptions;\n    }\n\n    private _handleWalletNonceResponse(\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const { onError = noop, onPaymentSelect = noop } = this._getInitializeOptions();\n\n        if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._getPaymentForm().setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _getBillingContact(): Contact {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n\n        return {\n            givenName: billingAddress.firstName,\n            familyName: billingAddress.lastName,\n            email: billingAddress.email || '',\n            country: billingAddress.countryCode,\n            countryName: billingAddress.country,\n            region: '',\n            city: billingAddress.city,\n            postalCode: billingAddress.postalCode,\n            addressLines: [ billingAddress.address1, billingAddress.address2],\n            phone: billingAddress.phone,\n        };\n    }\n\n    private _getAmountAndCurrencyCode(): string[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        return [String(checkout.grandTotal), cart.currency.code];\n    }\n\n    private _getVerificationDetails(): VerificationDetails {\n        const billingContact = this._getBillingContact();\n        const [ amount, currencyCode ] = this._getAmountAndCurrencyCode();\n\n        return  {\n            intent: SquareIntent.CHARGE,\n            currencyCode,\n            amount,\n            billingContact,\n        };\n    }\n\n    private _getDeferredRequestNonce(): DeferredPromise {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._deferredRequestNonce;\n    }\n\n    private _getPaymentForm(): SquarePaymentForm {\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._paymentForm;\n    }\n\n    private _is3DSExperimentOn(): boolean {\n        const state = this._store.getState();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        return storeConfig.checkoutSettings.features['PROJECT-3828.add_3ds_support_on_squarev2'] === true;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport SquarePaymentForm, { SquareFormOptions, SquareScriptCallBack } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: Window = window) {}\n\n    _isSquareWindow(window: Window): window is SquareWindow {\n        const squareWindow: SquareWindow = window as SquareWindow;\n\n        return !!squareWindow.SqPaymentForm;\n    }\n\n    async load(testmode?: boolean): Promise<SquareScriptCallBack> {\n        await this._scriptLoader.loadScript(\n            testmode\n                ? '//js.squareupsandbox.com/v2/paymentform'\n                : '//js.squareup.com/v2/paymentform',\n        );\n\n        return (options: SquareFormOptions): SquarePaymentForm => {\n            if (!this._isSquareWindow(this._window)) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.SqPaymentForm(options);\n        };\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    ar: ['ar'],\n    bg: ['bg'],\n    cs: ['cs'],\n    da: ['da'],\n    de: ['de'],\n    el: ['el'],\n    en: ['en', 'en-GB'],\n    es: ['es', 'es-419'],\n    et: ['et'],\n    fi: ['fi'],\n    fil: ['fil'],\n    fr: ['fr', 'fr-CA'],\n    he: ['he'],\n    hr: ['hr'],\n    hu: ['hu'],\n    id: ['id'],\n    it: ['it'],\n    ja: ['ja'],\n    ko: ['ko'],\n    lt: ['lt'],\n    lv: ['lv'],\n    ms: ['ms'],\n    mt: ['mt'],\n    nb: ['nb'],\n    nl: ['nl'],\n    pl: ['pl'],\n    pt: ['pt', 'pt-BR'],\n    ro: ['ro'],\n    ru: ['ru'],\n    sk: ['sk'],\n    sl: ['sl'],\n    sv: ['sv'],\n    th: ['th'],\n    tr: ['tr'],\n    vi: ['vi'],\n    zh: ['zh', 'zh-HK', 'zh-TW'],\n};\n","import { supportedLocales } from './stripe-upe-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace(/_/g, '-').toLowerCase().split('-');\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'auto';\n    }\n\n    const formattedLocale = country ? `${language}-${country.toUpperCase()}` : language;\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { includes, some } from 'lodash';\n\nimport { isHostedInstrumentLike } from '../..';\nimport { Address } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport formatLocale from './format-locale';\nimport {\n    AddressOptions,\n    StripeConfirmPaymentData,\n    StripeElement,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripePaymentMethodType,\n    StripeStringConstants,\n    StripeUPEAppearanceOptions,\n    StripeUPEClient,\n} from './stripe-upe';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeUPEPaymentInitializeOptions } from './';\n\nconst APM_REDIRECT = [\n    StripePaymentMethodType.SOFORT,\n    StripePaymentMethodType.EPS,\n    StripePaymentMethodType.GRABPAY,\n    StripePaymentMethodType.BANCONTACT,\n    StripePaymentMethodType.IDEAL,\n    StripePaymentMethodType.GIROPAY,\n    StripePaymentMethodType.ALIPAY,\n    StripePaymentMethodType.KLARNA,\n];\n\nexport default class StripeUPEPaymentStrategy implements PaymentStrategy {\n    private _stripeUPEClient?: StripeUPEClient;\n    private _stripeElements?: StripeElements;\n    private _isMounted = false;\n    private _unsubscribe?: () => void;\n    private _isDeinitialize?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeUPEScriptLoader,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { stripeupe, methodId, gatewayId } = options;\n\n        if (!stripeupe?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this._isDeinitialize = false;\n\n        this._unsubscribe = await this._store.subscribe(\n            async (_state) => {\n                const payment = this._stripeElements?.getElement(StripeElementType.PAYMENT);\n\n                if (payment) {\n                    let error;\n\n                    await this._store\n                        .dispatch(\n                            this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                                params: { method: methodId },\n                            }),\n                        )\n                        .catch((err) => (error = err));\n\n                    if (error) {\n                        if (this._isMounted) {\n                            payment.unmount();\n                            this._isMounted = false;\n                        }\n\n                        stripeupe.onError?.(error);\n                    } else if (!this._isMounted) {\n                        await this._stripeElements?.fetchUpdates();\n                        payment.mount(`#${stripeupe.containerId}`);\n                        this._isMounted = true;\n                    }\n                } else {\n                    this._loadStripeElement(stripeupe, gatewayId, methodId).catch((error) =>\n                        stripeupe.onError?.(error),\n                    );\n                }\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        if (!this._stripeUPEClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData, methodId, gatewayId } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        if (gatewayId) {\n            const {\n                customer: { getCustomerOrThrow },\n            } = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                    params: { method: methodId },\n                }),\n            );\n            const { email, isStripeLinkAuthenticated } = getCustomerOrThrow();\n\n            if (isStripeLinkAuthenticated !== undefined && !email) {\n                const billingAddress = this._store\n                    .getState()\n                    .billingAddress.getBillingAddressOrThrow();\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(billingAddress),\n                );\n            }\n        }\n\n        if (isVaultedInstrument(paymentData)) {\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n            const { instrumentId } = paymentData;\n\n            return this._executeWithVaulted(\n                payment.methodId,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n\n        if (includes(APM_REDIRECT, methodId)) {\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n            return this._executeWithAPM(payment.methodId);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        return this._executeWithoutRedirect(\n            payment.methodId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        this._stripeElements?.getElement(StripeElementType.PAYMENT)?.unmount();\n        this._isMounted = false;\n        this._isDeinitialize = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n\n    private async _executeWithAPM(methodId: string): Promise<InternalCheckoutSelectors> {\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: { token: paymentMethod.clientToken },\n                    vault_payment_instrument: false,\n                    confirm: false,\n                    set_as_default_stored_instrument: false,\n                },\n            },\n        };\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            return await this._processAdditionalAction(error);\n        }\n    }\n\n    private async _executeWithoutRedirect(\n        methodId: string,\n        shouldSaveInstrument: boolean,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: { token: paymentMethod.clientToken },\n                    vault_payment_instrument: shouldSaveInstrument,\n                    confirm: false,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                },\n            },\n        };\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            return await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                methodId,\n            );\n        }\n    }\n\n    private async _executeWithVaulted(\n        methodId: string,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        try {\n            const paymentPayload = {\n                methodId,\n                paymentData: {\n                    formattedPayload: {\n                        bigpay_token: { token },\n                        confirm: false,\n                        client_token: paymentMethod.clientToken,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            return await this._processVaultedAdditionalAction(\n                error,\n                methodId,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _loadStripeElement(\n        stripeupe: StripeUPEPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        const { containerId, style, render } = stripeupe;\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            }),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const {\n            initializationData: { stripePublishableKey, stripeConnectedAccount, shopperLanguage },\n        } = paymentMethod;\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._loadStripeJs(\n            stripePublishableKey,\n            stripeConnectedAccount,\n        );\n\n        let appearance: StripeUPEAppearanceOptions | undefined;\n\n        if (style) {\n            const styles = style;\n\n            appearance = {\n                variables: {\n                    colorPrimary: styles.fieldInnerShadow,\n                    colorBackground: styles.fieldBackground,\n                    colorText: styles.labelText,\n                    colorDanger: styles.fieldErrorText,\n                    colorTextSecondary: styles.labelText,\n                    colorTextPlaceholder: styles.fieldPlaceholderText,\n                    colorIcon: styles.fieldPlaceholderText,\n                },\n                rules: {\n                    '.Input': {\n                        borderColor: styles.fieldBorder,\n                        color: styles.fieldText,\n                        boxShadow: styles.fieldInnerShadow,\n                    },\n                },\n            };\n        }\n\n        this._stripeElements = this._stripeScriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: paymentMethod.clientToken,\n            locale: formatLocale(shopperLanguage),\n            appearance,\n        });\n\n        const {\n            billingAddress: { getBillingAddress },\n            shippingAddress: { getShippingAddress },\n        } = state;\n        const { postalCode } = getShippingAddress() || getBillingAddress() || {};\n\n        const stripeElement: StripeElement =\n            this._stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this._stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                },\n            });\n\n        try {\n            stripeElement.mount(`#${containerId}`);\n            this._isMounted = true;\n        } catch (error) {\n            if (!this._isDeinitialize) {\n                throw new InvalidArgumentError(\n                    'Unable to mount Stripe component without valid container ID.',\n                );\n            }\n        }\n\n        stripeElement.on('ready', () => {\n            render();\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: Error,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n        methodId?: string,\n    ): Promise<InternalCheckoutSelectors | never> {\n        if (!(error instanceof RequestError)) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (some(error.body.errors, { code: 'additional_action_required' })) {\n            const {\n                type,\n                data: { token, redirect_url },\n            } = error.body.additional_action_required;\n\n            if (type === 'redirect_to_url' && redirect_url) {\n                const { paymentIntent, error: stripeError } =\n                    await this._stripeUPEClient.confirmPayment(\n                        this._mapStripePaymentData(redirect_url),\n                    );\n\n                if (stripeError) {\n                    this._throwDisplayableStripeError(stripeError);\n                    throw new PaymentMethodFailedError();\n                }\n\n                if (!paymentIntent) {\n                    throw new RequestError();\n                }\n            } else if (methodId && type === 'additional_action_requires_payment_method' && token) {\n                let result;\n                let catchedConfirmError = false;\n                const stripePaymentData = this._mapStripePaymentData();\n\n                try {\n                    result = await this._stripeUPEClient.confirmPayment(stripePaymentData);\n                } catch (error) {\n                    catchedConfirmError = true;\n                }\n\n                if (result?.error) {\n                    this._throwDisplayableStripeError(result.error);\n\n                    if (this._isCancellationError(result.error)) {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    throw new PaymentMethodFailedError();\n                }\n\n                if (!result?.paymentIntent && !catchedConfirmError) {\n                    throw new RequestError();\n                }\n\n                const paymentPayload = {\n                    methodId,\n                    paymentData: {\n                        formattedPayload: {\n                            credit_card_token: {\n                                token: catchedConfirmError ? token : result?.paymentIntent?.id,\n                            },\n                            confirm: false,\n                            vault_payment_instrument: shouldSaveInstrument,\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                        },\n                    },\n                };\n\n                return this._store.dispatch(\n                    this._paymentActionCreator.submitPayment(paymentPayload),\n                );\n            }\n        }\n\n        throw error;\n    }\n\n    private async _processVaultedAdditionalAction(\n        error: Error,\n        methodId?: string,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<InternalCheckoutSelectors | never> {\n        if (!(error instanceof RequestError)) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (some(error.body.errors, { code: 'three_d_secure_required' }) && methodId) {\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this._stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            const paymentPayload = {\n                methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: catchedConfirmError ? clientSecret : result?.paymentIntent?.id,\n                        },\n                        confirm: false,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        }\n\n        throw error;\n    }\n\n    private _mapStripeAddress(address?: Address): AddressOptions {\n        if (address) {\n            const { city, countryCode: country, postalCode } = address;\n\n            return { city, country, postal_code: postalCode };\n        }\n\n        throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n    }\n\n    private _mapStripePaymentData(returnUrl?: string): StripeConfirmPaymentData {\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n        const address = this._mapStripeAddress(billingAddress);\n\n        const email = billingAddress?.email;\n\n        if (!this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!email || !address || !address.city || !address.country) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            elements: this._stripeElements,\n            redirect: StripeStringConstants.IF_REQUIRED,\n            confirmParams: {\n                payment_method_data: {\n                    billing_details: {\n                        email,\n                        address,\n                    },\n                },\n                ...(returnUrl && { return_url: returnUrl }),\n            },\n        };\n    }\n\n    private async _loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this._stripeUPEClient) {\n            return this._stripeUPEClient;\n        }\n\n        return this._stripeScriptLoader.getStripeClient(\n            stripePublishableKey,\n            stripeConnectedAccount,\n        );\n    }\n}\n","interface BaseElementOptions {\n    /**\n     * Customize the appearance of an element using CSS properties passed in a [Style](https://stripe.com/docs/js/appendix/style) object,\n     * which consists of CSS properties nested under objects for each variant.\n     */\n    style?: StripeElementStyle;\n\n    /**\n     * Set custom class names on the container DOM element when the Stripe element is in a particular state.\n     */\n    classes?: StripeElementClasses;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport interface CreatePaymentMethodCardData extends PaymentMethodCreateParams {\n    card?: StripeElement;\n}\n\nexport interface CreatePaymentMethodIdealData extends PaymentMethodCreateParams {\n    ideal?: StripeElement;\n}\n\nexport interface CreatePaymentMethodSepaData extends PaymentMethodCreateParams {\n    sepa_debit?: StripeElement;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * The PaymentMethod object\n */\nexport interface PaymentMethod {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value.\n     * It contains additional information specific to the PaymentMethod type.\n     */\n    type: string;\n}\n\nexport interface PaymentMethodCreateParams {\n    /**\n     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n     */\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n\n    /**\n     * A human-readable code for the error obtained\n     */\n    code?: string;\n}\n\n/**\n * CSS properties supported by Stripe.js.\n */\ninterface StripeElementCSSProperties {\n    /**\n     * The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n     *\n     * This property works best with the `::selection` pseudo-class.\n     * In other cases, consider setting the background color on the element's container instaed.\n     */\n    backgroundColor?: string;\n\n    /**\n     * The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n     */\n    color?: string;\n\n    /**\n     * The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n     */\n    fontFamily?: string;\n\n    /**\n     * The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n     */\n    fontSize?: string;\n\n    /**\n     * The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smoothing) CSS property.\n     */\n    fontSmoothing?: string;\n\n    /**\n     * The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n     */\n    fontStyle?: string;\n\n    /**\n     * The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n     */\n    fontVariant?: string;\n\n    /**\n     * The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n     */\n    fontWeight?: string;\n\n    /**\n     * A custom property, used to set the color of the icons that are rendered in an element.\n     */\n    iconColor?: string;\n\n    /**\n     * The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n     *\n     * To avoid cursors being rendered inconsistently across browsers, consider using a padding on the element's container instead.\n     */\n    lineHeight?: string;\n\n    /**\n     * The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n     *\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    textAlign?: string;\n\n    /**\n     * The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n     *\n     * Available for the `idealBank` element.\n     * Accepts integer `px` values.\n     */\n    padding?: string;\n\n    /**\n     * The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n     */\n    textDecoration?: string;\n\n    /**\n     * The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n     */\n    textShadow?: string;\n\n    /**\n     * The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n     */\n    textTransform?: string;\n}\n\ninterface StripeElementStyleVariant extends StripeElementCSSProperties {\n    ':hover'?: StripeElementCSSProperties;\n\n    ':focus'?: StripeElementCSSProperties;\n\n    '::placeholder'?: StripeElementCSSProperties;\n\n    '::selection'?: StripeElementCSSProperties;\n\n    ':-webkit-autofill'?: StripeElementCSSProperties;\n\n    /**\n     * Available for all elements except the `paymentRequestButton` element\n     */\n    ':disabled'?: StripeElementCSSProperties;\n\n    /**\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    '::-ms-clear'?: StripeElementCSSProperties & { display: string };\n}\n\nexport interface CardElementOptions extends BaseElementOptions {\n    /**\n     * A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}).\n     * Note that sensitive card information (card number, CVC, and expiration date)\n     * cannot be pre-filled\n     */\n    value?: string;\n\n    /**\n     * Hide the postal code field. Default is false. If you are already collecting a\n     * full billing address or postal code elsewhere, set this to true.\n     */\n    hidePostalCode?: boolean;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n\n    /*\n     * Hides the icon in the Element, Default is false\n     */\n    hideIcon?: boolean;\n}\n\ninterface BaseIndividualElementOptions extends BaseElementOptions {\n    containerId: string;\n}\n\nexport interface CardNumberElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n\n    showIcon?: boolean;\n    /**\n     * Appearance of the icon in the Element. Either `solid` or `default`\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface CardExpiryElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface CardCvcElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface IbanElementOptions extends BaseElementOptions {\n    /**\n     * Specify the list of countries or country-groups whose IBANs you want to allow.\n     * Must be ['SEPA'].\n     */\n    supportedCountries?: string[];\n\n    /**\n     * Customize the country and format of the placeholder IBAN. Default is DE.\n     */\n    placeholderCountry?: string;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IdealElementOptions extends BaseElementOptions {\n    value?: string;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n}\n\nexport interface ZipCodeElementOptions {\n    containerId: string;\n}\n\nexport enum IconStyle {\n    Solid = 'solid',\n    Default = 'default',\n}\n\nexport interface StripeElementStyle {\n    /**\n     * Base variant—all other variants inherit from these styles.\n     */\n    base?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has valid input.\n     */\n    complete?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has no customer input.\n     */\n    empty?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has invalid input.\n     */\n    invalid?: StripeElementStyleVariant;\n}\n\nexport interface StripeElementClasses {\n    /**\n     * The base class applied to the container. Defaults to StripeElement.\n     */\n    base?: string;\n\n    /**\n     * The class name to apply when the Element is complete. Defaults to StripeElement--complete.\n     */\n    complete?: string;\n\n    /**\n     * The class name to apply when the Element is empty. Defaults to StripeElement--empty.\n     */\n    empty?: string;\n\n    /**\n     * The class name to apply when the Element is focused. Defaults to StripeElement--focus.\n     */\n    focus?: string;\n\n    /**\n     * The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.\n     */\n    invalid?: string;\n\n    /**\n     * The class name to apply when the Element has its value autofilled by the browser\n     * (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.\n     */\n    webkitAutoFill?: string;\n}\n\nexport interface StripeAddress {\n    /**\n     * City, district, suburb, town, or village.\n     */\n    city?: string;\n\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     */\n    country?: string;\n\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     */\n    line1: string;\n\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     */\n    line2?: string;\n\n    /**\n     * ZIP or postal code.\n     */\n    postal_code?: string;\n\n    /**\n     * State, county, province, or region.\n     */\n    state?: string;\n}\n\nexport interface StripeBillingDetails {\n    /**\n     * Billing address.\n     */\n    address?: StripeAddress;\n\n    /**\n     * Email address.\n     */\n    email?: string;\n\n    /**\n     * Full name.\n     */\n    name?: string;\n\n    /**\n     * Billing phone number (including extension).\n     */\n    phone?: string;\n}\n\nexport interface StripeShippingAddress {\n    /**\n     * Shipping Address\n     */\n    address: StripeAddress;\n\n    /**\n     * Recipient name\n     */\n    name: string;\n\n    /**\n     * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.\n     */\n    carrier?: string;\n\n    /**\n     * Recipient phone (including extension).\n     */\n    phone?: string;\n\n    /**\n     * The tracking number for a physical product, obtained from the delivery service.\n     * If multiple tracking numbers were generated for this purchase, please separate them with commas.\n     */\n    tracking_number?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmAlipayPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmAlipayPaymentData {\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmCardPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmCardPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodCardData;\n\n    /**\n     * The [shipping details](https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n     *\n     * @recommended\n     */\n    shipping?: StripeShippingAddress;\n\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n\n    /**\n     * Indicates that you intend to make future payments with this PaymentIntent's payment method.\n     *\n     * If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n     *\n     * Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n     */\n    setup_future_usage?: 'off_session' | 'on_session' | null;\n}\n\n/**\n * Data to be sent with a `stripe.confirmIdealPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmIdealPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodIdealData;\n\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmSEPAPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmSepaPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodSepaData;\n}\n\nexport type StripeConfirmPaymentData =\n    | StripeConfirmAlipayPaymentData\n    | StripeConfirmCardPaymentData\n    | StripeConfirmIdealPaymentData\n    | StripeConfirmSepaPaymentData\n    | undefined;\n\nexport type StripeElementOptions =\n    | CardElementOptions\n    | CardExpiryElementOptions\n    | CardNumberElementOptions\n    | CardCvcElementOptions\n    | IdealElementOptions\n    | IbanElementOptions\n    | ZipCodeElementOptions;\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates a `AlipayElement` | `CardElement` | `CardCvcElement` |`CardExpiryElement` | `CardExpiryElement` | `CardNumberElement` | `IdealBankElement` | `IbanElement`.\n     */\n    create(elementType: StripeElementType, options?: StripeElementOptions): StripeElement;\n\n    /**\n     * Looks up a previously created `Element` by its type.\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type CustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n}\n\nexport interface StripeConfirmPaymentOptions {\n    /**\n     * Set this to false if you want to [manually handle the authorization redirect](https://stripe.com/docs/payments/ideal#handle-redirect). Default is true.\n     */\n    handleActions?: boolean;\n}\n\nexport interface StripeV3Client {\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options?: StripeElementsOptions): StripeElements;\n\n    /**\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_alipay_payment\n     *\n     * Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents) with data you provide, and it will automatically\n     * redirect the customer to the authorize the transaction. Once authorization is complete, the customer will be redirected\n     * back to your specified `return_url`. When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * If you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmAlipayPayment` by default, will trigger a redirect when successful. If there is an error, or when handling\n     * `next_actions` manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmAlipayPayment` may take several seconds to complete. During that time, you should disable your\n     * form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should\n     * be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmAlipayPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmAlipayPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /**\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_card_payment\n     *\n     * Use `stripe.confirmCardPayment` when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents)\n     * with `data` you provide and carry out 3DS or other next actions if they are required.\n     *\n     * If you are using [Dynamic 3D Secure](https://stripe.com/docs/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will\n     * trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmCardPayment` will return a Promise which resolves with a result object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     *\n     * Additionally, `stripe.confirmCardPayment may trigger` a [3D Secure](https://stripe.com/docs/payments/3d-secure) authentication\n     * challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like\n     * screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out\n     * after this method completes.\n     *\n     */\n    confirmCardPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmCardPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /**\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_ideal_payment\n     *\n     * Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](https://stripe.com/docs/payments/ideal)\n     * flow when the customer submits your payment form. When called, it will confirm the `PaymentIntent` with `data` you\n     * provide, and it will automatically redirect the customer to the authorize the transaction.\n     * Once authorization is complete, the customer will be redirected back to your specified `return_url`.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * By default, `stripe.confirmIdealPayment` will trigger a redirect when successful. If there is an error, or when handling\n     * next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result`\n     * object. This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmIdealPayment` may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmIdealPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmIdealPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /**\n     *\n     * Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](https://stripe.com/docs/payments/sepa-debit)\n     * with Payment Methods flow when the customer submits your payment form. When called, it will confirm the\n     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) with `data` you provide. Note that there are some additional\n     * requirements to this flow that are not covered in this reference. Refer to our [integration guide](https://stripe.com/docs/payments/sepa-debit\n     * for more details.\n     *\n     * When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent,\n     * this method can automatically create and attach a new PaymentMethod for you. If you have already attached a\n     * [PaymentMethod](https://stripe.com/docs/api/payment_methods) you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_sepa_debit_payment\n     */\n    confirmSepaDebitPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n         */\n        data?: StripeConfirmSepaPaymentData,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /**\n     * Use stripe.createPaymentMethod to convert payment information collected by elements into a PaymentMethod\n     * object that you safely pass to your server to use in an API call.\n     *\n     * @docs https://stripe.com/docs/js/payment_methods/create_payment_method\n     *\n     * @param type: String, The type of the PaymentMethod to create. Refer to the PaymentMethod API for all possible values.\n     * @param card: StripeElement, A card or cardNumber Element.\n     * @param billing_details: StripeBillingDetails, Billing information associated with the PaymentMethod that\n     * may be used or required by particular types of payment methods.\n     */\n    createPaymentMethod(\n        params: CreatePaymentMethodParams,\n    ): Promise<{ paymentMethod?: PaymentMethod; error?: StripeError }>;\n\n    /**\n     * Use stripe.handleCardAction in the Payment Intents API manual confirmation flow to handle a PaymentIntent\n     * with the requires_action status. It will throw an error if the PaymentIntent has a different status.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/handle_card_action\n     *\n     * @param paymentIntentClientSecret: String, The client secret of the PaymentIntent to handle.\n     */\n    handleCardAction(\n        paymentIntentClientSecret: string,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n}\n\nexport interface CreatePaymentMethodParams {\n    type: StripePaymentMethodType;\n    card: StripeElement;\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeHostWindow extends Window {\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeV3Client;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    CreditCard = 'card',\n    IDEAL = 'idealBank',\n    Sepa = 'iban',\n}\n\nexport enum StripePaymentMethodType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    IDEAL = 'ideal',\n    Sepa = 'sepa_debit',\n}\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\nexport interface StripeCardElements {\n    [index: number]: StripeElement;\n}\n\nexport interface IndividualCardElementOptions {\n    cardCvcElementOptions: CardCvcElementOptions;\n    cardExpiryElementOptions: CardExpiryElementOptions;\n    cardNumberElementOptions: CardNumberElementOptions;\n    zipCodeElementOptions?: ZipCodeElementOptions;\n}\n\nexport default function isIndividualCardElementOptions(\n    individualCardElementOptions: unknown,\n): individualCardElementOptions is IndividualCardElementOptions {\n    return (\n        Boolean(\n            (individualCardElementOptions as IndividualCardElementOptions).cardNumberElementOptions,\n        ) &&\n        Boolean(\n            (individualCardElementOptions as IndividualCardElementOptions).cardCvcElementOptions,\n        ) &&\n        Boolean(\n            (individualCardElementOptions as IndividualCardElementOptions).cardExpiryElementOptions,\n        )\n    );\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport enum StripeV3ErrorType {\n    AuthFailure = 'auth_failure',\n}\n\nexport default class StripeV3Error extends StandardError {\n    subtype: string;\n\n    constructor(subtype: StripeV3ErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'stripev3_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: StripeV3ErrorType) {\n    switch (type) {\n        case StripeV3ErrorType.AuthFailure:\n            return `User did not authenticate`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { includes, isEmpty, omitBy, some } from 'lodash';\n\nimport { isHostedInstrumentLike, Payment } from '../..';\nimport { Address } from '../../../address';\nimport { BillingAddress, isBillingAddressLike } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { HostedForm, HostedFormFactory, HostedFormOptions } from '../../../hosted-form';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { StripeV3FormattedPayload } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport isIndividualCardElementOptions, {\n    PaymentIntent,\n    StripeAdditionalAction,\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElements,\n    StripeConfirmIdealPaymentData,\n    StripeConfirmPaymentData,\n    StripeConfirmSepaPaymentData,\n    StripeElement,\n    StripeElementOptions,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    PaymentMethod as StripePaymentMethod,\n    StripePaymentMethodType,\n    StripeV3Client,\n} from './stripev3';\nimport StripeV3Error, { StripeV3ErrorType } from './stripev3-error';\nimport StripeV3PaymentInitializeOptions from './stripev3-initialize-options';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst APM_REDIRECT = [StripeElementType.Alipay, StripeElementType.IDEAL];\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: StripeV3PaymentInitializeOptions;\n    private _stripeV3Client?: StripeV3Client;\n    private _stripeElements?: StripeElements;\n    private _stripeElement?: StripeElement;\n    private _stripeCardElements?: StripeCardElements;\n    private _useIndividualCardFields?: boolean;\n    private _hostedForm?: HostedForm;\n    private _isDeinitialize?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _locale: string,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { stripev3, methodId, gatewayId } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this._initializeOptions = stripev3;\n        this._isDeinitialize = false;\n\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId);\n        const {\n            initializationData: {\n                stripePublishableKey,\n                stripeConnectedAccount,\n                useIndividualCardFields,\n            },\n        } = paymentMethod;\n        const form = this._getInitializeOptions().form;\n\n        this._useIndividualCardFields = useIndividualCardFields;\n\n        if (\n            this._isCreditCard(methodId) &&\n            this._shouldShowTSVHostedForm(methodId, gatewayId) &&\n            form\n        ) {\n            this._hostedForm = await this._mountCardVerificationFields(form);\n        } else {\n            this._stripeV3Client = await this._loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n            this._stripeElement = await this._mountCardFields(methodId);\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n        let formattedPayload: StripeV3FormattedPayload;\n        let stripeError: StripeError | undefined;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, gatewayId, methodId } = payment;\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n        const shouldSubmitOrderBeforeLoadingAPM = includes(APM_REDIRECT, methodId);\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        try {\n            if (shouldSubmitOrderBeforeLoadingAPM) {\n                await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n            }\n\n            const state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(`${gatewayId}`, {\n                    params: { method: methodId },\n                }),\n            );\n\n            if (isVaultedInstrument(paymentData)) {\n                await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n                const { instrumentId } = paymentData;\n                const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(\n                    payment.methodId,\n                );\n                const clientToken = paymentMethod.clientToken;\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return await this._executeWithVaulted(\n                    payment,\n                    instrumentId,\n                    shouldSetAsDefaultInstrument,\n                    clientToken,\n                );\n            }\n\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            const result = await this._confirmStripePayment(paymentMethod);\n            const { clientToken, method } = paymentMethod;\n            const { id: token } = result.paymentIntent ?? result.paymentMethod ?? { id: '' };\n\n            stripeError = result.error;\n\n            formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: false,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            };\n\n            if (method === StripeElementType.CreditCard) {\n                formattedPayload.client_token = clientToken;\n            }\n\n            if (!shouldSubmitOrderBeforeLoadingAPM) {\n                await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n            }\n\n            const paymentPayload = this._buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            return await this._processAdditionalAction(\n                this._handleEmptyPaymentIntentError(error, stripeError),\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        this._isDeinitialize = true;\n        this._unmountElement();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _buildPaymentPayload(\n        methodId: string,\n        formattedPayload: StripeV3FormattedPayload,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n    ): Payment {\n        const paymentData = shouldSetAsDefaultInstrument\n            ? {\n                  formattedPayload: {\n                      ...formattedPayload,\n                      set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                  },\n              }\n            : { formattedPayload };\n\n        return { methodId, paymentData };\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _isAuthError(stripeError: StripeError | undefined) {\n        return stripeError?.code === 'payment_intent_authentication_failure';\n    }\n\n    private _isCreditCard(methodId: string): boolean {\n        return methodId === StripePaymentMethodType.CreditCard;\n    }\n\n    private _isHostedFieldAvailable(): boolean {\n        const options = this._getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private _isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private async _confirmStripePayment(paymentMethod: PaymentMethod): Promise<{\n        paymentIntent?: PaymentIntent | undefined;\n        paymentMethod?: StripePaymentMethod | undefined;\n        error?: StripeError | undefined;\n    }> {\n        const { clientToken: clientSecret, method, returnUrl } = paymentMethod;\n\n        if (!clientSecret) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        switch (method) {\n            case StripeElementType.Alipay:\n                return this._getStripeJs().confirmAlipayPayment(\n                    clientSecret,\n                    { return_url: returnUrl },\n                    { handleActions: false },\n                );\n\n            case StripeElementType.IDEAL: {\n                const data = this._mapStripePaymentData(StripePaymentMethodType.IDEAL, returnUrl);\n\n                return this._getStripeJs().confirmIdealPayment(clientSecret, data, {\n                    handleActions: false,\n                });\n            }\n\n            case StripeElementType.Sepa: {\n                const data = this._mapStripePaymentData(StripePaymentMethodType.Sepa);\n\n                return this._getStripeJs().confirmSepaDebitPayment(clientSecret, data);\n            }\n\n            default: {\n                const card = this._useIndividualCardFields\n                    ? this._getStripeCardElements()[0]\n                    : this._getStripeElement();\n                const billingDetails = this._mapStripeBillingDetails(\n                    this._store.getState().billingAddress.getBillingAddress(),\n                    this._store.getState().customer.getCustomer(),\n                );\n\n                return this._getStripeJs().createPaymentMethod({\n                    type: StripePaymentMethodType.CreditCard,\n                    card,\n                    billing_details: billingDetails,\n                });\n            }\n        }\n    }\n\n    private async _executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n        clientToken: string,\n    ): Promise<InternalCheckoutSelectors> {\n        const formattedPayload = {\n            bigpay_token: { token },\n            confirm: true,\n            client_token: clientToken,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            this._isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId) &&\n            this._hostedForm\n        ) {\n            const form = this._hostedForm;\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n        }\n\n        const paymentPayload = this._buildPaymentPayload(\n            payment.methodId,\n            formattedPayload,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _getInitializeOptions(): StripeV3PaymentInitializeOptions {\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._initializeOptions;\n    }\n\n    private _getStripeCardElements(): StripeCardElements {\n        if (!this._stripeCardElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeCardElements;\n    }\n\n    private _getStripeElement(): StripeElement {\n        if (!this._stripeElement) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeElement;\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _handleEmptyPaymentIntentError(error: Error, stripeError: StripeError | undefined) {\n        if (!(error instanceof RequestError)) {\n            return error;\n        }\n\n        return some(error.body.errors, { code: 'required_field' }) && stripeError\n            ? new Error(stripeError.message)\n            : error;\n    }\n\n    private async _loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeV3Client> {\n        if (this._stripeV3Client) {\n            return Promise.resolve(this._stripeV3Client);\n        }\n\n        return this._stripeScriptLoader.load(\n            stripePublishableKey,\n            stripeConnectedAccount,\n            this._locale,\n        );\n    }\n\n    private _mapStripeAddress(address?: Address): StripeAddress {\n        if (address) {\n            const {\n                city,\n                countryCode: country,\n                address1: line1,\n                address2: line2,\n                postalCode,\n                stateOrProvinceCode: state,\n            } = address;\n\n            return { city, country, line1, line2, postal_code: postalCode, state };\n        }\n\n        return { line1: '' };\n    }\n\n    private _mapStripeBillingDetails(\n        billingAddress?: BillingAddress,\n        customer?: Customer,\n    ): StripeBillingDetails {\n        const { firstName, lastName } = billingAddress ||\n            customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n        const { options } = this._getInitializeOptions();\n\n        if (this._useIndividualCardFields && isIndividualCardElementOptions(options)) {\n            const { zipCodeElementOptions } = options;\n\n            if (zipCodeElementOptions) {\n                const postalCode = document.getElementById(zipCodeElementOptions.containerId)\n                    ? (\n                          document.getElementById(\n                              zipCodeElementOptions.containerId,\n                          ) as HTMLInputElement\n                      ).value\n                    : '';\n\n                if (postalCode && billingAddress) {\n                    billingAddress = { ...billingAddress, postalCode };\n                }\n            }\n        }\n\n        const address = {\n            address: this._mapStripeAddress(billingAddress),\n        };\n\n        if (customer && customer.addresses[0] && isBillingAddressLike(customer.addresses[0])) {\n            const customerAddress = customer.addresses[0];\n            const { email } = customer;\n            const { phone } = customerAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        if (billingAddress) {\n            const { email, phone } = billingAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        return { ...address, name };\n    }\n\n    private _mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.IDEAL,\n        returnUrl?: string,\n    ): StripeConfirmIdealPaymentData;\n    private _mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.Sepa,\n    ): StripeConfirmSepaPaymentData;\n    private _mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType,\n        returnUrl?: string,\n    ): StripeConfirmPaymentData {\n        const customer = this._store.getState().customer.getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        const result: Partial<StripeConfirmPaymentData> = {\n            payment_method: {\n                [stripePaymentMethodType]: this._getStripeElement(),\n                billing_details: this._mapStripeBillingDetails(billingAddress, customer),\n            },\n        };\n\n        if (stripePaymentMethodType === StripePaymentMethodType.IDEAL) {\n            return { ...result, return_url: returnUrl };\n        }\n\n        return result;\n    }\n\n    private _mountCardFields(methodId: string): Promise<StripeElement> {\n        const { options, containerId } = this._getInitializeOptions();\n\n        let stripeElement: StripeElement;\n\n        return new Promise((resolve, reject) => {\n            if (!this._stripeElements) {\n                this._stripeElements = this._getStripeJs().elements();\n            }\n\n            switch (methodId) {\n                case StripeElementType.CreditCard:\n                    if (this._useIndividualCardFields && isIndividualCardElementOptions(options)) {\n                        const {\n                            cardNumberElementOptions,\n                            cardExpiryElementOptions,\n                            cardCvcElementOptions,\n                        } = options;\n\n                        const cardNumberElement =\n                            this._stripeElements.getElement(StripeElementType.CardNumber) ||\n                            this._stripeElements.create(\n                                StripeElementType.CardNumber,\n                                cardNumberElementOptions,\n                            );\n                        const cardExpiryElement =\n                            this._stripeElements.getElement(StripeElementType.CardExpiry) ||\n                            this._stripeElements.create(\n                                StripeElementType.CardExpiry,\n                                cardExpiryElementOptions,\n                            );\n                        const cardCvcElement =\n                            this._stripeElements.getElement(StripeElementType.CardCvc) ||\n                            this._stripeElements.create(\n                                StripeElementType.CardCvc,\n                                cardCvcElementOptions,\n                            );\n\n                        this._stripeCardElements = [\n                            cardNumberElement,\n                            cardExpiryElement,\n                            cardCvcElement,\n                        ];\n                        stripeElement = this._stripeCardElements[0];\n\n                        try {\n                            cardNumberElement.mount(`#${cardNumberElementOptions.containerId}`);\n                            cardExpiryElement.mount(`#${cardExpiryElementOptions.containerId}`);\n                            cardCvcElement.mount(`#${cardCvcElementOptions.containerId}`);\n                        } catch (error) {\n                            if (!this._isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    } else {\n                        stripeElement =\n                            this._stripeElements.getElement(methodId) ||\n                            this._stripeElements.create(methodId, options as StripeElementOptions);\n\n                        try {\n                            stripeElement.mount(`#${containerId}`);\n                        } catch (error) {\n                            if (!this._isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.IDEAL:\n                case StripeElementType.Sepa:\n                    stripeElement =\n                        this._stripeElements.getElement(methodId) ||\n                        this._stripeElements.create(methodId, options as StripeElementOptions);\n\n                    try {\n                        stripeElement.mount(`#${containerId}`);\n                    } catch (error) {\n                        if (!this._isDeinitialize) {\n                            reject(\n                                new InvalidArgumentError(\n                                    'Unable to mount Stripe component without valid container ID.',\n                                ),\n                            );\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.Alipay:\n                    break;\n            }\n\n            resolve(stripeElement);\n        });\n    }\n\n    private async _mountCardVerificationFields(\n        formOptions: HostedFormOptions,\n    ): Promise<HostedForm> {\n        const { config } = this._store.getState();\n        const storeConfig = config.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const bigpayBaseUrl = storeConfig.paymentSettings.bigpayBaseUrl;\n\n        const form = this._hostedFormFactory.create(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private async _processAdditionalAction(\n        error: Error,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<InternalCheckoutSelectors | never> {\n        if (!(error instanceof RequestError)) {\n            throw error;\n        }\n\n        const isAdditionalActionError = some(error.body.errors, {\n            code: 'additional_action_required',\n        });\n        const isThreeDSecureRequiredError = some(error.body.errors, {\n            code: 'three_d_secure_required',\n        });\n\n        if (isAdditionalActionError) {\n            const action: StripeAdditionalAction = error.body.additional_action_required;\n\n            if (action && action.type === 'redirect_to_url') {\n                return new Promise(() => {\n                    if (action.data.redirect_url) {\n                        window.location.replace(action.data.redirect_url);\n                    }\n                });\n            }\n        }\n\n        if (isThreeDSecureRequiredError) {\n            const clientSecret = error.body.three_ds_result.token;\n            const needsConfirm = false;\n            let catchedConfirmError = false;\n            let result;\n\n            try {\n                result = await this._getStripeJs().confirmCardPayment(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n\n            if (result?.error) {\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                if (this._isAuthError(result.error)) {\n                    throw new StripeV3Error(StripeV3ErrorType.AuthFailure);\n                }\n\n                throw new Error(result.error.message);\n            }\n\n            const token = this._getPaymentToken(\n                result?.paymentIntent,\n                clientSecret,\n                catchedConfirmError,\n            );\n\n            const formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: needsConfirm,\n            };\n\n            const paymentPayload = this._buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            try {\n                return await this._store.dispatch(\n                    this._paymentActionCreator.submitPayment(paymentPayload),\n                );\n            } catch (error) {\n                throw this._handleEmptyPaymentIntentError(error, result?.error);\n            }\n        }\n\n        throw error;\n    }\n\n    private _getPaymentToken(\n        paymentIntent: PaymentIntent | undefined,\n        clientSecret: string,\n        catchedConfirmError: boolean,\n    ): string {\n        if (!paymentIntent || catchedConfirmError) {\n            return clientSecret;\n        }\n\n        return paymentIntent.id;\n    }\n\n    private _shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this._isHostedFieldAvailable() && this._isHostedPaymentFormEnabled(methodId, gatewayId)\n        );\n    }\n\n    private _unmountElement(): void {\n        if (this._stripeElement) {\n            this._stripeElement.unmount();\n            this._stripeElement = undefined;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: StripeHostWindow = window) {}\n\n    load(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeV3Client> {\n        return this._scriptLoader.loadScript('https://js.stripe.com/v3/').then(() => {\n            if (!this._window.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: ['payment_intent_beta_3', 'alipay_pm_beta_1'],\n                apiVersion: '2020-03-02;alipay_beta=v1',\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => (this._riskClient = (window as unknown as WepayWindow).WePay.risk))\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _wepayRiskClient: WepayRiskClient,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        void this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { PaymentInitializeOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport {\n    WorldpayAccess3DSOptions,\n    WorldpayAccessAdditionalAction,\n    WorldpayAccessPaymentInitializeOptions,\n} from './worldpayaccess-payment-options';\n\nconst IFRAME_NAME = 'worldpay_hosted_payment_page';\nconst IFRAME_HIDDEN_NAME = 'worldpay_hosted_hidden_payment_page';\nconst PAYMENT_CANNOT_CONTINUE = 'Payment cannot continue';\n\nlet submit: (paymentPayload: OrderPaymentRequestBody) => Promise<InternalCheckoutSelectors>;\n\nexport default class WorldpayaccessPaymetStrategy extends CreditCardPaymentStrategy {\n    private _initializeOptions?: WorldpayAccessPaymentInitializeOptions;\n\n    async initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options && options.worldpay;\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return super.initialize(options);\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        submit = this._submitAdditionalAction();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            return await super.execute(orderRequest, options);\n        } catch (error) {\n            return await this._processAdditionalAction(error, payment);\n        }\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        return new Promise((resolve, reject) => {\n            const messageEvent = async (event: MessageEvent) => {\n                if (typeof event.data !== 'string' || !this._isValidJsonWithSessionId(event.data)) {\n                    return reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                }\n\n                window.removeEventListener('message', messageEvent);\n                window.removeEventListener('remove_event_message', removeEvent);\n                iframeHidden.remove();\n\n                const data = JSON.parse(event.data);\n                const paymentPayload = merge({}, payment, {\n                    paymentData: { threeDSecure: { token: data.SessionId } },\n                });\n\n                try {\n                    resolve(await submit(paymentPayload));\n                } catch (error) {\n                    if (\n                        !(error instanceof RequestError) ||\n                        !some(error.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        return reject(error);\n                    }\n\n                    if (!this._initializeOptions) {\n                        return reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    const { onLoad } = this._initializeOptions;\n                    const frame = this._createIframe(error.body.three_ds_result);\n\n                    try {\n                        onLoad(frame, () => reject(new Error('Payment was cancelled')));\n                    } catch (e) {\n                        reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                    }\n                }\n            };\n\n            const removeEvent = () => {\n                window.removeEventListener('remove_event_message', removeEvent);\n                window.removeEventListener('message', messageEvent);\n                iframeHidden.remove();\n\n                return reject(new Error(PAYMENT_CANNOT_CONTINUE));\n            };\n\n            window.addEventListener('message', messageEvent);\n            window.addEventListener('remove_event_message', removeEvent);\n\n            let iframeHidden: HTMLIFrameElement;\n\n            try {\n                iframeHidden = this._createHiddenIframe(error.body);\n            } catch (e) {\n                window.removeEventListener('remove_event_message', removeEvent);\n                window.removeEventListener('message', messageEvent);\n                throw new Error(PAYMENT_CANNOT_CONTINUE);\n            }\n        });\n    }\n\n    private _createHiddenIframe(body: WorldpayAccessAdditionalAction): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        if (!iframe) {\n            throw new Error();\n        }\n\n        document.body.appendChild(iframe);\n\n        if (!iframe.contentWindow) {\n            throw new Error();\n        }\n\n        iframe.id = IFRAME_HIDDEN_NAME;\n        iframe.height = '0px';\n        iframe.width = '0px';\n\n        const form = document.createElement('form');\n        const formId = 'collectionForm';\n\n        form.id = formId;\n        form.name = 'devicedata';\n        form.method = 'post';\n\n        const url = body.additional_action_required.data.redirect_url;\n\n        form.action = url;\n\n        const inputBin = document.createElement('input');\n\n        inputBin.name = 'Bin';\n        inputBin.type = 'hidden';\n        inputBin.value = body.provider_data.source_id;\n        form.appendChild(inputBin);\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = body.provider_data.data;\n        form.appendChild(inputJWT);\n\n        const button = document.createElement('button');\n\n        button.type = 'submit';\n        button.id = 'btnsubmit';\n        form.appendChild(button);\n\n        if (navigator.userAgent.match('Firefox')) {\n            iframe.srcdoc = form.outerHTML;\n        } else {\n            iframe.contentWindow.document.body.appendChild(form);\n        }\n\n        const script = document.createElement('script');\n\n        script.innerHTML = `\n            const data = new URLSearchParams()\n            data.append('Bin', '${body.provider_data.source_id}');\n            data.append('JWT', '${body.provider_data.data}');\n\n            window.parent.fetch('${url}', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                body: data\n            })\n            .then((response) => {\n                if (!response.ok) {\n                    window.parent.dispatchEvent(new Event('remove_event_message'));\n                } else {\n                    document.getElementById('${formId}').submit();\n                }\n            })\n            .catch((error) =>  {\n                window.parent.dispatchEvent(new Event('remove_event_message'));\n            })\n        `;\n        iframe.contentWindow.document.body.appendChild(script);\n\n        return iframe;\n    }\n\n    private _createIframe(data: WorldpayAccess3DSOptions): HTMLIFrameElement {\n        const form = document.createElement('form');\n\n        form.id = 'challengeForm';\n        form.method = 'POST';\n        form.action = data.acs_url;\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = data.payer_auth_request;\n        form.appendChild(inputJWT);\n\n        const merchant = document.createElement('input');\n\n        merchant.name = 'MD';\n        merchant.type = 'hidden';\n        merchant.value = `merchantSessionId=${data.merchant_data}`;\n        form.appendChild(merchant);\n\n        const script = document.createElement('script');\n\n        script.type = 'text/javascript';\n        script.innerHTML =\n            \"window.onload = function() { document.getElementById('challengeForm').submit(); }\";\n\n        const iframe = document.createElement('iframe');\n\n        iframe.name = IFRAME_NAME;\n        iframe.height = '400';\n        iframe.width = '100%';\n        iframe.srcdoc = `${form.outerHTML} ${script.outerHTML}`;\n\n        return iframe;\n    }\n\n    private _submitAdditionalAction() {\n        if (this._shouldRenderHostedForm) {\n            if (!this._hostedForm || !this._hostedForm.submit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const hostedForm = this._hostedForm;\n\n            return async (paymentPayload: OrderPaymentRequestBody) => {\n                await hostedForm.submit(paymentPayload);\n\n                return this._store.getState();\n            };\n        }\n\n        return async (paymentPayload: OrderPaymentRequestBody) => {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        };\n    }\n\n    private _isValidJsonWithSessionId(str: string) {\n        try {\n            const data = JSON.parse(str);\n\n            if (data.SessionId) {\n                return true;\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport StorefrontPaymentRequestSender from '../../storefront-payment-request-sender';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n        const { clientToken, initializationData: { redirectUrl } = {} } =\n            getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, { useStoreCredit }),\n        );\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({ methodId, paymentData: { nonce } }),\n            );\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this._storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport {\n    DeleteInstrumentAction,\n    InstrumentActionType,\n    LoadInstrumentsAction,\n} from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(private _instrumentRequestSender: InstrumentRequestSender) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n                observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n                const session = this._getSessionContext(store);\n                const token = this._getCurrentAccessToken(store);\n                const shippingAddress = this._getShippingAddress(store);\n\n                return this._getValidAccessToken(token)\n                    .then((currentToken) =>\n                        this._instrumentRequestSender\n                            .loadInstruments(\n                                {\n                                    ...session,\n                                    authToken: currentToken.vaultAccessToken,\n                                },\n                                shippingAddress,\n                            )\n                            .then(({ body }) => {\n                                observer.next(\n                                    createAction(\n                                        InstrumentActionType.LoadInstrumentsSucceeded,\n                                        body,\n                                        currentToken,\n                                    ),\n                                );\n                                observer.complete();\n                            }),\n                    )\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response),\n                        );\n                    });\n            });\n    }\n\n    deleteInstrument(\n        instrumentId: string,\n    ): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n                observer.next(\n                    createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, {\n                        instrumentId,\n                    }),\n                );\n\n                const session = this._getSessionContext(store);\n                const token = this._getCurrentAccessToken(store);\n\n                return this._getValidAccessToken(token)\n                    .then((currentToken) =>\n                        this._instrumentRequestSender\n                            .deleteInstrument(\n                                {\n                                    ...session,\n                                    authToken: currentToken.vaultAccessToken,\n                                },\n                                instrumentId,\n                            )\n                            .then(({ body }) => {\n                                observer.next(\n                                    createAction(\n                                        InstrumentActionType.DeleteInstrumentSucceeded,\n                                        body,\n                                        {\n                                            instrumentId,\n                                            ...currentToken,\n                                        },\n                                    ),\n                                );\n                                observer.complete();\n                            }),\n                    )\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                InstrumentActionType.DeleteInstrumentFailed,\n                                response,\n                                { instrumentId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | Address[] | undefined {\n        const state = store.getState();\n        const addresses = state.shippingAddress.getShippingAddresses();\n\n        return addresses.length > 1 ? addresses : state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional\n            ? config.shopperCurrency\n            : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport {\n    BankInternalInstrument,\n    InstrumentErrorResponseBody,\n    InstrumentsResponseBody,\n    InternalInstrument,\n    InternalInstrumentErrorResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalVaultAccessTokenResponseBody,\n    PayPalInternalInstrument,\n} from './instrument-response-body';\nimport { mapToBankInstrument } from './map-to-bank-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\nimport { mapToPayPalInstrument } from './map-to-paypal-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>,\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>,\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>,\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(\n        vaultedInstruments: InternalInstrument[] = [],\n    ): PaymentInstrument[] {\n        return vaultedInstruments.map((instrument) => {\n            if (this._isPayPalInstrument(instrument)) {\n                return mapToPayPalInstrument(instrument);\n            }\n\n            if (this._isBankInstrument(instrument)) {\n                return mapToBankInstrument(instrument);\n            }\n\n            return mapToCardInstrument(instrument);\n        });\n    }\n\n    private _isPayPalInstrument(\n        instrument: InternalInstrument,\n    ): instrument is PayPalInternalInstrument {\n        return instrument.method_type === 'paypal';\n    }\n\n    private _isBankInstrument(\n        instrument: InternalInstrument,\n    ): instrument is BankInternalInstrument {\n        return instrument.method_type === 'bank';\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { PayPalInstrument } from './instrument';\nimport { PayPalInternalInstrument } from './instrument-response-body';\n\nexport function mapToPayPalInstrument(instrument: PayPalInternalInstrument): PayPalInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: 'paypal',\n        type: 'account',\n    };\n}\n","import { BankInstrument } from './instrument';\nimport { BankInternalInstrument } from './instrument-response-body';\n\nexport function mapToBankInstrument(instrument: BankInternalInstrument): BankInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        accountNumber: instrument.account_number,\n        issuer: instrument.issuer,\n        iban: instrument.iban,\n        method: instrument.method,\n        type: 'bank',\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: instrument.method,\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Address, mapToInternalAddress } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(private _client: any, private _requestSender: RequestSender) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender\n            .get<InternalVaultAccessTokenResponseBody>(url, { timeout })\n            .then((response) => ({\n                ...response,\n                body: {\n                    vaultAccessToken: response.body.data.token,\n                    vaultAccessExpiry: response.body.data.expires_at,\n                },\n            }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address | Address[],\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return shippingAddress\n            ? this._loadInstrumentsWithAddress(requestContext, shippingAddress)\n            : this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string,\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload,\n                (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>,\n                ) =>\n                    errorResponse\n                        ? reject(this._transformer.transformErrorResponse(errorResponse))\n                        : resolve(this._transformer.transformResponse(response)),\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext,\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext,\n                (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>,\n                ) =>\n                    errorResponse\n                        ? reject(this._transformer.transformErrorResponse(errorResponse))\n                        : resolve(this._transformer.transformResponse(response)),\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address | Address[],\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: Array.isArray(shippingAddress)\n                ? shippingAddress.map((address) => mapToInternalAddress(address))\n                : mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload,\n                (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>,\n                ) =>\n                    errorResponse\n                        ? reject(this._transformer.transformErrorResponse(errorResponse))\n                        : resolve(this._transformer.transformResponse(response)),\n            );\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import {\n    createAction,\n    createErrorAction,\n    ReadableDataStore,\n    ThunkAction,\n} from '@bigcommerce/data-store';\nimport { includes } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { LineItem } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { PickupOptionAPIRequestBody, PickupOptionRequestBody } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionRequestSender from './pickup-option-request-sender';\n\nexport default class PickupOptionActionCreator {\n    constructor(private _pickupOptionRequestSender: PickupOptionRequestSender) {}\n\n    loadPickupOptions(\n        query: PickupOptionRequestBody,\n    ): ThunkAction<LoadPickupOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPickupOptionsAction>) => {\n                const apiQuery = this._hydrateApiQuery(store, query);\n\n                observer.next(createAction(PickupOptionActionType.LoadPickupOptionsRequested));\n\n                this._pickupOptionRequestSender\n                    .fetchPickupOptions(apiQuery)\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PickupOptionActionType.LoadPickupOptionsSucceeded,\n                                response.body.results,\n                                query,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PickupOptionActionType.LoadPickupOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _hydrateApiQuery(\n        store: ReadableDataStore<InternalCheckoutSelectors>,\n        query: PickupOptionRequestBody,\n    ): PickupOptionAPIRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const consignment = state.consignments.getConsignmentById(query.consignmentId);\n\n        if (!consignment) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        const consignmentLineItems = consignment.lineItemIds;\n        const physicalItems = cart.lineItems.physicalItems;\n        const cartItems = physicalItems\n            .filter((item: LineItem) => includes(consignmentLineItems, item.id))\n            .map((item) => ({\n                variantId: item.variantId,\n                quantity: item.quantity,\n            }));\n\n        return {\n            searchArea: query.searchArea,\n            items: cartItems,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { PickupOptionAPIRequestBody, PickupOptionResponse } from './pickup-option';\n\nconst url = '/api/storefront/pickup-options';\n\nexport default class PickupOptionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    fetchPickupOptions(query: PickupOptionAPIRequestBody): Promise<Response<PickupOptionResponse>> {\n        return this._requestSender.post(url, {\n            headers: { Accept: ContentType.Json, ...SDK_VERSION_HEADERS },\n            body: query,\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(private _shippingCountryRequestSender: ShippingCountryRequestSender) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender\n                .loadCountries(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(\n                            ShippingCountryActionType.LoadShippingCountriesSucceeded,\n                            response.body.data,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingCountryActionType.LoadShippingCountriesFailed,\n                            response,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyAction,\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(private _strategyRegistry: Registry<ShippingStrategy>) {}\n\n    updateAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions,\n    ): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n                const payment = store.getState().payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .updateAddress(address, { ...options, methodId })\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.UpdateAddressSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                ShippingStrategyActionType.UpdateAddressFailed,\n                                error,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    selectOption(\n        shippingOptionId: string,\n        options?: ShippingRequestOptions,\n    ): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n                const payment = store.getState().payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .selectOption(shippingOptionId, { ...options, methodId })\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.SelectOptionSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                ShippingStrategyActionType.SelectOptionFailed,\n                                error,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    initialize(\n        options?: ShippingInitializeOptions,\n    ): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n                const mergedOptions = { ...options, methodId };\n\n                if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.InitializeRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .initialize(mergedOptions)\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.InitializeSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(ShippingStrategyActionType.InitializeFailed, error, {\n                                methodId,\n                            }),\n                        );\n                    });\n            });\n    }\n\n    deinitialize(\n        options?: ShippingRequestOptions,\n    ): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n\n                if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .deinitialize({ ...options, methodId })\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.DeinitializeSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                ShippingStrategyActionType.DeinitializeFailed,\n                                error,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    widgetInteraction(\n        method: () => Promise<any>,\n        options?: ShippingRequestOptions,\n    ): Observable<ShippingStrategyAction> {\n        return Observable.create((observer: Observer<ShippingStrategyAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(ShippingStrategyActionType.WidgetInteractionStarted, undefined, meta),\n            );\n\n            method()\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            ShippingStrategyActionType.WidgetInteractionFinished,\n                            undefined,\n                            meta,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingStrategyActionType.WidgetInteractionFailed,\n                            error,\n                            meta,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { noop } from 'rxjs';\n\nimport { ConsignmentActionCreator, ShippingStrategyActionCreator } from '../..';\nimport { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2PaymentProcessor,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class AmazonPayV2ShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const updateAddressRequestBody = {\n            ...shippingAddress,\n            customFields: address.customFields,\n        };\n\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(updateAddressRequestBody, options),\n        );\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazonpay, methodId } = options;\n\n        if (!amazonpay || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.amazonpay\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        const { paymentToken, region } = paymentMethod.initializationData;\n        const buttonId = amazonpay.editAddressButtonId;\n\n        if (paymentToken && buttonId) {\n            const shouldShowLoadingSpinner = this._shouldShowLoadingSpinner(region);\n\n            this._bindEditButton(buttonId, paymentToken, 'changeAddress', shouldShowLoadingSpinner);\n        }\n\n        return this._store.getState();\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _bindEditButton(\n        id: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        shouldShowLoadingSpinner: boolean,\n    ): void {\n        const button = document.getElementById(id);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (shouldShowLoadingSpinner) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => this._showLoadingSpinner());\n        }\n\n        this._amazonPayV2PaymentProcessor.bindButton(id, sessionId, changeAction);\n    }\n\n    private _showLoadingSpinner(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._shippingStrategyActionCreator.widgetInteraction(() => new Promise(noop)),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _shouldShowLoadingSpinner(region: string) {\n        return region !== 'us';\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._consignmentActionCreator.updateAddress(address, options));\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    StripeElements,\n    StripeElementType,\n    StripeEventType,\n    StripeScriptLoader,\n    StripeUPEAppearanceOptions,\n    StripeUPEClient,\n} from '../../../payment/strategies/stripe-upe';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class StripeUPEShippingStrategy implements ShippingStrategy {\n    private _stripeUPEClient?: StripeUPEClient;\n    private _stripeElements?: StripeElements;\n    private sendData?: ReturnType<typeof setTimeout>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _stripeUPEScriptLoader: StripeScriptLoader,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._consignmentActionCreator.updateAddress(address, options));\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const {\n            container,\n            gatewayId,\n            methodId,\n            onChangeShipping,\n            getStyles,\n            availableCountries,\n            getStripeState,\n        } = options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            }),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId, gatewayId);\n        const {\n            initializationData: { stripePublishableKey, stripeConnectedAccount },\n        } = paymentMethod;\n\n        if (\n            !paymentMethod ||\n            !paymentMethod.initializationData.stripePublishableKey ||\n            !paymentMethod.clientToken\n        ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._stripeUPEScriptLoader.getStripeClient(\n            stripePublishableKey,\n            stripeConnectedAccount,\n        );\n\n        let appearance: StripeUPEAppearanceOptions;\n        const styles = getStyles && getStyles();\n\n        if (styles) {\n            appearance = {\n                variables: {\n                    colorPrimary: styles.fieldInnerShadow,\n                    colorBackground: styles.fieldBackground,\n                    colorText: styles.labelText,\n                    colorDanger: styles.fieldErrorText,\n                    colorTextSecondary: styles.labelText,\n                    colorTextPlaceholder: styles.fieldPlaceholderText,\n                    spacingUnit: '4px',\n                    borderRadius: '4px',\n                },\n                rules: {\n                    '.Input': {\n                        borderColor: styles.fieldBorder,\n                        color: styles.fieldText,\n                        boxShadow: styles.fieldInnerShadow,\n                    },\n                },\n            };\n        } else {\n            appearance = {\n                variables: {\n                    spacingUnit: '4px',\n                    borderRadius: '4px',\n                },\n            };\n        }\n\n        this._stripeElements = this._stripeUPEScriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: paymentMethod.clientToken,\n            appearance,\n        });\n\n        const shipping = this._store.getState().shippingAddress.getShippingAddress();\n        const stripeState =\n            shipping?.stateOrProvinceCode && shipping.countryCode\n                ? getStripeState(shipping.countryCode, shipping.stateOrProvinceCode)\n                : shipping?.stateOrProvinceCode;\n        const option = {\n            allowedCountries: [availableCountries],\n            defaultValues: {\n                name: shipping?.lastName\n                    ? `${shipping.firstName} ${shipping.lastName}`\n                    : shipping?.firstName || '',\n                address: {\n                    line1: shipping?.address1 || '',\n                    line2: shipping?.address2 || '',\n                    city: shipping?.city || '',\n                    state: stripeState || '',\n                    postal_code: shipping?.postalCode || '',\n                    country: shipping?.countryCode || '',\n                },\n            },\n        };\n\n        let shippingAddressElement = this._stripeElements.getElement(StripeElementType.SHIPPING);\n\n        if (shippingAddressElement) {\n            shippingAddressElement.destroy();\n        }\n\n        shippingAddressElement = this._stripeElements.create(StripeElementType.SHIPPING, option);\n\n        shippingAddressElement.on('change', (event: StripeEventType) => {\n            if (!('isNewAddress' in event)) {\n                throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n            }\n\n            if (event.complete || event.isNewAddress) {\n                if (this.sendData) {\n                    clearTimeout(this.sendData);\n                }\n\n                this.sendData = setTimeout(() => {\n                    onChangeShipping(event);\n                }, 1000);\n            }\n        });\n\n        shippingAddressElement.mount(`#${container}`);\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._stripeElements?.getElement(StripeElementType.SHIPPING)?.unmount();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { SignInEmailRequestBody } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailRequestSender from './signin-email-request-sender';\n\nexport default class SignInEmailActionCreator {\n    constructor(private _requestSender: SignInEmailRequestSender) {}\n\n    sendSignInEmail(\n        emailRequest: SignInEmailRequestBody,\n        options?: RequestOptions,\n    ): Observable<SendSignInEmailAction> {\n        return concat(\n            of(createAction(SignInEmailActionType.SendSignInEmailRequested)),\n            defer(async () => {\n                const { body } = await this._requestSender.sendSignInEmail(emailRequest, options);\n\n                return createAction(SignInEmailActionType.SendSignInEmailSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(SignInEmailActionType.SendSignInEmailFailed, error),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { parseUrl } from '../common/url';\n\nimport { SignInEmail, SignInEmailRequestBody } from './signin-email';\n\nexport default class SignInEmailRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    sendSignInEmail(\n        { email, redirectUrl }: SignInEmailRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<SignInEmail>> {\n        const url = '/login.php?action=passwordless_login';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: {\n                email,\n                redirect_url: redirectUrl || parseUrl(window.top.location.href).pathname,\n            },\n            headers,\n            timeout,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(defaultMemoize, (a: any, b: any) =>\n    shallowEqual(a, b),\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(private _messageCustomizer: (type: TError) => string) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input\n        .split(/(?:\\r\\n|\\n|\\r)/)\n        .map((line) => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport {\n    CustomerAccountRequestBody,\n    CustomerActionCreator,\n    CustomerAddressRequestBody,\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    CustomerStrategyActionCreator,\n    ExecutePaymentMethodCheckoutOptions,\n    GuestCredentials,\n} from '../customer';\nimport { FormFieldsActionCreator } from '../form';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport {\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n    PickupOptionActionCreator,\n    PickupOptionRequestBody,\n    ShippingCountryActionCreator,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    ShippingStrategyActionCreator,\n} from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestBody } from '../signin-email';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\nimport { Subscriptions, SubscriptionsActionCreator } from '../subscription';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport {\n    CheckoutSelectorsFactory,\n    createCheckoutSelectorsFactory,\n} from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _pickupOptionActionCreator: PickupOptionActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _signInEmailActionCreator: SignInEmailActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _subscriptionsActionCreator: SubscriptionsActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(\n        id?: string,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors> {\n        return this._dispatch(\n            id\n                ? this._checkoutActionCreator.loadCheckout(id, options)\n                : this._checkoutActionCreator.loadDefaultCheckout(options),\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(\n        payload: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const formFieldsAction = this._formFieldsActionCreator.loadFormFields(options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n            this._dispatch(formFieldsAction, { queueId: 'formFields' }),\n        ]).then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, you can provide an element ID for\n     * Amazon Pay if you want users to be able to select a different payment\n     * method by clicking on the element.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazonpay',\n     *     amazonpay: {\n     *         editButtonId: 'edit-button',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazonpay',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a list of pickup options for a given criteria.\n     *\n     * ```js\n     * const consignmentId = '1';\n     * const searchArea = {\n     *     radius: {\n     *         value: 1.4,\n     *         unit: 'KM'\n     *     },\n     *     coordinates: {\n     *         latitude: 1.4,\n     *         longitude: 0\n     *     },\n     * };\n     * const state = await service.loadPickupOptions({ consignmentId, searchArea });\n     *\n     * console.log(state.data.getPickupOptions(consignmentId, searchArea));\n     * ```\n     *\n     * @alpha\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPickupOptions(query: PickupOptionRequestBody): Promise<CheckoutSelectors> {\n        const action = this._pickupOptionActionCreator.loadPickupOptions(query);\n\n        return this._dispatch(action, { queueId: 'pickupOptions' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon Pay, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazonpay',\n     *     amazonpay: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazonpay',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Sends a email that contains a single-use sign-in link. When a valid links is clicked,\n     * signs in the customer without requiring any password, redirecting them to the account page if no redirectUrl is provided.\n     *\n     *\n     * ```js\n     * checkoutService.sendSignInEmail({ email: 'foo@bar.com', redirectUrl: 'checkout' });\n     * ```\n     *\n     * @param signInEmailRequest - The sign-in email request values.\n     * @param options - Options for the send email request.\n     * @returns A promise that resolves to the current state.\n     */\n    sendSignInEmail(\n        signInEmailRequest: SignInEmailRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._signInEmailActionCreator.sendSignInEmail(signInEmailRequest, options);\n\n        return this._dispatch(action, { queueId: 'signInEmail' });\n    }\n\n    /**\n     * Creates a customer account.\n     *\n     * @remarks\n     * ```js\n     * checkoutService.createCustomerAccount({\n     *   email: 'foo@bar.com',\n     *   firstName: 'Foo',\n     *   lastName: 'Bar',\n     *   password: 'password',\n     *   acceptsMarketingEmails: true,\n     *   customFields: [],\n     * });\n     * ```\n     * Please note that `createCustomerAccount` is currently in an early stage\n     * of development. Therefore the API is unstable and not ready for public\n     * consumption.\n     *\n     * @alpha\n     * @param customerAccount - The customer account data.\n     * @param options - Options for creating customer account.\n     * @returns A promise that resolves to the current state.\n     */\n    createCustomerAccount(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerActionCreator.createCustomer(customerAccount, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Creates a customer account address.\n     *\n     * @remarks\n     * ```js\n     * checkoutService.createCustomerAddress({\n     *   firstName: 'Foo',\n     *   lastName: 'Bar',\n     *   address1: '55 Market St',\n     *   stateOrProvinceCode: 'CA',\n     *   countryCode: 'US',\n     *   postalCode: '90110',\n     *   customFields: [],\n     * });\n     * ```\n     * Please note that `createCustomerAccountAddress` is currently in an early stage\n     * of development. Therefore the API is unstable and not ready for public\n     * consumption.\n     *\n     * @alpha\n     * @param customerAddress - The customer account data.\n     * @param options - Options for creating customer account.\n     * @returns A promise that resolves to the current state.\n     */\n    createCustomerAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerActionCreator.createAddress(customerAddress, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Updates the subscriptions associated to an email.\n     *\n     * @param subscriptions - The email and associated subscriptions to update.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._subscriptionsActionCreator.updateSubscriptions(subscriptions, options);\n\n        return this._dispatch(action, { queueId: 'subscriptions' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * If your Checkout Settings allow it, your customers could continue the checkout as guests (without signing in).\n     * If you have enabled the checkout setting \"Prompt existing accounts to sign in\", this information is\n     * exposed as part of the [Customer](../interfaces/customer.md) object.\n     *\n     * Once they provide their email address, it will be stored as\n     * part of their [billing address](../interfaces/billingaddress.md).\n     *\n     * @param credentials - The guest credentials to use, with optional subscriptions.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * When a store has \"Allow customers to access their cart across multiple devices\" enabled, signing out\n     * will remove the cart/checkout data from the current session. An error with type=\"checkout_not_available\" will be thrown.\n     *\n     * ```js\n     * try {\n     *   await service.signOutCustomer();\n     * } catch (error) {\n     *   if (error.type === 'checkout_not_available') {\n     *     window.top.location.assign('/');\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Executes custom checkout of the priority payment method.\n     *\n     * Some payment methods, such as Bolt, can use their own checkout\n     * with autofilled customers data, to make checkout passing process\n     * easier and faster for customers with Bolt account.\n     *\n     * ```js\n     * await service.executePaymentMethodCheckout({\n     *     methodId: 'bolt',\n     *     fallback: () => {},\n     * });\n     * ```\n     *\n     * @param options - Options for executing payment method checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.executePaymentMethodCheckout(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon Pay, can provide shipping\n     * information to be used for checkout. In order to support them, this\n     * method must be called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazonpay',\n     *     amazonpay: {\n     *         editAddressButtonId: 'changeAddressButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazonpay',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(\n        shippingOptionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(consignmentId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption(\n            {\n                id: consignmentId,\n                shippingOptionId,\n            },\n            options,\n        );\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(\n        address: Partial<BillingAddressRequestBody>,\n        options: RequestOptions = {},\n    ): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action).then(() => this.loadInstruments());\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails. You should call this method before\n     * `submitOrder` method is called (i.e.: when the shopper\n     * first gets to the payment step).\n     *\n     * **Note**: You need to enable Google ReCAPTCHA bot protection in your Checkout Settings.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.verifyCheckoutSpamProtection();\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(\n        action: Action | Observable<Action> | ThunkAction<Action>,\n        options?: { queueId?: string },\n    ): Promise<CheckoutSelectors> {\n        return this._store\n            .dispatch(action, options)\n            .then(() => this.getState())\n            .catch((error) => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<\n    CheckoutServiceErrorType | Error\n>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development',\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer((error) => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n            case MissingDataErrorType.MissingConsignments:\n                return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n            case MissingDataErrorType.MissingCart:\n            case MissingDataErrorType.MissingCheckout:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n            case MissingDataErrorType.MissingCheckoutConfig:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n            case MissingDataErrorType.MissingOrder:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n            case MissingDataErrorType.MissingOrderId:\n                return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n            case MissingDataErrorType.MissingPaymentMethod:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n            case NotInitializedErrorType.CustomerNotInitialized:\n                return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n            case NotInitializedErrorType.PaymentNotInitialized:\n                return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n            case NotInitializedErrorType.ShippingNotInitialized:\n                return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n            default:\n                return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { FlashMessage, FlashMessageType, StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, PickupOptionResult, SearchArea, ShippingOption } from '../shipping';\nimport { SignInEmail } from '../signin-email';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the sign-in email.\n     *\n     * @returns The sign-in email object if sent, otherwise undefined\n     */\n    getSignInEmail(): SignInEmail | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the available flash messages.\n     *\n     * Flash messages contain messages set by the server,\n     * e.g: when trying to sign in using an invalid email link.\n     *\n     * @param type - The type of flash messages to be returned. Optional\n     * @returns The flash messages if available, otherwise undefined.\n     */\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented in order to create a customer.\n     *\n     * @returns The set of customer account form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getCustomerAccountFields(): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a list of pickup options for specified parameters.\n     *\n     * @param consignmentId - Id of consignment.\n     * @param searchArea - An object containing of radius and co-ordinates.\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n}\n\nexport type CheckoutStoreSelectorFactory = (\n    state: InternalCheckoutSelectors,\n) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        (getCheckout) => clone(getCheckout),\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        (getOrder) => clone(getOrder),\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        (getStoreConfig) => clone(getStoreConfig),\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) =>\n            clone(() => {\n                const shippingAddress = getShippingAddress();\n                const context = getContextConfig();\n\n                if (!shippingAddress) {\n                    if (!context || !context.geoCountryCode) {\n                        return;\n                    }\n\n                    return {\n                        firstName: '',\n                        lastName: '',\n                        company: '',\n                        address1: '',\n                        address2: '',\n                        city: '',\n                        stateOrProvince: '',\n                        stateOrProvinceCode: '',\n                        postalCode: '',\n                        country: '',\n                        phone: '',\n                        customFields: [],\n                        countryCode: context.geoCountryCode,\n                    };\n                }\n\n                return shippingAddress;\n            }),\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        (getConsignments) =>\n            clone(() => {\n                const consignments = getConsignments();\n\n                const shippingConsignment = consignments?.find(\n                    (consignment) => !consignment.selectedPickupOption,\n                );\n\n                return shippingConsignment?.availableShippingOptions;\n            }),\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        (getConsignments) => clone(getConsignments),\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        (getConsignments) =>\n            clone(() => {\n                const consignments = getConsignments();\n                const shippingConsignment = consignments?.find(\n                    (consignment) => !consignment.selectedPickupOption,\n                );\n\n                return shippingConsignment?.selectedShippingOption;\n            }),\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) =>\n            shippingCountries.getShippingCountries,\n        (getShippingCountries) => clone(getShippingCountries),\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) =>\n            clone(() => {\n                const billingAddress = getBillingAddress();\n                const context = getContextConfig();\n                const isEmptyBillingAddress =\n                    !billingAddress ||\n                    values(omit(billingAddress, 'shouldSaveAddress', 'email', 'id')).every(\n                        (val) => !val || !val.length,\n                    );\n\n                if (isEmptyBillingAddress) {\n                    if (!context || !context.geoCountryCode) {\n                        return billingAddress;\n                    }\n\n                    return {\n                        id: billingAddress ? billingAddress.id : '',\n                        firstName: '',\n                        lastName: '',\n                        company: '',\n                        address1: '',\n                        address2: '',\n                        city: '',\n                        email: billingAddress ? billingAddress.email : '',\n                        stateOrProvince: '',\n                        stateOrProvinceCode: '',\n                        postalCode: '',\n                        country: '',\n                        phone: '',\n                        customFields: [],\n                        countryCode: context.geoCountryCode,\n                    };\n                }\n\n                return billingAddress;\n            }),\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getCountries) => clone(getCountries),\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        (getPaymentMethods) => clone(getPaymentMethods),\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentMethod) => clone(getPaymentMethod),\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) =>\n            clone(() => {\n                const payment = getPaymentId();\n\n                return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n            }),\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        (getCart) => clone(getCart),\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        (getCoupons) => clone(getCoupons),\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        (getGiftCertificates) => clone(getGiftCertificates),\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        (getCustomer) => clone(getCustomer),\n    );\n\n    const getSignInEmail = createSelector(\n        ({ signInEmail }: InternalCheckoutSelectors) => signInEmail.getEmail,\n        (getEmail) => clone(getEmail),\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        (isPaymentDataRequired) => clone(isPaymentDataRequired),\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) =>\n            clone((methodId: string, gatewayId?: string) => {\n                return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n            }),\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(\n                paymentMethod: PaymentMethod,\n            ): PaymentInstrument[] | undefined;\n\n            function getInstrumentsSelector(\n                paymentMethod?: PaymentMethod,\n            ): PaymentInstrument[] | undefined {\n                return paymentMethod\n                    ? getInstrumentsByPaymentMethod(paymentMethod)\n                    : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getCustomerAccountFields,\n        (getCustomerAccountFields) => clone(getCustomerAccountFields),\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) =>\n            clone((countryCode: string) => {\n                return getBillingAddressFields(getCountries(), countryCode);\n            }),\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) =>\n            shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) =>\n            clone((countryCode: string) => {\n                return getShippingAddressFields(getShippingCountries(), countryCode);\n            }),\n    );\n\n    const getFlashMessages = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getFlashMessages,\n        (getFlashMessages) => clone(getFlashMessages),\n    );\n\n    const getPickupOptions = createSelector(\n        ({ pickupOptions }: InternalCheckoutSelectors) => pickupOptions.getPickupOptions,\n        (getPickupOptions) => clone(getPickupOptions),\n    );\n\n    return memoizeOne((state: InternalCheckoutSelectors): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getSignInEmail: getSignInEmail(state),\n            getInstruments: getInstruments(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n            getPickupOptions: getPickupOptions(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { CartChangedError, CartConsistencyError } from '../cart/errors';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | CartChangedError | CartConsistencyError | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * The call could fail in scenarios where guest checkout is not allowed, for example, when existing accounts are required to sign-in.\n     *\n     * In the background, this call tries to set the billing address email using the Storefront API. You could access the Storefront API response status code using `getContinueAsGuestError` error selector.\n     *\n     * ```js\n     * console.log(state.errors.getContinueAsGuestError());\n     * console.log(state.errors.getContinueAsGuestError().status);\n     * ```\n     *\n     * For more information about status codes, check [Checkout Storefront API - Add Checkout Billing Address](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-checkout-api/checkout-billing-address/checkoutsbillingaddressbycheckoutidpost).\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update subscriptions.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateSubscriptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to send sign-in email.\n     *\n     * @returns The error object if unable to send email, otherwise undefined.\n     */\n    getSignInEmailError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to create customer account.\n     *\n     * @returns The error object if unable to create account, otherwise undefined.\n     */\n    getCreateCustomerAccountError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to create customer address.\n     *\n     * @returns The error object if unable to create address, otherwise undefined.\n     */\n    getCreateCustomerAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to fetch pickup options.\n     *\n     * @returns The error object if unable to fetch pickup options, otherwise undefined.\n     */\n    getPickupOptionsError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (\n    state: InternalCheckoutSelectors,\n) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        (selector) => () => {\n            for (const key of Object.keys(selector) as Array<\n                keyof Omit<CheckoutStoreErrorSelector, 'getError'>\n            >) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        },\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) =>\n            shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return getSelectOptionError() || getUpdateShippingOptionError(consignmentId);\n        },\n    );\n\n    return memoizeOne((state: InternalCheckoutSelectors): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateSubscriptionsError: state.subscriptions.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n            getSignInEmailError: state.signInEmail.getSendError,\n            getCreateCustomerAccountError: state.customer.getCreateAccountError,\n            getCreateCustomerAddressError: state.customer.getCreateAddressError,\n            getPickupOptionsError: state.pickupOptions.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is executing payment method checkout.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * executing payment method checkout using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for continuing the\n     * current customer.\n     * @returns True if the customer is executing payment method checkout, otherwise false.\n     */\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether a sign-in email is being sent.\n     *\n     * @returns True if sending a sign-in email, otherwise false\n     */\n    isSendingSignInEmail(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout is in a pending state.\n     *\n     * The shipping step is considered to be pending if it is in the process of\n     * initializing, updating address, selecting a shipping option, and/or\n     * interacting with a shipping widget.\n     *\n     * @returns True if the shipping step is pending, otherwise false.\n     */\n    isShippingStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n\n    /**\n     * Checks whether the subscriptions are being updated.\n     *\n     * @returns True if updating subscriptions, otherwise false.\n     */\n    isUpdatingSubscriptions(): boolean;\n\n    /**\n     * Checks whether a customer account is being created\n     *\n     * @returns True if creating, otherwise false.\n     */\n    isCreatingCustomerAccount(): boolean;\n\n    /**\n     * Checks whether a customer address is being created\n     *\n     * @returns True if creating, otherwise false.\n     */\n    isCreatingCustomerAddress(): boolean;\n\n    /**\n     * Checks whether pickup options are loading.\n     *\n     * @returns True if pickup options are loading, otherwise false.\n     */\n    isLoadingPickupOptions(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (\n    state: InternalCheckoutSelectors,\n) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        (selector) => () => {\n            return (\n                Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>\n            ).some((key) => selector[key]());\n        },\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return isSelectingOption() || isUpdatingShippingOption(consignmentId);\n        },\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) =>\n            customerStrategies.isExecutingPaymentMethodCheckout,\n        ({ customerStrategies }: InternalCheckoutSelectors) =>\n            customerStrategies.isWidgetInteracting,\n        (\n                isInitializing,\n                isSigningIn,\n                isSigningOut,\n                isExecutingPaymentMethodCheckout,\n                isWidgetInteracting,\n            ) =>\n            (methodId?: string) => {\n                return (\n                    isInitializing(methodId) ||\n                    isSigningIn(methodId) ||\n                    isSigningOut(methodId) ||\n                    isExecutingPaymentMethodCheckout(methodId) ||\n                    isWidgetInteracting(methodId)\n                );\n            },\n    );\n\n    const isShippingStepPending = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isInitializing,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isUpdatingAddress,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ shippingStrategies }: InternalCheckoutSelectors) =>\n            shippingStrategies.isWidgetInteracting,\n        (isInitializing, isUpdatingAddress, isSelectingOption, isWidgetInteracting) =>\n            (methodId?: string) => {\n                return (\n                    isInitializing(methodId) ||\n                    isUpdatingAddress(methodId) ||\n                    isSelectingOption(methodId) ||\n                    isWidgetInteracting(methodId)\n                );\n            },\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        },\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return isExecuting(methodId) || isExecutingSpamCheck();\n        },\n    );\n\n    return memoizeOne((state: InternalCheckoutSelectors): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isExecutingPaymentMethodCheckout:\n                state.customerStrategies.isExecutingPaymentMethodCheckout,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isUpdatingSubscriptions: state.subscriptions.isUpdating,\n            isCreatingCustomerAccount: state.customer.isCreatingCustomerAccount,\n            isCreatingCustomerAddress: state.customer.isCreatingCustomerAddress,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isSendingSignInEmail: state.signInEmail.isSending,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isShippingStepPending: isShippingStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n            isLoadingPickupOptions: state.pickupOptions.isLoading,\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import {\n    CheckoutSelectors,\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from './error-response-body';\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CustomerActionType.StripeLinkAuthenticated:\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState, ConfigWindow } from '../config';\nimport {\n    CouponActionCreator,\n    CouponRequestSender,\n    GiftCertificateActionCreator,\n    GiftCertificateRequestSender,\n} from '../coupon';\nimport {\n    createCustomerStrategyRegistry,\n    createCustomerStrategyRegistryV2,\n    CustomerActionCreator,\n    CustomerRequestSender,\n    CustomerStrategyActionCreator,\n} from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport * as defaultPaymentStrategyFactories from '../generated/payment-strategies';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    createPaymentStrategyRegistry,\n    createPaymentStrategyRegistryV2,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentStrategyActionCreator,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    createShippingStrategyRegistry,\n    PickupOptionActionCreator,\n    PickupOptionRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n    ShippingStrategyActionCreator,\n} from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestSender } from '../signin-email';\nimport {\n    createSpamProtection,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn(\n            'The BigCommerce Checkout SDK should not be used on a non-HTTPS page',\n        );\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn(\n            'Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.',\n        );\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n            host: options?.host,\n            locale: options?.locale,\n            variantIdentificationToken: (window as ConfigWindow).checkoutVariantIdentificationToken,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n    );\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(\n        new SubscriptionsRequestSender(requestSender),\n    );\n    const formFieldsActionCreator = new FormFieldsActionCreator(\n        new FormFieldsRequestSender(requestSender),\n    );\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        configActionCreator,\n        formFieldsActionCreator,\n    );\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createPaymentStrategyRegistryV2(\n        paymentIntegrationService,\n        defaultPaymentStrategyFactories,\n        { useFallback: true },\n    );\n    const customerRegistryV2 = createCustomerStrategyRegistryV2(paymentIntegrationService);\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            subscriptionsActionCreator,\n        ),\n        checkoutActionCreator,\n        configActionCreator,\n        new CustomerActionCreator(\n            new CustomerRequestSender(requestSender),\n            checkoutActionCreator,\n            spamProtectionActionCreator,\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            checkoutRequestSender,\n        ),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(\n            createCustomerStrategyRegistry(store, paymentClient, requestSender, locale),\n            customerRegistryV2,\n        ),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(\n                store,\n                paymentClient,\n                requestSender,\n                spamProtection,\n                locale,\n            ),\n            registryV2,\n            orderActionCreator,\n            spamProtectionActionCreator,\n        ),\n        new PickupOptionActionCreator(new PickupOptionRequestSender(requestSender)),\n        new ShippingCountryActionCreator(\n            new ShippingCountryRequestSender(requestSender, { locale }),\n        ),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        new SignInEmailActionCreator(new SignInEmailRequestSender(requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender)),\n        subscriptionsActionCreator,\n        formFieldsActionCreator,\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BoltScriptLoader } from '../payment/strategies/bolt';\nimport {\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    VisaCheckoutScriptLoader,\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV3Initializer,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { StripeScriptLoader } from '../payment/strategies/stripe-upe';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createCustomerStrategyRegistryV2 from './create-customer-strategy-registry-v2';\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayV2CustomerStrategy } from './strategies/amazon-pay-v2';\nimport { ApplePayCustomerStrategy } from './strategies/apple-pay';\nimport { BoltCustomerStrategy } from './strategies/bolt';\nimport {\n    BraintreePaypalCreditCustomerStrategy,\n    BraintreePaypalCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n} from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\nimport { StripeUPECustomerStrategy } from './strategies/stripe-upe';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    locale: string,\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        createSpamProtection(scriptLoader),\n        new SpamProtectionRequestSender(requestSender),\n    );\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        spamProtectionActionCreator,\n    );\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(checkoutRequestSender),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const braintreeSDKCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const customerRegistryV2 = createCustomerStrategyRegistryV2(paymentIntegrationService);\n\n    registry.register(\n        'googlepayadyenv2',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepayadyenv3',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'amazonpay',\n        () =>\n            new AmazonPayV2CustomerStrategy(\n                store,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        'braintreevisacheckout',\n        () =>\n            new BraintreeVisaCheckoutCustomerStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                new CustomerStrategyActionCreator(registry, customerRegistryV2),\n                remoteCheckoutActionCreator,\n                createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n                new VisaCheckoutScriptLoader(scriptLoader),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'braintreepaypal',\n        () =>\n            new BraintreePaypalCustomerStrategy(\n                store,\n                checkoutActionCreator,\n                customerActionCreator,\n                paymentMethodActionCreator,\n                braintreeSDKCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        'braintreepaypalcredit',\n        () =>\n            new BraintreePaypalCreditCustomerStrategy(\n                store,\n                checkoutActionCreator,\n                customerActionCreator,\n                paymentMethodActionCreator,\n                braintreeSDKCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        'bolt',\n        () =>\n            new BoltCustomerStrategy(\n                store,\n                new BoltScriptLoader(scriptLoader),\n                customerActionCreator,\n                paymentMethodActionCreator,\n            ),\n    );\n\n    registry.register(\n        'chasepay',\n        () =>\n            new ChasePayCustomerStrategy(\n                store,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                new ChasePayScriptLoader(scriptLoader),\n                requestSender,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'squarev2',\n        () =>\n            new SquareCustomerStrategy(\n                store,\n                new RemoteCheckoutActionCreator(remoteCheckoutRequestSender, checkoutActionCreator),\n            ),\n    );\n\n    registry.register(\n        'masterpass',\n        () =>\n            new MasterpassCustomerStrategy(\n                store,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        'googlepayauthorizenet',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaybnz',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaybraintree',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(braintreeSDKCreator),\n                ),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaycheckoutcom',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaycybersourcev2',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepayorbital',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaystripe',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaystripeupe',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'applepay',\n        () =>\n            new ApplePayCustomerStrategy(\n                store,\n                checkoutActionCreator,\n                requestSender,\n                paymentMethodActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                remoteCheckoutActionCreator,\n                orderActionCreator,\n                new ApplePaySessionFactory(),\n            ),\n    );\n\n    registry.register(\n        'stripeupe',\n        () =>\n            new StripeUPECustomerStrategy(\n                store,\n                new StripeScriptLoader(scriptLoader),\n                customerActionCreator,\n                paymentMethodActionCreator,\n                new ConsignmentActionCreator(\n                    new ConsignmentRequestSender(requestSender),\n                    new CheckoutRequestSender(requestSender),\n                ),\n            ),\n    );\n\n    registry.register('default', () => new DefaultCustomerStrategy(store, customerActionCreator));\n\n    return registry;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport {\n    createScriptLoader,\n    getScriptLoader,\n    getStylesheetLoader,\n} from '@bigcommerce/script-loader';\nimport localStorageFallback from 'local-storage-fallback';\n\nimport AnalyticsExtraItemsManager from '../analytics/analytics-extra-items-manager';\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { LoadingIndicator } from '../common/loading-indicator';\nimport { BrowserStorage } from '../common/storage';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentIntegrationService } from '../payment-integration';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    createSpamProtection,\n    GoogleRecaptcha,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentStrategyRegistryV2 from './create-payment-strategy-registry-v2';\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport StorefrontPaymentRequestSender from './storefront-payment-request-sender';\nimport { AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AdyenV3ScriptLoader } from './strategies/adyenv3';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport {\n    AmazonPayV2PaymentStrategy,\n    createAmazonPayV2PaymentProcessor,\n} from './strategies/amazon-pay-v2';\nimport { BarclaysPaymentStrategy } from './strategies/barclays';\nimport { BlueSnapV2PaymentStrategy } from './strategies/bluesnapv2';\nimport { BNZPaymentStrategy } from './strategies/bnz';\nimport { BoltPaymentStrategy, BoltScriptLoader } from './strategies/bolt';\nimport {\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    VisaCheckoutScriptLoader,\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n    CardinalThreeDSecureFlowV2,\n} from './strategies/cardinal';\nimport { CBAMPGSPaymentStrategy, CBAMPGSScriptLoader } from './strategies/cba-mpgs';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport {\n    CheckoutcomAPMPaymentStrategy,\n    CheckoutcomFawryPaymentStrategy,\n    CheckoutcomiDealPaymentStrategy,\n    CheckoutcomSEPAPaymentStrategy,\n} from './strategies/checkoutcom-custom';\nimport { ClearpayPaymentStrategy, ClearpayScriptLoader } from './strategies/clearpay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardRedirectPaymentStrategy } from './strategies/credit-card-redirect';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { CyberSourceV2PaymentStrategy } from './strategies/cybersourcev2';\nimport { DigitalRiverPaymentStrategy, DigitalRiverScriptLoader } from './strategies/digitalriver';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV2PaymentProcessor,\n    GooglePayAdyenV3Initializer,\n    GooglePayAdyenV3PaymentProcessor,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCheckoutcomPaymentProcessor,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n} from './strategies/googlepay';\nimport { HummPaymentStrategy } from './strategies/humm';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport {\n    KlarnaV2PaymentStrategy,\n    KlarnaV2ScriptLoader,\n    KlarnaV2TokenUpdater,\n} from './strategies/klarnav2';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { MolliePaymentStrategy, MollieScriptLoader } from './strategies/mollie';\nimport { MonerisPaymentStrategy } from './strategies/moneris';\nimport { OpyPaymentStrategy, OpyScriptLoader } from './strategies/opy';\nimport {\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    PaypalScriptLoader,\n} from './strategies/paypal';\nimport {\n    createPaypalCommercePaymentProcessor,\n    PaypalCommerceCreditCardPaymentStrategy,\n    PaypalCommerceFundingKeyResolver,\n    PaypalCommerceHostedForm,\n    PaypalCommercePaymentStrategy,\n    PaypalCommerceRequestSender,\n} from './strategies/paypal-commerce';\nimport {\n    createStepHandler,\n    createSubStrategyRegistry,\n    PaymentResumer,\n    PPSDKStrategy,\n} from './strategies/ppsdk';\nimport { QuadpayPaymentStrategy } from './strategies/quadpay';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport {\n    StripeUPEPaymentStrategy,\n    StripeScriptLoader as StripeUPEScriptLoader,\n} from './strategies/stripe-upe';\nimport {\n    StripeV3PaymentStrategy,\n    StripeScriptLoader as StripeV3ScriptLoader,\n} from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { WorldpayaccessPaymetStrategy } from './strategies/worldpayaccess';\nimport { ZipPaymentStrategy } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string,\n) {\n    const registry = new PaymentStrategyRegistry(store, {\n        defaultToken: PaymentStrategyType.CREDIT_CARD,\n    });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createPaymentStrategyRegistryV2(paymentIntegrationService);\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        new SpamProtectionRequestSender(requestSender),\n    );\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator,\n    );\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator,\n        paymentRequestTransformer,\n        paymentHumanVerificationHandler,\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const formFieldsActionCreator = new FormFieldsActionCreator(\n        new FormFieldsRequestSender(requestSender),\n    );\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        configActionCreator,\n        formFieldsActionCreator,\n    );\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(\n        registry,\n        registryV2,\n        orderActionCreator,\n        spamProtectionActionCreator,\n    );\n    const formPoster = createFormPoster();\n    const stepHandler = createStepHandler(formPoster, paymentHumanVerificationHandler);\n    const hostedFormFactory = new HostedFormFactory(store);\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    registry.register(\n        PaymentStrategyType.ADYENV2_GOOGLEPAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n                new GooglePayAdyenV2PaymentProcessor(\n                    store,\n                    paymentActionCreator,\n                    new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.ADYENV3_GOOGLEPAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n                new GooglePayAdyenV3PaymentProcessor(\n                    store,\n                    paymentActionCreator,\n                    new AdyenV3ScriptLoader(scriptLoader, getStylesheetLoader()),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.AFFIRM,\n        () =>\n            new AffirmPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new AffirmScriptLoader(),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.AFTERPAY,\n        () =>\n            new AfterpayPaymentStrategy(\n                store,\n                checkoutValidator,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                remoteCheckoutRequestSender,\n                storeCreditActionCreator,\n                new AfterpayScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.AMAZONPAY,\n        () =>\n            new AmazonPayV2PaymentStrategy(\n                store,\n                paymentStrategyActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BARCLAYS,\n        () =>\n            new BarclaysPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlowV2(\n                    store,\n                    paymentActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BLUESNAPV2,\n        () => new BlueSnapV2PaymentStrategy(store, orderActionCreator, paymentActionCreator),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE,\n        () =>\n            new BraintreeCreditCardPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                braintreePaymentProcessor,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(\n                        new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n                    ),\n                ),\n                undefined,\n                new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                braintreePaymentProcessor,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_VENMO,\n        () =>\n            new BraintreePaypalPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                braintreePaymentProcessor,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                braintreePaymentProcessor,\n                true,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_VISA_CHECKOUT,\n        () =>\n            new BraintreeVisaCheckoutPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n                new VisaCheckoutScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BOLT,\n        () =>\n            new BoltPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                storeCreditActionCreator,\n                new BoltScriptLoader(scriptLoader),\n                new AnalyticsExtraItemsManager(localStorageFallback),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CBA_MPGS,\n        () =>\n            new CBAMPGSPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                paymentMethodActionCreator,\n                new CBAMPGSScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CONVERGE,\n        () =>\n            new ConvergePaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CLEARPAY,\n        () =>\n            new ClearpayPaymentStrategy(\n                store,\n                checkoutValidator,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                remoteCheckoutRequestSender,\n                storeCreditActionCreator,\n                new ClearpayScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CYBERSOURCE,\n        () =>\n            new CyberSourcePaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlow(\n                    store,\n                    paymentActionCreator,\n                    paymentMethodActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CYBERSOURCEV2,\n        () =>\n            new CyberSourceV2PaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlowV2(\n                    store,\n                    paymentActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BNZ,\n        () =>\n            new BNZPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlowV2(\n                    store,\n                    paymentActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CYBERSOURCEV2_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BNZ_GOOGLEPAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM,\n        () =>\n            new CreditCardRedirectPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM_APM,\n        () =>\n            new CheckoutcomAPMPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM_FAWRY,\n        () =>\n            new CheckoutcomFawryPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                new GooglePayCheckoutcomPaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM_IDEAL,\n        () =>\n            new CheckoutcomiDealPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM_SEPA,\n        () =>\n            new CheckoutcomSEPAPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHASE_PAY,\n        () =>\n            new ChasePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                requestSender,\n                new ChasePayScriptLoader(scriptLoader),\n                new WepayRiskClient(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.DIGITALRIVER,\n        () =>\n            new DigitalRiverPaymentStrategy(\n                store,\n                paymentMethodActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                storeCreditActionCreator,\n                new DigitalRiverScriptLoader(scriptLoader, getStylesheetLoader()),\n                billingAddressActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.KLARNA,\n        () =>\n            new KlarnaPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                new KlarnaScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.KLARNAV2,\n        () =>\n            new KlarnaV2PaymentStrategy(\n                store,\n                orderActionCreator,\n                remoteCheckoutActionCreator,\n                new KlarnaV2ScriptLoader(scriptLoader),\n                new KlarnaV2TokenUpdater(requestSender),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.HUMM,\n        () =>\n            new HummPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                formPoster,\n                paymentMethodActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.MASTERPASS,\n        () =>\n            new MasterpassPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.MOLLIE,\n        () =>\n            new MolliePaymentStrategy(\n                hostedFormFactory,\n                store,\n                new MollieScriptLoader(scriptLoader),\n                orderActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.MONERIS,\n        () =>\n            new MonerisPaymentStrategy(\n                hostedFormFactory,\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                storeCreditActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.OPY,\n        () =>\n            new OpyPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentMethodActionCreator,\n                storefrontPaymentRequestSender,\n                paymentActionCreator,\n                new OpyScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.ORBITAL_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL,\n        () =>\n            new PaypalProPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlow(\n                    store,\n                    paymentActionCreator,\n                    paymentMethodActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_EXPRESS,\n        () =>\n            new PaypalExpressPaymentStrategy(\n                store,\n                orderActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_COMMERCE,\n        () =>\n            new PaypalCommercePaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                createPaypalCommercePaymentProcessor(\n                    scriptLoader,\n                    requestSender,\n                    store,\n                    orderActionCreator,\n                    paymentActionCreator,\n                ),\n                new PaypalCommerceFundingKeyResolver(),\n                new PaypalCommerceRequestSender(requestSender),\n                new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS,\n        () =>\n            new PaypalCommercePaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                createPaypalCommercePaymentProcessor(\n                    scriptLoader,\n                    requestSender,\n                    store,\n                    orderActionCreator,\n                    paymentActionCreator,\n                ),\n                new PaypalCommerceFundingKeyResolver(),\n                new PaypalCommerceRequestSender(requestSender),\n                new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_COMMERCE_VENMO,\n        () =>\n            new PaypalCommercePaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                createPaypalCommercePaymentProcessor(\n                    scriptLoader,\n                    requestSender,\n                    store,\n                    orderActionCreator,\n                    paymentActionCreator,\n                ),\n                new PaypalCommerceFundingKeyResolver(),\n                new PaypalCommerceRequestSender(requestSender),\n                new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_COMMERCE_CREDIT_CARD,\n        () =>\n            new PaypalCommerceCreditCardPaymentStrategy(\n                store,\n                paymentMethodActionCreator,\n                new PaypalCommerceHostedForm(\n                    createPaypalCommercePaymentProcessor(\n                        scriptLoader,\n                        requestSender,\n                        store,\n                        orderActionCreator,\n                        paymentActionCreator,\n                    ),\n                ),\n                orderActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_EXPRESS_CREDIT,\n        () =>\n            new PaypalExpressPaymentStrategy(\n                store,\n                orderActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PPSDK,\n        () =>\n            new PPSDKStrategy(\n                store,\n                orderActionCreator,\n                createSubStrategyRegistry(\n                    store,\n                    orderActionCreator,\n                    requestSender,\n                    stepHandler,\n                    hostedFormFactory,\n                ),\n                new PaymentResumer(requestSender, stepHandler),\n                new BrowserStorage('PPSDK'),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.QUADPAY,\n        () =>\n            new QuadpayPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                storeCreditActionCreator,\n                remoteCheckoutActionCreator,\n                storefrontPaymentRequestSender,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.SAGE_PAY,\n        () =>\n            new SagePayPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.SQUARE,\n        () =>\n            new SquarePaymentStrategy(\n                store,\n                checkoutActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                requestSender,\n                new SquareScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.STRIPE_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.STRIPE_UPE_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.STRIPEV3,\n        () =>\n            new StripeV3PaymentStrategy(\n                store,\n                paymentMethodActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                new StripeV3ScriptLoader(scriptLoader),\n                storeCreditActionCreator,\n                hostedFormFactory,\n                locale,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.STRIPE_UPE,\n        () =>\n            new StripeUPEPaymentStrategy(\n                store,\n                paymentMethodActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                new StripeUPEScriptLoader(scriptLoader),\n                storeCreditActionCreator,\n                billingAddressActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.WE_PAY,\n        () =>\n            new WepayPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new WepayRiskClient(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.WORLDPAYACCESS,\n        () =>\n            new WorldpayaccessPaymetStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.ZIP,\n        () =>\n            new ZipPaymentStrategy(\n                store,\n                paymentMethodActionCreator,\n                storeCreditActionCreator,\n                remoteCheckoutActionCreator,\n                orderActionCreator,\n                storefrontPaymentRequestSender,\n                paymentActionCreator,\n            ),\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeHostedForm from './braintree-hosted-form';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const braintreeHostedForm = new BraintreeHostedForm(braintreeSDKCreator);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, braintreeHostedForm, overlay);\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { PaymentHumanVerificationHandler } from '../../../../spam-protection';\n\nimport { ContinueHandler } from './continue-handler';\nimport { StepHandler } from './step-handler';\n\nexport const createStepHandler = (\n    formPoster: FormPoster,\n    humanVerificationHandler: PaymentHumanVerificationHandler,\n) => new StepHandler(new ContinueHandler(formPoster, humanVerificationHandler));\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator } from '../../../order';\n\nimport { SubStrategyRegistry } from './ppsdk-sub-strategy-registry';\nimport { SubStrategyType } from './ppsdk-sub-strategy-type';\nimport { StepHandler } from './step-handler';\nimport { CardSubStrategy, NoneSubStrategy } from './sub-strategies';\n\nexport const createSubStrategyRegistry = (\n    store: CheckoutStore,\n    orderActionCreator: OrderActionCreator,\n    requestSender: RequestSender,\n    stepHandler: StepHandler,\n    hostedFormFactory: HostedFormFactory,\n) => {\n    const registry = new SubStrategyRegistry();\n\n    registry.register(\n        SubStrategyType.CARD,\n        () => new CardSubStrategy(store, orderActionCreator, hostedFormFactory, stepHandler),\n    );\n\n    registry.register(SubStrategyType.NONE, () => new NoneSubStrategy(requestSender, stepHandler));\n\n    registry.register(SubStrategyType.UNSUPPORTED, () => undefined);\n\n    return registry;\n};\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { StripeScriptLoader } from '../payment/strategies/stripe-upe';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport ShippingStrategyActionCreator from './shipping-strategy-action-creator';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayV2ShippingStrategy } from './strategies/amazon-pay-v2';\nimport { DefaultShippingStrategy } from './strategies/default';\nimport { StripeUPEShippingStrategy } from './strategies/stripe-upe';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        consignmentRequestSender,\n        checkoutRequestSender,\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const scriptLoader = getScriptLoader();\n\n    registry.register(\n        'amazonpay',\n        () =>\n            new AmazonPayV2ShippingStrategy(\n                store,\n                consignmentActionCreator,\n                new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n                createAmazonPayV2PaymentProcessor(),\n                new ShippingStrategyActionCreator(registry),\n            ),\n    );\n\n    registry.register(\n        'stripeupe',\n        () =>\n            new StripeUPEShippingStrategy(\n                store,\n                new StripeScriptLoader(scriptLoader),\n                consignmentActionCreator,\n                paymentMethodActionCreator,\n            ),\n    );\n\n    registry.register(\n        'default',\n        () => new DefaultShippingStrategy(store, consignmentActionCreator),\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport BuyNowCartRequestBody from './buy-now-cart-request-body';\nimport Cart from './cart';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport {\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId,\n            methodId,\n            options: amazonpay,\n            placement: AmazonPayV2Placement.Cart,\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return this._amazonPayV2PaymentProcessor.deinitialize();\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n} from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport {\n    ApplePaySessionFactory,\n    assertApplePayWindow,\n} from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(\n                    this._remoteCheckoutActionCreator.signOut(paymentMethod.id),\n                );\n\n                return await this._store.dispatch(\n                    this._checkoutActionCreator.loadCurrentCheckout(),\n                );\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}` },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._store.dispatch(this._consignmentActionCreator.selectShippingOption(optionId));\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                }),\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    useStoreCredit: false,\n                }),\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalButtonStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(\n    style: PaypalButtonStyleOptions,\n): PaypalButtonStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypal),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: cart.cartAmount,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(braintreePaypalCheckout, braintreepaypalcredit),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n} from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            (braintreeVenmoCheckout) =>\n                this._handleInitializationVenmoSuccess(\n                    braintreeVenmoCheckout,\n                    containerId,\n                    braintreevenmo?.buyNowInitializeOptions,\n                ),\n            (error) => this._handleInitializationVenmoError(error, containerId),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        parentContainerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        return this._renderVenmoButton(\n            braintreeVenmoCheckout,\n            parentContainerId,\n            buyNowInitializeOptions,\n        );\n    }\n\n    private _handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            return this._onError(error);\n                        }\n\n                        await this._handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\n\ntype BuyNowInitializeOptions = Pick<GooglePayButtonInitializeOptions, 'buyNowInitializeOptions'>;\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, currencyCode } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        const hasBuyNowCartOptions = Boolean(googlePayOptions?.buyNowInitializeOptions);\n\n        if (hasBuyNowCartOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._googlePayPaymentProcessor.updateBuyNowFlowFlag(hasBuyNowCartOptions);\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions, currencyCode);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayButtonInitializeOptions,\n        currencyCode?: string,\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor, buyNowInitializeOptions } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const handleValidButtonClick = (event: Event) =>\n            this._handleWalletButtonClick(event, { buyNowInitializeOptions }, currencyCode);\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(\n            handleValidButtonClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(\n        options: CheckoutButtonInitializeOptions,\n    ): GooglePayButtonInitializeOptions {\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 &&\n            options.googlepayadyenv2\n        ) {\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 &&\n            options.googlepayadyenv3\n        ) {\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE &&\n            options.googlepaystripe\n        ) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    @bind\n    private async _handleWalletButtonClick(\n        event: Event,\n        { buyNowInitializeOptions }: BuyNowInitializeOptions,\n        currencyCode?: string,\n    ): Promise<void> {\n        event.preventDefault();\n\n        this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n        const cart = this._buyNowCart || this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        if (this._buyNowCart && currencyCode) {\n            const payloadToUpdate = {\n                currencyCode,\n                totalPrice: String(cart.cartAmount),\n            };\n\n            this._googlePayPaymentProcessor.updatePaymentDataRequest(payloadToUpdate);\n\n            await this._store.dispatch(\n                this._checkoutActionCreator.loadCheckout(this._buyNowCart.id),\n            );\n        }\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        const buyNowCartId = this._buyNowCart?.id;\n\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            ...(buyNowCartId && {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                cart_id: buyNowCartId,\n            }),\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    PaypalButtonStyleOptions,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonLayout,\n    StyleButtonShape,\n} from '../../../payment/strategies/paypal-commerce';\n\nexport default function getValidButtonStyle(\n    style: PaypalButtonStyleOptions,\n): PaypalButtonStyleOptions {\n    const { label, color, layout, shape, height, tagline } = style;\n\n    const validStyles = {\n        color: getValidColor(color),\n        height: getValidHeight(height),\n        label: getValidLabel(label),\n        layout: getValidLayout(layout),\n        shape: getValidShape(shape),\n        tagline: getValidTagline(tagline, layout),\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidColor(color?: StyleButtonColor): StyleButtonColor | undefined {\n    return color && StyleButtonColor[color] ? color : undefined;\n}\n\nfunction getValidLabel(label?: StyleButtonLabel): StyleButtonLabel | undefined {\n    return label && StyleButtonLabel[label] ? label : undefined;\n}\n\nfunction getValidLayout(layout?: StyleButtonLayout): StyleButtonLayout | undefined {\n    return layout && StyleButtonLayout[layout] ? layout : undefined;\n}\n\nfunction getValidShape(shape?: StyleButtonShape): StyleButtonShape | undefined {\n    return shape && StyleButtonShape[shape] ? shape : undefined;\n}\n\nfunction getValidTagline(tagline?: boolean, layout?: string): boolean | undefined {\n    if (\n        tagline &&\n        typeof tagline === 'boolean' &&\n        layout === StyleButtonLayout[StyleButtonLayout.horizontal]\n    ) {\n        return tagline;\n    }\n\n    return undefined;\n}\n\nfunction getValidHeight(height?: number): number {\n    const defaultHeight = 40;\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (!height || typeof height !== 'number') {\n        return defaultHeight;\n    }\n\n    if (height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n    private _buyNowCartId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (paypalcommerce.buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!paypalcommerce.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                paypalcommerce.currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const currencyCode = state.cart.getCartOrThrow().currency.code;\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PaypalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommerce;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: paypalCommerceSdk.FUNDING.PAYPAL,\n            style: style ? this._getButtonStyle(style) : {},\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            ...paypalCallbacks,\n        };\n\n        const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        try {\n            if (cart.lineItems.physicalItems.length > 0) {\n                const { payer, purchase_units } = orderDetails;\n                const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: shippingAddress.address_line_1,\n                    city: shippingAddress.admin_area_2,\n                    countryCode: shippingAddress.country_code,\n                    postalCode: shippingAddress.postal_code,\n                    stateOrProvinceCode: shippingAddress.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n                await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n                await this._updateOrder();\n            } else {\n                const { payer } = orderDetails;\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: payer.address.address_line_1,\n                    city: payer.address.admin_area_2,\n                    countryCode: payer.address.country_code,\n                    postalCode: payer.address.postal_code,\n                    stateOrProvinceCode: payer.address.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n            );\n            await this._submitPayment(methodId, data.orderID);\n\n            if (onComplete) {\n                onComplete();\n            }\n\n            return true;\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n            const shippingOption = this._getShippingOptionOrThrow();\n\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercecheckout' : 'paypalcommerce';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceCreditButtonInitializeOptions } from './paypal-commerce-credit-button-options';\n\nexport default class PaypalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        const {\n            buyNowInitializeOptions,\n            currencyCode,\n            initializesOnCheckoutPage,\n            messagingContainerId,\n        } = paypalcommercecredit;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercecredit);\n        this._renderMessages(messagingContainerId);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PaypalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommercecredit;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const fundingSources = [\n            paypalCommerceSdk.FUNDING.PAYLATER,\n            paypalCommerceSdk.FUNDING.CREDIT,\n        ];\n\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: ButtonsOptions = {\n                    fundingSource,\n                    style: style ? this._getButtonStyle(style) : {},\n                    onClick: () => this._handleClick(buyNowInitializeOptions),\n                    createOrder: () => this._createOrder(initializesOnCheckoutPage),\n                    ...paypalCallbacks,\n                };\n\n                const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n        );\n        await this._submitPayment(methodId, data.orderID);\n\n        if (onComplete) {\n            onComplete();\n        }\n\n        return true;\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _renderMessages(messagingContainerId?: string): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isMessagesAvailable = Boolean(\n            messagingContainerId && document.getElementById(messagingContainerId),\n        );\n\n        if (isMessagesAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesOptions = {\n                amount: cart.cartAmount,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalCommerceSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceCreditButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercecreditcheckout'\n            : 'paypalcommercecredit';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceAlternativeMethodsButtonOptions } from './paypal-commerce-alternative-methods-button-options';\n\nexport default class PaypalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods.apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercealternativemethods;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(methodId, containerId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommercealternativemethods: PaypalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, initializesOnCheckoutPage, style } =\n            paypalcommercealternativemethods;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalCommerceSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const validButtonStyle = style ? this._getButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: apm,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceAlternativeMethodsButtonOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercealternativemethodscheckout'\n            : 'paypalcommercealternativemethod';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\nimport { PaypalCommerceVenmoButtonInitializeOptions } from './paypal-commerce-venmo-button-options';\n\nexport default class PaypalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercevenmo;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PaypalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style } = paypalcommercevenmo;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const fundingSource = paypalCommerceSdk.FUNDING.VENMO;\n\n        const validButtonStyle = style ? this._getVenmoButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercevenmocheckout'\n            : 'paypalcommercevenmo';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getVenmoButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithApplePayButtonInitializeOptions } from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._paymentIntegrationService.loadDefaultCheckout();\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface PayPalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n    paypalLoadScript?(options: PayPalCommerceScriptParams): Promise<{ paypal: PayPalSDK }>;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(options?: PayPalCommerceHostedFieldsSubmitOptions): PayPalCommerceHostedFieldsApprove;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onError?(error: Error): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    PAYPAL = 'paypal',\n    CHECKOUT = 'checkout',\n    BUYNOW = 'buynow',\n    PAY = 'pay',\n    INSTALLMENT = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    VERTICAL = 'vertical',\n    HORIZONTAL = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SILVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum StyleButtonShape {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n *\n */\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface PayPalOrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalCreateOrderRequestBody {\n    cartId: string;\n}\n","import {\n    BillingAddressRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from '../paypal-commerce-script-loader';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    CompleteCallbackDataPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceIntent,\n    PayPalSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceInlineButtonInitializeOptions, {\n    WithPayPalCommerceInlineButtonInitializeOptions,\n} from './paypal-commerce-inline-button-initialize-options';\n\nexport default class PayPalCommerceInlineButtonStrategy implements CheckoutButtonStrategy {\n    private paypalSdk?: PayPalSDK;\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceInlineButtonInitializeOptions,\n    ): Promise<void> {\n        const { containerId, methodId, paypalcommerceinline } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.containerId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceinline) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerceinline\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n        // await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(methodId, containerId, paypalcommerceinline);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommerceinline: PayPalCommerceInlineButtonInitializeOptions,\n    ): void {\n        const paypalSdk = this.getPayPalSdkOrThrow();\n        const { buttonContainerClassName, style, onComplete, onError } = paypalcommerceinline;\n\n        if (!onComplete || typeof onComplete !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceinline.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            experience: 'accelerated',\n            fundingSource: paypalSdk.FUNDING.CARD,\n            style,\n            createOrder: () => this.createOrder(methodId),\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onApprove(data, actions, methodId),\n            onComplete: (data: CompleteCallbackDataPayload) =>\n                this.onComplete(data, methodId, onComplete),\n            onError: (error: Error) => this.onError(error, onError),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            const buttonContainerId = `${containerId}-paypal-accelerated-checkout-button`;\n\n            this.createPayPalButtonContainer(\n                containerId,\n                buttonContainerId,\n                buttonContainerClassName,\n            );\n\n            paypalButtonRender.render(`#${buttonContainerId}`);\n        }\n    }\n\n    private async createOrder(methodId: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(methodId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address except shipping data\n        await this.paymentIntegrationService.updateBillingAddress(address);\n        await this.paymentIntegrationService.updateShippingAddress(address);\n\n        const shippingOption = this.getShippingOptionOrThrow();\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.updateOrder();\n        } catch (error) {\n            this.onError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.updateOrder();\n        } catch (error) {\n            this.onError(error);\n        }\n    }\n\n    private async onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this.getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n            await this.updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this.getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this.paymentIntegrationService.updateBillingAddress(address);\n        }\n\n        await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n        await this.submitPayment(methodId, data.orderID);\n\n        return true;\n    }\n\n    private async onComplete(\n        data: CompleteCallbackDataPayload,\n        methodId: string,\n        callback?: () => void,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { intent } = paymentMethod.initializationData;\n\n        if (intent === PayPalCommerceIntent.CAPTURE) {\n            await this.submitPayment(methodId, data.orderID);\n        }\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    private onError(error: Error, onError?: () => void): void {\n        if (onError && typeof onError === 'function') {\n            onError();\n        }\n\n        throw new Error(error.message);\n    }\n\n    private async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        await this.paypalCommerceRequestSender.updateOrder({\n            availableShippingOptions: consignment.availableShippingOptions,\n            cartId: cart.id,\n            selectedShippingOption: consignment.selectedShippingOption,\n        });\n    }\n\n    private async submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({ methodId, paymentData });\n    }\n\n    private getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const consignment = this.paymentIntegrationService.getState().getConsignmentsOrThrow()[0];\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private createPayPalButtonContainer(\n        containerId: string,\n        buttonContainerId: string,\n        buttonContainerClassName = 'PaypalCommerceInlineButton',\n    ): void {\n        const paypalButtonContainer = document.createElement('div');\n\n        paypalButtonContainer.setAttribute('class', buttonContainerClassName);\n        paypalButtonContainer.setAttribute('id', buttonContainerId);\n\n        const container = document.getElementById(containerId);\n\n        if (container) {\n            container.innerHTML = '';\n            container.append(paypalButtonContainer);\n        }\n    }\n\n    private getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PayPalCommerceRequestSender, PayPalCommerceScriptLoader } from '../index';\n\nimport PayPalCommerceInlineButtonStrategy from './paypal-commerce-inline-button-strategy';\n\nconst createPayPalCommerceInlineButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceInlineButtonStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceInlineButtonStrategy(\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceInlineButtonStrategy, [\n    { id: 'paypalcommerceinline' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport {\n    createPaymentClient,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(\n                store,\n                paymentClient,\n                requestSender,\n                formPoster,\n                locale,\n                host,\n            ),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV3Initializer,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport {\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n} from '../payment/strategies/paypal-commerce';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { ApplePayButtonStrategy } from './strategies/apple-pay';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n    BraintreeVenmoButtonStrategy,\n} from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport {\n    PaypalCommerceAlternativeMethodsButtonStrategy,\n    PaypalCommerceButtonStrategy,\n    PaypalCommerceCreditButtonStrategy,\n    PaypalCommerceVenmoButtonStrategy,\n} from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator,\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator,\n        paymentRequestTransformer,\n        paymentHumanVerificationHandler,\n    );\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n    const subscriptionsRequestSender = new SubscriptionsRequestSender(requestSender);\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(subscriptionsRequestSender);\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        billingAddressRequestSender,\n        subscriptionsActionCreator,\n    );\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        consignmentRequestSender,\n        checkoutRequestSender,\n    );\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.APPLEPAY,\n        () =>\n            new ApplePayButtonStrategy(\n                store,\n                checkoutActionCreator,\n                requestSender,\n                paymentMethodActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                remoteCheckoutActionCreator,\n                orderActionCreator,\n                new ApplePaySessionFactory(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\n        () =>\n            new AmazonPayV2ButtonStrategy(\n                store,\n                checkoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoButtonStrategy(\n                store,\n                paymentMethodActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV3,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BNZ,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ORBITAL,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE,\n        () =>\n            new PaypalCommerceButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_CREDIT,\n        () =>\n            new PaypalCommerceCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                orderActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_APMS,\n        () =>\n            new PaypalCommerceAlternativeMethodsButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_VENMO,\n        () =>\n            new PaypalCommerceVenmoButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    return registry;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent =\n    | EmbeddedCheckoutCompleteEvent\n    | EmbeddedCheckoutErrorEvent\n    | EmbeddedCheckoutFrameErrorEvent\n    | EmbeddedCheckoutFrameLoadedEvent\n    | EmbeddedCheckoutLoadedEvent\n    | EmbeddedCheckoutSignedOutEvent;\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError,\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = EmbeddedContentStyleConfiguredEvent;\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent, IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { LoadingIndicator } from '../common/loading-indicator';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions,\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.CheckoutComplete,\n                this._options.onComplete,\n            );\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.CheckoutError,\n                this._options.onError,\n            );\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.CheckoutLoaded,\n                this._options.onLoad,\n            );\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.FrameLoaded,\n                this._options.onFrameLoad,\n            );\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.SignedOut,\n                this._options.onSignOut,\n            );\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () =>\n            this._configureStyles(),\n        );\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then((url) => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then((iframe) => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch((error) => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error).catch(() => {\n                    this._messageListener.trigger({\n                        type: EmbeddedCheckoutEventType.FrameError,\n                        payload: error,\n                    });\n\n                    this._loadingIndicator.hide();\n\n                    throw error;\n                });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender\n            .post<{ redirectUrl: string }>(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch((response) => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(\n            this._location.href,\n        )}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry =\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent;\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { IFrameComponent, iframeResizer, isIframeEvent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\n\nexport default class ResizableIframeCreator {\n    constructor(private _options?: { timeout: number }) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer,\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout).catch((error) => {\n            container.removeChild(iframe);\n\n            throw error;\n        });\n    }\n\n    private _toResizableFrame(\n        iframe: HTMLIFrameElement,\n        timeoutInterval: number,\n    ): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(\n                    new NotEmbeddableError(\n                        'Unable to embed the iframe because the content could not be loaded.',\n                    ),\n                );\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(\n                        new NotEmbeddableError(\n                            event.data.payload.message,\n                            NotEmbeddableErrorType.MissingContent,\n                        ),\n                    );\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer(\n                        {\n                            scrolling: false,\n                            sizeWidth: false,\n                            heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                        },\n                        iframe,\n                    );\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(\n    options: IFrameOptions,\n    target: string | HTMLElement,\n): IFrameComponent[] {\n    /* eslint-disable @typescript-eslint/no-var-requires */\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { LoadingIndicator } from '../common/loading-indicator';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options,\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: unknown): error is CustomError {\n    return typeof error === 'object' && error !== null && 'message' in error && 'type' in error;\n}\n","import { CustomError, isCustomError } from '../../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {},\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(\n            EmbeddedContentEventType.StyleConfigured,\n            ({ payload }) => {\n                handler(payload);\n            },\n        );\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers).forEach((key) => {\n            if (message.type !== key) {\n                return;\n            }\n\n            const handler = this._messageHandlers[key];\n\n            if (handler) {\n                (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n            }\n        });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import {\n    IframeEventListener,\n    IframeEventPoster,\n    setupContentWindowForIframeResizer,\n} from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(\n    options: EmbeddedCheckoutMessengerOptions,\n): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent },\n    );\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"messageformat\");","import { isObject, union } from 'lodash';\nimport MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(config: Partial<LanguageConfig>, private _logger: Logger) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach((key) => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(\n                this._translations[prefixedKey] || '',\n            );\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultLocale: '',\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const fallbackTranslations = this._flattenObject(config.fallbackTranslations || {});\n        const translationKeys = union(\n            Object.keys(fallbackTranslations),\n            Object.keys(defaultTranslations),\n            Object.keys(translations),\n        );\n\n        translationKeys.forEach((key) => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else if (defaultTranslations[key]) {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = config.defaultLocale ?? DEFAULT_LOCALE;\n            } else {\n                output.translations[key] = fallbackTranslations[key];\n                output.locales[key] = config.fallbackLocale ?? DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(\n        object: Translations,\n        result: Translations = {},\n        parentKey = '',\n    ): Translations {\n        try {\n            Object.keys(object).forEach((key) => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return (\n            Object.keys(this._locales)\n                .map((key) => this._locales[key])\n                .filter((code) => code.split('-')[0] === this._locale.split('-')[0]).length > 0\n        );\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(\n    config: Partial<LanguageConfig> = {},\n): LanguageService {\n    return new LanguageService(config, getDefaultLogger());\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\n\ninterface AnalyticsTrackerWindowGA extends AnalyticsTrackerWindow {\n    ga(command: string, eventName: string, payload: AnalyticPayload): void;\n}\n\nfunction isAnalyticsTrackerWindowGA(\n    window: Window | AnalyticsTrackerWindowGA,\n): window is AnalyticsTrackerWindowGA {\n    return window && 'ga' in window && typeof window.ga === 'function';\n}\n\nexport function isGoogleAnalyticsAvailable(): boolean {\n    return isAnalyticsTrackerWindow(window) && isAnalyticsTrackerWindowGA(window);\n}\n\nexport function sendGoogleAnalytics(type: string, payload: AnalyticPayload): void {\n    if (isAnalyticsTrackerWindowGA(window)) {\n        window.ga('send', type, {\n            ...payload,\n            nonInteraction: false,\n        });\n    }\n}\n\n/**\n * Max size of the payload for the Google Analytics module\n * if the limit will be succeeded, the GA throwing a silent error,\n * and only in debug mode you can see it\n */\nexport function isPayloadSizeLimitReached(obj: AnalyticPayload): boolean {\n    const ANALYTICS_MAX_URI_LENGTH = 8096;\n\n    return serializeAnalyticsEventPayload(obj).length >= ANALYTICS_MAX_URI_LENGTH;\n}\n\nfunction serializeAnalyticsEventPayload(obj: AnalyticPayload): string {\n    return Object.keys(obj)\n        .reduce((acc: string[], key) => {\n            const type = typeof obj[key];\n\n            if (type === 'string' || type === 'number') {\n                return [...acc, `${key}=${obj[key]}`];\n            }\n\n            if (type === 'object' && obj[key] !== null) {\n                return [...acc, serializeAnalyticsEventPayload(obj[key] as AnalyticPayload)];\n            }\n\n            return acc;\n        }, [])\n        .join('&');\n}\n\ninterface AnalyticPayload {\n    [key: string]: unknown;\n}\n","import { keys } from 'lodash';\n\nimport { LineItemMap } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport AnalyticsExtraItemsManager from './analytics-extra-items-manager';\nimport {\n    isGoogleAnalyticsAvailable,\n    isPayloadSizeLimitReached,\n    sendGoogleAnalytics,\n} from './analytics-tracker-ga';\nimport { AnalyticsTracker } from './analytics-tracker-window';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean } = {};\n    private _analyticStepOrder: AnalyticStepType[] = ['customer', 'shipping', 'billing', 'payment'];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private analyticsExtraItemsManager: AnalyticsExtraItemsManager,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {},\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some((value) => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(\n                        ', ',\n                    )}.`,\n                );\n            }\n\n            this._analyticStepOrder = checkoutSteps;\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: { lineItems, discountAmount, id },\n        } = checkout;\n\n        const extraItemsData = this.analyticsExtraItemsManager.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track(\n            'Checkout Started',\n            this.getTrackingPayload({\n                revenue: grandTotal,\n                shipping: shippingCostTotal,\n                tax: taxTotal,\n                discount: discountAmount,\n                coupons,\n                lineItems,\n                extraItemsData,\n            }),\n        );\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.analyticsExtraItemsManager.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        const isMissingOrdersExperimentEnabled = this.checkoutService.getState().data.getConfig()\n            ?.checkoutSettings.features['DATA-6891.missing_orders_within_GA'];\n\n        const payload = this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        });\n\n        if (\n            isMissingOrdersExperimentEnabled &&\n            isGoogleAnalyticsAvailable() &&\n            isPayloadSizeLimitReached(payload)\n        ) {\n            sendGoogleAnalytics('transaction', {\n                '&ti': payload.orderId,\n                '&ta': payload.affiliation,\n                '&tr': payload.revenue,\n                '&ts': payload.shipping,\n                '&tt': payload.tax,\n                '&tcc': payload.coupon,\n                '&cu': payload.currency,\n            });\n            payload.products.forEach((product) => {\n                sendGoogleAnalytics('item', {\n                    '&ti': payload.orderId,\n                    '&in': product.name,\n                    '&ic': product.sku,\n                    '&iv': `${product.category}`,\n                    '&ip': product.price,\n                    '&iq': product.quantity,\n                });\n            });\n\n            // TODO: decide how to send large orders to Segment without sending to GA again\n            return this.analyticsExtraItemsManager.clearExtraItemData(cartId);\n        }\n\n        this.analytics.track('Order Completed', payload);\n\n        this.analyticsExtraItemsManager.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shippingMethod?: string;\n            paymentMethod?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shippingMethod = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.paymentMethod = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shippingMethod && !payload.paymentMethod) {\n            payload.shippingMethod = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId =\n            stepId === AnalyticStepId.SHIPPING ? `${stepId}-${shippingMethodId}` : stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            orderId,\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map((coupon) => coupon.code.toUpperCase()).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return (\n            Object.prototype.hasOwnProperty.call(this._completedSteps, stepId) ||\n            (stepId === AnalyticStepId.SHIPPING &&\n                Object.prototype.hasOwnProperty.call(\n                    this._completedSteps,\n                    `${stepId}-${shippingMethodId}`,\n                ))\n        );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const {\n            data: { getOrder },\n        } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const {\n            data: { getCheckout },\n        } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const {\n            data: { getConfig },\n        } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const {\n            data: { getConfig },\n        } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return shippingOption && shippingOption.id && shippingOption.description\n            ? shippingOption\n            : null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return paymentMethod && paymentMethod.config ? paymentMethod.config.displayName || '' : '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map((item) => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map((item) => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map((item) => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map((option) => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                sku: item.sku,\n                price: item.salePrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                brand: itemsData[item.productId] ? itemsData[item.productId].brand : '',\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant: (itemAttributes || []).join(', '),\n            };\n        });\n\n        return [...customItems, ...physicalAndDigitalItems, ...giftCertificateItems];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n\nexport interface ExtraItemsData {\n    [productId: string]: {\n        brand: string;\n        category: string;\n    };\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {}\n\n    trackOrderComplete(): void {}\n\n    trackStepViewed(): void {}\n\n    trackStepCompleted(): void {}\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsExtraItemsManager from './analytics-extra-items-manager';\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig,\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            new AnalyticsExtraItemsManager(localStorageFallback),\n            window.analytics,\n            stepTrackerConfig,\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","export enum AnalyticStepType {\n    CUSTOMER = 'customer',\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n    PAYMENT = 'payment',\n}\n\nexport const AnalyticStepOrder: AnalyticStepType[] = [\n    AnalyticStepType.CUSTOMER,\n    AnalyticStepType.SHIPPING,\n    AnalyticStepType.BILLING,\n    AnalyticStepType.PAYMENT,\n];\n","import { LineItemMap } from '../cart';\nimport { CheckoutSelectors, CheckoutStoreSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { AnalyticStepOrder, AnalyticStepType } from './analytics-steps';\nimport BodlService from './bodl-service';\nimport { BodlEventsCheckout, BodlEventsPayload, BODLProduct } from './bodl-window';\n\nexport default class BodlEmitterService implements BodlService {\n    private _checkoutStarted = false;\n    private _emailEntryBegan = false;\n    private _shippingOptionsShown = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private state?: CheckoutStoreSelector;\n\n    constructor(\n        private subscribe: (subscriber: (state: CheckoutSelectors) => void) => void,\n        private bodlEvents: BodlEventsCheckout,\n    ) {\n        this.subscribe((state) => {\n            this.setState(state.data);\n\n            const config = this.state?.getConfig();\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n        });\n    }\n\n    setState(state: CheckoutStoreSelector) {\n        this.state = state;\n    }\n\n    checkoutBegin(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.state?.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            cart: { cartAmount, currency, lineItems, id, coupons },\n            channelId,\n        } = checkout;\n\n        this.bodlEvents.emitCheckoutBeginEvent({\n            event_id: id,\n            currency: currency.code,\n            cart_value: cartAmount,\n            coupon_codes: coupons.map((coupon) => coupon.code.toUpperCase()),\n            line_items: this._getProducts(lineItems, currency.code),\n            channel_id: channelId,\n        });\n\n        this._checkoutStarted = true;\n    }\n\n    orderPurchased(): void {\n        const order = this.state?.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            currency,\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            lineItems,\n            cartId,\n            coupons,\n            channelId,\n            taxTotal,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        this.bodlEvents.emitOrderPurchasedEvent({\n            event_id: cartId,\n            currency: currency.code,\n            order_id: orderId,\n            tax: taxTotal,\n            channel_id: channelId,\n            cart_value: orderAmount,\n            coupon_codes: coupons.map((coupon) => coupon.code.toUpperCase()),\n            shipping_cost: shippingCostTotal,\n            line_items: this._getProducts(lineItems, currency.code),\n        });\n    }\n\n    stepCompleted(currentStep?: AnalyticStepType): void {\n        if (!currentStep) {\n            return;\n        }\n\n        AnalyticStepOrder.some((step: AnalyticStepType) => {\n            if (!this._hasStepCompleted(step)) {\n                this._trackCompletedStep(step);\n            }\n\n            return step === currentStep;\n        });\n    }\n\n    customerEmailEntry(email?: string) {\n        if (this._emailEntryBegan || !email?.length) {\n            return;\n        }\n\n        this._emailEntryBegan = true;\n        this.bodlEvents.emit('bodl_checkout_email_entry_began');\n    }\n\n    customerSuggestionInit(payload?: BodlEventsPayload) {\n        this.bodlEvents.emit('bodl_checkout_customer_suggestion_initialization', payload);\n    }\n\n    customerSuggestionExecute() {\n        this.bodlEvents.emit('bodl_checkout_customer_suggestion_execute');\n    }\n\n    customerPaymentMethodExecuted(payload?: BodlEventsPayload) {\n        this.bodlEvents.emit('bodl_checkout_customer_payment_method_executed', payload);\n    }\n\n    showShippingMethods() {\n        if (this._shippingOptionsShown) {\n            return;\n        }\n\n        this._shippingOptionsShown = true;\n        this.bodlEvents.emit('bodl_checkout_show_shipping_options');\n    }\n\n    selectedPaymentMethod(paymentOption?: string) {\n        this.bodlEvents.emit('bodl_checkout_payment_method_selected', { paymentOption });\n    }\n\n    clickPayButton(payload?: BodlEventsPayload) {\n        this.bodlEvents.emit('bodl_checkout_click_pay_button', payload);\n    }\n\n    paymentRejected() {\n        this.bodlEvents.emit('bodl_checkout_payment_rejected');\n    }\n\n    paymentComplete() {\n        this.bodlEvents.emit('bodl_checkout_payment_complete');\n    }\n\n    exitCheckout() {\n        this.bodlEvents.emit('bodl_checkout_exit');\n    }\n\n    private _getProducts(lineItems: LineItemMap, currencyCode: string): BODLProduct[] {\n        const customItems: BODLProduct[] = (lineItems.customItems || []).map((item) => ({\n            product_id: item.id,\n            sku: item.sku,\n            base_price: item.listPrice,\n            sale_price: item.listPrice,\n            purchase_price: item.listPrice,\n            quantity: item.quantity,\n            product_name: item.name,\n            currency: currencyCode,\n        }));\n\n        const giftCertificateItems: BODLProduct[] = lineItems.giftCertificates.map((item) => {\n            return {\n                product_id: item.id,\n                gift_certificate_id: item.id,\n                base_price: item.amount,\n                sale_price: item.amount,\n                purchase_price: item.amount,\n                product_name: item.name,\n                gift_certificate_name: item.name,\n                gift_certificate_theme: item.theme,\n                quantity: 1,\n                currency: currencyCode,\n            };\n        });\n\n        const physicalAndDigitalItems: BODLProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map((item) => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map((option) => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                quantity: item.quantity,\n                product_name: item.name,\n                base_price: item.listPrice,\n                sale_price: item.salePrice,\n                purchase_price: item.salePrice > 0 ? item.salePrice : item.listPrice,\n                sku: item.sku,\n                variant_id: item.variantId,\n                discount: item.discountAmount,\n                brand_name: item.brand,\n                currency: currencyCode,\n                category_names: item.categoryNames || [],\n            };\n        });\n\n        return [...customItems, ...physicalAndDigitalItems, ...giftCertificateItems];\n    }\n\n    private _trackCompletedStep(step: AnalyticStepType) {\n        this._completedSteps[step] = true;\n        this.bodlEvents.emit('bodl_checkout_step_completed', { step });\n    }\n\n    private _hasStepCompleted(step: AnalyticStepType): boolean {\n        return this._completedSteps[step];\n    }\n}\n","import BodlService from './bodl-service';\n\nexport default class NoopBodlService implements BodlService {\n    checkoutBegin(): void {}\n\n    orderPurchased(): void {}\n\n    stepCompleted(): void {}\n\n    customerEmailEntry(): void {}\n\n    customerSuggestionInit(): void {}\n\n    customerSuggestionExecute(): void {}\n\n    customerPaymentMethodExecuted(): void {}\n\n    showShippingMethods(): void {}\n\n    selectedPaymentMethod(): void {}\n\n    clickPayButton(): void {}\n\n    paymentRejected(): void {}\n\n    paymentComplete(): void {}\n\n    exitCheckout(): void {}\n}\n","import { CheckoutSelectors } from '../checkout';\n\nimport BodlEmitterService from './bodl-emitter-service';\nimport BodlService from './bodl-service';\nimport { isBodlEnabled } from './is-bodl-enabled';\nimport NoopBodlService from './noop-bodl-service';\n\n/**\n * Creates an instance of `BodlService`.\n *\n * @remarks\n *\n * ```js\n * const bodlService = BodlService();\n * bodlService.checkoutBegin();\n *\n * ```\n *\n * @param {CheckoutService} checkoutService - An instance of CheckoutService\n * @returns an instance of `BodlService`.\n */\nexport default function createBodlService(\n    subscribe: (subscriber: (state: CheckoutSelectors) => void) => void,\n): BodlService {\n    if (isBodlEnabled(window)) {\n        return new BodlEmitterService(subscribe, window.bodlEvents.checkout);\n    }\n\n    return new NoopBodlService();\n}\n","import BodlEventsWindow from './bodl-window';\n\nexport function isBodlEnabled(window: Window): window is BodlEventsWindow {\n    return 'bodlEvents' in window;\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","throwErrorAction","type","error","meta","action","concat","of","throwError","createErrorAction","payload","message","object","name","setPrototypeOf","__proto__","Error","captureStackTrace","stack","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","BillingAddressActionType","_requestSender","_subscriptionActionCreator","continueAsGuest","credentials","options","store","state","getState","checkout","getCheckout","customer","getCustomer","isGuest","billingAddressRequestBody","billingAddress","getBillingAddress","existingBillingAddressRequestBody","merge","createAction","ContinueAsGuestRequested","defer","this","_createOrUpdateBillingAddress","id","body","ContinueAsGuestSucceeded","pipe","catchError","ContinueAsGuestFailed","_updateCustomerConsent","updateAddress","address","Observable","observer","next","UpdateBillingAddressRequested","email","then","UpdateBillingAddressSucceeded","complete","catch","response","UpdateBillingAddressFailed","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","ContentType","SDK_VERSION_HEADERS","DEFAULT_PARAMS","include","join","timeout","url","headers","Accept","post","params","put","ErrorActionType","clearError","ClearError","getEnvironment","process","env","NODE_ENV","e","_console","log","_logToConsole","messages","info","warn","debug","isEnabled","logger","console","getDefaultLogger","cacheAction","fn","memoize","args","from","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","lastArg","length","instanceMethods","set","ConfigActionType","_configRequestSender","loadConfig","LoadConfigRequested","LoadConfigSucceeded","LoadConfigFailed","DEFAULT_RESPONSE","status","errors","title","INTERNAL_USE_ONLY","CouponActionType","_couponRequestSender","applyCoupon","code","ApplyCouponRequested","ApplyCouponSucceeded","ApplyCouponFailed","removeCoupon","RemoveCouponRequested","RemoveCouponSucceeded","RemoveCouponFailed","CheckoutIncludes","joinIncludes","includes","uniq","couponCode","AvailableShippingOptions","delete","GiftCertificateActionType","_giftCertificateRequestSender","applyGiftCertificate","giftCertificate","ApplyGiftCertificateRequested","ApplyGiftCertificateSucceeded","ApplyGiftCertificateFailed","removeGiftCertificate","RemoveGiftCertificateRequested","RemoveGiftCertificateSucceeded","RemoveGiftCertificateFailed","giftCertificateCode","isResolvableModule","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","token","cacheToken","_getInstance","register","factory","_hasFactory","_hasInstance","resolvedToken","keys","_registry","_resolveToken","bind","resolveId","_encodeToken","btoa","JSON","stringify","_decodeToken","parse","atob","registeredTokens","query","results","forEach","registeredToken","resolverId","result","matches","default","entries","push","matched","sort","b","filter","find","toResolvableModule","resolveIds","assign","assertApplePayWindow","window","isApplePayWindow","create","request","ApplePaySession","DefaultLabels","style","width","backgroundColor","backgroundPosition","backgroundSize","padding","backgroundImage","borderRadius","backgroundRepeat","_paymentIntegrationService","_sessionFactory","_onAuthorizeCallback","noop","_onError","_subTotalLabel","Subtotal","_shippingLabel","Shipping","initialize","methodId","applepay","container","shippingLabel","subtotalLabel","onError","onPaymentAuthorize","loadPaymentMethod","_paymentMethod","getPaymentMethodOrThrow","_applePayButton","_createButton","addEventListener","_handleWalletButtonClick","deinitialize","Promise","resolve","signIn","signOut","executePaymentMethodCheckout","continueWithCheckoutCallback","containerId","document","getElementById","button","createElement","setAttribute","appendChild","event","preventDefault","cart","getCartOrThrow","config","getStoreConfigOrThrow","getCheckoutOrThrow","initializationData","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","paymentMethod","storeCountryCode","storeName","decimalPlaces","merchantCapabilities","supportedNetworks","requiresShipping","lineItems","physicalItems","requiredBillingContactFields","requiredShippingContactFields","countryCode","currencyCode","total","label","amount","grandTotal","toFixed","subtotal","taxes","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","loadCheckout","onpaymentauthorized","_onPaymentAuthorized","shippingAddress","_transformContactToAddress","shippingContact","updateShippingAddress","abort","selectionShippingOptionId","consignments","selectedShippingOption","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","option","shippingOptions","description","cost","detail","additionalDescription","identifier","Array","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","isRecommended","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","shippingCostTotal","selectShippingOption","paymentData","validationURL","merchantId","location","hostname","bigPayEndpoint","paymentsUrl","payment","billingContact","formattedPayload","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phone","phoneNumber","updateBillingAddress","submitOrder","useStoreCredit","submitPayment","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","firstName","givenName","lastName","familyName","city","locality","company","address1","addressLines","address2","postalCode","stateOrProvince","administrativeArea","stateOrProvinceCode","customFields","paymentIntegrationService","getHost","createRequestSender","host","requestSender","createOrder","providerId","requestBody","updateOrder","scriptLoader","getPayPalSDK","initializesOnCheckoutPage","paypalSdk","loadPayPalSDK","getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","loadScript","async","attributes","paypal","clientToken","clientId","intent","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isInlineCheckoutEnabled","isPayPalCreditAvailable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldShowInlineCheckout","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","components","currency","formPoster","paypalCommerceRequestSender","paypalCommerceScriptLoader","paypalcommerce","renderButton","signInCustomer","signOutCustomer","getPayPalSdkOrThrow","onComplete","paypalCallbacks","onShippingAddressChange","data","onShippingOptionsChange","onApprove","actions","onHostedCheckoutApprove","orderID","tokenizePayment","buttonRenderOptions","fundingSource","FUNDING","PAYPAL","height","paypalButton","Buttons","isEligible","render","removeElement","orderId","postForm","order_id","payment_type","provider","order","orderDetails","payer","purchase_units","shipping","getAddress","given_name","surname","email_address","address_line_1","admin_area_2","country_code","postal_code","admin_area_1","handleError","shippingOption","getShippingOptionOrThrow","vault_payment_instrument","set_as_default_stored_instrument","device_info","method_id","paypal_account","consignment","getConsignmentsOrThrow","cartId","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","elementId","element","remove","createFormPoster","getScriptLoader","createCustomerStrategyRegistry","customerStrategyFactories","registry","createCustomerStrategy","isSpamProtectionExecuteSucceededAction","succeededAction","CustomerActionType","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","customerAccount","isStorefrontSpamProtectionEnabled","checkoutSettings","createAccount","switchMap","loadCurrentCheckout","CreateCustomerSucceeded","CreateCustomerRequested","execute","CreateCustomerFailed","customerAddress","CreateCustomerAddressRequested","CreateCustomerAddressSucceeded","CreateCustomerAddressFailed","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerStrategyActionType","_strategyRegistry","_strategyRegistryV2","SignInRequested","_getStrategy","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","ExecutePaymentMethodCheckoutFailed","customerStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","strategy","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","isArray","includesDictionary","deletions","pickBy","on","additions","difference","mergeIncludes","updateCheckout","CheckoutActionType","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","LoadCheckoutRequested","loadFormFields","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","context","getContextConfig","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","isEqual","cartA","cartB","_normalize","cartAmount","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","map","item","extendedSalePrice","quantity","giftCertificates","recipient","giftWrapping","previous","updated","validate","comparator","outstandingBalance","_compareCoupons","coupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","FormFieldsActionType","_formFieldsRequestSender","LoadFormFieldsRequested","loadFields","LoadFormFieldsSucceeded","LoadFormFieldsFailed","OrderActionType","_orderRequestSender","_checkoutValidator","loadOrder","LoadOrderRequested","LoadOrderSucceeded","LoadOrderFailed","loadOrderPayments","LoadOrderPaymentsRequested","LoadOrderPaymentsSucceeded","LoadOrderPaymentsFailed","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","externalSource","getExternalSource","variantIdentificationToken","getVariantIdentificationToken","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderSucceeded","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderSucceeded","FinalizeOrderFailed","getOrder","gateway","gatewayId","omitBy","isNil","PaymentMethodActionType","loadPaymentMethods","LoadPaymentMethodsRequested","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","getCart","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","PaymentActionType","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","_paymentHumanVerificationHandler","initializeOffsitePayment","instrumentId","target","promise","shouldSaveInstrument","shouldSetAsDefaultInstrument","bigpay_token","transform","InitializeOffsitePaymentRequested","race","Boolean","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","SubmitPaymentRequested","handle","additionalAction","SubmitPaymentSucceeded","SubmitPaymentFailed","_client","reject","_transformResponse","statusText","isBillingAddressLike","mapToInternalAddress","addressId","addressLine1","addressLine2","province","provinceCode","postCode","country","_decimalPlaces","toInteger","Math","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","indexOf","couponType","mapToInternalGiftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","idKey","reduce","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","items","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","some","lineItem","isShippingRequired","storeCredit","taxSubtotal","taxTotal","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","split","RegExp","month","year","trimmedMonth","trimmedYear","toObject","test","card","number","maxLength","max","creditCardType","lengths","unformattedValue","unformat","gaps","gapIndex","output","index","replace","mapToInternalOrder","orderMeta","payments","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","orderToken","callbackUrl","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","step","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","selected","transitTime","isVaultedInstrument","instrument","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","paymentMethods","getPaymentMethod","_mapShippingAddress","getConsignments","getShippingOption","storeConfig","getStoreConfig","contextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","getPaymentToken","vaultAccessToken","_transformPaymentMethod","quoteMeta","geoCountryCode","source","pick","storeProfile","transformWithHostedFormData","values","nonce","paymentMethodMeta","_transformHostedInputValues","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","every","selectedPickupOption","getShippingAddress","cancellable","cancel","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","childList","subtree","disconnect","_window","callback","MutationObserver","parseUrl","anchor","href","port","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_targetOrigin","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","bindMethodDecorator","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_googleRecaptcha","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","parentNode","removeChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","Subject","_widgetId","size","getResponse","reset","_event$","_recaptcha","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","visibility","attributeFilter","_scriptLoader","_loadPromise","_loadScript","grecaptcha","createSpamProtection","MutationObserverFactory","mapFromPaymentErrorResponse","joinErrors","flatMap","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","overflow","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_handleEnter","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","field","_getFirstField","otherFields","without","all","otherField","submit","additionalActionData","_store","getConfig","omit","fieldOptions","_getCardInstrument","createScriptLoader","getCardInstrument","MissingPaymentInstrument","createPaymentClient","paymentClient","subscribe","setHost","paymentSettings","bigpayBaseUrl","ConsignmentActionType","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","getConsignmentByAddress","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","DEFAULT_INCLUDES","SpamProtectionActionType","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutSucceeded","VerifyCheckoutFailed","ExecuteRequested","ExecuteSucceeded","ExecuteFailed","SubscriptionsActionType","_subscriptionsRequestSender","subscriptions","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","UpdateSubscriptionsFailed","isPlainObject","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","getBillingAddressOrThrow","getLocale","getCustomerOrThrow","getCardInstrumentOrThrow","getOrderOrThrow","getPaymentTokenOrThrow","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentMethodInitialized","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_storeProjection","createHostedForm","subscriber","filters","initializeOffsitePaymentConfig","dispatch","ProjectionActionType","createDataStoreProjection","stateTransformer","projection","createDataStore","Synchronize","initial","_transformSelectors","createPaymentIntegrationService","storeProjectionFactory","checkoutActionCreator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","customerActionCreator","getShippableItemsCount","guard","errorFactory","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_buttonParentContainer","_createAmazonPayButtonParentContainer","_amazonPayV2Button","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","prepareCheckout","createCheckoutSessionConfig","publicKeyId","signedPayload","requestConfig","_isEnvironmentSpecific","_getAmazonPayV2Button","onClick","initCheckout","signout","renderAmazonPayButton","decoupleCheckoutInitiation","placement","parentContainerId","_getButtonParentContainer","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","isPh4Enabled","features","isPh4UsOnly","uid","random","toString","substr","parentContainer","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","shopPath","buttonBaseConfig","productType","PayOnly","PayAndShip","buttonColor","Gold","buttonOptions","tmpConfig","sandbox","estimatedOrderAmount","createCheckoutSession","_getOrThrow","region","amazonPayV2Region","amazon","createAmazonPayV2PaymentProcessor","BoltDeveloperMode","loadBoltClient","publishableKey","developerModeParams","BoltCheckout","getDomainURL","_getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cacheKey","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","braintree","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","_braintreeSDKCreator","createInitOptions","settings","locale","collectShipping","paymentRequest","String","handleSuccess","billing","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","device_data","card_information","_getCardInformation","billing_address","_getAddress","shipping_address","streetAddress","extendedAddress","first_name","last_name","phone_number","address_line_2","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_isBuyNowFlow","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","updatePaymentDataRequest","payloadToUpdate","paymentDataRequest","_getPaymentDataRequest","transactionInfo","totalPrice","_paymentDataRequest","displayWallet","loadPaymentData","parseResponse","tokenizePayload","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","updateBuyNowFlowFlag","isBuyNowFlow","_getMethodId","_getCheckout","hasShippingAddress","googlePay","_getGooglePayClient","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","companyName","address3","postPaymentData","details","buyNowCartId","tokenFormat","cart_id","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_getGooglePayPaymentDataRequest","gatewayMerchantId","merchantName","merchantInfo","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","totalPriceStatus","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","tokenizationData","androidPayCards","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","getStripeClient","stripeAccount","stripeClient","bcStripeClient","stripe","betas","getElements","stripeElements","bcStripeElements","fetchUpdates","update","elements","Stripe","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","forgetCheckout","RemoteCheckoutActionType","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingSucceeded","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingSucceeded","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsSucceeded","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","UpdateRemoteCheckout","_remoteCheckoutActionCreator","_amazonPayV2PaymentProcessor","amazonpay","Checkout","_boltScriptLoader","bolt","onInit","developerConfig","_boltClient","_getCustomerEmail","_hasBoltAccount","hasBoltAccount","checkoutPaymentMethodExecuted","_openBoltCheckoutModal","boltClient","_getBoltClient","embeddedOneClickEnabled","callbacks","close","openCheckout","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_formPoster","_buttonClassName","visaCheckoutOptions","initOptions","storeLanguage","signInButton","_createSignInButton","init","paymentSuccessPayload","_paymentInstrumentSelected","_onPaymentSelectComplete","queueId","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","display","flexDirection","className","innerHTML","mapToLegacyBillingAddress","line1","line2","mapToLegacyShippingAddress","recipientName","mapToBraintreeShippingAddressOverride","braintreepaypal","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalButton","paypalCheckoutErrorCallback","_handleError","paypalButtonRender","_setupPayment","authorizeData","_tokenizePayment","_removeElement","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","buttonContainerId","onErrorCallback","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","color","GOLD","buttonStyle","_chasePayScriptLoader","chasePayOptions","digitalSessionId","ChasePay","configure","isChasePayUp","insertButtons","containers","EventType","START_CHECKOUT","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","GooglePayCustomerMethodType","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_walletButton","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","hasPhysicalItems","checkoutUrl","siteLink","getCallbackUrl","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassOptions","allowedCardTypes","suppressShippingAddress","masterpassScriptLoaderParams","isMasterpassSrcEnabled","Masterpass","_signInButton","subdomain","StripePaymentMethodType","StripeStringConstants","StripeElementType","_stripeUPEScriptLoader","stripeupe","onEmailChange","getStyles","isLoading","isStripeLinkAuthenticated","appearance","variables","colorPrimary","fieldInnerShadow","colorBackground","fieldBackground","colorText","labelText","colorDanger","fieldErrorText","colorTextSecondary","colorTextPlaceholder","fieldPlaceholderText","rules","borderColor","fieldBorder","fieldText","boxShadow","stripeUPEClient","_stripeElements","clientSecret","billingEmail","defaultValues","linkAuthenticationElement","getElement","AUTHENTICATION","StripeLinkAuthenticated","authenticated","mount","unmount","invalidFields","getBrowserInfo","navigator","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","screen_width","time_zone_offset","Date","getTimezoneOffset","AdyenActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","AdyenV2CardFields","isCardState","encryptedSecurityCode","encryptedExpiryMonth","adyenv2","_paymentInitializeOptions","clientSideAuthentication","originKey","clientKey","paymentMethodsResponse","translations","_adyenClient","_mountPaymentComponent","_paymentComponent","CreditCard","Bancontact","_mountCardVerificationComponent","_cardVerificationComponent","_validateCardData","componentState","_componentState","bigpayToken","encryptedCardNumber","encryptedExpiryYear","credit_card_number_confirmation","expiry_month","expiry_year","verification_value","browser_info","_processAdditionalAction","credit_card_token","finalize","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","additionalActionOptions","threeDS2Options","widgetSize","_handleAction","threeDS2ContainerId","onBeforeLoad","onLoad","adyenAction","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","ThreeDS2Challenge","QRCode","_mapAdyenPlaceholderData","holderName","street","houseNumberOrName","cardVerificationComponent","adyenClient","cardVerificationContainerId","SecuredFields","caretColor","onChange","_updateComponentState","validateState","validateCardFields","onFieldValid","paymentComponent","ACH","IDEAL","SEPA","hasVaultedInstruments","AliPay","GiroPay","Sofort","Klarna","KlarnaPayNow","KlarnaAccount","Vipps","WeChatPayQR","provider_data","cardComponent","props","componentRef","showValidation","_mapCardErrors","cardStateErrors","_stylesheetLoader","configuration","loadStylesheet","AdyenCheckout","getStylesheetLoader","isHostedInstrumentLike","AdyenV3CardFields","adyenv3","showPayButton","challengeWindowSize","showBrandsUnderCardNumber","_isHostedPaymentFormEnabled","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","formOptions","creditCard","form","_hostedForm","isHostedFormEnabled","_isAdditionalActionRequired","redirectUrl","redirect_url","PaymentStatusTypes","orderPayload","_shouldSubmitFullPayload","applicationId","locationId","square","_payments","_formValidationSubscription","unsubscribe","_card","destroy","initializeCard","onValidationChange","_getPayments","_subscribeToFormValidation","_getCard","errorMessage","verifyBuyer","_mapToSquareBillingContact","Set","eventObservables","eventType","isCompletelyValid","distinctUntilChanged","_squareV2PaymentProcessor","squarev2","_shouldVerify","SquareV2WebPaymentsSdkEnv","SANDBOX","LIVE","isSquareV2Window","assertSquareV2Window","Square","CountryActionType","_countryRequestSender","loadCountries","LoadCountriesRequested","LoadCountriesSucceeded","LoadCountriesFailed","_config","createPaymentStrategyRegistry","paymentStrategyFactories","createPaymentStrategy","PaymentStrategyActionType","PaymentStrategyType","FinalizeRequested","_loadOrderPaymentsIfNeeded","FinalizeSucceeded","FinalizeFailed","paymentStrategies","getByMethod","storage","saveExtraItemsData","category","setItem","getStorageKey","readExtraItemsData","getItem","clearExtraItemData","removeItem","ORDER_ITEMS_STORAGE_KEY","DEFAULT_STYLES","ROTATION_ANIMATION","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","show","parentId","opacity","hide","handleTransitionEnd","bottom","left","position","right","top","transition","indicator","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","_namespace","rawValue","withNamespace","getItemOnce","StoreCreditActionType","_storeCreditRequestSender","applyStoreCredit","ApplyStoreCreditRequested","removeStoreCredit","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","isPPSDKPaymentMethod","initializationStrategy","checkoutcomStrategies","credit_card","sepa","ideal","fawry","_getToken","_hasFactoryForMethod","saveExternalId","externalId","OrderIncludes","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","mode","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","shipping_amount","tax_amount","first","last","full","zipcode","display_name","unit_price","qty","item_image_url","item_url","categories","_getCategories","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","apikey","scriptURI","_getScriptURI","m","g","h","c","k","p","getElementsByTagName","l","arguments","f","a1","c1","a2","c2","insertBefore","public_api_key","script","_storeCreditActionCreator","_afterpayScriptLoader","_mapCurrencyToISO2","_afterpaySdk","_loadPaymentMethod","_redirectToAfterpay","redirect","AUD","NZD","CAD","USD","AfterPay","_paymentStrategyActionCreator","paymentToken","_isReadyToPay","editButtonId","_bindEditButton","_isModalFlow","_createContainer","_amazonPayButton","_isOneTimeTransaction","toUpperCase","_getAmazonPayButton","click","isModalFlow","clone","cloneNode","replaceChild","_showLoadingSpinner","_options","_threeDSecureFlow","is3dsEnabled","prepare","start","ACKNOWLEDGE","FINALIZE","orderRequest","_initializeOptions","frame","_createIframe","bluesnapv2","iframe","isAnalyticsTrackerWindow","analytics","errorCode","BoltError","getError","_analyticsExtraItemsManager","_useBoltClient","_useBoltEmbedded","onPaymentSelect","useBigCommerceCheckout","_boltEmbedded","_mountBoltEmbeddedField","_embeddedField","_setExtraItemsForAnalytics","_executeWithBoltClient","_executeWithBoltEmbedded","_executeWithBoltFullCheckout","success","transaction","reference","withAccountCreation","tokenizeResult","_validateTokenizeResult","last_four_digits","iin","expiration_month","expiration","expiration_year","create_account","shouldCreateAccount","embedded_checkout","_setBoltOrderId","getTransactionReference","transactionReference","_getBoltEmbedded","boltEmbedded","setOrderId","embeddedField","renderSeparateFields","lastFourDigits","expirationMonth","expirationYear","isNaN","isAnalyticsEnabled","_createElements","closeElement","mainElement","_element","_closeElement","_mainElement","_registerClick","setTimeout","_unregisterClick","_removeAfterTransition","classLayout","classClose","classOverlayText","background","transitionDuration","hasCloseButton","innerHtml","overlayText","addClassLayout","innerText","getOverlayStyle","_addEventListener","_removeEventListener","handleTransition","propertyName","BraintreeFormFieldType","_handleBlur","_applyStyles","_handleFocus","focus","_input","outline","getValue","off","isBraintreeFormFieldsMap","BraintreeHostedFormType","_isInitializedHostedForm","_formOptions","fieldType","_mapFieldType","emittedBy","_handleNameBlur","CardName","_handleNameFocus","_handleCardTypeChange","cards","_handleInputSubmitRequest","onEnter","_handleValidityChange","_mapValidationErrors","StoredCardVerification","_mapFieldOptions","isEmpty","_mapStyleOptions","_cardFields","_cardNameField","_mapBillingAddress","cardholderName","_mapTokenizeError","tokenizeForStoredCardVerification","countryName","expirationDate","cvv","mapStyles","fontSize","fontWeight","CardNumberVerification","CardNumber","CardExpiry","CardCodeVerification","CardCode","fieldKey","_createInvalidError","_createRequiredError","invalidFieldKeys","_braintreeHostedForm","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","_getErrorsRequiredFields","requestData","_mapToCreditCard","verifyCard","challenge3DSVerification","newWindowFlow","supportsPopups","focusWindow","useraction","getSessionId","appendSessionId","processedPayment","initializeHostedForm","isInitializedHostedForm","deinitializeHostedForm","tokenizeHostedForm","tokenizeHostedFormForStoredCardVerification","verifyCardWithHostedForm","_present3DSChallenge","addFrame","removeFrame","cancelVerifyCard","verification","roundedAmount","Number","challengeRequested","onLookupComplete","_data","countryCodeAlpha2","endpoint","_braintreePaymentProcessor","_isHostedFormInitialized","_is3dsEnabled","_deviceSessionId","_prepareHostedPaymentData","_preparePaymentData","commonPaymentData","_isSubmittingWithStoredCard","_isStoringNewCard","_shouldPerform3DSVerification","storedCreditCardNonce","three_ds_result","_credit","braintreeOptions","_loadPaypal","isBraintreeError","getOutstandingBalance","isVaultingEnabled","_formattedPayload","vaultPaymentInstrument","visaInitOptions","_cardinalClient","hostedForm","xid","payer_auth_request","_getBin","runBinProcess","_submitPayment","threeDsResult","getThreeDSecureData","_getOrderData","isCreditCardLike","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","CardinalSignatureValidationErrors","_provider","_configurationToken","_sdk","now","_getClientSDK","SetupCompleted","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","_getClientToken","_CBAMGPSScriptLoader","_sessionId","isTestModeFlagEnabled","_threeDSjs","isConfigured","wsVersion","newPaymentData","storeId","_initiateAuthentication","initiateAuthentication","msg","gatewayRecommendation","restApiResponse","authenticationStatus","_authenticatePayer","attempt","_resolve","authenticatePayer","cause","fullScreenRedirect","ThreeDS","ChasePayEventType","_wepayRiskClient","_walletEvent$","chasepay","walletButton","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","reqTokenId","expDate","accountNum","accountMask","extraData","AdditionalActionType","_processResponse","additionalActionRequired","OffsiteRedirect","_performRedirect","DOCUMENT_SUPPORTED_APMS","_createFormattedPayload","ccDocument","customerMobile","bic","iban","_clearpayScriptLoader","_clearpaySdk","_isCountrySupported","_redirectToClearpay","_getScriptUrl","PaReq","TermUrl","callback_url","MD","AuthenticationSourceStatus","_digitalRiverScriptLoader","_digitalRiverInitializeOptions","digitalriver","_getDigitalRiverInitializeOptions","_digitalRiverJS","_loadWidget","_unsubscribe","_digitalRiverCheckoutData","_submitVaultedInstrument","checkoutData","_isAuthenticateSourceAction","_authenticateSource","_loadSuccessResponse","readyForStorage","_getDigitalRiverJs","_getErrorMessage","_onSuccessResponse","_submitFormEvent","browserInfo","owner","reusable","billingAddressPayPal","_onReadyResponse","onRenderButton","paymentMethodConfiguration","_mountComplianceSection","sellingEntity","onSubmitForm","disabledPaymentMethods","digitalRiverConfiguration","showSavePaymentAgreement","onReady","descriptiveError","createDropin","_digitalRiverDropComponent","authenticateSource","sourceId","source_id","sourceClientSecret","source_client_secret","authenticateSourceResponse","failed","authentication_not_required","confirm","complianceDiv","complianceOptions","classes","base","compliance","entity","drfooter","cssText","classList","add","DigitalRiver","_googlePayProviderProcessor","isThreeDSecureEnabled","_googlePayOptions","_buttonClickEventHandler","_handleButtonClickedEvent","_verifyCard","newPayment","processAdditionalAction","_braintreePresent3DSChallenge","requireRenewNonce","_encodeNonce","googlePayToken","statusCode","processable","_isOffsiteRedirectResponse","_handleOffsiteRedirectResponse","partialResponse","partialBody","supportedCountries","supportedCountriesRequiringStates","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_authorize","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","_needsStateCode","klarnaAddress","street_address","family_name","street_address2","updateSessionData","authorize","res","approved","show_form","Credit","_klarnav2ScriptLoader","_klarnav2TokenUpdater","klarnaPayments","_klarnaPayments","_loadPaymentsWidget","klarnav2","updateClientToken","payment_method_category","Payments","_masterpassClient","_createMasterpassPayload","MolliePaymentMethodType","methodsNotAllowedWhenDigitalOrder","_mollieScriptLoader","mollie","controllers","each","controller","isCreditCard","shouldShowTSVHostedForm","_mountCardVerificationfields","_loadMollieJs","_mollieClient","_mountElements","disableButton","_loadPaymentMethodsAllowed","executeWithVaulted","executeWithCC","executeWithAPM","_cardHolderElement","_cardNumberElement","_verificationCodeElement","_expiryDateElement","_getMollieClient","createToken","shopper_locale","_getShopperLocale","issuer","creditcard","_getInitializeOptions","testmode","cardNumberId","cardCvcId","cardExpiryId","cardHolderId","mollieClient","createComponent","cartDigitalItems","paragraph","unsupportedMethodMessage","_isMollieWindow","Mollie","monerisOptions","profileId","_shouldShowTSVHostedForm","_executeWithVaulted","_executeWithCC","_windowEventListener","instrumentSettings","frameref","_monerisURL","_handleMonerisResponse","definedFields","monerisQueryParams","pmmsg","display_labels","enable_exp","enable_cvd","css_body","cssBody","css_textbox","cssTextbox","css_textbox_pan","cssTextboxCardNumber","css_textbox_exp","cssTextboxExpiryDate","css_textbox_cvd","cssTextboxCVV","css_input_label","cssInputLabel","pan_label","creditCardLabel","exp_label","expiryDateLabel","cvd_label","cvdLabel","queryString","monerisResponse","responseCode","dataKey","ActionTypes","OpyErrorType","isOpyPaymentMethod","widgetConfig","InvalidCart","_storefrontPaymentRequestSender","opy","_installWidget","nextAction","FORM_POST","formPost","formPostUrl","formFields","URL","fieldName","fieldValue","searchParams","append","decodeURI","widgetContainer","loadOpyWidget","Config","OpyRegion","AU_REGION_URL","SOURCES","AU","UK","US","OpenpayWidgets","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","scriptSrc","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","PayPalCommerceIntent","NON_INSTANT_PAYMENT_METHODS","_paypalCommercePaymentProcessor","_paypalCommerceFundingKeyResolver","_paypalCommerceRequestSender","_loadingIndicator","_pollingInterval","_pollingTimer","shouldRenderFields","_isAPM","_orderId","_isPaypalCommerceOptionsPayments","apmFieldsContainer","apmFieldsStyles","loadingIndicatorContainerId","buttonParams","_deinitializePollingTimer","_initializePollingMechanism","fundingKey","renderFields","renderButtons","paramsForProvider","isCheckout","getOrderStatus","getOrderId","_reinitializeButtons","clearTimeout","_getPayPalSdkScriptConfigOrThrow","setupPayment","isCredit","isAPM","isVenmo","_paypalScriptLoader","_validateStyleParams","updatedStyle","layout","shape","tagline","horizontal","_gatewayId","_isVenmoEnabled","optionalParams","_fundingSource","_paypalButtons","_processNotEligible","PaymentFields","fieldsParams","_paypalFields","fieldContainerElement","renderMessages","cartTotal","Messages","_paypalMessages","renderHostedFields","events","getInstrumentParams","HostedFields","paymentsSDK","orderCreationRequestBody","_hostedFields","submitHostedFields","getHostedFieldsValidationState","_patchNonInstantPaymentMethods","paymentRequestOptions","createPaypalCommercePaymentProcessor","paypalScriptLoader","_paypalCommerceHostedForm","_getInstrumentParams","executionPaymentData","PaypalCommerceFormFieldType","PaypalCommerceHostedFormType","_isPaypalCommerceFormFieldsMap","blur","cardTypeChange","validityChange","inputSubmitRequest","contingencies","liabilityShift","selector","updatedStyles","kebabCase","SubStrategyType","PENDING_REDIRECT_PARAM","_isRedirecting","currentUrlHasRedirectingParam","isRedirecting","setRedirecting","setRedirectingParamOnUrl","removeRedirectingParamFromUrl","getCurrentUrl","replaceCurrentUrl","history","replaceState","currentUrl","updatedUrl","stringifyUrl","exclude","isAnyContinue","overSome","x","isString","isUndefined","isObject","availableMethods","_humanVerificationHandler","form_fields","redirectionState","RedirectionState","handleRedirect","humanVerificationHandler","humanVerification","available_methods","_continueHandler","isSuccess","isContinue","isFailure","failureResponse","handleFailure","isError","COMPLETED_PAYMENTS_KEY","_browserStorage","isCompleted","paymentId","getCompletedPayments","setCompleted","completedPayments","setCompletedPayments","_subStrategyRegistry","_paymentResumer","browserStorage","_completedPayments","PPSDKCompletedPayments","subStrategy","resume","getPPSDKMethod","_subStrategy","getToken","cond","constant","CARD","NONE","stubTrue","UNSUPPORTED","_ppsdkStepHandler","humanVerificationCallback","_stepHandler","payment_method_id","auth_token","_prepareForReferredRegistration","_isThreeDSTwoExperimentOn","creq","SquareIntent","CardBrand","DigitalWalletType","squareOptions","_squareOptions","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","_getPaymentForm","build","_getNonceInstrument","_getCountryCode","_deferredRequestNonce","requestCardNonce","deferred","cardNonceResponseReceived","cardData","deferredRequest","_getDeferredRequestNonce","digital_wallet_type","none","_handleWalletNonceResponse","_is3DSExperimentOn","_getVerificationDetails","verificationResults","createPaymentRequest","_paymentRequestPayload","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeCountry","pending","setPostalCode","_getBillingContact","_getAmountAndCurrencyCode","CHARGE","_isSquareWindow","SqPaymentForm","bg","cs","da","el","et","fi","fil","he","hu","ja","ko","lt","lv","mt","nb","ro","ru","sk","sl","th","tr","vi","APM_REDIRECT","SOFORT","EPS","GRABPAY","BANCONTACT","GIROPAY","ALIPAY","KLARNA","_stripeScriptLoader","_isMounted","_isDeinitialize","_state","PAYMENT","_loadStripeElement","_stripeUPEClient","_executeWithAPM","_executeWithoutRedirect","_isCancellationError","stripeError","payment_intent","last_payment_error","_throwDisplayableStripeError","_processVaultedAdditionalAction","shopperLanguage","_loadStripeJs","colorIcon","stripeElement","billingDetails","NEVER","AUTO","wallets","applePay","confirmPayment","_mapStripePaymentData","paymentIntent","catchedConfirmError","stripePaymentData","confirmCardPayment","_mapStripeAddress","IF_REQUIRED","confirmParams","payment_method_data","billing_details","return_url","IconStyle","StripeV3ErrorType","isIndividualCardElementOptions","individualCardElementOptions","cardNumberElementOptions","cardCvcElementOptions","cardExpiryElementOptions","AuthFailure","stripev3","useIndividualCardFields","_useIndividualCardFields","_isCreditCard","_mountCardVerificationFields","_stripeV3Client","_mountCardFields","_stripeElement","shouldSubmitOrderBeforeLoadingAPM","_confirmStripePayment","_buildPaymentPayload","_handleEmptyPaymentIntentError","_unmountElement","_isAuthError","_getStripeJs","confirmAlipayPayment","handleActions","confirmIdealPayment","confirmSepaDebitPayment","_getStripeCardElements","_getStripeElement","_mapStripeBillingDetails","createPaymentMethod","_stripeCardElements","trim","zipCodeElementOptions","stripePaymentMethodType","cardNumberElement","cardExpiryElement","cardCvcElement","isAdditionalActionError","isThreeDSecureRequiredError","needsConfirm","_getPaymentToken","_riskClient","WePay","risk","generate_risk_token","get_risk_token","payloadWithToken","PAYMENT_CANNOT_CONTINUE","worldpay","_submitAdditionalAction","iframeHidden","messageEvent","_isValidJsonWithSessionId","removeEvent","SessionId","_createHiddenIframe","formId","inputBin","inputJWT","userAgent","match","srcdoc","outerHTML","str","InstrumentActionType","_instrumentRequestSender","loadInstruments","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","valueOf","isFuture","vaultAccessExpiry","newDate","getTime","setMinutes","getMinutes","getVaultAccessToken","shopperCurrency","isTransactional","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","_isPayPalInstrument","defaultInstrument","default_instrument","external_id","trustedShippingAddress","trusted_shipping_address","mapToPayPalInstrument","_isBankInstrument","accountNumber","account_number","mapToBankInstrument","last_4","expiryMonth","expiryYear","mapToCardInstrument","method_type","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","PickupOptionActionType","_pickupOptionRequestSender","loadPickupOptions","apiQuery","_hydrateApiQuery","LoadPickupOptionsRequested","fetchPickupOptions","LoadPickupOptionsSucceeded","LoadPickupOptionsFailed","getConsignmentById","consignmentLineItems","cartItems","searchArea","ShippingCountryActionType","_shippingCountryRequestSender","LoadShippingCountriesRequested","LoadShippingCountriesSucceeded","LoadShippingCountriesFailed","ShippingStrategyActionType","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","selectOption","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mergedOptions","shippingStrategies","_shippingStrategyActionCreator","updateAddressRequestBody","editAddressButtonId","shouldShowLoadingSpinner","_shouldShowLoadingSpinner","onChangeShipping","availableCountries","getStripeState","spacingUnit","stripeState","allowedCountries","shippingAddressElement","SHIPPING","isNewAddress","sendData","SignInEmailActionType","sendSignInEmail","emailRequest","SendSignInEmailRequested","SendSignInEmailSucceeded","SendSignInEmailFailed","withMemoizedCombiner","creator","combiner","pop","combinerArgs","createSelectorCreator","defaultMemoize","_messageCustomizer","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_pickupOptionActionCreator","_shippingCountryActionCreator","_signInEmailActionCreator","_subscriptionsActionCreator","isDevelopment","getShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","getSignInEmail","isPaymentDataSubmitted","getInstruments","getCustomerAccountFields","getBillingAddressFields","getShippingAddressFields","getFlashMessages","getPickupOptions","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isShippingStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","createCheckoutStoreErrorSelector","createCheckoutStoreStatusSelector","_errorTransformer","isCheckoutServiceError","_selectorsFactory","shippingConsignment","val","getCountries","getEmail","getInstrumentsByPaymentMethod","memoizeOne","getSelectOptionError","getUpdateShippingOptionError","getLoadCheckoutError","getLoadError","getUpdateCheckoutError","getUpdateError","getSubmitOrderError","getExecuteError","getFinalizeOrderError","getFinalizeError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","countries","getLoadShippingCountriesError","shippingCountries","getLoadPaymentMethodsError","getLoadPaymentMethodError","getLoadMethodError","getInitializePaymentError","getInitializeError","getSignInError","getSignOutError","getInitializeCustomerError","getLoadShippingOptionsError","getContinueAsGuestError","getUpdateBillingAddressError","getUpdateSubscriptionsError","getUpdateShippingAddressError","getUpdateAddressError","getDeleteConsignmentError","getDeleteError","getUpdateConsignmentError","getCreateConsignmentsError","getCreateError","getInitializeShippingError","getApplyStoreCreditError","getApplyError","getApplyCouponError","getRemoveCouponError","getRemoveError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getSignInEmailError","signInEmail","getSendError","getCreateCustomerAccountError","getCreateAccountError","getCreateCustomerAddressError","getCreateAddressError","getPickupOptionsError","pickupOptions","isSelectingOption","isUpdatingShippingOption","isInitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","isUpdatingAddress","isExecuting","isFinalizing","isExecutingSpamCheck","isLoadingCheckout","isUpdatingCheckout","isUpdating","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isLoadingMethod","isInitializingPayment","isInitializingCustomer","isLoadingShippingOptions","isUpdatingBillingAddress","isUpdatingSubscriptions","isCreatingCustomerAccount","isCreatingCustomerAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isDeleting","isCreatingConsignments","isCreating","isInitializingShipping","isApplyingStoreCredit","isApplying","isApplyingCoupon","isRemovingCoupon","isRemoving","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isSendingSignInEmail","isSending","isLoadingPickupOptions","selectors","statuses","notifyState","_dispatch","loadCheckoutAction","formFieldsAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInEmailRequest","createCustomerAccount","createCustomerAddress","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","initializeSpamProtection","executeSpamCheck","CheckoutService","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","omitDeep","predicate","clearErrorReducer","isClearErrorAction","objectA","objectB","isArrayEqual","isDateEqual","isRegExpEqual","keyFilter","keysA","keysB","isObjectEqual","currentValue","newValue","objectSet","DEFAULT_STATE","billingAddressReducer","combineReducers","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CheckoutButtonActionType","cartReducer","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","couponReducer","giftCertificateReducer","customerReducer","customerStrategyReducer","initializeError","initializeMethodId","deinitializeError","deinitializeMethodId","signInError","signInMethodId","signOutError","signOutMethodId","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","widgetInteractionError","widgetInteractionMethodId","isDeinitializing","formFieldsReducer","countryReducer","orderReducer","metaReducer","orderBillingAddressReducer","paymentReducer","paymentMethodReducer","array","defaultPredicate","findIndex","mergeOrPush","methodA","methodB","loadMethodId","loadMethodError","paymentStrategyReducer","executeError","executeMethodId","finalizeError","finalizeMethodId","instrumentReducer","deleteError","failedInstrument","deletingInstrument","remoteCheckoutReducer","updateShippingOptionError","updateError","consignmentReducer","objectFlatten","parent","flattened","keyString","objectWithSortedKeys","current","pickupOptionReducer","sortedflattenedMeta","shippingCountryReducer","shippingStrategyReducer","updateAddressError","updateAddressMethodId","selectOptionError","selectOptionMethodId","signInEmailReducer","storeCreditReducer","subscriptionsReducer","checkoutReducer","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","deepFreeze","createProxy","barclays","authorizenet","elavon","checkoutcom","sagepay","cybersource","cybersourcev2","bnz","converge","orbital","paymetric","moneris","cba_mpgs","worldpayaccess","normalize","identity","createInternalCheckoutSelectorsFactory","getDeinitializeError","getOrderBillingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","createBillingAddressSelector","continueAsGuestError","loadError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","filterType","flashMessages","formState","createConfigSelectorFactory","createCountrySelector","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","createCustomerSelector","createAddressError","isCreatingAddress","createCustomerStrategySelector","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","removeGiftCertificateError","applyGiftCertificateError","createGiftCertificateSelectorFactory","createInstrumentSelector","paymentMethodKey","currentMethod","isMatch","supportedProvider","createInstrumentSelectorFactory","createFormSelector","selectedCountry","processField","itemtype","processCountry","subdivisions","requiresState","processProvince","hasPostalCodes","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getWidgetInteractingError","createPaymentStrategySelectorFactory","createPickupOptionSelector","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignments","createShippingCountrySelector","createShippingCountrySelectorFactory","createShippingStrategySelector","createShippingStrategySelectorFactory","createConsignmentSelector","addressA","addressB","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","createCheckoutSelectorFactory","createOrderSelector","currentPayment","createOrderSelectorFactory","createOrderBillingAddressSelector","createPaymentSelector","internalPayment","MissingPaymentId","MissingPaymentStatus","MissingPaymentRedirectUrl","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","sendError","checkoutButton","orderBillingAddress","remoteCheckout","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","actionTransformer","action$","createInternalCheckoutSelectors","createCheckoutService","checkoutVariantIdentificationToken","orderRequestSender","checkoutRequestSender","configActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","subscriptionsActionCreator","formFieldsActionCreator","registryV2","customerRegistryV2","remoteCheckoutRequestSender","remoteCheckoutActionCreator","paymentRequestTransformer","paymentRequestSender","braintreePaymentProcessor","braintreeHostedForm","overlay","createBraintreePaymentProcessor","checkoutValidator","storeCreditActionCreator","paymentHumanVerificationHandler","paymentStrategyActionCreator","stepHandler","StepHandler","ContinueHandler","createStepHandler","storefrontPaymentRequestSender","PPSDKStrategy","SubStrategyRegistry","CardSubStrategy","NoneSubStrategy","createSubStrategyRegistry","PaymentResumer","consignmentRequestSender","createShippingStrategyRegistry","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","getKey","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","isPrivate","selectorDecorator","resolver","memoizedMethod","cachedValue","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","initializeButton","containerIds","idPrefix","uniqueId","setUniqueElementId","deinitializeButton","CheckoutButtonInitializer","_registryV2","paymentMethodRequestParams","paymentMethodRequestOptions","createBuyNowCart","Cart","buttonClassName","getValidButtonStyle","fundingicons","validStyles","getValidHeight","_cartRequestSender","messagingContainerId","buyNowInitializeOptions","_renderPayPalComponents","_renderPayPalMessages","shouldProcessPayment","onAuthorizeError","validButtonStyle","isMessageContainerAvailable","onPaymentError","_createBuyNowCart","_buyNowCart","getBuyNowCartRequestBody","cartRequestBody","venmoButtonStyle","cursor","minHeight","minWidth","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","removeAttribute","_handlePostForm","hasBuyNowCartOptions","googlePayButton","CheckoutButtonNotInitialized","_host","paypalOptions","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","onAuthorize","paymentID","payerID","payerId","payerInfo","payer_info","getValidColor","getValidLabel","getValidLayout","getValidShape","getValidTagline","_paypalCommerceSdk","_renderButton","paypalCommerceSdk","_getPayPalCommerceSdkOrThrow","_onShippingAddressChange","_onShippingOptionsChange","_onHostedCheckoutApprove","_getButtonStyle","_handleClick","_buyNowCartId","_getOrderDetailsOrThrow","_updateOrder","_getShippingOptionOrThrow","paypalcommercecredit","_renderMessages","paypalMessagesOptions","paypalcommercealternativemethods","paypalcommercevenmo","VENMO","_getVenmoButtonStyle","paypalcommerceinline","buttonContainerClassName","experience","createPayPalButtonContainer","paypalButtonContainer","createCheckoutButtonInitializer","checkoutButtonStrategyFactories","createCheckoutButtonStrategy","braintreeSdkCreator","subscriptionsRequestSender","billingAddressRequestSender","cartRequestSender","createCheckoutButtonRegistry","EmbeddedCheckoutEventType","NotEmbeddableErrorType","UnknownError","EmbeddedContentEventType","IS_COOKIE_ALLOWED_KEY","LAST_ALLOW_COOKIE_ATTEMPT_KEY","_iframeCreator","_messageListener","_messagePoster","_storage","_location","_isAttached","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","_allowCookie","_attemptLogin","createFrame","_retryAllowCookie","FrameError","iFrameResizer","StyleConfigured","encodeURIComponent","lastAttempt","MissingContent","EmbeddedCheckout","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","iframes","scrolling","sizeWidth","heightCalculationMethod","contentId","originalIframeResizer","embedCheckout","loadingIndicator","handleFrameLoadedEvent","hasAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","DEFAULT_LOCALE","KEY_PREFIX","_logger","_transformConfig","locales","_locales","_translations","_formatters","mapKeys","translationKey","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","defaultLocale","defaultTranslations","_flattenObject","fallbackTranslations","union","fallbackLocale","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","_storeConfig","_customerFormatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","isAnalyticsTrackerWindowGA","ga","sendGoogleAnalytics","nonInteraction","isPayloadSizeLimitReached","serializeAnalyticsEventPayload","acc","AnalyticStepId","ANALYTIC_STEPS","CUSTOMER","BILLING","checkoutService","analyticsExtraItemsManager","checkoutSteps","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","trackCheckoutStarted","extraItemsData","track","getTrackingPayload","revenue","trackOrderComplete","isMissingOrdersExperimentEnabled","affiliation","products","product","trackStepViewed","stepId","getIdFromStep","hasStepViewed","trackViewed","backfill","trackStepCompleted","hasStepCompleted","trackCompleted","i","shippingMethod","getShopperCurrency","getPaymentMethodName","shippingMethodId","completedStepId","getStoreProfile","toShopperCurrency","getProducts","itemsData","product_id","giftCertificateItems","physicalAndDigitalItems","itemAttributes","image_url","variant","createStepTracker","stepTrackerConfig","AnalyticStepType","AnalyticStepOrder","bodlEvents","_emailEntryBegan","_shippingOptionsShown","setState","checkoutBegin","channelId","emitCheckoutBeginEvent","event_id","cart_value","coupon_codes","line_items","_getProducts","channel_id","orderPurchased","emitOrderPurchasedEvent","shipping_cost","stepCompleted","currentStep","_hasStepCompleted","_trackCompletedStep","customerEmailEntry","emit","customerSuggestionInit","customerSuggestionExecute","customerPaymentMethodExecuted","showShippingMethods","selectedPaymentMethod","paymentOption","clickPayButton","paymentRejected","paymentComplete","exitCheckout","base_price","sale_price","purchase_price","product_name","gift_certificate_id","gift_certificate_name","gift_certificate_theme","theme","variant_id","brand_name","category_names","createBodlService","isBodlEnabled"],"sourceRoot":""}