{"version":3,"file":"checkout-button.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,2MCL9D,MAAM,EAA+BC,QAAQ,+BCAvC,EAA+BA,QAAQ,4BCAvC,EAA+BA,QAAQ,SCAvC,EAA+BA,QAAQ,2B,ECQ7C,YAII,WAAYC,G,ICZuBC,EAAaR,E,mBDYhD,EACI,YAAMO,GAAW,sCAAoC,K,OAJzD,EAAAE,KAAO,gBACP,EAAAC,KAAO,WCV4BF,EDehB,ECf6BR,EDevB,EAAWA,UCdhCN,OAAOiB,eACPjB,OAAOiB,eAAeH,EAAQR,GAE9BQ,EAAOI,UAAYZ,EDaoB,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAIF,MAAM,EAAKN,SAASQ,M,CAE7C,CACJ,OAfoD,oBAepD,EAfA,CAAoDF,OEJpD,IAAMG,EAAmB,CACrBC,KAAM,CAAC,EACPC,QAAS,CAAC,EACVC,OAAQ,G,QAOZ,YAMI,WACIC,EACA,G,IAAA,aAMI,CAAC,EAAC,EALFb,EAAO,UACPc,EAAM,SAJd,OAUU,EAA4BD,GAAYJ,EAAtCC,EAAI,OAAEC,EAAO,UAAEC,EAAM,S,OAE7B,cAAMZ,GAAW,sCAAoC,MAEhDE,KAAO,eACZ,EAAKC,KAAO,UACZ,EAAKO,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,OAASA,EACd,EAAKE,OAASA,GAAU,G,CAC5B,CACJ,OA3BuD,oBA2BvD,EA3BA,CAAuD,G,ECLvD,YACI,WAAYD,GAAZ,MACI,YAAMA,EAAU,CACZb,QAAS,yEACX,K,OAEF,EAAKE,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OATgE,oBAShE,EATA,CAAgE,G,ECDhE,YACI,WAAYU,EAAuBb,GAAnC,MACI,YAAMa,EAAU,CACZb,QACIA,GACA,yFACN,K,OAEF,EAAKE,KAAO,qBACZ,EAAKC,KAAO,gB,CAChB,CACJ,OAXyD,oBAWzD,EAXA,CAAyD,GCRnD,EAA+BJ,QAAQ,UCqB7C,SAASgB,EAAWD,GAChB,OAAOA,EACFE,QAAO,SAACC,EAAkBC,GACvB,OAAIA,GACO,oBAAID,EAAQ,CAAAC,IAGhBD,CACX,GAAG,IACFE,KAAK,IACd,CCzBe,SAASC,EACpBP,EACAb,GAEQ,IACA,EADSa,EAAQ,KACG,OAApBC,OAAM,IAAG,KAAE,EAEnB,OAAO,IAAI,EAAaD,EAAU,CAC9Bb,QAAS,EAAWc,IAAWd,EAC/Bc,OAAM,GAEd,CAEA,SAAS,EAAWA,GAChB,GAAKO,MAAMC,QAAQR,GAInB,OAAOA,EACFE,QAAO,SAACC,EAAkBC,GACvB,OAAIA,GAASA,EAAMlB,SACR,oBAAIiB,EAAQ,CAAAC,EAAMlB,UAGtBiB,CACX,GAAG,IACFE,KAAK,IACd,C,QCzBA,YACI,WAAYN,GAAZ,MACI,YAAMA,EAAU,CACZb,QAAS,2CACX,K,OAEF,EAAKE,KAAO,eACZ,EAAKC,KAAO,U,CAChB,CACJ,OATmD,oBASnD,EATA,CAAmD,G,ECOnD,WAGI,aAFQ,KAAAoB,gBAAyD,CAAC,EAG9DC,KAAKC,SAAS,WAAW,SAACZ,EAAUb,GAAY,WAAI,EAAaa,EAAU,CAAEb,QAAO,GAApC,IAChDwB,KAAKC,SAAS,YAAY,SAACZ,EAAUb,GACjC,OHfG,SACXa,EACAb,GAEQ,IAAAU,EAASG,EAAQ,KACjB,EAAgBH,EAAI,OAApBI,OAAM,IAAG,KAAE,EAEnB,OAAO,IAAI,EAAaD,EAAU,CAC9Bb,QAASe,EAAWD,IAAWJ,EAAKgB,QAAUhB,EAAKiB,OAAS3B,EAC5Dc,OAAQA,EAAOc,OACTd,EAAOe,KAAI,SAAC7B,GAAY,OAAG8B,KAAMpB,EAAKP,KAAMH,QAAO,EAA3B,IACxB,CAAC,CAAE8B,KAAMpB,EAAKP,KAAMH,QAASU,EAAKgB,QAAUhB,EAAKiB,SAE/D,CGEYI,CAA6BlB,EAAUb,EAAvC,IAEJwB,KAAKC,SAAS,cAAc,SAACZ,EAAUb,GACnC,OClBG,SACXa,EACAb,GAEQ,IAAAU,EAASG,EAAQ,KAEzB,OAAO,IAAI,EAAaA,EAAU,CAC9Bb,QAASA,GAAWU,EAAKgB,QAAUhB,EAAKiB,MACxCb,OAAQ,CACJ,CACIgB,KAAMpB,EAAKoB,MAAQpB,EAAKP,KACxBH,QAASU,EAAKgB,QAAUhB,EAAKiB,SAI7C,CDGYK,CAA+BnB,EAAUb,EAAzC,IAEJwB,KAAKC,SAAS,WAAW,SAACZ,EAAUb,GAChC,OAAAoB,EAA4BP,EAAUb,EAAtC,IAEJwB,KAAKC,SAAS,WAAW,SAACZ,GAAa,WAAI,EAAaA,EAAjB,GAC3C,CA+DJ,OA7DI,YAAAY,SAAA,SAAStB,EAAc8B,GACnBT,KAAKD,gBAAgBpB,GAAQ8B,CACjC,EAEA,YAAAC,YAAA,SAAYrB,EAAyBb,GAIjC,OAFIwB,KAAKD,gBAAgBC,KAAKW,SAAStB,KAAcW,KAAKD,gBAAgBa,SAErDvB,EAAUb,EACnC,EAEQ,YAAAmC,SAAR,SAAiBtB,GACb,GAAwB,IAApBA,EAASD,OACT,MAAO,UAGX,GAAIY,KAAKa,+BAA+BxB,EAASH,MAC7C,MAAO,aAGX,GAAIc,KAAKc,6BAA6BzB,EAASH,MAAO,CAClD,IAAM6B,GAAe,IAAAC,MAAK3B,EAASH,KAAKP,KAAKsC,MAAM,MAEnD,OAAOF,GAAgBf,KAAKD,gBAAgBgB,GAAgBA,EAAe,U,CAG/E,IAAMrB,GAAQ,IAAAsB,MAAK3B,EAASH,MAAQG,EAASH,KAAKI,QAElD,OAAII,GAASA,EAAMY,MAAQN,KAAKD,gBAAgBL,EAAMY,MAC3CZ,EAAMY,KAGV,SACX,EAEQ,YAAAO,+BAAR,SACIK,GAEA,IAAMC,EAA0BD,EAEhC,OACKlB,KAAKc,6BAA6BI,IACM,iBAAlCC,EAAwBhB,OACS,iBAAjCgB,EAAwBxC,MACW,iBAAnCwC,EAAwB/B,QACW,iBAAnC+B,EAAwBjB,MAEvC,EAEQ,YAAAY,6BAAR,SACII,GAEA,IAAME,EAAwBF,EAE9B,MAC4C,iBAAjCE,EAAsB9B,QACU,iBAAhC8B,EAAsBjB,OACS,iBAA/BiB,EAAsBzC,MACW,iBAAjCyC,EAAsBhC,MAErC,EACJ,EA9EA,GEfM,EAA+Bb,QAAQ,QCAvC,EAA+BA,QAAQ,kBCO7C,IAAY8C,ECLAC,ECEAC,ECAAC,ECFG,SAASC,EACpBhD,EACAiD,GAEA,OAAI7B,MAAMC,QAAQrB,GACPA,EAAO4B,KAAI,SAAC/B,GAAU,OAAAmD,EAASnD,EAAOoD,EAAhB,KAG7B,IAAAC,eAAclD,IACP,IAAAmD,YACH,IAAAC,QAAOpD,EAAQiD,IACf,SAACjC,EAAQnB,EAAOb,GACZgC,EAAOhC,GAAOgE,EAASnD,EAAOoD,EAClC,GACA,CAAC,GAIFjD,CACX,CCfe,SAASqD,EAGtBC,EAAeC,GACb,OAOJ,SAA4BA,GACxB,OAAOA,EAAOrD,OAAS2C,EAAgBW,UAC3C,CATQC,CAAmBF,GACZP,EAASM,GAAO,SAACzD,GAAU,OAAAA,IAAU0D,EAAOG,OAAjB,IAG/BJ,CACX,CCXe,SAASK,EAAQC,EAAcC,EAAcC,GACxD,OAAIF,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxDzC,MAAMC,QAAQuC,IAAYxC,MAAMC,QAAQwC,GAsCpD,SAAsBD,EAAgBC,EAAgBC,GAClD,GAAIF,EAAQjC,SAAWkC,EAAQlC,OAC3B,OAAO,EAGX,IAAK,IAAIoC,EAAQ,EAAG,EAASH,EAAQjC,OAAQoC,EAAQ,EAAQA,IACzD,IAAKJ,EAAQC,EAAQG,GAAQF,EAAQE,GAAQD,GACzC,OAAO,EAIf,OAAO,CACX,CAjDmBE,CAAaJ,EAASC,EAASC,IAGtC1C,MAAMC,QAAQuC,KAAYxC,MAAMC,QAAQwC,KAIxCD,aAAmBK,MAAQJ,aAAmBI,KA0B1D,SAAqBL,EAAeC,GAChC,OAAOD,EAAQM,YAAcL,EAAQK,SACzC,CA3BmBC,CAAYP,EAASC,KAG5BD,aAAmBK,MAAQJ,aAAmBI,QAI9CL,aAAmBQ,QAAUP,aAAmBO,OAc5D,SAAuBR,EAAiBC,GACpC,OAAOD,EAAQS,aAAeR,EAAQQ,UAC1C,CAfmBC,CAAcV,EAASC,KAG9BD,aAAmBQ,QAAUP,aAAmBO,SAgC5D,SACIR,EACAC,EACAC,GAEA,IAAMS,EAAST,GAAWA,EAAQU,UAC5BC,EAAQF,EAASrF,OAAOwF,KAAKd,GAASW,OAAOA,GAAUrF,OAAOwF,KAAKd,GACnEe,EAAQJ,EAASrF,OAAOwF,KAAKb,GAASU,OAAOA,GAAUrF,OAAOwF,KAAKb,GAEzE,GAAIY,EAAM9C,SAAWgD,EAAMhD,OACvB,OAAO,EAGX,IAAK,IAAIoC,EAAQ,EAAG,EAASU,EAAM9C,OAAQoC,EAAQ,EAAQA,IAAS,CAChE,IAAM/E,EAAMyF,EAAMV,GAElB,IAAK7E,OAAOM,UAAUC,eAAeC,KAAKmE,EAAS7E,GAC/C,OAAO,EAGX,IAAK2E,EAAQC,EAAQ5E,GAAM6E,EAAQ7E,GAAM8E,GACrC,OAAO,C,CAIf,OAAO,CACX,CAtDec,CAAchB,EAASC,EAASC,KAGpCF,IAAYC,EACvB,CChCe,SAASgB,EAAWC,EAAiBC,GAChD,YAAiBC,IAAbD,GAA0BpB,EAAQmB,EAAcC,GACzCD,EAGJC,CACX,CCNe,SAASE,EACpBjF,EACAhB,EACAa,G,MAEA,OACIG,GACAd,OAAOM,UAAUC,eAAeC,KAAKM,EAAQhB,IAC7C2E,EAAQ3D,EAAOhB,GAAMa,GAEdG,GAGJ,gCACCA,KAAc,MACjBhB,GAAMa,EAAK,GAEpB,ERhBA,SAAY+C,GACR,kDACA,kDACA,4CAEA,sDACA,sDACA,+CACH,CARD,CAAYA,IAAAA,EAAkB,KCL9B,SAAYC,GACR,0BACH,CAFD,CAAYA,IAAAA,EAAe,KCE3B,SAAYC,GACR,gEACA,gEACA,yDACH,CAJD,CAAYA,IAAAA,EAAuB,KCAnC,SAAYC,GACR,mEACA,mEACA,6DAEA,yDACA,yDACA,kDACH,CARD,CAAYA,IAAAA,EAAwB,KMgB7B,IAAMmC,EAAqC,CAC9CrE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCNA,SAASC,EACpB9B,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,IAGgB,IAAA+B,iBAAqC,CACjDC,KAAMC,EACN1E,QAAQ,IAAA2E,iBAAgBC,EAAepC,GACvC8B,SAAUO,GAGPC,CAAQrC,EAAOC,EAC1B,CAEA,SAASgC,EACLD,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK6C,EAAyB6C,8BAC9B,KAAK7C,EAAyB8C,yBAC9B,KAAKjD,EAAmBkD,sBACpB,OAAOjB,EAAQS,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQqC,gBAE1D,QACI,OAAOT,EAEnB,CAEA,SAASG,EACL5E,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAoCqE,EAAcrE,QAG1C0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACpB,OAAOb,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACpB,OAAOhB,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKX,EAAyBmD,8BAC9B,KAAKnD,EAAyB6C,8BAC1B,OAAOX,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKjC,EAAyBoD,2BAC1B,OAAOlB,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,KAAKZ,EAAwBsD,6BAC7B,KAAKtD,EAAwBuD,6BAC7B,KAAKtD,EAAyBuD,yBAC9B,KAAKvD,EAAyB8C,yBAC1B,OAAOZ,EAAUpE,EAAQ,4BAAwBmE,GAErD,KAAKlC,EAAwByD,0BAC7B,KAAKxD,EAAyByD,sBAC1B,OAAOvB,EAAUpE,EAAQ,uBAAwB0C,EAAOG,SAE5D,QACI,OAAO7C,EAEnB,CAEA,SAAS6E,EACLP,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAwCD,EAAcC,UAG9C5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmBkD,sBACxB,KAAKlD,EAAmBqD,mBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKpC,EAAyBmD,8BAC1B,OAAOjB,EAAUE,EAAU,cAAc,GAE7C,KAAKpC,EAAyBoD,2BAC9B,KAAKpD,EAAyB6C,8BAC1B,OAAOX,EAAUE,EAAU,cAAc,GAE7C,KAAKpC,EAAyBuD,yBAC9B,KAAKxD,EAAwBsD,6BACzB,OAAOnB,EAAUE,EAAU,uBAAuB,GAEtD,KAAKrC,EAAwBuD,6BAC7B,KAAKvD,EAAwByD,0BAC7B,KAAKxD,EAAyByD,sBAC9B,KAAKzD,EAAyB8C,yBAC1B,OAAOZ,EAAUE,EAAU,uBAAuB,GAEtD,QACI,OAAOA,EAEnB,CC3Ge,SAASjC,EAAcrD,GAClC,OAAO,mBAAoBA,EAC/B,CC2FA,QAtEA,SAAS4G,EACLC,EACAC,EACA7C,GAEQ,OAA0EA,GAAW,CAAC,GAAC,YAAvF8C,OAAW,IAAG,WAAC/H,EAAQgI,GAAW,YAAS7B,IAATnG,EAAEiI,IAAoBjI,EAAEiI,KAAOD,EAAEC,EAAjC,EAAmC,EAG7E,IAAKJ,EACD,OAAOC,EAMX,IAAKA,GAAYD,IAAiBC,EAC9B,OAAOD,EAMX,IAAIK,EAAqB,EACrBC,EAAiB,EAEfC,EAAsB,SAAIC,EAAkBpC,EAAiBC,GAI/D,OAHAgC,GAAsBG,IAAkBpC,EAAe,EAAI,EAC3DkC,GAAkBE,IAAkBnC,EAAW,EAAI,EAE5CmC,CACX,EAEMlG,EAAS2F,EAAS/E,KAAI,SAACuF,EAASpD,GAClC,IAAMqD,EAAcV,GAAgBA,EAAa3C,GAEjD,OAAIb,EAAckE,IAAgBlE,EAAciE,GACxCP,EAAYQ,EAAaD,GAClBF,EAAoB,EAAYG,EAAaD,GAAUC,EAAaD,GAGxEF,EAAoBpC,EAAQuC,EAAaD,GAAUC,EAAaD,IAGvE,IAAA9F,SAAQ+F,KAAgB,IAAA/F,SAAQ8F,GACzBF,EAAoBR,EAAaW,EAAaD,GAAUC,EAAaD,GAGzEF,EAAoBpC,EAAQuC,EAAaD,GAAUC,EAAaD,EAC3E,IAKA,OACIJ,IAAuBJ,EAAShF,QAChC+E,GACAA,EAAa/E,SAAWgF,EAAShF,OAE1B+E,EAKPM,IAAmBL,EAAShF,OACrBgF,EAGJ3F,CACX,EChDA,EAjCA,SAASqG,EACLC,EACAC,GAEA,OAAKD,EAMAC,GAAaD,IAAkBC,EAO5BrI,OAAOwF,KAAK6C,GAA8BxG,QAAO,SAACC,EAAQhC,GAC9D,IAAM8F,EAAe9D,EAAOhC,GACtB+F,EAAWwC,EAAUvI,GAE3B,OAAIkE,EAAc4B,IAAiB5B,EAAc6B,GACtCE,EAAUjE,EAAQhC,EAAKqI,EAAYvC,EAAcC,KAGxD,IAAA1D,SAAQyD,KAAiB,IAAAzD,SAAQ0D,GAC1BE,EAAUjE,EAAQhC,EAAK,EAAa8F,EAAcC,IAGtDE,EAAUjE,EAAQhC,EAAK+F,EAClC,GAAGuC,GAnBQA,EANAC,CA0Bf,ECtCA,IAAYC,ECAAC,ECAAC,GFAZ,SAAYF,GACR,gDACA,gDACA,0CAEA,kDACA,kDACA,2CACH,CARD,CAAYA,IAAAA,EAAgB,KCA5B,SAAYC,GACR,mEACA,mEACA,6DAEA,qEACA,qEACA,8DACH,CARD,CAAYA,IAAAA,EAAyB,KCArC,SAAYC,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,0DACH,CApBD,CAAYA,IAAAA,EAAqB,KCU1B,ICVKC,EDUC,EAA2B,CACpC9G,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEDA,SAASyC,EAAYtE,EAAkCC,GAOlE,YAPgC,IAAAD,IAAAA,EAAA,IAChB,IAAA+B,iBAA2B,CACvCC,KAAM,EACNzE,QAAQ,IAAA2E,iBAAgB,EAAenC,GACvC8B,SAAU,GAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,EACL+B,EACA/B,GAOA,OAAQA,EAAOrD,MACX,KAAK6C,EAAyB6C,8BAC9B,KAAKhD,EAAmBkD,sBACxB,KAAK4B,EAAsBG,4BAC3B,KAAKH,EAAsBI,2BAC3B,KAAKJ,EAAsBK,2BAC3B,KAAKL,EAAsBM,8BAC3B,KAAKN,EAAsBO,6BAC3B,KAAKT,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKV,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC3B,OAAO,EAAY/C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ4E,MAE9D,QACI,OAAOhD,EAEnB,CAEA,SAAS,EACLH,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA8B,YAGtB5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmBqD,mBACxB,KAAKrD,EAAmBkD,sBACpB,OAAOb,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,CAEA,SAAS,EACLtE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA0B,UAGlB0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACpB,OAAOb,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACpB,OAAOhB,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,EDjFA,SAAY8G,GACR,oDACA,0DACA,0DAEA,wDACA,8DACA,6DACH,CARD,CAAYA,IAAAA,EAAwB,KEwB7B,IC1BKY,ED0BC,EAAqC,CAC9CjD,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GErBTqD,EAA8C,CAAEC,sBAAuB,CAAC,GACxEC,EAAiD,CAAC,EAClDC,EAAoD,CAAC,EAE5C,SAASC,EACpBtF,EACAC,G,UAEA,YAHA,IAAAD,IAAAA,EAAA,GAGKC,EAAOsF,MAAStF,EAAOsF,KAAKC,UAIjB,IAAAzD,iBAAqC,CACjDC,MAAM,IAAAD,kBAAe,KACjB,EAAC9B,EAAOsF,KAAKC,UAAW,E,IAE5BjI,QAAQ,IAAAwE,kBAAe,KACnB,EAAC9B,EAAOsF,KAAKC,UAAW,E,IAE5B3D,UAAU,IAAAE,kBAAe,KACrB,EAAC9B,EAAOsF,KAAKC,UAAW,G,KAIzBnD,CAAQrC,EAAOC,GAfXD,CAgBf,CAEA,SAAS,EACLgC,EACA/B,G,MAEA,YAHA,IAAA+B,IAAAA,EAAA,GAGQ/B,EAAOrD,MACX,KAAKyH,EAAyBoB,0BAC1B,OAAKxF,EAAOsF,MAAStF,EAAOsF,KAAKG,YAI1B,EAAY1D,EAAM,CACrBmD,uBAAqB,KACjB,EAAClF,EAAOsF,KAAKG,cAAc,E,KALxB1D,EASf,KAAKqC,EAAyBsB,4BAC1B,OAAOhE,EAAUK,EAAM,wBAAyB,CAAC,GAGzD,OAAOA,CACX,CAEA,SAAS,EACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAA,GAGQ0C,EAAOrD,MACX,KAAKyH,EAAyBuB,0BAC9B,KAAKvB,EAAyBoB,0BAC1B,OAAO9D,EAAUpE,EAAQ,uBAAmBmE,GAEhD,KAAK2C,EAAyBwB,uBAC1B,OAAOlE,EAAUpE,EAAQ,kBAAmB0C,EAAOG,SAEvD,KAAKiE,EAAyByB,4BAC9B,KAAKzB,EAAyBsB,4BAC1B,OAAOhE,EAAUpE,EAAQ,yBAAqBmE,GAElD,KAAK2C,EAAyB0B,yBAC1B,OAAOpE,EAAUpE,EAAQ,oBAAqB0C,EAAOG,SAEzD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAA,GAGQ5B,EAAOrD,MACX,KAAKyH,EAAyBuB,0BAC1B,OAAOjE,EAAUE,EAAU,kBAAkB,GAEjD,KAAKwC,EAAyBwB,uBAC9B,KAAKxB,EAAyBoB,0BAC1B,OAAO9D,EAAUE,EAAU,kBAAkB,GAEjD,KAAKwC,EAAyByB,4BAC1B,OAAOnE,EAAUE,EAAU,oBAAoB,GAEnD,KAAKwC,EAAyB0B,yBAC9B,KAAK1B,EAAyBsB,4BAC1B,OAAOhE,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,EAEnB,EDxGA,SAAYoD,GACR,8CACA,8CACA,uCACH,CAJD,CAAYA,IAAAA,EAAgB,KEoBrB,ICnBKe,GDmBC,GAA6B,CACtCT,KAAM,CAAC,EACPhI,OAAQ,CAAC,EACTsE,SAAU,CAAC,GElBA,SAASoE,GACpBjG,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6B,CACzCC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GAAY+B,EAA0B/B,GAC3C,OAAQA,EAAOrD,OACNqI,EAAiBiB,oBACX,EAAYlE,EAAM/B,EAAOG,SAGzB4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA4B,WAGpB0C,EAAOrD,MACX,KAAKqI,EAAiBiB,oBAClB,OAAOvE,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKuD,EAAiBkB,iBAClB,OAAOxE,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAgC,aAGxB5B,EAAOrD,MACX,KAAKqI,EAAiBmB,oBAClB,OAAOzE,EAAUE,EAAU,aAAa,GAE5C,KAAKoD,EAAiBiB,oBACtB,KAAKjB,EAAiBkB,iBAClB,OAAOxE,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,ED1DA,SAAYmE,GACR,4CACA,4CACA,sCAEA,6DACA,6DACA,uDAEA,gDACA,gDACA,0CAEA,oDACA,oDACA,6CACH,CAhBD,CAAYA,KAAAA,GAAe,KEgBpB,IAAM,GAA6B,CACtCzI,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCXA,SAASwE,GACpBrG,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6B,CACzCC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAK0B,EAAiBU,qBACtB,KAAKR,EAAsBM,8BAC3B,KAAKR,EAAiBW,sBACtB,KAAKmB,GAAgBM,mBACjB,OAAO,EAAatE,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQmG,SAE/D,QACI,OAAOvE,EAEnB,CAEA,SAAS,GAAczE,EAAgC0C,GACnD,YADmB,IAAA1C,IAAAA,EAAA,IACX0C,EAAOrD,MACX,KAAKsH,EAAiBsC,qBACtB,KAAKtC,EAAiBU,qBAClB,OAAOjD,EAAUpE,EAAQ,wBAAoBmE,GAEjD,KAAKwC,EAAiBuC,kBAClB,OAAO9E,EAAUpE,EAAQ,mBAAoB0C,EAAOG,SAExD,KAAK8D,EAAiBwC,sBACtB,KAAKxC,EAAiBW,sBAClB,OAAOlD,EAAUpE,EAAQ,yBAAqBmE,GAElD,KAAKwC,EAAiByC,mBAClB,OAAOhF,EAAUpE,EAAQ,oBAAqB0C,EAAOG,SAEzD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAA,IAGQ5B,EAAOrD,MACX,KAAKsH,EAAiBsC,qBAClB,OAAO7E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKqC,EAAiBU,qBACtB,KAAKV,EAAiBuC,kBAClB,OAAO9E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKqC,EAAiBwC,sBAClB,OAAO/E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKqC,EAAiBW,sBACtB,KAAKX,EAAiByC,mBAClB,OAAOhF,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,EAEnB,CChEO,ICbK+E,GDaC,GAAsC,CAC/CrJ,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEPA,SAASgF,GACpB7G,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsC,CAClDC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAK4B,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKR,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKV,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC3B,OAAO,EAAa/C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ0G,kBAE/D,QACI,OAAO9E,EAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAqC,WAG7B0C,EAAOrD,MACX,KAAKuH,EAA0B4C,8BAC/B,KAAK5C,EAA0BW,8BAC3B,OAAOnD,EAAUpE,EAAQ,iCAA6BmE,GAE1D,KAAKyC,EAA0B6C,2BAC3B,OAAOrF,EAAUpE,EAAQ,4BAA6B0C,EAAOG,SAEjE,KAAK+D,EAA0B8C,+BAC/B,KAAK9C,EAA0BY,+BAC3B,OAAOpD,EAAUpE,EAAQ,kCAA8BmE,GAE3D,KAAKyC,EAA0B+C,4BAC3B,OAAOvF,EAAUpE,EAAQ,6BAA8B0C,EAAOG,SAElE,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,aAGjC5B,EAAOrD,MACX,KAAKuH,EAA0B4C,8BAC3B,OAAOpF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKsC,EAA0BW,8BAC/B,KAAKX,EAA0B6C,2BAC3B,OAAOrF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKsC,EAA0B8C,+BAC3B,OAAOtF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKsC,EAA0BY,+BAC/B,KAAKZ,EAA0B+C,4BAC3B,OAAOvF,EAAUE,EAAU,6BAA6B,GAE5D,QACI,OAAOA,EAEnB,EDxFA,SAAY+E,GACR,uDACA,uDACA,iDAEA,yDACA,yDACA,mDAEA,sDACA,sDACA,gDAEA,qEACA,qEACA,+DAEA,qDACH,CAlBD,CAAYA,KAAAA,GAAkB,KEUvB,IChBKO,GDgBC,GAA+B,CACxC5J,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEKA,SAASuF,GACpBpH,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkD,CAC9DC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GAAY+B,EAA4B/B,GAC7C,OAAQA,EAAOrD,MACX,KAAK6C,EAAyB8C,yBAC9B,KAAKjD,EAAmBkD,sBACpB,OAAO,EAAYR,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQiH,UAE9D,KAAKT,GAAmBU,+BACpB,OAAO,EAAYtF,EAAM/B,EAAOG,SAEpC,KAAKwG,GAAmBW,wBACpB,OAAO5F,EAAUK,EAAM,4BAA6B/B,EAAOG,SAE/D,QACI,OAAO4B,EAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA8B,WAGtB0C,EAAOrD,MACX,KAAKgK,GAAmBY,wBACxB,KAAKZ,GAAmBa,wBACpB,OAAO9F,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKkF,GAAmBc,qBACpB,OAAO/F,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,KAAKwG,GAAmBe,+BACxB,KAAKf,GAAmBU,+BACpB,OAAO3F,EAAUpE,EAAQ,0BAAsBmE,GAEnD,KAAKkF,GAAmBgB,4BACpB,OAAOjG,EAAUpE,EAAQ,qBAAsB0C,EAAOG,SAE1D,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,aAG1B5B,EAAOrD,MACX,KAAKgK,GAAmBY,wBACpB,OAAO7F,EAAUE,EAAU,cAAc,GAE7C,KAAK+E,GAAmBc,qBACxB,KAAKd,GAAmBa,wBACpB,OAAO9F,EAAUE,EAAU,cAAc,GAE7C,KAAK+E,GAAmBe,+BACpB,OAAOhG,EAAUE,EAAU,qBAAqB,GAEpD,KAAK+E,GAAmBgB,4BACxB,KAAKhB,GAAmBU,+BACpB,OAAO3F,EAAUE,EAAU,qBAAqB,GAEpD,QACI,OAAOA,EAEnB,EDnGA,SAAYsF,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,gGACA,sGACA,sGACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,uEACH,CAnBD,CAAYA,KAAAA,GAA0B,KEwC/B,ICtCKU,GDsCC,GAAuC,CAChD7F,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEhCA,SAASiG,GACpB9H,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+D,CAC3EC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAkC,SAG1B/B,EAAOrD,MACX,KAAKuK,GAA2BY,oBAC5B,OAAO,EAAY/F,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCwC,eAAe,G,IAI3B,KAAKb,GAA2Bc,sBAC5B,OAAO,EAAYjG,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCwC,eAAe,G,IAK/B,OAAOhG,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAsC,WAG9B0C,EAAOrD,MACX,KAAKuK,GAA2Be,oBAChC,KAAKf,GAA2BY,oBAC5B,OAAO,EAAYxK,EAAQ,CACvB4K,qBAAiBzG,EACjB0G,wBAAoB1G,IAG5B,KAAKyF,GAA2BkB,iBAC5B,OAAO,EAAY9K,EAAQ,CACvB4K,gBAAiBlI,EAAOG,QACxBgI,mBAAoBnI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAK2B,GAA2BmB,sBAChC,KAAKnB,GAA2Bc,sBAC5B,OAAO,EAAY1K,EAAQ,CACvBgL,uBAAmB7G,EACnB8G,0BAAsB9G,IAG9B,KAAKyF,GAA2BsB,mBAC5B,OAAO,EAAYlL,EAAQ,CACvBgL,kBAAmBtI,EAAOG,QAC1BoI,qBAAsBvI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK2B,GAA2BuB,gBAChC,KAAKvB,GAA2BwB,gBAC5B,OAAO,EAAYpL,EAAQ,CACvBqL,iBAAalH,EACbmH,oBAAgBnH,IAGxB,KAAKyF,GAA2B2B,aAC5B,OAAO,EAAYvL,EAAQ,CACvBqL,YAAa3I,EAAOG,QACpByI,eAAgB5I,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGnD,KAAK2B,GAA2B4B,iBAChC,KAAK5B,GAA2B6B,iBAC5B,OAAO,EAAYzL,EAAQ,CACvB0L,kBAAcvH,EACdwH,qBAAiBxH,IAGzB,KAAKyF,GAA2BgC,cAC5B,OAAO,EAAY5L,EAAQ,CACvB0L,aAAchJ,EAAOG,QACrB8I,gBAAiBjJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAK2B,GAA2BiC,sCAChC,KAAKjC,GAA2BkC,sCAC5B,OAAO,EAAY9L,EAAQ,CACvB+L,uCAAmC5H,EACnC6H,0CAAsC7H,IAG9C,KAAKyF,GAA2BqC,mCAC5B,OAAO,EAAYjM,EAAQ,CACvB+L,kCAAmCrJ,EAAOG,QAC1CmJ,qCAAsCtJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzE,KAAK2B,GAA2BsC,yBAChC,KAAKtC,GAA2BuC,0BAC5B,OAAO,EAAYnM,EAAQ,CACvBoM,4BAAwBjI,EACxBkI,+BAA2BlI,IAGnC,KAAKyF,GAA2B0C,wBAC5B,OAAO,EAAYtM,EAAQ,CACvBoM,uBAAwB1J,EAAOG,QAC/BwJ,0BAA2B3J,EAAOsF,KAAKC,WAG/C,QACI,OAAOjI,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA0C,aAGlC5B,EAAOrD,MACX,KAAKuK,GAA2Be,oBAC5B,OAAO,EAAYrG,EAAU,CACzBiI,gBAAgB,EAChB1B,mBAAoBnI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAK2B,GAA2BkB,iBAChC,KAAKlB,GAA2BY,oBAC5B,OAAO,EAAYlG,EAAU,CACzBiI,gBAAgB,EAChB1B,wBAAoB1G,IAG5B,KAAKyF,GAA2BmB,sBAC5B,OAAO,EAAYzG,EAAU,CACzBkI,kBAAkB,EAClBvB,qBAAsBvI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK2B,GAA2BsB,mBAChC,KAAKtB,GAA2Bc,sBAC5B,OAAO,EAAYpG,EAAU,CACzBkI,kBAAkB,EAClBvB,0BAAsB9G,IAG9B,KAAKyF,GAA2BuB,gBAC5B,OAAO,EAAY7G,EAAU,CACzBmI,aAAa,EACbnB,eAAgB5I,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGnD,KAAK2B,GAA2B2B,aAChC,KAAK3B,GAA2BwB,gBAC5B,OAAO,EAAY9G,EAAU,CACzBmI,aAAa,EACbnB,oBAAgBnH,IAGxB,KAAKyF,GAA2B4B,iBAC5B,OAAO,EAAYlH,EAAU,CACzBoI,cAAc,EACdf,gBAAiBjJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAK2B,GAA2BgC,cAChC,KAAKhC,GAA2B6B,iBAC5B,OAAO,EAAYnH,EAAU,CACzBoI,cAAc,EACdf,qBAAiBxH,IAGzB,KAAKyF,GAA2BiC,sCAC5B,OAAO,EAAYvH,EAAU,CACzBqI,kCAAkC,EAClCX,qCAAsCtJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzE,KAAK2B,GAA2BqC,mCAChC,KAAKrC,GAA2BkC,sCAC5B,OAAO,EAAYxH,EAAU,CACzBqI,kCAAkC,EAClCX,0CAAsC7H,IAG9C,KAAKyF,GAA2BsC,yBAC5B,OAAO,EAAY5H,EAAU,CACzBsI,qBAAqB,EACrBP,0BAA2B3J,EAAOsF,KAAKC,WAG/C,KAAK2B,GAA2BuC,0BAChC,KAAKvC,GAA2B0C,wBAC5B,OAAO,EAAYhI,EAAU,CACzBsI,qBAAqB,EACrBP,+BAA2BlI,IAGnC,QACI,OAAOG,EAEnB,ED3NA,SAAYgG,GACR,uDACA,uDACA,gDACH,CAJD,CAAYA,KAAAA,GAAoB,KEYzB,ICZKuC,GDYC,GAAiC,CAC1C7M,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAASwI,GACpBrK,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiC,CAC7CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNiL,GAAqByC,wBACf,EAAYtI,EAAM/B,EAAOG,SAGzB4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA+B,WAGvB0C,EAAOrD,MACX,KAAKiL,GAAqByC,wBACtB,OAAO3I,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKmG,GAAqB0C,qBACtB,OAAO5I,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAoC,aAG5B5B,EAAOrD,MACX,KAAKiL,GAAqB2C,wBACtB,OAAO7I,EAAUE,EAAU,aAAa,GAE5C,KAAKgG,GAAqByC,wBAC1B,KAAKzC,GAAqB0C,qBACtB,OAAO5I,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDlEA,SAAYuI,GACR,oDACA,oDACA,6CACH,CAJD,CAAYA,KAAAA,GAAiB,KEYtB,IAAM,GAA8B,CACvC7M,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCLA,SAAS4I,GACpBzK,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA8B,CAC1CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNwN,GAAkBM,uBACZ,EAAa1I,EAAM/B,EAAOG,SAG1B4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA6B,WAGrB0C,EAAOrD,MACX,KAAKwN,GAAkBO,uBACvB,KAAKP,GAAkBM,uBACnB,OAAO/I,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK0I,GAAkBQ,oBACnB,OAAOjJ,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAiC,aAGzB5B,EAAOrD,MACX,KAAKwN,GAAkBO,uBACnB,OAAOhJ,EAAUE,EAAU,aAAa,GAE5C,KAAKuI,GAAkBM,uBACvB,KAAKN,GAAkBQ,oBACnB,OAAOjJ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,CCtCO,IAAM,GAA4B,CACrCtE,OAAQ,CAAC,EACTgI,KAAM,CAAC,EACP1D,SAAU,CAAC,GCrBA,SAASgJ,GACpB7K,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA4B,CACxCC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvCwF,KAAMuF,GACNjJ,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAKoJ,GAAgBM,mBACrB,KAAKN,GAAgB+E,2BACjB,OAAO,EACH/I,GACA,IAAAgJ,MAAK/K,EAAOG,QAAS,CAAC,iBAAkB,aAGhD,QACI,OAAO4B,EAEnB,CAEA,SAAS8I,GACLvF,EACAtF,GAEA,OAAQA,EAAOrD,MACX,KAAKoJ,GAAgBiF,uBACrB,KAAKjF,GAAgBkF,qBACjB,OAAO,EAAY3F,GAAM,gCAClBtF,EAAOsF,MAAI,CACd4F,YAAalL,EAAOG,SAAWH,EAAOG,QAAQgL,MAAMD,YACpDE,WAAYpL,EAAOG,SAAWH,EAAOG,QAAQgL,MAAME,MACnDC,QAAStL,EAAOG,SAAWH,EAAOG,QAAQgL,OAASnL,EAAOG,QAAQgL,MAAMG,WAGhF,QACI,OAAOhG,EAEnB,CAEA,SAAS,GACLhI,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA2B,WAGnB0C,EAAOrD,MACX,KAAKoJ,GAAgBwF,mBACrB,KAAKxF,GAAgBM,mBACrB,KAAKN,GAAgB+E,2BACrB,KAAK/E,GAAgByF,2BACjB,OAAO9J,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKsE,GAAgB0F,gBACrB,KAAK1F,GAAgB2F,wBACjB,OAAOhK,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA+B,aAGvB5B,EAAOrD,MACX,KAAKoJ,GAAgBwF,mBACrB,KAAKxF,GAAgByF,2BACjB,OAAO9J,EAAUE,EAAU,aAAa,GAE5C,KAAKmE,GAAgBM,mBACrB,KAAKN,GAAgB0F,gBACrB,KAAK1F,GAAgB+E,2BACrB,KAAK/E,GAAgB2F,wBACjB,OAAOhK,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,CC7FO,ICJK+J,GCDAC,GFKC,GAA0C,CAAC,EGAzC,SAASC,GACpB9L,EACAC,GAMA,YAPA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA0C,CACtDC,KAAM,IAGHK,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAKoJ,GAAgB+E,2BACrB,KAAK/E,GAAgBM,mBACjB,OAAO/E,EAAQS,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQqC,gBAE1D,QACI,OAAOT,EAEnB,CC3Be,SAAS+J,GACpB/L,EACAC,GAMA,YAPA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6C,CACzDC,KAAM,IAGHK,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNgP,GAAkBI,uBACZ/L,EAAOG,QAGP4B,CAEnB,EHtBA,SAAY4J,GACR,oDACA,oDACA,8CAEA,2EACA,2EACA,oEACH,CARD,CAAYA,KAAAA,GAAiB,KCD7B,SAAYC,GACR,6DACA,6DACA,uDAEA,+DACA,+DACA,wDACH,CARD,CAAYA,KAAAA,GAAuB,KGiB5B,IClBKI,GDkBC,GAAoC,CAC7C1O,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEVA,SAASqK,GACpBlM,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAoC,CAChDC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvCwF,KAAM,GACN1D,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAKiP,GAAwBM,2BACzB,OCzBG,SAAwBC,EAAYC,EAAU1M,GACzD,IAAK0M,EACD,OAAOD,EAGX,IAAME,GAAmB,IAAAC,MAAKF,EAAM,MAC9B5L,GAAQ,IAAA+L,WACVJ,EACqB,iBAAdzM,GAAyB,IAAA8M,QAAO9M,GAAaA,GAAa2M,GAE/DjJ,GAAW,oBAAI+I,GAErB,IAAe,IAAX3L,EACA4C,EAASqJ,KAAKL,OACX,CACH,IAAMM,EAAeP,EAAM3L,GAE3B4C,EAAS5C,GACLb,EAAc+M,IAAiB/M,EAAcyM,GACvC,EAAYM,EAAcN,GAC1BA,C,CAGd,OAAOhJ,CACX,CDCmBuJ,CACH5K,GAAQ,GACR/B,EAAOG,QACPH,EAAOG,SAAW,CACdoD,GAAIvD,EAAOG,QAAQoD,GACnBqJ,QAAS5M,EAAOG,QAAQyM,UAIpC,KAAKhB,GAAwBiB,4BACzB,OAAO,EAAa9K,EAAM/B,EAAOG,QAAS,CACtCkD,YAAa,SAACyJ,EAASC,GACnB,OAAAD,EAAQvJ,KAAOwJ,EAAQxJ,IAAMuJ,EAAQF,UAAYG,EAAQH,OAAzD,IAGZ,QACI,OAAO7K,EAEnB,CAEA,SAAS,GACLuD,EACAtF,GAEA,OAAQA,EAAOrD,OACNiP,GAAwBiB,4BAClB,EAAYvH,EAAMtF,EAAOsF,MAGzBA,CAEnB,CAEA,SAAS,GACLhI,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAmC,WAG3B0C,EAAOrD,MACX,KAAKiP,GAAwBoB,4BAC7B,KAAKpB,GAAwBiB,4BACzB,OAAOnL,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKmK,GAAwBqB,yBACzB,OAAOvL,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKyL,GAAwBsB,2BAC7B,KAAKtB,GAAwBM,2BACzB,OAAO,EAAY5O,EAAQ,CACvB6P,kBAAc1L,EACd2L,qBAAiB3L,IAGzB,KAAKmK,GAAwByB,wBACzB,OAAO,EAAY/P,EAAQ,CACvB6P,aAAcnN,EAAOsF,KAAKC,SAC1B6H,gBAAiBpN,EAAOG,UAGhC,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAuC,aAG/B5B,EAAOrD,MACX,KAAKiP,GAAwBoB,4BACzB,OAAOtL,EAAUE,EAAU,aAAa,GAE5C,KAAKgK,GAAwBiB,4BAC7B,KAAKjB,GAAwBqB,yBACzB,OAAOvL,EAAUE,EAAU,aAAa,GAE5C,KAAKgK,GAAwBsB,2BACzB,OAAO,EAAYtL,EAAU,CACzB0L,iBAAiB,EACjBH,aAAcnN,EAAOsF,KAAKC,WAGlC,KAAKqG,GAAwBM,2BAC7B,KAAKN,GAAwByB,wBACzB,OAAO,EAAYzL,EAAU,CACzB0L,iBAAiB,EACjBH,kBAAc1L,IAGtB,QACI,OAAOG,EAEnB,EDzHA,SAAYoK,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,sEACH,CAhBD,CAAYA,KAAAA,GAAyB,KGkC9B,ICjCKuB,GDiCC,GAAsC,CAC/CxL,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GE5BA,SAAS4L,GACpBzN,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6D,CACzEC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAiC,SAGzB/B,EAAOrD,MACX,KAAKqP,GAA0BlE,oBAC3B,OAAO,EAAY/F,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCwC,eAAe,G,IAI3B,KAAKiE,GAA0BhE,sBAC3B,OAAO,EAAYjG,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCwC,eAAe,G,IAK/B,OAAOhG,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAqC,WAG7B0C,EAAOrD,MACX,KAAKqP,GAA0B/D,oBAC/B,KAAK+D,GAA0BlE,oBAC3B,OAAO,EAAYxK,EAAQ,CACvB4K,qBAAiBzG,EACjB0G,wBAAoB1G,IAG5B,KAAKuK,GAA0B5D,iBAC3B,OAAO,EAAY9K,EAAQ,CACvB4K,gBAAiBlI,EAAOG,QACxBgI,mBAAoBnI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAKyG,GAA0B3D,sBAC/B,KAAK2D,GAA0BhE,sBAC3B,OAAO,EAAY1K,EAAQ,CACvBgL,uBAAmB7G,EACnB8G,0BAAsB9G,IAG9B,KAAKuK,GAA0BxD,mBAC3B,OAAO,EAAYlL,EAAQ,CACvBgL,kBAAmBtI,EAAOG,QAC1BoI,qBAAsBvI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAKyG,GAA0ByB,iBAC/B,KAAKzB,GAA0B0B,iBAC3B,OAAO,EAAYpQ,EAAQ,CACvBqQ,kBAAclM,EACdmM,qBAAiBnM,IAGzB,KAAKuK,GAA0B6B,cAC3B,OAAO,EAAYvQ,EAAQ,CACvBqQ,aAAc3N,EAAOG,QACrByN,gBAAiB5N,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAKyG,GAA0B8B,kBAC/B,KAAK9B,GAA0B+B,kBAC3B,OAAO,EAAYzQ,EAAQ,CACvB0Q,mBAAevM,EACfwM,sBAAkBxM,IAG1B,KAAKuK,GAA0BkC,eAC3B,OAAO,EAAY5Q,EAAQ,CACvB0Q,cAAehO,EAAOG,QACtB8N,iBAAkBjO,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGrD,KAAKyG,GAA0BxC,yBAC/B,KAAKwC,GAA0BvC,0BAC3B,OAAO,EAAYnM,EAAQ,CACvBoM,4BAAwBjI,EACxBkI,+BAA2BlI,IAGnC,KAAKuK,GAA0BpC,wBAC3B,OAAO,EAAYtM,EAAQ,CACvBoM,uBAAwB1J,EAAOG,QAC/BwJ,0BAA2B3J,EAAOsF,KAAKC,WAG/C,QACI,OAAOjI,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,aAGjC5B,EAAOrD,MACX,KAAKqP,GAA0B/D,oBAC3B,OAAO,EAAYrG,EAAU,CACzBiI,gBAAgB,EAChB1B,mBAAoBnI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAKyG,GAA0B5D,iBAC/B,KAAK4D,GAA0BlE,oBAC3B,OAAO,EAAYlG,EAAU,CACzBiI,gBAAgB,EAChB1B,wBAAoB1G,IAG5B,KAAKuK,GAA0B3D,sBAC3B,OAAO,EAAYzG,EAAU,CACzBkI,kBAAkB,EAClBvB,qBAAsBvI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAKyG,GAA0BxD,mBAC/B,KAAKwD,GAA0BhE,sBAC3B,OAAO,EAAYpG,EAAU,CACzBkI,kBAAkB,EAClBvB,0BAAsB9G,IAG9B,KAAKuK,GAA0ByB,iBAC3B,OAAO,EAAY7L,EAAU,CACzBuM,aAAa,EACbP,gBAAiB5N,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAKyG,GAA0B6B,cAC/B,KAAK7B,GAA0B0B,iBAC3B,OAAO,EAAY9L,EAAU,CACzBuM,aAAa,EACbP,qBAAiBnM,IAGzB,KAAKuK,GAA0B8B,kBAC3B,OAAO,EAAYlM,EAAU,CACzBwM,cAAc,EACdH,iBAAkBjO,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGrD,KAAKyG,GAA0BkC,eAC/B,KAAKlC,GAA0B+B,kBAC3B,OAAO,EAAYnM,EAAU,CACzBwM,cAAc,EACdH,sBAAkBxM,IAG1B,KAAKuK,GAA0BxC,yBAC3B,OAAO,EAAY5H,EAAU,CACzBsI,qBAAqB,EACrBP,0BAA2B3J,EAAOsF,KAAKC,WAG/C,KAAKyG,GAA0BvC,0BAC/B,KAAKuC,GAA0BpC,wBAC3B,OAAO,EAAYhI,EAAU,CACzBsI,qBAAqB,EACrBP,+BAA2BlI,IAGnC,QACI,OAAOG,EAEnB,EDhMA,SAAY2L,GACR,wDACA,wDACA,kDAEA,0DACA,0DACA,mDACH,CARD,CAAYA,KAAAA,GAAoB,KEoBzB,ICrBKc,GDqBC,GAAgB,CACzBtM,KAAM,GACNzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEdA,SAAS0M,GACpBvO,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiC,CAC7CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvCwF,KAAM,GACN1D,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,YAHA,IAAA+B,IAAAA,EAA4B,SAGpB/B,EAAOrD,OACN4Q,GAAqBgB,yBACf,EAAaxM,EAAO/B,EAAOG,SAAWH,EAAOG,QAAQqO,oBAAuB,IAG5EzM,CAEnB,CAEA,SAAS,GACLuD,EACAtF,GAEA,OAAQA,EAAOrD,MACX,KAAK4Q,GAAqBgB,yBAC1B,KAAKhB,GAAqBkB,0BACtB,OAAO,EAAYnJ,EAAMtF,EAAOsF,MAEpC,QACI,OAAOA,EAEnB,CAEA,SAAS,GACLhI,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA+B,WAGvB0C,EAAOrD,MACX,KAAK4Q,GAAqBmB,yBAC1B,KAAKnB,GAAqBgB,yBACtB,OAAO7M,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK8L,GAAqBoB,0BAC1B,KAAKpB,GAAqBkB,0BACtB,OAAO,EAAYnR,EAAQ,CACvBsR,iBAAanN,EACboN,sBAAkBpN,IAG1B,KAAK8L,GAAqBuB,sBACtB,OAAOpN,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKoN,GAAqBwB,uBACtB,OAAO,EAAYzR,EAAQ,CACvBsR,YAAa5O,EAAOG,QACpB0O,iBAAkB7O,EAAOsF,KAAK0J,eAGtC,QACI,OAAO1R,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,aAG1B5B,EAAOrD,MACX,KAAK4Q,GAAqBmB,yBACtB,OAAOhN,EAAUE,EAAU,aAAa,GAE5C,KAAK2L,GAAqBoB,0BACtB,OAAO,EAAY/M,EAAU,CACzBqN,YAAY,EACZC,mBAAoBlP,EAAOsF,KAAK0J,eAGxC,KAAKzB,GAAqBgB,yBAC1B,KAAKhB,GAAqBuB,sBACtB,OAAOpN,EAAUE,EAAU,aAAa,GAE5C,KAAK2L,GAAqBkB,0BAC1B,KAAKlB,GAAqBwB,uBACtB,OAAO,EAAYnN,EAAU,CACzBqN,YAAY,EACZC,wBAAoBzN,IAG5B,QACI,OAAOG,EAEnB,ED7GA,SAAYyM,GACR,oFACA,oFACA,8EAEA,yEACA,yEACA,mEAEA,2EACA,2EACA,qEAEA,yEACA,yEACA,mEAEA,+DACA,+DACA,yDAEA,sEACA,sEACA,gEAEA,+CACH,CA1BD,CAAYA,KAAAA,GAAwB,KEM7B,IAAM,GAAqC,CAC9CtM,KAAM,CAAC,GCAI,SAASoN,GACpBpP,EACAC,G,MAEA,YAHA,IAAAD,IAAAA,EAAA,IAGKC,EAAOsF,MAAStF,EAAOsF,KAAKC,UAIjB,IAAAzD,iBAAqC,CACjDC,MAAM,IAAAD,kBAAe,KACjB,EAAC9B,EAAOsF,KAAKC,UAAW,G,KAIzBnD,CAAQrC,EAAOC,GATXD,CAUf,CAEA,SAAS,GAAYgC,EAAsB/B,GACvC,OAAQA,EAAOrD,MACX,KAAK0R,GAAyBe,iCAC1B,OAAO1N,EAAUK,EAAM,UAAkB/B,EAAOG,SAAWH,EAAOG,QAAQkP,SAE9E,KAAKhB,GAAyBiB,kCAC1B,OAAO5N,EAAUK,EAAM,WAAmB/B,EAAOG,SAAWH,EAAOG,QAAQoP,UAE/E,KAAKlB,GAAyBmB,4BAC1B,OAAO9N,EAAUK,EAAM,WAAY/B,EAAOG,SAE9C,KAAKkO,GAAyBoB,qBAC1B,OAAO,EAAY1N,EAAM/B,EAAOG,SAEpC,QACI,OAAO4B,EAEnB,CCnBO,ICtBK2N,GDsBC,GAAkC,CAC3CpS,OAAQ,CACJqS,0BAA2B,CAAC,EAC5BC,YAAa,CAAC,EACdhB,YAAa,CAAC,GAElBhN,SAAU,CACNiO,WAAY,CAAC,EACbC,yBAA0B,CAAC,EAC3Bb,WAAY,CAAC,IEnBN,SAASc,GACpBhQ,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsE,CAClFC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAK4B,EAAsBO,6BAC3B,KAAKP,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKR,EAAiBU,qBACtB,KAAKV,EAAiBW,sBAClB,OAAO,EAAa7C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ6P,cAE/D,KAAKrJ,GAAmBsJ,yBACpB,OAAO,EAAalO,EAAM,IAE9B,QACI,OAAOA,EAEnB,CAEA,SAAS,GACLzE,EACA0C,G,gBAEA,YAHA,IAAA1C,IAAAA,EAAiC,WAGzB0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACxB,KAAK4B,EAAsBO,6BAC3B,KAAKP,EAAsB+L,6BACvB,OAAOxO,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACxB,KAAKyB,EAAsBgM,0BACvB,OAAOzO,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKgE,EAAsBiM,4BAC3B,KAAKjM,EAAsBG,4BACvB,OAAO5C,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAK0C,EAAsBkM,yBACvB,OAAO3O,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,KAAKgE,EAAsBK,2BAC3B,KAAKL,EAAsBmM,2BACvB,OAAItQ,EAAOsF,KACA,EAAYhI,EAAQ,CACvBsS,aAAW,KACP,EAAC5P,EAAOsF,KAAK/B,SAAK9B,E,KAKvBnE,EAEX,KAAK6G,EAAsBoM,wBACvB,OAAIvQ,EAAOsF,KACA,EAAYhI,EAAQ,CACvBsS,aAAW,KACP,EAAC5P,EAAOsF,KAAK/B,IAAKvD,EAAOG,Q,KAK9B7C,EAEX,KAAK6G,EAAsBI,2BAC3B,KAAKJ,EAAsBqM,2BACvB,OAAIxQ,EAAOsF,KACA,EAAYhI,EAAQ,CACvBsR,aAAW,KACP,EAAC5O,EAAOsF,KAAK/B,SAAK9B,E,KAKvBnE,EAEX,KAAK6G,EAAsBsM,wBACvB,OAAIzQ,EAAOsF,KACA,EAAYhI,EAAQ,CACvBsR,aAAW,KACP,EAAC5O,EAAOsF,KAAK/B,IAAKvD,EAAOG,Q,KAK9B7C,EAEX,KAAK6G,EAAsBuM,8BAC3B,KAAKvM,EAAsBM,8BACvB,OAAIzE,EAAOsF,KACA,EAAYhI,EAAQ,CACvBqS,2BAAyB,KACrB,EAAC3P,EAAOsF,KAAK/B,SAAK9B,E,KAKvBnE,EAEX,KAAK6G,EAAsBwM,2BACvB,OAAI3Q,EAAOsF,KACA,EAAYhI,EAAQ,CACvBqS,2BAAyB,KACrB,EAAC3P,EAAOsF,KAAK/B,IAAKvD,EAAOG,Q,KAK9B7C,EAEX,QACI,OAAOA,EAEnB,CAEA,SAAS,GACLsE,EACA5B,G,gBAEA,YAHA,IAAA4B,IAAAA,EAAqC,aAG7B5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKuC,EAAsB+L,6BACvB,OAAOxO,EAAUE,EAAU,4BAA4B,GAE3D,KAAKvC,EAAmBkD,sBACxB,KAAKlD,EAAmBqD,mBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKuC,EAAsBO,6BAC3B,KAAKP,EAAsBgM,0BACvB,OAAOzO,EAAUE,EAAU,4BAA4B,GAE3D,KAAKuC,EAAsBiM,4BACvB,OAAO1O,EAAUE,EAAU,cAAc,GAE7C,KAAKuC,EAAsBG,4BAC3B,KAAKH,EAAsBkM,yBACvB,OAAO3O,EAAUE,EAAU,cAAc,GAE7C,KAAKuC,EAAsBmM,2BACvB,OAAItQ,EAAOsF,KACA,EAAY1D,EAAU,CACzBiO,YAAU,KACN,EAAC7P,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBK,2BAC3B,KAAKL,EAAsBoM,wBACvB,OAAIvQ,EAAOsF,KACA,EAAY1D,EAAU,CACzBiO,YAAU,KACN,EAAC7P,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBqM,2BACvB,OAAIxQ,EAAOsF,KACA,EAAY1D,EAAU,CACzBqN,YAAU,KACN,EAACjP,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBI,2BAC3B,KAAKJ,EAAsBsM,wBACvB,OAAIzQ,EAAOsF,KACA,EAAY1D,EAAU,CACzBqN,YAAU,KACN,EAACjP,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBuM,8BACvB,OAAI1Q,EAAOsF,KACA,EAAY1D,EAAU,CACzBkO,0BAAwB,KACpB,EAAC9P,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBM,8BAC3B,KAAKN,EAAsBwM,2BACvB,OAAI3Q,EAAOsF,KACA,EAAY1D,EAAU,CACzBkO,0BAAwB,KACpB,EAAC9P,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,QACI,OAAOA,EAEnB,CCnPe,SAASgP,GACpBnU,EACAoU,GAEA,IAAMC,EAAoC,CAAC,EAa3C,OAXAnV,OAAOwF,KAAK1E,GAAQsU,SAAQ,SAACtV,GACzB,IAAMa,EAAQG,EAAOhB,GACfuV,EAAYH,EAAYA,EAAM,IAAIpV,EAAQA,EAE3B,iBAAVa,EACPX,OAAOsV,OAAOH,EAAWF,GAActU,EAAO0U,IAE9CF,EAAUE,GAAa1U,CAE/B,IAEOwU,CACX,CCrBe,SAASI,GAAqBzU,GAYzC,OAXad,OAAOwF,KAAK1E,GACD0U,OAEO3T,QAC3B,SAAC4T,EAAUC,G,MAAY,OAAC,gCACjBD,KAAQ,MACVC,GAAU5U,EAAO4U,GAAQ,GAFP,GAIvB,CAAC,EAIT,EHTA,SAAY3B,GACR,6DACA,6DACA,sDACH,CAJD,CAAYA,KAAAA,GAAsB,KIY3B,ICZK4B,GDYC,GAAmC,CAC5ChU,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAAS2P,GACpBxR,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAmC,CAC/CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,GAAQA,EAAOrD,OACN+S,GAAuB8B,2BAgBxB,OAAOzP,EAfP,GAAI/B,EAAOsF,KAAM,CACb,IAKMmM,EAAsBP,GADNN,GAJF,CAChBc,cAAe1R,EAAOsF,KAAKoM,cAC3BC,WAAY3R,EAAOsF,KAAKqM,cAM5B,OAAOjQ,EAAUK,EAFC6P,KAAK,GAAGC,KAAKC,UAAUL,IAEPzR,EAAOG,Q,CAQzD,CAEA,SAAS,GAAc7C,EAAwD0C,GAC3E,YADmB,IAAA1C,IAAAA,EAAkC,WAC7C0C,EAAOrD,MACX,KAAK+S,GAAuBqC,2BAC5B,KAAKrC,GAAuB8B,2BACxB,OAAO9P,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKiO,GAAuBsC,wBACxB,OAAOtQ,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAsC,aAG9B5B,EAAOrD,MACX,KAAK+S,GAAuBqC,2BACxB,OAAOrQ,EAAUE,EAAU,aAAa,GAE5C,KAAK8N,GAAuB8B,2BAC5B,KAAK9B,GAAuBsC,wBACxB,OAAOtQ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,ED5EA,SAAY0P,GACR,qEACA,qEACA,8DACH,CAJD,CAAYA,KAAAA,GAAyB,KEY9B,ICdKW,GDcC,GAAsC,CAC/C3U,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAASsQ,GACpBnS,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsC,CAClDC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACN2U,GAA0Ba,+BACpB,EAAapQ,EAAM/B,EAAOG,SAG1B4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAqC,WAG7B0C,EAAOrD,MACX,KAAK2U,GAA0Bc,+BAC/B,KAAKd,GAA0Ba,+BAC3B,OAAOzQ,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK6P,GAA0Be,4BAC3B,OAAO3Q,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,aAGjC5B,EAAOrD,MACX,KAAK2U,GAA0Bc,+BAC3B,OAAO1Q,EAAUE,EAAU,aAAa,GAE5C,KAAK0P,GAA0Ba,+BAC/B,KAAKb,GAA0Be,4BAC3B,OAAO3Q,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDrEA,SAAYqQ,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,uEACH,CAhBD,CAAYA,KAAAA,GAA0B,KEoC/B,IClCKK,GDkCC,GAAuC,CAChDvQ,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GE5BA,SAAS2Q,GACpBxS,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+D,CAC3EC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAkC,SAG1B/B,EAAOrD,MACX,KAAKsV,GAA2BnK,oBAC5B,OAAO,EAAY/F,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCwC,eAAe,G,IAI3B,KAAKkK,GAA2BjK,sBAC5B,OAAO,EAAYjG,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCwC,eAAe,G,IAK/B,OAAOhG,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAsC,WAG9B0C,EAAOrD,MACX,KAAKsV,GAA2BhK,oBAChC,KAAKgK,GAA2BnK,oBAC5B,OAAO,EAAYxK,EAAQ,CACvB4K,qBAAiBzG,EACjB0G,wBAAoB1G,IAG5B,KAAKwQ,GAA2B7J,iBAC5B,OAAO,EAAY9K,EAAQ,CACvB4K,gBAAiBlI,EAAOG,QACxBgI,mBAAoBnI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAK0M,GAA2B5J,sBAChC,KAAK4J,GAA2BjK,sBAC5B,OAAO,EAAY1K,EAAQ,CACvBgL,uBAAmB7G,EACnB8G,0BAAsB9G,IAG9B,KAAKwQ,GAA2BzJ,mBAC5B,OAAO,EAAYlL,EAAQ,CACvBgL,kBAAmBtI,EAAOG,QAC1BoI,qBAAsBvI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK0M,GAA2BO,uBAChC,KAAKP,GAA2BQ,uBAC5B,OAAO,EAAYnV,EAAQ,CACvBoV,wBAAoBjR,EACpBkR,2BAAuBlR,IAG/B,KAAKwQ,GAA2BW,oBAC5B,OAAO,EAAYtV,EAAQ,CACvBoV,mBAAoB1S,EAAOG,QAC3BwS,sBAAuB3S,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG1D,KAAK0M,GAA2BY,sBAChC,KAAKZ,GAA2Ba,sBAC5B,OAAO,EAAYxV,EAAQ,CACvByV,uBAAmBtR,EACnBuR,0BAAsBvR,IAG9B,KAAKwQ,GAA2BgB,mBAC5B,OAAO,EAAY3V,EAAQ,CACvByV,kBAAmB/S,EAAOG,QAC1B6S,qBAAsBhT,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK0M,GAA2BzI,yBAChC,KAAKyI,GAA2BxI,0BAC5B,OAAO,EAAYnM,EAAQ,CACvBoM,4BAAwBjI,EACxBkI,+BAA2BlI,IAGnC,KAAKwQ,GAA2BrI,wBAC5B,OAAO,EAAYtM,EAAQ,CACvBoM,uBAAwB1J,EAAOG,QAC/BwJ,0BAA2B3J,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG9D,QACI,OAAOjI,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA0C,aAGlC5B,EAAOrD,MACX,KAAKsV,GAA2BhK,oBAC5B,OAAO,EAAYrG,EAAU,CACzBiI,gBAAgB,EAChB1B,mBAAoBnI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAK0M,GAA2B7J,iBAChC,KAAK6J,GAA2BnK,oBAC5B,OAAO,EAAYlG,EAAU,CACzBiI,gBAAgB,EAChB1B,wBAAoB1G,IAG5B,KAAKwQ,GAA2B5J,sBAC5B,OAAO,EAAYzG,EAAU,CACzBkI,kBAAkB,EAClBvB,qBAAsBvI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK0M,GAA2BzJ,mBAChC,KAAKyJ,GAA2BjK,sBAC5B,OAAO,EAAYpG,EAAU,CACzBkI,kBAAkB,EAClBvB,0BAAsB9G,IAG9B,KAAKwQ,GAA2BO,uBAC5B,OAAO,EAAY5Q,EAAU,CACzBsR,mBAAmB,EACnBP,sBAAuB3S,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG1D,KAAK0M,GAA2BW,oBAChC,KAAKX,GAA2BQ,uBAC5B,OAAO,EAAY7Q,EAAU,CACzBsR,mBAAmB,EACnBP,2BAAuBlR,IAG/B,KAAKwQ,GAA2BY,sBAC5B,OAAO,EAAYjR,EAAU,CACzBuR,mBAAmB,EACnBH,qBAAsBhT,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK0M,GAA2BgB,mBAChC,KAAKhB,GAA2Ba,sBAC5B,OAAO,EAAYlR,EAAU,CACzBuR,mBAAmB,EACnBH,0BAAsBvR,IAG9B,KAAKwQ,GAA2BzI,yBAC5B,OAAO,EAAY5H,EAAU,CACzBsI,qBAAqB,EACrBP,0BAA2B3J,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG9D,KAAK0M,GAA2BxI,0BAChC,KAAKwI,GAA2BrI,wBAC5B,OAAO,EAAYhI,EAAU,CACzBsI,qBAAqB,EACrBP,+BAA2BlI,IAGnC,QACI,OAAOG,EAEnB,EDjMA,SAAY0Q,GACR,yDACA,yDACA,kDACH,CAJD,CAAYA,KAAAA,GAAqB,KEY1B,ICVKc,GDUC,GAAkC,CAC3C9V,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAASyR,GACpBtT,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkC,CAC9CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACN2V,GAAsBgB,yBAChB,EAAYvR,EAAM/B,EAAOG,SAGzB4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAiC,WAGzB0C,EAAOrD,MACX,KAAK2V,GAAsBiB,yBAC3B,KAAKjB,GAAsBgB,yBACvB,OAAO5R,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK6Q,GAAsBkB,sBACvB,OAAO9R,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAqC,aAG7B5B,EAAOrD,MACX,KAAK2V,GAAsBiB,yBACvB,OAAO7R,EAAUE,EAAU,aAAa,GAE5C,KAAK0Q,GAAsBkB,sBAC3B,KAAKlB,GAAsBgB,yBACvB,OAAO5R,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDjEA,SAAYwR,GACR,2DACA,2DACA,oDACH,CAJD,CAAYA,KAAAA,GAAqB,KEKjC,IAAM,GAAkC,CACpC9V,OAAQ,CAAC,EACTsE,SAAU,CAAC,GAGA,SAAS6R,GACpB1T,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkC,CAC9CxE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL1C,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAiC,GAAcA,QAGvC0C,EAAOrD,MACX,KAAKyW,GAAsBM,0BAC3B,KAAKN,GAAsBO,0BACvB,OAAOjS,EAAUpE,EAAQ,kBAAcmE,GAE3C,KAAK2R,GAAsBQ,uBACvB,OAAOlS,EAAUpE,EAAQ,aAAc0C,EAAOG,SAElD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAqC,GAAcA,UAG3C5B,EAAOrD,MACX,KAAKyW,GAAsBM,0BACvB,OAAOhS,EAAUE,EAAU,cAAc,GAE7C,KAAKwR,GAAsBO,0BAC3B,KAAKP,GAAsBQ,uBACvB,OAAOlS,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,EAEnB,CC/CO,ICTKiS,GDSC,GAAoC,CAC7CvW,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEHA,SAASkS,GACpB/T,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAoC,CAChDxE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL1C,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAmC,WAG3B0C,EAAOrD,MACX,KAAK4C,EAAwBsD,6BAC7B,KAAKtD,EAAwBuD,6BACzB,OAAOpB,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKlC,EAAwByD,0BACzB,OAAOtB,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAuC,aAG/B5B,EAAOrD,MACX,KAAK4C,EAAwBsD,6BACzB,OAAOnB,EAAUE,EAAU,cAAc,GAE7C,KAAKrC,EAAwByD,0BAC7B,KAAKzD,EAAwBuD,6BACzB,OAAOpB,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,EAEnB,EDpDA,SAAYiS,GACR,uDACA,6DACA,6DACA,sEACA,sEACA,gEACA,uDACA,uDACA,gDACH,CAVD,CAAYA,KAAAA,GAAwB,KEsB7B,IAAM,GAA+B,CACxCvW,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCHA,SAASmS,GACpBhU,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+B,CAC3CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAUA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAKlD,EAAmB2U,wBACxB,KAAKZ,GAAsBO,0BAC3B,KAAKnU,EAAyB6C,8BAC9B,KAAK4B,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKT,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKN,EAAsBO,6BAC3B,KAAKR,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC/B,KAAK+O,GAAyBI,wBAC1B,OAAO,EACHlS,GACA,IAAAgJ,MAAK/K,EAAOG,QAAS,CACjB,iBACA,OACA,eACA,WACA,UACA,sBAIZ,KAAK4F,GAAgBkF,qBACjB,OAAOvJ,EAAUK,EAAM,UAAW/B,EAAOG,SAAWH,EAAOG,QAAQgL,MAAM+I,SAE7E,QACI,OAAOnS,EAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA8B,WAGtB0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACpB,OAAOb,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACpB,OAAOhB,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKd,EAAmB8U,wBACxB,KAAK9U,EAAmB2U,wBACpB,OAAOtS,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKpC,EAAmB+U,qBACpB,OAAO1S,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,aAG1B5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmBqD,mBACxB,KAAKrD,EAAmBkD,sBACpB,OAAOb,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmB8U,wBACpB,OAAOzS,EAAUE,EAAU,cAAc,GAE7C,KAAKvC,EAAmB+U,qBACxB,KAAK/U,EAAmB2U,wBACpB,OAAOtS,EAAUE,EAAU,cAAc,GAE7C,KAAKiS,GAAyBpG,iBAC1B,OAAO/L,EAAUE,EAAU,wBAAwB,GAEvD,KAAKiS,GAAyBhG,cAC9B,KAAKgG,GAAyBnG,iBAC1B,OAAOhM,EAAUE,EAAU,wBAAwB,GAEvD,QACI,OAAOA,EAEnB,CC1IA,MAAM,GAA+BrF,QAAQ,wBCE7C,IAAY8X,IAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAYA,KAAAA,GAAoB,K,SAyBhC,YACI,WAAmBC,GAAnB,MACI,YAOR,SAAyB3X,GACrB,OAAQA,GACJ,KAAK0X,GAAqBE,sBACtB,MAAO,iEAEX,KAAKF,GAAqBG,YACtB,MAAO,sDAEX,KAAKH,GAAqBI,oBACtB,MAAO,8DAEX,KAAKJ,GAAqBK,gBACtB,MAAO,0DAEX,KAAKL,GAAqBM,gBACtB,MAAO,0DAEX,KAAKN,GAAqBO,sBAC1B,KAAKP,GAAqBQ,mBACtB,MAAO,+DAEX,KAAKR,GAAqBS,aACtB,MAAO,uDAEX,KAAKT,GAAqBU,eACtB,MAAO,0EAEX,KAAKV,GAAqBW,eACtB,MAAO,yDAEX,KAAKX,GAAqBY,oBACtB,MAAO,+EAEX,KAAKZ,GAAqBa,qBACtB,MAAO,2FAEX,KAAKb,GAAqBc,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CAjDcC,CAAgBd,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAK5X,KAAO,mBACZ,EAAKC,KAAO,e,CAChB,CACJ,OAP8C,oBAO9C,EAPA,CAA8C,GC3BxC,GAA+BJ,QAAQ,YCS7C,ICAI8Y,GDAgC,kBCEzB,W,IAAE,sDACL,IAAMC,EAAWC,EAAKC,MAItB,OAAQH,GAAe,kCAAIE,EAAM,Y,IAAC,sDAG9B,IAAM9X,EAAS6X,EAAQ,aAAIG,GAE3B,MAAsB,mBAAXhY,GACA,KAAAiY,SAAQjY,GAGZA,CACX,IACH,GAnBU,IACX4X,GCTW,SAASM,GAASrZ,EAAUsZ,GACvC,GAAItZ,QACA,MAAMsZ,EAAeA,IAAiB,IAAI9Y,MAAM,qCAGpD,OAAOR,CACX,CCDe,SAASuZ,GAAoCC,GACxD,OAkBJ,SACIA,EACAC,GAEA,IAAMC,EAAQra,OAAOsa,OAAOH,GAgB5B,OAGJ,SAA6BA,EAAgBI,GAGzC,IAFA,IAAIja,EAAYN,OAAOwa,eAAeL,GAE/B7Z,GACHia,EAASja,GAETA,EAAYN,OAAOwa,eAAela,EAE1C,CAzBIma,CAAoBN,GAAQ,SAAC7Z,GACzBN,OAAO0a,oBAAoBpa,GAAW8U,SAAQ,SAACrU,GAE9B,gBAATA,GACuB,mBAAhBsZ,EAAMtZ,IACM,MAAnBA,EAAK4Z,OAAO,KAKhBN,EAAMtZ,GAhCV,SAACoZ,EAAQpZ,GACL,kB,UAAC,kDACG,WAAA6Z,aAAW,EAAAT,EAAOpZ,IAAMP,KAAI,8BAAC2Z,GAAWP,IAAxC,CADJ,CA+BcQ,CAAKD,EAAiCpZ,GACxD,GACJ,IAEOsZ,CACX,CAvCWQ,CACHV,EAKR,CCiIA,SAvImD,CAC/C,qBAAsB,CAClBW,SAAU,SACVC,OAAQ,eAEZ,iBAAkB,CACdD,SAAU,UACVC,OAAQ,UAEZ,iBAAkB,CACdD,SAAU,UACVC,OAAQ,UAEZ,eAAgB,CACZD,SAAU,UACVC,OAAQ,QAEZ,gBAAiB,CACbD,SAAU,UACVC,OAAQ,SAEZ,0BAA2B,CACvBD,SAAU,UACVC,OAAQ,mBAEZ,yBAA0B,CACtBD,SAAU,UACVC,OAAQ,kBAEZ,kBAAmB,CACfD,SAAU,UACVC,OAAQ,WAEZC,SAAU,CACNF,SAAU,WACVC,OAAQ,eAEZE,UAAW,CACPH,SAAU,YACVC,OAAQ,eAEZG,gBAAiB,CACbJ,SAAU,YACVC,OAAQ,UAEZI,aAAc,CACVL,SAAU,eACVC,OAAQ,eAEZK,OAAQ,CACJN,SAAU,SACVC,OAAQ,eAEZM,YAAa,CACTP,SAAU,cACVC,OAAQ,eAEZ,0BAA2B,CACvBD,SAAU,cACVC,OAAQ,eAEZ,mBAAoB,CAChBD,SAAU,cACVC,OAAQ,QAEZO,QAAS,CACLR,SAAU,UACVC,OAAQ,eAEZQ,OAAQ,CACJT,SAAU,SACVC,OAAQ,eAEZ,gBAAiB,CACbD,SAAU,WACVC,OAAQ,QAEZ,iBAAkB,CACdD,SAAU,YACVC,OAAQ,QAEZS,YAAa,CACTV,SAAU,cACVC,OAAQ,eAEZU,cAAe,CACXX,SAAU,gBACVC,OAAQ,eAEZW,IAAK,CACDZ,SAAU,MACVC,OAAQ,eAEZY,SAAU,CACNb,SAAU,WACVC,OAAQ,eAEZa,WAAY,CACRd,SAAU,aACVC,OAAQ,eAEZc,QAAS,CACLf,SAAU,UACVC,OAAQ,eAEZe,UAAW,CACPhB,SAAU,YACVC,OAAQ,eAEZgB,KAAM,CACFjB,SAAU,OACVC,OAAQ,eAEZ,0BAA2B,CACvBD,SAAU,cACVC,OAAQ,eAEZiB,aAAc,CACVlB,SAAU,eACVC,OAAQ,eAEZkB,QAAS,CACLnB,SAAU,UACVC,OAAQ,eAEZmB,SAAU,CACNpB,SAAU,WACVC,OAAQ,eAEZoB,eAAgB,CACZrB,SAAU,iBACVC,OAAQ,gBC9HhB,SAASqB,GAAUC,GACf,OAAO,IAAAxL,QACH,CACIyL,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBC,QAASH,EAAQG,QACjBC,SAAUJ,EAAQI,SAClBC,SAAUL,EAAQK,SAClBC,KAAMN,EAAQM,KACdC,gBAAiBP,EAAQO,gBACzBC,YAAaR,EAAQQ,YACrBC,WAAYT,EAAQS,WACpBC,MAAOV,EAAQU,MACfC,aAAcX,EAAQW,cAE1B,EAAAC,SAER,CCZO,IAAM,GAAkC,CAC3Ctb,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCqBR,SAASiX,KACZ,ICjBMC,EAKAC,EAUAC,EAKAC,EAKAC,EAKArJ,EAKAsJ,EAKAC,EC3CAC,EAKAxP,EAcA9B,EAqBA+B,EAcAwP,EAYAC,ECnEAC,EAKAC,EAKAC,EAKAC,EAKAC,EClBAC,EAKAC,EAOAC,EAKAC,EAKAC,EAKAC,EC9BAC,ECCAC,EAWAC,EAUAC,EAaAC,ECnCAC,ECmBAC,EASAC,EAaAC,EAYAC,EAyBAC,EAOAC,EAmBAC,EAOAC,EASAC,EAOAC,EAMAC,EAUAC,EAUAC,EC3JAC,EAKAC,EAKAC,ETcAC,GCjBA3C,EAAoB,IACtB,SAAC/Y,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRgX,EAA2B,GAC7BD,GACA,SAACA,GAAsB,kBACnB,OAAOnD,GACHmD,KACA,WAAM,WAAI,GAAiBzE,GAAqBE,sBAA1C,GAEd,CALuB,IAQrByE,EAAiB,IACnB,SAACjZ,GAA+B,OAAAA,EAAMzC,OAAOsS,WAAb,IAChC,SAAClS,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTub,EAA0B,IAC5B,SAAClZ,GAA+B,OAAAA,EAAMzC,OAAOoe,oBAAb,IAChC,SAAChe,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTwb,EAAe,IACjB,SAACnZ,GAA+B,OAAAA,EAAMzC,OAAOqe,SAAb,IAChC,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTmS,EAAa,IACf,SAAC9P,GAA+B,QAAEA,EAAM6B,SAASiO,UAAjB,IAChC,SAACzS,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGV+b,EAAsB,IACxB,SAACpZ,GAA+B,QAAEA,EAAM6B,SAASuX,mBAAjB,IAChC,SAAC/b,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGVgc,EAAY,IACd,SAACrZ,GAA+B,QAAEA,EAAM6B,SAASwX,SAAjB,IAChC,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,GACR,CACH+Y,kBAAmBA,EAAkB/Y,GACrCgZ,yBAA0BA,EAAyBhZ,GACnDiZ,eAAgBA,EAAejZ,GAC/BkZ,wBAAyBA,EAAwBlZ,GACjDmZ,aAAcA,EAAanZ,GAC3B8P,WAAYA,EAAW9P,GACvBoZ,oBAAqBA,EAAoBpZ,GACzCqZ,UAAWA,EAAUrZ,GAE7B,KDtCM8b,EUvBH,WACH,IAAMC,EAAU,IACZ,SAAC/b,GAAqB,OAAAA,EAAMgC,IAAN,IACtB,SAACgD,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRgX,EAAiB,GAAeD,GAAS,SAACA,GAAY,kBACxD,OAAOnG,GAAMmG,KAAW,WAAM,WAAI,GAAiBzH,GAAqBG,YAA1C,GAClC,CAF4D,IAItD0E,EAAe,IACjB,SAACnZ,GAAqB,OAAAA,EAAMzC,OAAOqe,SAAb,IACtB,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0b,EAAY,IACd,SAACrZ,GAAqB,QAAEA,EAAM6B,SAASwX,SAAjB,IACtB,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,GACR,CACH+b,QAASA,EAAQ/b,GACjBgc,eAAgBA,EAAehc,GAC/BmZ,aAAcA,EAAanZ,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GACJ,CVL+Bic,GACrBC,IEtBA5C,EAAW,IACb,SAACtZ,GAA+B,OAAAA,CAAA,IAChC,SAACA,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT8J,EAAiB,IACnB,SAAC9J,GAA+B,OAAAA,EAAM6B,QAAN,IAChC,SAACA,GACG,YAAA8T,UAAQ,SAACnQ,GACL,GAAIA,EAAU,CACV,IAAMmR,EAAS9U,EAAS2D,GAExB,OAA6C,KAArCmR,GAAUA,EAAO7M,e,CAG7B,OAAO,IAAAqS,MAAKta,EAAU,CAAEiI,gBAAgB,GAC5C,GARA,IAWF9B,EAAgB,IAClB,SAAChI,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAACA,GACG,YAAA2T,UAAQ,SAACnQ,EAAoCE,GACzC,IAAMiR,EAAS3U,EAAKwD,GAEpB,QAAKmR,IAIAjR,GAOgD,IAA9CiR,EAAOxR,sBAAsBO,IANzB,IAAAyW,MACHxF,EAAOxR,uBACP,SAAC6C,GAAkB,OAAkB,IAAlBA,CAAA,IAK/B,GAfA,IAkBF+B,EAAmB,IACrB,SAAC/J,GAA+B,OAAAA,EAAM6B,QAAN,IAChC,SAACA,GACG,YAAA8T,UAAQ,SAACnQ,GACL,GAAIA,EAAU,CACV,IAAMmR,EAAS9U,EAAS2D,GAExB,OAA+C,KAAvCmR,GAAUA,EAAO5M,iB,CAG7B,OAAO,IAAAoS,MAAKta,EAAU,CAAEkI,kBAAkB,GAC9C,GARA,IAWFwP,EAAqB,IACvB,SAACvZ,GAA+B,OAAAA,EAAMzC,MAAN,IAChC,SAACA,GACG,YAAAoY,UAAQ,SAACnQ,GACL,IAAMmR,EAASnR,EACTjI,EAAOiI,IACP,IAAA4W,OAAK,IAAAC,QAAO9e,IAAS,SAACoZ,GAAW,SAAGA,IAAUA,EAAOxO,gBAApB,IAEvC,OAAOwO,GAAUA,EAAOxO,eAC5B,GANA,IASFqR,EAAuB,IACzB,SAACxZ,GAA+B,OAAAA,EAAMzC,MAAN,IAChC,SAACA,GACG,YAAAoY,UAAQ,SAACnQ,GACL,IAAMmR,EAASnR,EACTjI,EAAOiI,IACP,IAAA4W,OAAK,IAAAC,QAAO9e,IAAS,SAACoZ,GAAW,SAAGA,IAAUA,EAAOpO,kBAApB,IAEvC,OAAOoO,GAAUA,EAAOpO,iBAC5B,GANA,KASD,KAAAsT,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,GACR,CACHsZ,SAAUA,EAAStZ,GACnB8J,eAAgBA,EAAe9J,GAC/BgI,cAAeA,EAAchI,GAC7B+J,iBAAkBA,EAAiB/J,GACnCuZ,mBAAoBA,EAAmBvZ,GACvCwZ,qBAAsBA,EAAqBxZ,GAEnD,KFhEMsc,GWVH,WACH,IAAMC,EAAY,IACd,SAACvc,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRwa,EAAmB,IACrB,SAACxc,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACA,GAAS,gBAACya,GACP,GAAKza,EAAL,CAIQ,IAAA0a,EAAkB1a,EAAK2a,QAAO,cAEtC,GAAKD,EAIL,YAAsBhb,IAAf+a,EACDC,EAAczb,QAAO,SAAC,G,IAAErE,EAAI,OAAO,OAAA6f,IAAe7f,CAAf,IACnC8f,C,CACV,CAdU,IAiBRE,EAAiB,IACnB,SAAC5c,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAAC6a,EAAgB,G,IAAEC,EAAS,YAAmC,OAAAA,GAAaA,EAAU9a,IAAvB,IAC/D,SAACA,EAAM+a,GAAe,kBAClB,OAAA/a,GAAQ+a,GACF,gCACO/a,EAAKgb,aAAW,CACnBD,WAAU,SAEdrb,CALN,CADkB,IASpBub,EAAwB,GAAeL,GAAgB,SAACA,GAAmB,kBAC7E,OAAOhH,GACHgH,KACA,WAAM,WAAI,GAAiBtI,GAAqBO,sBAA1C,GAEd,CALiF,IAO3EqI,EAAmB,IACrB,SAACld,GAAuB,OAAAA,EAAMgC,MAAQhC,EAAMgC,KAAK2a,OAAzB,IACxB,SAAC3a,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRmb,EAAoB,IACtB,SAACnd,GAAuB,OAAAA,EAAMuF,MAAQvF,EAAMuF,KAAK6X,cAAzB,IACxB,SAACpb,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRqb,EAAU,IACZ,SAACrd,GAAkB,aAAe,QAAf,EAAKA,EAAMuF,YAAI,eAAE+X,IAAI,IACxC,SAACtb,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRub,EAAY,IACd,SAACvd,GAAkB,aAAe,QAAf,EAAKA,EAAMuF,YAAI,eAAEiY,MAAM,IAC1C,SAACxb,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRyb,EAAgC,IAClC,SAACzd,GAAuB,OAAAA,EAAMuF,MAAQvF,EAAMuF,KAAKmY,0BAAzB,IACxB,SAAC1b,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRmX,EAAe,IACjB,SAACnZ,GAAuB,OAAAA,EAAMzC,OAAOqe,SAAb,IACxB,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0b,EAAY,IACd,SAACrZ,GAAuB,QAAEA,EAAM6B,SAASwX,SAAjB,IACxB,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aACH,SAAC7b,EAAoC8c,GACjC,YADH,IAAA9c,IAAAA,EAAA,IACU,CACHuc,UAAWA,EAAUvc,GACrBwc,iBAAkBA,EAAiBxc,GACnC4c,eAAgBA,EAAe5c,EAAO,CAAE8c,UAAS,IACjDG,sBAAuBA,EAAsBjd,EAAO,CAAE8c,UAAS,IAC/DI,iBAAkBA,EAAiBld,GACnCmd,kBAAmBA,EAAkBnd,GACrCqd,QAASA,EAAQrd,GACjBud,UAAWA,EAAUvd,GACrByd,8BAA+BA,EAA8Bzd,GAC7DmZ,aAAcA,EAAanZ,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GAER,CXtFiC2d,GACvBC,GY7BH,WACH,IAAMC,EAAe,IACjB,SAAC7d,GAAwB,OAAAA,EAAMgC,IAAN,IACzB,SAAC8b,GAAc,kBAAM,OAAAA,CAAA,CAAN,IAGb3E,EAAe,IACjB,SAACnZ,GAAwB,OAAAA,EAAMzC,OAAOqe,SAAb,IACzB,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0b,EAAY,IACd,SAACrZ,GAAwB,QAAEA,EAAM6B,SAASwX,SAAjB,IACzB,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH6d,aAAcA,EAAa7d,GAC3BmZ,aAAcA,EAAanZ,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GACJ,CZMkC+d,GACxBC,IG1BAvE,EAAa,IACf,SAACzZ,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR0X,EAAiB,IACnB,SAAC1Z,GAAuB,OAAAA,EAAMzC,OAAO0gB,iBAAb,IACxB,SAACtgB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTgc,EAAgB,IAClB,SAAC3Z,GAAuB,OAAAA,EAAMzC,OAAO2gB,gBAAb,IACxB,SAACvgB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTic,EAAa,IACf,SAAC5Z,GAAuB,QAAEA,EAAM6B,SAASsc,gBAAjB,IACxB,SAAC9gB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGVwc,EAAa,IACf,SAAC7Z,GAAuB,QAAEA,EAAM6B,SAASuc,gBAAjB,IACxB,SAAC/gB,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHyZ,WAAYA,EAAWzZ,GACvB0Z,eAAgBA,EAAe1Z,GAC/B2Z,cAAeA,EAAc3Z,GAC7B4Z,WAAYA,EAAW5Z,GACvB6Z,WAAYA,EAAW7Z,GAE/B,KHNMqe,IIzBAvE,EAAc,IAChB,SAAC9Z,GAAyB,OAAAA,EAAMgC,IAAN,IAC1B,SAACqF,GAAa,kBAAM,OAAAA,CAAA,CAAN,IAGZ0S,EAAqB,GAAeD,GAAa,SAACA,GAAgB,kBACpE,OAAOlE,GACHkE,KACA,WAAM,WAAI,GAAiBxF,GAAqBM,gBAA1C,GAEd,CALwE,IAOlEoF,EAAwB,IAC1B,SAACha,GAAyB,OAAAA,EAAMzC,OAAOoB,WAAb,IAC1B,SAAChB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTsc,EAA4B,IAC9B,SAACja,GAAyB,QAAEA,EAAM6B,SAASyc,UAAjB,IAC1B,SAACjhB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGV6c,EAAwB,IAC1B,SAACla,GAAyB,OAAAA,EAAMzC,OAAOghB,kBAAb,IAC1B,SAAC5gB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTwc,EAA4B,IAC9B,SAACna,GAAyB,QAAEA,EAAM6B,SAAS2c,iBAAjB,IAC1B,SAACnhB,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH8Z,YAAaA,EAAY9Z,GACzB+Z,mBAAoBA,EAAmB/Z,GACvCga,sBAAuBA,EAAsBha,GAC7Cia,0BAA2BA,EAA0Bja,GACrDka,sBAAuBA,EAAsBla,GAC7Cma,0BAA2BA,EAA0Bna,GAE7D,KJfMye,GavBH,WACH,IAAMC,EAAiB,IACnB,SAAC1e,GAAiC,OAAAA,EAAMzC,OAAOsL,cAAb,IAClC,SAAC7I,GAAiC,OAAAA,EAAMzC,OAAOqL,WAAb,IAClC,SAACC,EAAgBD,GAAgB,gBAACpD,GAC9B,IAAIA,GAAYqD,IAAmBrD,EAInC,OAAOoD,CACX,CANiC,IAS/B+V,EAAkB,IACpB,SAAC3e,GAAiC,OAAAA,EAAMzC,OAAO2L,eAAb,IAClC,SAAClJ,GAAiC,OAAAA,EAAMzC,OAAO0L,YAAb,IAClC,SAACC,EAAiBD,GAAiB,gBAACzD,GAChC,IAAIA,GAAY0D,IAAoB1D,EAIpC,OAAOyD,CACX,CANmC,IASjC2V,EAAuC,IACzC,SAAC5e,GAAiC,OAAAA,EAAMzC,OAAOgM,oCAAb,IAClC,SAACvJ,GAAiC,OAAAA,EAAMzC,OAAO+L,iCAAb,IAClC,SAACC,EAAsCD,GACnC,gBAAC9D,GACG,IAAIA,GAAY+D,IAAyC/D,EAIzD,OAAO8D,CACX,CANA,IASFiQ,EAAqB,IACvB,SAACvZ,GAAiC,OAAAA,EAAMzC,OAAO6K,kBAAb,IAClC,SAACpI,GAAiC,OAAAA,EAAMzC,OAAO4K,eAAb,IAClC,SAACC,EAAoBD,GAAoB,gBAAC3C,GACtC,IAAIA,GAAY4C,IAAuB5C,EAIvC,OAAO2C,CACX,CANyC,IASvC0W,EAA4B,IAC9B,SAAC7e,GAAiC,OAAAA,EAAMzC,OAAOqM,yBAAb,IAClC,SAAC5J,GAAiC,OAAAA,EAAMzC,OAAOoM,sBAAb,IAClC,SAACC,EAA2BD,GAA2B,gBAACnE,GACpD,IAAIA,GAAYoE,IAA8BpE,EAI9C,OAAOmE,CACX,CANuD,IASrDK,EAAc,IAChB,SAAChK,GAAiC,OAAAA,EAAM6B,SAASgH,cAAf,IAClC,SAAC7I,GAAiC,OAAAA,EAAM6B,SAASmI,WAAf,IAClC,SAACnB,EAAgBmB,GAAgB,gBAACxE,GAC9B,QAAIA,GAAYqD,IAAmBrD,IAI1BwE,EACb,CANiC,IAS/BC,EAAe,IACjB,SAACjK,GAAiC,OAAAA,EAAM6B,SAASqH,eAAf,IAClC,SAAClJ,GAAiC,OAAAA,EAAM6B,SAASoI,YAAf,IAClC,SAACf,EAAiBe,GAAiB,gBAACzE,GAChC,QAAIA,GAAY0D,IAAoB1D,IAI3ByE,EACb,CANmC,IASjCC,EAAmC,IACrC,SAAClK,GAAiC,OAAAA,EAAM6B,SAAS0H,oCAAf,IAClC,SAACvJ,GAAiC,OAAAA,EAAM6B,SAASqI,gCAAf,IAClC,SAACX,EAAsCW,GACnC,gBAAC1E,GACG,QAAIA,GAAY+D,IAAyC/D,IAIhD0E,EACb,CANA,IASFJ,EAAiB,IACnB,SAAC9J,GAAiC,OAAAA,EAAM6B,SAASuG,kBAAf,IAClC,SAACpI,GAAiC,OAAAA,EAAM6B,SAASiI,cAAf,IAClC,SAAC1B,EAAoB0B,GAAmB,gBAACtE,GACrC,QAAIA,GAAY4C,IAAuB5C,IAI9BsE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAChI,GAAiC,OAAAA,EAAMgC,IAAN,IAClC,SAACA,GAAS,gBAACwD,GACP,SAAUxD,EAAKwD,KAAaxD,EAAKwD,GAAUwC,cAC/C,CAFU,IAKRmC,EAAsB,IACxB,SAACnK,GAAiC,OAAAA,EAAM6B,SAAS+H,yBAAf,IAClC,SAAC5J,GAAiC,OAAAA,EAAM6B,SAASsI,mBAAf,IAClC,SAACP,EAA2BO,GAAwB,gBAAC3E,GACjD,QAAIA,GAAYoE,IAA8BpE,IAIrC2E,EACb,CANoD,IASxD,OAAO,KAAA0R,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH0e,eAAgBA,EAAe1e,GAC/B2e,gBAAiBA,EAAgB3e,GACjC4e,qCAAsCA,EAAqC5e,GAC3EuZ,mBAAoBA,EAAmBvZ,GACvC6e,0BAA2BA,EAA0B7e,GACrDgK,YAAaA,EAAYhK,GACzBiK,aAAcA,EAAajK,GAC3BkK,iCAAkCA,EAAiClK,GACnE8J,eAAgBA,EAAe9J,GAC/BgI,cAAeA,EAAchI,GAC7BmK,oBAAqBA,EAAoBnK,GAEjD,GACJ,Cb1H2C8e,GACjCC,Gc3BH,WACH,IAAMC,EAAsB,IACxB,SAAChf,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR0X,EAAiB,IACnB,SAAC1Z,GAAgC,OAAAA,EAAMzC,OAAO0hB,0BAAb,IACjC,SAACthB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTgc,EAAgB,IAClB,SAAC3Z,GAAgC,OAAAA,EAAMzC,OAAO2hB,yBAAb,IACjC,SAACvhB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTic,EAAa,IACf,SAAC5Z,GAAgC,QAAEA,EAAM6B,SAASsd,yBAAjB,IACjC,SAAC9hB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGVwc,EAAa,IACf,SAAC7Z,GAAgC,QAAEA,EAAM6B,SAASud,yBAAjB,IACjC,SAAC/hB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHgf,oBAAqBA,EAAoBhf,GACzC0Z,eAAgBA,EAAe1Z,GAC/B2Z,cAAeA,EAAc3Z,GAC7B4Z,WAAYA,EAAW5Z,GACvB6Z,WAAYA,EAAW7Z,GAE/B,GACJ,CdR0Cqf,GAChCC,GevBH,WACH,IAAMC,EAAgC,IAClC,SAACvf,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACwd,GAAgB,gBAACC,GACd,GAAKD,EAAL,CAIA,IAAME,EAAmBD,EAAc5S,QAC9B4S,EAAc5S,QAAO,IAAI4S,EAAcjc,GAC1Cic,EAAcjc,GAEdmc,EAAgB,GAAqBD,GAE3C,OAAKC,GAIE,IAAA1e,QAA0Bue,EAAaG,GAHnC,E,CAIf,CAhBiB,IAmBfC,EAAoB,IACtB,SAAC5f,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACwd,GACG,YADH,IAAAA,IAAAA,EAAA,IACG,SAACvQ,GACG,IAAM4Q,GAAQ,IAAAxD,QAAO,IAErB,OAAOmD,EAAYpD,MACf,SAAC0D,GACG,OAAAA,EAAWC,cAAgB9Q,GACP,SAApB6Q,EAAWljB,MACXijB,EAAM1D,MAAK,SAAC6D,GAAS,WAAAC,SAAQH,EAAYE,EAApB,GAFrB,GAIZ,CATA,IAYFE,EAA2B,GAC7BN,GACA,SAACA,GAAsB,gBAAC3Q,GACpB,OAAO2G,GACHgK,EAAkB3Q,IAClB,WAAM,WAAI,GAAiBqF,GAAqB6L,yBAA1C,GAEd,CALuB,IAQrBC,EAAiB,IACnB,SAACpgB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACwd,GAAgB,kBACb,GAAKA,EAaL,OATgC,IAAAa,SAAQ,IAAsB,SAACC,GAC3D,WAAArf,QACIue,GACA,SAACM,GACG,OAAO,IAAAG,SAAQH,EAAYQ,EAC/B,GAJJ,GASR,CAfiB,IAkBfC,EAAqB,IACvB,SAACvgB,GAA2B,OAAAA,EAAMuF,IAAN,IAC5B,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR4T,EAAe,IACjB,SAACnZ,GAA2B,OAAAA,EAAMzC,OAAOqe,SAAb,IAC5B,SAACA,GAAc,kBAAM,OAAAA,CAAA,CAAN,IAGb4E,EAAiB,IACnB,SAACxgB,GAA2B,OAAAA,EAAMzC,OAAOuR,gBAAb,IAC5B,SAAC9O,GAA2B,OAAAA,EAAMzC,OAAOsR,WAAb,IAC5B,SAACC,EAAkBD,GAAgB,gBAACI,GAChC,IAAIA,GAAgBH,IAAqBG,EAIzC,OAAOJ,CACX,CANmC,IASjCwK,EAAY,IACd,SAACrZ,GAA2B,OAAAA,EAAM6B,SAASwX,SAAf,IAC5B,SAACA,GAAc,kBAAM,QAAEA,CAAF,CAAN,IAGbnK,EAAa,IACf,SAAClP,GAA2B,OAAAA,EAAM6B,SAASsN,kBAAf,IAC5B,SAACnP,GAA2B,OAAAA,EAAM6B,SAASqN,UAAf,IAC5B,SAACC,EAAoBD,GAAe,gBAACD,GACjC,QAAIA,GAAgBE,IAAuBF,IAIlCC,EACb,CANoC,IASxC,OAAO,KAAA2M,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH4f,kBAAmBA,EAAkB5f,GACrCkgB,yBAA0BA,EAAyBlgB,GACnDogB,eAAgBA,EAAepgB,GAC/Buf,8BAA+BA,EAA8Bvf,GAC7DugB,mBAAoBA,EAAmBvgB,GACvCmZ,aAAcA,EAAanZ,GAC3BwgB,eAAgBA,EAAexgB,GAC/BqZ,UAAWA,EAAUrZ,GACrBkP,WAAYA,EAAWlP,GAE/B,GACJ,CfhGqCygB,GAC3BC,GgB/BH,WACH,IAAMC,EAA2B,IAC7B,SAAC3gB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAC+a,GACG,gBAACe,EAA2BrF,QAA3B,IAAAqF,IAAAA,EAAA,IACG,IAAM8C,GAAkB,IAAAxE,MAAK0B,EAAW,CAAEvf,KAAMka,IAGhD,OAFesE,EAAaA,EAAW8D,gBAAkB,IAE3CviB,KAAI,SAACwiB,GAAe,OAAAC,EAAaD,EAAOhD,EAAW8C,EAA/B,GACtC,CALA,IAQFI,EAA0B,IAC5B,SAAChhB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAC+a,GACG,gBAACe,EAA2BrF,QAA3B,IAAAqF,IAAAA,EAAA,IACG,IAAM8C,GAAkB,IAAAxE,MAAK0B,EAAW,CAAEvf,KAAMka,IAGhD,OAFesE,EAAaA,EAAWta,eAAiB,IAE1CnE,KAAI,SAACwiB,GAAe,OAAAC,EAAaD,EAAOhD,EAAW8C,EAA/B,GACtC,CALA,IAQFK,EAA2B,IAC7B,SAACjhB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAC+a,GAAe,kBAAM,OAAAA,EAAaA,EAAWmE,gBAAkB,EAA1C,CAAN,IAGd/H,EAAe,IACjB,SAACnZ,GAA2B,OAAAA,EAAMzC,OAAOqe,SAAb,IAC5B,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0b,EAAY,IACd,SAACrZ,GAA2B,QAAEA,EAAM6B,SAASwX,SAAjB,IAC5B,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,SAAS0jB,EACLD,EACAhD,EACA8C,GAEA,MAAmB,gBAAfE,EAAMnkB,KAed,SACImkB,EACAhD,EACAqD,GAEA,QAHA,IAAArD,IAAAA,EAAA,KAGKA,EAAUzf,OACX,OAAOyiB,EAGH,OAAcK,GAAW,CAAC,GAAC,KAA3B5iB,OAAI,IAAG,KAAE,EACX6iB,EAAQtD,EAAUxf,KAAI,SAAC,GAAwB,OACjD/B,MAD+B,OAE/B8kB,MAFqC,OAAY,IAKrD,OAAO,gCACAP,GAAK,CACRtgB,QAAS,CAAE4gB,MAAK,GAChBviB,QAASN,EACT3B,KAAM,QACN0kB,UAAW,WACXC,SAAU,UAElB,CArCeC,CAAeV,EAAOhD,EAAW8C,GAGzB,oBAAfE,EAAMnkB,KAoCd,SAAyBmkB,EAAkBK,GACjC,MAAuCA,GAAW,CAAC,EAAjD,IAAAM,aAAAA,OAAY,IAAG,KAAE,EAAEC,EAAa,gBAExC,IAAKD,EAAapjB,OACd,OAAO,gCACAyiB,GAAK,CACRa,SAA2B,MAAjBD,GAAgCA,IAIlD,IAAMN,EAAQK,EAAanjB,KAAI,SAAC,GAAwB,OACpD/B,MADkC,OAElC8kB,MAFwC,OAAY,IAKxD,OAAO,gCACAP,GAAK,CACRnkB,KAAM,sBACN6D,QAAS,CAAE4gB,MAAK,GAChBO,SAA2B,MAAjBD,GAA+BA,EACzC9kB,KAAM,QACN0kB,UAAW,WACXC,SAAU,UAElB,CA3DeK,CAAgBd,EAAOF,GAGf,eAAfE,EAAMnkB,KA0Dd,SAA0BmkB,EAAkBK,GAChC,OAAwBA,GAAW,CAAC,GAAC,eAArCU,OAAc,IAAG,KAAE,EAE3B,YAAuBngB,IAAnBmgB,EACOf,GAGJ,gCAAKA,GAAK,CAAEa,SAAUG,QAAQD,IACzC,CAjEeE,CAAiBjB,EAAOF,GAG5BE,CACX,CA+DA,OAAO,KAAAjF,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH2gB,yBAA0BA,EAAyB3gB,GACnDghB,wBAAyBA,EAAwBhhB,GACjDihB,yBAA0BA,EAAyBjhB,GACnDmZ,aAAcA,EAAanZ,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GACJ,ChBjG+BgiB,GACrBC,GiB3BH,WACH,IAAMC,EAAoB,IACtB,SAACliB,GAA8B,OAAAA,EAAMgC,IAAN,IAC/B,SAACmgB,GAAmB,kBAAM,OAAAA,CAAA,CAAN,IAGlBC,EAAwB,IAC1B,SAACpiB,GAA8B,OAAAA,EAAMuF,IAAN,IAC/B,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR8c,EAAmB,IACrB,SAACriB,GAA8B,OAAAA,EAAMgC,IAAN,IAC/B,SAACmgB,GAAmB,gBAAC3c,EAAkB8c,GACnC,OAAOA,GACD,IAAAlG,MAAK+F,EAAgB,CAAE3e,GAAIgC,EAAUqH,QAASyV,KAC9C,IAAAlG,MAAK+F,EAAgB,CAAE3e,GAAIgC,GACrC,CAJoB,IAOlB+c,EAA0B,GAC5BF,GACA,SAACA,GAAqB,gBAAC7c,EAAkB8c,GACrC,OAAO1M,GACHyM,EAAiB7c,EAAU8c,IAC3B,WAAM,WAAI,GAAiBhO,GAAqBa,qBAA1C,GAEd,CALsB,IAQpBgE,EAAe,IACjB,SAACnZ,GAA8B,OAAAA,EAAMzC,OAAOqe,SAAb,IAC/B,SAACA,GAAc,kBAAM,OAAAA,CAAA,CAAN,IAGb4G,EAAqB,IACvB,SAACxiB,GAA8B,OAAAA,EAAMzC,OAAO6P,YAAb,IAC/B,SAACpN,GAA8B,OAAAA,EAAMzC,OAAO8P,eAAb,IAC/B,SAACD,EAAcC,GAAoB,gBAAC7H,GAChC,IAAIA,GAAY4H,IAAiB5H,EAIjC,OAAO6H,CACX,CANmC,IASjCgM,EAAY,IACd,SAACrZ,GAA8B,OAAAA,EAAM6B,SAASwX,SAAf,IAC/B,SAACA,GAAc,kBAAM,QAAEA,CAAF,CAAN,IAGb9L,EAAkB,IACpB,SAACvN,GAA8B,OAAAA,EAAM6B,SAASuL,YAAf,IAC/B,SAACpN,GAA8B,OAAAA,EAAM6B,SAAS0L,eAAf,IAC/B,SAACH,EAAcG,GAAoB,gBAAC/H,GAChC,QAAIA,GAAY4H,IAAiB5H,IAIxB+H,EACb,CANmC,IASvC,OAAO,KAAAsO,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHkiB,kBAAmBA,EAAkBliB,GACrCoiB,sBAAuBA,EAAsBpiB,GAC7CqiB,iBAAkBA,EAAiBriB,GACnCuiB,wBAAyBA,EAAwBviB,GACjDmZ,aAAcA,EAAanZ,GAC3BwiB,mBAAoBA,EAAmBxiB,GACvCqZ,UAAWA,EAAUrZ,GACrBuN,gBAAiBA,EAAgBvN,GAEzC,GACJ,CjBjDwCyiB,GAC9BC,GkB9BH,WACH,IAAMnJ,EAAqB,IACvB,SAACvZ,GAAgC,OAAAA,EAAMzC,OAAO6K,kBAAb,IACjC,SAACpI,GAAgC,OAAAA,EAAMzC,OAAO4K,eAAb,IACjC,SAACC,EAAoBD,GAAoB,gBAAC3C,GACtC,IAAIA,GAAY4C,IAAuB5C,EAIvC,OAAO2C,CACX,CANyC,IASvCwa,EAAkB,IACpB,SAAC3iB,GAAgC,OAAAA,EAAMzC,OAAOsQ,eAAb,IACjC,SAAC7N,GAAgC,OAAAA,EAAMzC,OAAOqQ,YAAb,IACjC,SAACC,EAAiBD,GAAiB,gBAACpI,GAChC,IAAIA,GAAYqI,IAAoBrI,EAIpC,OAAOoI,CACX,CANmC,IASjCgV,EAAmB,IACrB,SAAC5iB,GAAgC,OAAAA,EAAMzC,OAAO2Q,gBAAb,IACjC,SAAClO,GAAgC,OAAAA,EAAMzC,OAAO0Q,aAAb,IACjC,SAACC,EAAkBD,GAAkB,gBAACzI,GAClC,IAAIA,GAAY0I,IAAqB1I,EAIrC,OAAOyI,CACX,CANqC,IASnC4U,EAA4B,IAC9B,SAAC7iB,GAAgC,OAAAA,EAAMzC,OAAOqM,yBAAb,IACjC,SAAC5J,GAAgC,OAAAA,EAAMzC,OAAOoM,sBAAb,IACjC,SAACC,EAA2BD,GAA2B,gBAACnE,GACpD,IAAIA,GAAYoE,IAA8BpE,EAI9C,OAAOmE,CACX,CANuD,IASrDG,EAAiB,IACnB,SAAC9J,GAAgC,OAAAA,EAAM6B,SAASuG,kBAAf,IACjC,SAACpI,GAAgC,OAAAA,EAAM6B,SAASiI,cAAf,IACjC,SAAC1B,EAAoB0B,GAAmB,gBAACtE,GACrC,QAAIA,GAAY4C,IAAuB5C,IAI9BsE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAChI,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAACA,GAAS,gBAACwD,GACP,SAAUxD,EAAKwD,KAAaxD,EAAKwD,GAAUwC,cAC/C,CAFU,IAKRoG,EAAc,IAChB,SAACpO,GAAgC,OAAAA,EAAM6B,SAASgM,eAAf,IACjC,SAAC7N,GAAgC,OAAAA,EAAM6B,SAASuM,WAAf,IACjC,SAACP,EAAiBO,GAAgB,gBAAC5I,GAC/B,QAAIA,GAAYqI,IAAoBrI,IAI3B4I,EACb,CANkC,IAShCC,EAAe,IACjB,SAACrO,GAAgC,OAAAA,EAAM6B,SAASqM,gBAAf,IACjC,SAAClO,GAAgC,OAAAA,EAAM6B,SAASwM,YAAf,IACjC,SAACH,EAAkBG,GAAiB,gBAAC7I,GACjC,QAAIA,GAAY0I,IAAqB1I,IAI5B6I,EACb,CANoC,IASlClE,EAAsB,IACxB,SAACnK,GAAgC,OAAAA,EAAM6B,SAAS+H,yBAAf,IACjC,SAAC5J,GAAgC,OAAAA,EAAM6B,SAASsI,mBAAf,IACjC,SAACP,EAA2BO,GAAwB,gBAAC3E,GACjD,QAAIA,GAAYoE,IAA8BpE,IAIrC2E,EACb,CANoD,IASxD,OAAO,KAAA0R,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHuZ,mBAAoBA,EAAmBvZ,GACvC2iB,gBAAiBA,EAAgB3iB,GACjC4iB,iBAAkBA,EAAiB5iB,GACnC6iB,0BAA2BA,EAA0B7iB,GACrD8J,eAAgBA,EAAe9J,GAC/BgI,cAAeA,EAAchI,GAC7BoO,YAAaA,EAAYpO,GACzBqO,aAAcA,EAAarO,GAC3BmK,oBAAqBA,EAAoBnK,GAEjD,GACJ,ClBvF0C8iB,GAChCC,GmBlCH,WACH,IAAMC,EAAmB,IACrB,SAAChjB,GAA6B,OAAAA,EAAMgC,IAAN,IAC9B,SAACihB,GAAkB,gBAACtR,EAAuBC,GACvC,GAAKqR,EAAL,CAIA,IACMC,EAAwB/R,GADNN,GAAc,CAAEc,cAAa,EAAEC,WAAU,KAE3DX,EAAYY,KAAK,GAAGC,KAAKC,UAAUmR,IAEzC,OAAOD,EAAchS,E,CACzB,CAVmB,IAajBkI,EAAe,IACjB,SAACnZ,GAA6B,OAAAA,EAAMzC,OAAOqe,SAAb,IAC9B,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0b,EAAY,IACd,SAACrZ,GAA6B,QAAEA,EAAM6B,SAASwX,SAAjB,IAC9B,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHgjB,iBAAkBA,EAAiBhjB,GACnCmZ,aAAcA,EAAanZ,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GACJ,CnBCuCmjB,GAC7BC,IKpCAhJ,EAAc,IAChB,SAACpa,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAACA,GACG,gBAAkDwD,GAC9C,OAAOxD,EAAKwD,EAChB,CAFA,KAKD,KAAAqW,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHoa,YAAaA,EAAYpa,GAEjC,KLyBMqjB,IMpCAhJ,EAAqB,IACvB,SAACra,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACiO,GAAiB,kBACd,IAAMqT,EAAsBrT,aAAY,EAAZA,EAAcmM,MACtC,SAACmH,GAAgB,OAACA,EAAYC,oBAAb,IAGrB,OAAOF,aAAmB,EAAnBA,EAAqBzC,eAChC,CANkB,IAShBvG,EAA4B,GAC9BD,GACA,SAACA,GAAuB,kBACpB,OAAOzE,GACHyE,KACA,WAAM,WAAI,GAAiB/F,GAAqBc,uBAA1C,GAEd,CALwB,IAQtBmF,EAAuB,IACzB,SAACva,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACiO,GAAiB,kBACd,IAAMwT,EAAuBxT,aAAY,EAAZA,EAAchP,QACvC,SAACsiB,GAAgB,OAACA,EAAYC,oBAAb,IAGrB,OAAOC,EACDA,EAAqBnlB,KAAI,SAACilB,GAAgB,OAAAA,EAAY1C,eAAZ,IAC1C,EACV,CARkB,IAWhBrG,EAA8B,GAChCD,GACA,SAACA,GAAyB,kBACtB,OAAO3E,GACH2E,KACA,WAAM,WAAI,GAAiBjG,GAAqBc,uBAA1C,GAEd,CAL0B,KAQvB,KAAAyG,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHqa,mBAAoBA,EAAmBra,GACvCsa,0BAA2BA,EAA0Bta,GACrDua,qBAAsBA,EAAqBva,GAC3Cwa,4BAA6BA,EAA4Bxa,GAEjE,KNdM0jB,GoBvCH,WACH,IAAMC,EAAuB,IACzB,SAAC3jB,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRmX,EAAe,IACjB,SAACnZ,GAAgC,OAAAA,EAAMzC,OAAOqe,SAAb,IACjC,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0b,EAAY,IACd,SAACrZ,GAAgC,OAAAA,EAAM6B,SAASwX,SAAf,IACjC,SAAChc,GAAW,kBAAM,QAAEA,CAAF,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH2jB,qBAAsBA,EAAqB3jB,GAC3CmZ,aAAcA,EAAanZ,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GACJ,CpBgB0C4jB,GAChCC,GqBnCH,WACH,IAAMC,EAAwB,IAC1B,SAAC9jB,GAAiC,OAAAA,EAAMzC,OAAOqV,qBAAb,IAClC,SAAC5S,GAAiC,OAAAA,EAAMzC,OAAOoV,kBAAb,IAClC,SAACC,EAAuBD,GAAuB,gBAACnN,GAC5C,IAAIA,GAAYoN,IAA0BpN,EAI1C,OAAOmN,CACX,CAN+C,IAS7CoR,EAAuB,IACzB,SAAC/jB,GAAiC,OAAAA,EAAMzC,OAAO0V,oBAAb,IAClC,SAACjT,GAAiC,OAAAA,EAAMzC,OAAOyV,iBAAb,IAClC,SAACC,EAAsBD,GAAsB,gBAACxN,GAC1C,IAAIA,GAAYyN,IAAyBzN,EAIzC,OAAOwN,CACX,CAN6C,IAS3CuG,EAAqB,IACvB,SAACvZ,GAAiC,OAAAA,EAAMzC,OAAO6K,kBAAb,IAClC,SAACpI,GAAiC,OAAAA,EAAMzC,OAAO4K,eAAb,IAClC,SAACC,EAAoBD,GAAoB,gBAAC3C,GACtC,IAAIA,GAAY4C,IAAuB5C,EAIvC,OAAO2C,CACX,CANyC,IASvC0W,EAA4B,IAC9B,SAAC7e,GAAiC,OAAAA,EAAMzC,OAAOqM,yBAAb,IAClC,SAAC5J,GAAiC,OAAAA,EAAMzC,OAAOoM,sBAAb,IAClC,SAACC,EAA2BD,GAA2B,gBAACnE,GACpD,IAAIA,GAAYoE,IAA8BpE,EAI9C,OAAOmE,CACX,CANuD,IASrDwJ,EAAoB,IACtB,SAACnT,GAAiC,OAAAA,EAAM6B,SAAS+Q,qBAAf,IAClC,SAAC5S,GAAiC,OAAAA,EAAM6B,SAASsR,iBAAf,IAClC,SAACP,EAAuBO,GAAsB,gBAAC3N,GAC3C,QAAIA,GAAYoN,IAA0BpN,IAIjC2N,EACb,CAN8C,IAS5CC,EAAoB,IACtB,SAACpT,GAAiC,OAAAA,EAAM6B,SAASoR,oBAAf,IAClC,SAACjT,GAAiC,OAAAA,EAAM6B,SAASuR,iBAAf,IAClC,SAACH,EAAsBG,GAAsB,gBAAC5N,GAC1C,QAAIA,GAAYyN,IAAyBzN,IAIhC4N,EACb,CAN6C,IAS3CtJ,EAAiB,IACnB,SAAC9J,GAAiC,OAAAA,EAAM6B,SAASuG,kBAAf,IAClC,SAACpI,GAAiC,OAAAA,EAAM6B,SAASiI,cAAf,IAClC,SAAC1B,EAAoB0B,GAAmB,gBAACtE,GACrC,QAAIA,GAAY4C,IAAuB5C,IAI9BsE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAChI,GAAiC,OAAAA,EAAMgC,IAAN,IAClC,SAACA,GAAS,gBAACwD,GACP,SAAUxD,EAAKwD,KAAaxD,EAAKwD,GAAUwC,cAC/C,CAFU,IAKRmC,EAAsB,IACxB,SAACnK,GAAiC,OAAAA,EAAM6B,SAAS+H,yBAAf,IAClC,SAAC5J,GAAiC,OAAAA,EAAM6B,SAASsI,mBAAf,IAClC,SAACP,EAA2BO,GAAwB,gBAAC3E,GACjD,QAAIA,GAAYoE,IAA8BpE,IAIrC2E,EACb,CANoD,IASxD,OAAO,KAAA0R,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH8jB,sBAAuBA,EAAsB9jB,GAC7C+jB,qBAAsBA,EAAqB/jB,GAC3CuZ,mBAAoBA,EAAmBvZ,GACvC6e,0BAA2BA,EAA0B7e,GACrDmT,kBAAmBA,EAAkBnT,GACrCoT,kBAAmBA,EAAkBpT,GACrC8J,eAAgBA,EAAe9J,GAC/BgI,cAAeA,EAAchI,GAC7BmK,oBAAqBA,EAAoBnK,GAEjD,GACJ,CrBlF2CgkB,GACjCC,GsBbH,WACH,IAAMC,EAAkB,IACpB,SAAClkB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACiO,GAAiB,kBAAM,OAAAA,CAAA,CAAN,IAGhBkU,EAAyB,GAAeD,GAAiB,SAACA,GAAoB,kBAChF,OAAOtO,GACHsO,KACA,WAAM,WAAI,GAAiB5P,GAAqBI,oBAA1C,GAEd,CALoF,IAO9E0P,EAAqB,IACvB,SAACpkB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACiO,GAAiB,gBAACzM,GACf,GAAKyM,GAAiBA,EAAa5R,OAInC,OAAO,IAAA+d,MAAKnM,EAAc,CAAEzM,GAAE,GAClC,CANkB,IAShB6gB,EAA0B,IAC5B,SAACrkB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACiO,GAAiB,gBAACgI,GACf,GAAKhI,GAAiBA,EAAa5R,OAInC,OAAO,IAAA+d,MAAKnM,GAAc,SAACsT,GACvB,OxBxEZe,EwBwE2Bf,EAAY1C,gBxBvEvC0D,EwBuEwDtM,GxBrEjD,IAAA5X,SAAQ2X,GAAUsM,GAAWtM,GAAUuM,IAJnC,IACXD,EACAC,CwBuEY,GAER,CARkB,IAWhBC,EAAoB,IACtB,SAACxkB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACiO,GAAiB,kBACd,GAAIA,GAAgBA,EAAa5R,OAC7B,OAAO4R,EAAa,GAAGwU,sBAE/B,CAJkB,IAOhBtL,EAAe,IACjB,SAACnZ,GAA4B,OAAAA,EAAMzC,OAAOqe,SAAb,IAC7B,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+mB,EAAiB,IACnB,SAAC1kB,GAA4B,OAAAA,EAAMzC,OAAOoB,WAAb,IAC7B,SAAChB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTgnB,EAA8B,IAChC,SAAC3kB,GAA4B,OAAAA,EAAMzC,OAAOqnB,wBAAb,IAC7B,SAACjnB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTknB,EAAqB,GACvBX,GACA,SAACrH,EAAqB,GAA8C,OAAxC,OAA6Cd,OAAL,IACpE,SAACmI,EAAiBnI,GAAY,kBAC1B,IAAM/W,EAAO+W,IAEb,IAAK/W,EACD,MAAO,GAGX,IAAM8f,GAAuBZ,KAAqB,IAAIzmB,QAClD,SAACsnB,EAASxB,GAAgB,OAAAwB,EAAQC,OAAOzB,EAAY0B,YAA3B,GAC1B,IAGJ,OAAQjgB,EAAKkgB,UAAUC,eAAiB,IAAIlkB,QACxC,SAACoL,GAAS,OAAAyY,EAAoBM,QAAQ/Y,EAAK7I,IAAgB,CAAjD,GAElB,CAf8B,IAkB5ByV,EAAiB,IACnB,SAACjZ,GAA4B,OAAAA,EAAMzC,OAAOsS,WAAb,IAC7B,SAACA,GAAgB,gBAAC8B,GACd,OAAIA,EACO9B,EAAY8B,IAGhB,IAAAyK,MAAKvM,EAChB,CANiB,IASf2Q,EAAiB,IACnB,SAACxgB,GAA4B,OAAAA,EAAMzC,OAAOsR,WAAb,IAC7B,SAACA,GAAgB,gBAAC8C,GACd,OAAIA,EACO9C,EAAY8C,IAGhB,IAAAyK,MAAKvN,EAChB,CANiB,IASfwW,EAAyB,GAC3BhB,EACApL,EACAyL,GACA,SAACL,EAAyBpL,EAAgByL,GACtC,gBAACzM,GACG,IAAMsL,EAAcc,EAAwBpM,GAE5C,OAAOsL,EAActK,EAAesK,EAAY/f,IAAMkhB,GAC1D,CAJA,IAOFY,EAA+B,IACjC,SAACtlB,GAA4B,OAAAA,EAAMzC,OAAOqS,yBAAb,IAC7B,SAACA,GAA8B,gBAAC+B,GAC5B,OAAIA,EACO/B,EAA0B+B,IAG9B,IAAAyK,MAAKxM,EAChB,CAN+B,IAS7ByJ,EAAY,IACd,SAACrZ,GAA4B,OAAAA,EAAM6B,SAASwX,SAAf,IAC7B,SAACA,GAAc,kBAAM,OAAc,IAAdA,CAAA,CAAN,IAGbkM,EAA2B,IAC7B,SAACvlB,GAA4B,OAAAA,EAAM6B,SAAS0jB,wBAAf,IAC7B,SAACA,GAA6B,kBAAM,OAA6B,IAA7BA,CAAA,CAAN,IAG5BjH,EAAa,IACf,SAACte,GAA4B,OAAAA,EAAM6B,SAASyc,UAAf,IAC7B,SAACA,GAAe,kBAAM,OAAe,IAAfA,CAAA,CAAN,IAGdxO,EAAa,IACf,SAAC9P,GAA4B,OAAAA,EAAM6B,SAASiO,UAAf,IAC7B,SAACA,GAAe,gBAAC6B,GACb,OAAIA,GACqC,IAA9B7B,EAAW6B,IAGM,KAArB,IAAAyK,MAAKtM,EAChB,CANgB,IASdZ,EAAa,IACf,SAAClP,GAA4B,OAAAA,EAAM6B,SAASqN,UAAf,IAC7B,SAACA,GAAe,gBAACyC,GACb,OAAIA,GACqC,IAA9BzC,EAAWyC,IAGM,KAArB,IAAAyK,MAAKlN,EAChB,CANgB,IASdsW,EAAmB,GACrBnB,EACAvU,EACAwO,GACA,SAAC+F,EAAyBvU,EAAYwO,GAAe,gBAACrG,GAClD,IAAMsL,EAAcc,EAAwBpM,GAE5C,OAAOsL,EAAczT,EAAWyT,EAAY/f,IAAM8a,GACtD,CAJqD,IAOnDvO,EAA2B,IAC7B,SAAC/P,GAA4B,OAAAA,EAAM6B,SAASkO,wBAAf,IAC7B,SAACA,GAA6B,gBAAC4B,GAC3B,OAAIA,GACmD,IAA5C5B,EAAyB4B,IAGM,KAAnC,IAAAyK,MAAKrM,EAChB,CAN8B,IASlC,OAAO,KAAA8L,aACH,SAAC7b,EAAyCgF,GACtC,YADH,IAAAhF,IAAAA,EAAA,IACU,CACHkkB,gBAAiBA,EAAgBlkB,GACjCmkB,uBAAwBA,EAAuBnkB,GAC/CokB,mBAAoBA,EAAmBpkB,GACvCqkB,wBAAyBA,EAAwBrkB,GACjDwkB,kBAAmBA,EAAkBxkB,GACrCmZ,aAAcA,EAAanZ,GAC3B0kB,eAAgBA,EAAe1kB,GAC/B2kB,4BAA6BA,EAA4B3kB,GACzD6kB,mBAAoBA,EAAmB7kB,EAAO,CAAEgF,KAAI,IACpDiU,eAAgBA,EAAejZ,GAC/BwgB,eAAgBA,EAAexgB,GAC/BqlB,uBAAwBA,EAAuBrlB,GAC/CslB,6BAA8BA,EAA6BtlB,GAC3DqZ,UAAWA,EAAUrZ,GACrBulB,yBAA0BA,EAAyBvlB,GACnDse,WAAYA,EAAWte,GACvB8P,WAAYA,EAAW9P,GACvBkP,WAAYA,EAAWlP,GACvBwlB,iBAAkBA,EAAiBxlB,GACnC+P,yBAA0BA,EAAyB/P,GAE3D,GAER,CtBvMsCylB,GAC5BC,GuBfH,WACH,IAAMtL,EAAc,IAChB,SAACpa,GAAyB,OAAAA,EAAMgC,IAAN,IAC1B,SAAC6a,EAAkB,GACf,OAD+B,iBAChB9D,iBAAf,IACJ,SAAC8D,EAAkB,GAA2C,OAArC,OAA0Cd,OAAL,IAC9D,SAACc,EAAkB,GAA+C,OAArC,WAA8C/C,WAAT,IAClE,SAAC+C,EAAkB,GACf,OAD6B,eAChBqH,eAAb,IACJ,SAACrH,EAAkB,GAA8C,OAArC,UAA6CpD,UAAR,IACjE,SAACoD,EAAkB,GACf,OADiC,mBAChBmC,mBAAjB,IACJ,SACQhd,EACA+W,EACAgD,EACAjC,EACAoK,EACAzK,EACAuF,GAEJ,kBACI,IAAMvc,EAAiBsW,IACjB/T,EAAO+W,IACP1U,EAAWyS,IACX7J,EAAeiU,KAAqB,GACpC3d,EAAUkT,KAAgB,GAC1B3S,EAAmBkY,KAAyB,GAElD,GAAKhd,GAASgD,GAASqC,EAIvB,OAAO,gCACArF,GAAI,CACPS,eAAc,EACduC,KAAI,EACJqC,SAAQ,EACR4I,aAAY,EACZ1J,QAAO,EACPO,iBAAgB,GAExB,CArBA,IAwBF6e,EAAqB,GAAevL,GAAa,SAACA,GAAgB,kBACpE,OAAOxE,GACHwE,KACA,WAAM,WAAI,GAAiB9F,GAAqBK,gBAA1C,GAEd,CALwE,IAOlEiR,EAAwB,GAC1BxL,GACA,SAACA,GAAgB,gBAACyL,GACd,IAAMC,EAAW1L,IAEjB,GAAK0L,EAAL,CAIA,IAAMC,EAAaD,EAASC,YAAc,EACpCC,EAAcF,EAASze,SAAS2e,aAAe,EAErD,OAAOH,EACDI,KAAKC,IAAIH,EAAaC,EAAa,GACnCF,EAASK,kB,CACnB,CAbiB,IAgBfhN,EAAe,IACjB,SAACnZ,GAAyB,OAAAA,EAAMzC,OAAOqe,SAAb,IAC1B,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTsb,EAAiB,IACnB,SAACjZ,GAAyB,OAAAA,EAAMzC,OAAOsS,WAAb,IAC1B,SAAClS,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTyoB,EAAuB,IACzB,SAACpmB,GAAyB,OAAAA,EAAM6B,SAASukB,oBAAf,IAC1B,SAACA,GAAyB,kBAAM,OAAyB,IAAzBA,CAAA,CAAN,IAGxB/M,EAAY,IACd,SAACrZ,GAAyB,OAAAA,EAAM6B,SAASwX,SAAf,IAC1B,SAACA,GAAc,kBAAM,OAAc,IAAdA,CAAA,CAAN,IAGbvJ,EAAa,IACf,SAAC9P,GAAyB,OAAAA,EAAM6B,SAASiO,UAAf,IAC1B,SAACA,GAAe,kBAAM,OAAe,IAAfA,CAAA,CAAN,IAGpB,OAAO,KAAA+L,aACH,SACI7b,EACAyC,EACAuC,EACAiL,EACA1J,EACAc,EACAP,GAEA,YARA,IAAA9G,IAAAA,EAAA,IAQO,CACHoa,YAAaA,EAAYpa,EAAO,CAC5ByC,eAAc,EACduC,KAAI,EACJiL,aAAY,EACZ1J,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpB6e,mBAAoBA,EAAmB3lB,EAAO,CAC1CyC,eAAc,EACduC,KAAI,EACJiL,aAAY,EACZ1J,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpB8e,sBAAuBA,EAAsB5lB,EAAO,CAChDyC,eAAc,EACduC,KAAI,EACJiL,aAAY,EACZ1J,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpBqS,aAAcA,EAAanZ,GAC3BiZ,eAAgBA,EAAejZ,GAC/BomB,qBAAsBA,EAAqBpmB,GAC3CqZ,UAAWA,EAAUrZ,GACrB8P,WAAYA,EAAW9P,GAE/B,GAER,CvB3HmCqmB,GACzBC,GwB7BH,WACH,IAAMC,EAAW,IACb,SAACvmB,GAAsB,OAAAA,EAAMgC,IAAN,IACvB,SAAC6a,EAAe,GACZ,OAD4B,iBACbpC,wBAAf,IACJ,SAACoC,EAAe,GAA2C,OAAlC,UAA0CpD,YAAR,IAC3D,SAACzX,EAAMS,EAAgB8D,GACnB,YADmB,IAAAA,IAAAA,EAAA,IACnB,WACI,GAAKvE,GAASS,EAId,OAAO,gCACAT,GAAI,CACPS,eAAc,EACd8D,QAAO,GAEf,CAVA,IAaFigB,EAAkB,GAAeD,GAAU,SAACA,GAAa,kBAC3D,OAAO3Q,GAAM2Q,KAAY,WAAM,WAAI,GAAiBjS,GAAqBS,aAA1C,GACnC,CAF+D,IAIzD0R,EAAe,IACjB,SAACzmB,GAAsB,OAAAA,EAAMuF,IAAN,IACvB,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR4T,EAAe,IACjB,SAACnZ,GAAsB,OAAAA,EAAMzC,OAAOqe,SAAb,IACvB,SAACje,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTkd,EAAe,IACjB,SAAC7a,GAAiB,aAAe,QAAf,EAAKA,EAAMgC,YAAI,eAAE0kB,QAAQ,IAC3C,SAACA,GACG,YADH,IAAAA,IAAAA,EAAA,IACG,SAAClhB,GACG,IAAMmhB,EAAiBD,EAAStK,MAAK,SAAC,GAAmB,OAAP,eAAsB5W,CAAf,IAEzD,OAAOmhB,aAAc,EAAdA,EAAgBC,SAC3B,CAJA,IAOFvN,EAAY,IACd,SAACrZ,GAAsB,QAAEA,EAAM6B,SAASwX,SAAjB,IACvB,SAAChc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aACH,SACI7b,EACAyC,EACA8D,GAEA,YAJA,IAAAvG,IAAAA,EAAA,IAIO,CACHumB,SAAUA,EAASvmB,EAAO,CAAEyC,eAAc,EAAE8D,QAAO,IACnDigB,gBAAiBA,EAAgBxmB,EAAO,CAAEyC,eAAc,EAAE8D,QAAO,IACjEkgB,aAAcA,EAAazmB,GAC3BmZ,aAAcA,EAAanZ,GAC3B6a,aAAcA,EAAa7a,GAC3BqZ,UAAWA,EAAUrZ,GAE7B,GAER,CxBpCgC6mB,GACtBC,IO3CArM,EAAyB,IAC3B,SAACza,GAAoC,OAAAA,EAAMgC,IAAN,IACrC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,KAGP,KAAA6Z,aACH,SAAC7b,GACG,YADH,IAAAA,IAAAA,EAAA,IACU,CACHya,uBAAwBA,EAAuBza,GAEvD,KPkCE+mB,IQzBArM,EAAqB,IACvB,SAAC,GAA2C,OAApC,QAA0C+L,YAAN,IAC5C,SAACA,GAAiB,kBACd,IAAMlhB,EAAOkhB,IAEb,OAAOlhB,GAAQA,EAAKgG,OACxB,CAJkB,IAOhBoP,EAAoB,IACtB,SAAC,GAA2C,OAApC,QAA0C4L,QAAN,IAC5C,SAACA,GAAa,kBACV,IAAMnb,EAAQmb,IAEd,OAAO,IAAAnK,MACHhR,GAASA,EAAMsb,UACf,SAAC,G,IAAEM,EAAU,aACT,MAAe,oBAAfA,GAAmD,gBAAfA,CAApC,GAEZ,CARc,IAWZpM,EAAmB,IACrB,SAAC,GAA8C,OAApC,WAA6CR,WAAT,IAC/C,SAACA,GAAgB,kBACb,IAAM0L,EAAW1L,IAEjB,OAAO,IAAAgC,MACH0J,GAAYA,EAASY,UACrB,SAAC,GAAqB,MiBlEhB,wBjBkES,cAAO,GAE9B,CAPiB,IAUf7L,EAAe,GACjBH,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMsM,EAAkBvM,IAExB,GAAIuM,GAAmBA,EAAgBzjB,GACnC,MAAO,CACHwjB,WAAYC,EAAgBzjB,GAC5B8e,UAAW2E,EAAgBpa,SAInC,IAAMtB,EAAUqP,KAAsBD,IAEtC,OAAIpP,GAAWA,EAAQyb,WACZ,CACHA,WAAYzb,EAAQyb,WACpB1E,UAAW/W,EAAQ+W,gBAH3B,CAMJ,CAlB6D,IAqB3DxH,EAAsB,GAAeD,GAAc,SAACA,GAAiB,kBACvE,OAAOjF,GACHiF,KACA,WAAM,WAAI,GAAiBvG,GAAqB4S,iBAA1C,GAEd,CAL2E,IAOrEnM,EAAmB,GACrBL,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMsM,EAAkBvM,IAExB,GAAIuM,GAAmBA,EAAgB5pB,OACnC,OAAO4pB,EAAgB5pB,OAAOkE,QAAQ,kBAAmB,IAG7D,IAAMgK,EAAUqP,KAAsBD,IAEtC,OAAIpP,EACOA,EAAQpN,OAAOgpB,UAD1B,CAGJ,CAZ6D,IAe3DnM,EAA0B,GAAeD,GAAkB,SAACA,GAAqB,kBACnF,OAAOnF,GACHmF,KACA,WAAM,WAAI,GAAiBzG,GAAqB8S,qBAA1C,GAEd,CALuF,IAOjFnM,EAAkB,IACpB,SAAC,GAA2C,OAApC,QAA0CwL,YAAN,IAC5C,SAACA,GAAiB,kBACd,IAAMlhB,EAAOkhB,IAEb,OAAOlhB,GAAQA,EAAK+F,KACxB,CAJkB,IAOhB4P,EAAyB,GAAeD,GAAiB,SAACA,GAAoB,kBAChF,OAAOrF,GACHqF,KACA,WAAM,WAAI,GAAiB3G,GAAqBY,oBAA1C,GAEd,CALoF,IAO9EiG,EAAwB,GAAeT,GAAoB,SAACA,GAAuB,kBACrF,IAAMnP,EAAUmP,IAEhB,OAAOnP,GAAWA,EAAQ8b,WAC9B,CAJyF,IAMnFjM,EAA+B,GACjCD,GACA,SAACA,GAA0B,kBACvB,OAAOvF,GACHuF,KACA,WAAM,WAAI,GAAiB7G,GAAqBgT,0BAA1C,GAEd,CAL2B,IAQzBjM,EAAwB,IAC1B,SAAC,GAA8C,OAApC,WAA6CuK,qBAAT,IAC/C,SAACA,GACG,gBAACC,QAAA,IAAAA,IAAAA,GAAA,GACG,IAAME,EAAaH,EAAsBC,GAEzC,QAAOE,GAAaA,EAAa,CACrC,CAJA,IAOFzK,EAAyB,GAC3BP,GACA,SAACA,GAAqB,gBAAC0E,GACnB,SAAIA,IAAiBA,EAAc8H,QkB9KpB,gBlBkLRxM,KkBjLK,alBiLiCA,GACjD,CANsB,KASnB,KAAAc,aAAW,SAACiK,EAA4B1a,GAC3C,MAAO,CACHyP,aAAcA,EAAa,CAAEiL,SAAQ,EAAE1a,MAAK,IAC5C0P,oBAAqBA,EAAoB,CAAEgL,SAAQ,EAAE1a,MAAK,IAC1D2P,iBAAkBA,EAAiB,CAAE+K,SAAQ,EAAE1a,MAAK,IACpD4P,wBAAyBA,EAAwB,CAAE8K,SAAQ,EAAE1a,MAAK,IAClE6P,gBAAiBA,EAAgB,CAAE6K,SAAQ,EAAE1a,MAAK,IAClD8P,uBAAwBA,EAAuB,CAAE4K,SAAQ,EAAE1a,MAAK,IAChE+P,sBAAuBA,EAAsB,CAAE2K,SAAQ,EAAE1a,MAAK,IAC9DgQ,6BAA8BA,EAA6B,CAAE0K,SAAQ,EAAE1a,MAAK,IAC5EiQ,sBAAuBA,EAAsB,CAAEyK,SAAQ,EAAE1a,MAAK,IAC9DkQ,uBAAwBA,EAAuB,CAAEwK,SAAQ,EAAE1a,MAAK,IAExE,KRpIMoc,G2BjDH,WACH,IAAM7N,EAAgB,IAClB,SAAC3Z,GAA4B,OAAAA,EAAMzC,OAAOkqB,UAAb,IAC7B,SAAC9pB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTic,EAAa,IACf,SAAC5Z,GAA4B,QAAEA,EAAM6B,SAAS+X,UAAjB,IAC7B,SAACvc,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH2Z,cAAeA,EAAc3Z,GAC7B4Z,WAAYA,EAAW5Z,GAE/B,GACJ,C3BgCsC0nB,GAC5BC,G4BnDH,WACH,IAAM1O,EAAiB,IACnB,SAACjZ,GAA8B,OAAAA,EAAMzC,OAAOsS,WAAb,IAC/B,SAAClS,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTmS,EAAa,IACf,SAAC9P,GAA8B,QAAEA,EAAM6B,SAASiO,UAAjB,IAC/B,SAACzS,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHiZ,eAAgBA,EAAejZ,GAC/B8P,WAAYA,EAAW9P,GAE/B,GACJ,C5BkCwC4nB,GAC9BC,ISjDAtM,EAAW,IACb,SAACvb,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC8lB,GAAgB,kBAAM,OAAAA,CAAA,CAAN,IAGftM,EAAe,IACjB,SAACxb,GAA4B,OAAAA,EAAMzC,OAAOwqB,SAAb,IAC7B,SAACpqB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT8d,EAAY,IACd,SAACzb,GAA4B,QAAEA,EAAM6B,SAAS4Z,SAAjB,IAC7B,SAACpe,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAAwe,aAAW,SAAC7b,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHub,SAAUA,EAASvb,GACnBwb,aAAcA,EAAaxb,GAC3Byb,UAAWA,EAAUzb,GAE7B,KT8BA,OAAO,SAACA,EAAOQ,QAAA,IAAAA,IAAAA,EAAA,IACX,IJrDJlC,EIqDUmE,EAAiBiZ,EAA6B1b,EAAMyC,gBACpDuC,EAAO8W,EAAmB9b,EAAMgF,MAChCgjB,EAAiB9L,GAA6Blc,EAAMgoB,gBACpDlK,EAAYF,GAAsB5d,EAAM8d,WACxCvX,EAAUyX,GAAqBhe,EAAMuG,SACrCc,EAAWgX,GAAuBre,EAAMqH,UACxC4gB,EAAqBxJ,GAA+Bze,EAAMioB,oBAC1DC,EAAOxH,GAAmB1gB,EAAM+c,YAChCjW,EAAmBiY,GAA8B/e,EAAM8G,kBACvD0Y,EAAcF,GAAyBtf,EAAMwf,aAC7C2I,EAAsBrB,GAAkC9mB,EAAMmoB,qBAC9DhG,EAAiBF,GAA4BjiB,EAAMmiB,gBACnDiG,EAAoB1F,GAA8B1iB,EAAMooB,mBACxDnF,EAAgBF,GAA2B/iB,EAAMijB,eACjDoF,EAAiBjF,GAA6BpjB,EAAMqoB,gBACpDxH,EAAkBwC,GAA8BrjB,EAAMiQ,cACtDqY,EAAoB5E,GAA8B1jB,EAAMsoB,mBACxDC,EAAqB1E,GAA+B7jB,EAAMuoB,oBAC1DC,EAAgBb,GAA4B3nB,EAAMwoB,eAClDxC,EAAcwB,GAA0BxnB,EAAMgmB,aAC9C8B,EAAcD,GAA0B7nB,EAAM8nB,aAG9C7X,EAAegU,GAA0BjkB,EAAMiQ,aAAcjL,GAC7D8gB,EAAWJ,GACb1lB,EAAM8lB,SACNrjB,EACAuC,EACAiL,EACA1J,EACAc,EACAP,GAEEsE,EAAQkb,GAAoBtmB,EAAMoL,MAAO+c,EAAqB5hB,GAC9DgF,EAAUwb,GAAsBjB,EAAU1a,GAG1Cqd,EAAY,CACdhmB,eAAc,EACduC,KAAI,EACJ8gB,SAAQ,EACRkC,eAAc,EACdU,OAPWpM,GAAqBtc,EAAM0oB,OAAQ1oB,EAAM+c,YAQpD9M,aAAY,EACZ6N,UAAS,EACTvX,QAAO,EACPc,SAAQ,EACR4gB,mBAAkB,EAClBC,KAAI,EACJphB,iBAAgB,EAChB0Y,YAAW,EACXpU,MAAK,EACL+c,oBAAmB,EACnB5c,QAAO,EACP4W,eAAc,EACdiG,kBAAiB,EACjBnF,cAAa,EACboF,eAAc,EACdxH,gBAAe,EACfyH,kBAAiB,EACjBC,mBAAkB,EAClBT,YAAW,EACXU,cAAa,EACbxC,YAAW,GAGf,OAAOxlB,EAAQmoB,oBJvHnBrqB,EIuH4DmqB,EJrHrD7sB,OAAOwF,KAAK9C,GAAKb,QAAO,SAACC,EAAQhC,GAGpC,OAFAgC,EAAOhC,GAAOoa,GAAkBxX,EAAI5C,IAE7BgC,CACX,GAAG,CAAC,IIiHqE+qB,CACzE,CACJ,C6B9He,SAASG,GACpBC,EACAroB,QADA,IAAAqoB,IAAAA,EAAA,IAGA,ICRMC,ECCNC,EFOMC,GCRAF,EAAU,IAAI,EAEY,CAC5B,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoB9X,SAAQ,SAACpU,GAC7BksB,EAAQ5qB,SAAStB,GAAM,SAACU,EAAUb,GAAY,WAAI,EAAmBa,EAAUb,EAAjC,GAClD,IAEAqsB,EAAQ5qB,SACJ,4BACA,SAACZ,GAAa,WAAI,EAA0BA,EAA9B,IAElBwrB,EAAQ5qB,SACJ,4BACA,SAACZ,GAAa,WAAI,EAA0BA,EAA9B,IC3BlByrB,ED8BOD,EC5BA,SAACG,GACJ,WAAAC,MAAKD,GAASE,MACV,IAAAC,aAA0B,SAACnpB,GACvB,GAAIA,aAAkBlD,OAASkD,EAAOG,mBAAmBrD,MACrD,MAAMkD,EAGV,IAcIvD,EAdWuD,EAAOG,UAeD,iBAAX1D,GAIf,CAAC,OAAQ,UAAW,SAAU,cAAc2sB,OAAM,SAAC3tB,GACtD,OAAAE,OAAOM,UAAUC,eAAeC,KAAKM,EAAQhB,EAA7C,IApBwC,CAC5B,IAAMe,EAAUwD,EAAOG,QAAQjD,MAAQ8C,EAAOG,QAAQjD,KAAKgB,OAE3D,MAAM,gCACC8B,GAAM,CACTG,QAAS2oB,EAAoBpqB,YAAYsB,EAAOG,QAAS3D,I,CASjF,IAAoBC,EALJ,MAAMuD,CACV,IAhBJ,GFKEqpB,EAAkCxQ,KAGxC,OAAO,IAAAyQ,kBGWA,IAAAxnB,iBAAgB,CACnBU,eAAgBX,EAChBkD,KAAMV,EACNwhB,SAAU9R,GACVgU,eAAgB1iB,EAChBojB,OAAQziB,GACRgK,aAAcD,GACd8N,UAAWrT,GACXlE,QAASF,GACTgB,SAAUD,GACV6gB,mBAAoBngB,GACpBiV,WAAY1S,GACZvD,iBAAkBD,GAClB2Y,YAAajR,GACb4Z,oBAAqBrc,GACrBV,MAAOP,GACPU,QAASQ,GACToW,eAAgBjW,GAChBkc,kBAAmB3a,GACnBwV,cAAezR,GACf6W,eAAgBjZ,GAChBkZ,kBAAmBnW,GACnBoW,mBAAoB/V,GACpBsV,YAAaxU,GACbkV,cAAezU,GACfiS,YAAatS,KHpCoCmV,GAAc,eAC/DG,kBAAiB,EACjBQ,iBAJqB,SAACxpB,GAA8B,OAAAspB,EAAgCtpB,EAAhC,GAKjDQ,GAEX,CIvBA,MAAM,GAA+BhE,QAAQ,8BCK9B,SAASitB,GAAoBC,GACxC,IAAMC,GAAgB,qBAatB,OAXAD,EAAME,WACF,SAAC5pB,GACG,IAAM0oB,EAAS1oB,EAAM0oB,OAAO9L,iBAExB8L,GACAiB,EAAcE,QAAQnB,EAAOoB,gBAAgBC,cAErD,IACA,SAAC/pB,GAAU,OAAAA,EAAM0oB,OAAO9L,gBAAb,IAGR+M,CACX,CCfe,SAASK,GAA8CC,GAelE,OAAO,KAAAtU,UAdP,W,IAAgC,sDAC5B,IAAM1V,EAASgqB,EAAG7tB,KAAI,MAAP6tB,GAAE,qBAAMhsB,MAASuX,IAEhC,OAAIvV,aAAkB,EAAAiqB,YACX,IAAAhB,MAAKjpB,GAAQkpB,MAAK,IAAAgB,gBAGP,mBAAXlqB,GACA,KAAA0V,UAAQ,SAAC+T,GAAU,WAAAR,MAAKjpB,EAAOypB,IAAQP,MAAK,IAAAgB,eAAzB,IAGvBlqB,CACX,GAGJ,CCnBe,SAASmqB,GAAgBC,GACpC,OAAOA,GAAmC,kBAAnBA,EAAMC,QACjC,CCDe,SAASC,GACpB1N,EACAnhB,EACA8uB,GAEA,IAAMC,EAAkB,IAAIC,QAE5B,SAASC,EAA6BhU,GAAtC,WACI,OAAO,W,UAAE,kDACL,IAAMiU,EAAUpV,EAAKA,EAAKnX,OAAS,GAC3BisB,GAAaF,GAAgBQ,GAAWA,EAAU,CAAEN,UAAU,IAAO,SAE7E,IAAKA,EACD,OAAO3T,EAAOva,KAAI,MAAXua,GAAM,qBAAM,GAASnB,IAGhC,IAAMqV,EAAkBJ,EAAgB1uB,IAAI,IAAS,CAAC,EAUtD,OARK0uB,EAAgB1uB,IAAI,IACrB0uB,EAAgBK,IAAI,EAAMD,GAGzBA,EAAgBnvB,KACjBmvB,EAAgBnvB,GAAOsuB,GAAYrT,KAGhC,EAAAkU,EAAgBnvB,IAAKU,KAAI,8BAAC,GAASoZ,GAC7C,CACL,CAEA,MAAO,CACHzZ,IAAG,WACC,GAAgC,mBAArByuB,EAAWjuB,MAClB,MAAM,IAAIQ,MAAM,yCAGpB,IAAMR,EAAQouB,EAAevuB,KAAK6B,KAAMusB,EAAWjuB,OAInD,OAFAX,OAAOC,eAAeoC,KAAMvC,GAAK,gCAAK8uB,GAAU,CAAEjuB,MAAK,KAEhDA,CACX,EAER,CC1Ce,SAASwuB,GAAiBC,GACrC,MAAO,oBAAqBA,CAChC,CAEO,SAASC,GAAqBD,GACjC,IAAKD,GAAiBC,GAClB,MAAM,IAAIjuB,MAAM,6BAExB,C,SCQA,WACI,WAAoBmuB,GAAA,KAAAA,eAAAA,CAA6C,CAiGrE,OA/FI,YAAAC,mBAAA,SACI3qB,GADJ,WAGI,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IACMpmB,EADQ0kB,EAAMpQ,WACDtU,KAAKgX,iBAExBoP,EAASC,MAAK,IAAAC,cAAazf,GAAwBoB,8BAEnD,EAAKie,eACAC,oBAAmB,gCACb3qB,GAAO,CACV+qB,QAAQ,gCAAK/qB,aAAO,EAAPA,EAAS+qB,QAAM,CAAEC,OAAQxmB,EAAKxB,QAE9CioB,MAAK,SAACnuB,GACH,IAAMiI,EAAO,CACTmmB,gBAAiBpuB,EAASF,QAAQ,uBAClCuuB,YAAaruB,EAASF,QAAQ,mBAE5BwuB,EAAUtuB,EAASH,KACnB0uB,EAAkB/tB,MAAMC,QAAQ6tB,GAChC,EAAKE,gBAAgBF,GACrBA,EAENR,EAASC,MACL,IAAAC,cACIzf,GAAwBiB,4BACxB+e,EACAtmB,IAGR6lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACIpgB,GAAwBqB,yBACxB5P,GAGZ,GACR,GAtCA,CAuCR,EAGA,YAAA4uB,kBAAA,SACI1mB,EACAhF,GAHJ,WAKI,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,G,MAETI,EAA6B,QAAvB,EADE9B,EAAMpQ,WACCtU,KAAK+W,iBAAS,eAAEvY,GAC/B+nB,EAASC,GAAS,gCAAKhrB,aAAO,EAAPA,EAAS+qB,QAAM,CAAEC,OAAM,KAAK,iBAAKhrB,aAAO,EAAPA,EAAS+qB,QAEvEH,EAASC,MACL,IAAAC,cAAazf,GAAwBsB,gCAA4BzL,EAAW,CACxE8D,SAAQ,KAIhB,EAAK0lB,eACAgB,kBAAkB1mB,GAAU,gCAAKhF,GAAO,CAAE+qB,OAAM,KAChDE,MAAK,SAACnuB,GACH8tB,EAASC,MACL,IAAAC,cACIzf,GAAwBM,2BACxB7O,EAASH,KACT,CAAEqI,SAAQ,KAGlB4lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACIpgB,GAAwByB,wBACxBhQ,EACA,CAAEkI,SAAQ,IAGtB,GACR,GAhCA,CAiCR,EAEQ,YAAAsmB,gBAAR,SAAwBF,GACpB,OAAO,IAAA3qB,QAAO2qB,GAAS,SAACjV,GACpB,QA7FO,aA6FHA,EAAOnT,KAAsBunB,GAAiBC,QAKtD,GACJ,GAhDA,iBADC,I,sCAkDL,C,CAlGA,GCpBA,IAAKmB,IAAL,SAAKA,GACD,0BACA,qCACH,CAHD,CAAKA,KAAAA,GAAW,KAKhB,YCLO,IAAMC,GACT,0ECDSC,GAAsB,CAAE,yBAA0B,W,SCW/D,WACI,WAAoBnB,GAAA,KAAAA,eAAAA,CAAgC,CAkCxD,OAhCI,YAAAC,mBAAA,SAAmB,G,IAAA,aAAsC,CAAC,EAAC,EAAtCmB,EAAO,UAAEf,EAAM,SAKhC,OAAOttB,KAAKitB,eAAenvB,IAFf,2BAEwB,CAChCuwB,QAAO,EACPlvB,SAAS,eACLmvB,OAAQ,UACR,iBAAkBH,IACfC,IAEPd,OAAM,GAEd,EAEA,YAAAW,kBAAA,SACI1mB,EACA,G,IAAA,aAAsC,CAAC,EAAC,EAAtC8mB,EAAO,UAAEf,EAAM,SAEXiB,EAAM,4BAA4BhnB,EAExC,OAAOvH,KAAKitB,eAAenvB,IAAIywB,EAAK,CAChCF,QAAO,EACPlvB,SAAS,eACLmvB,OAAQ,UACR,iBAAkBH,IACfC,IAEPd,OAAM,GAEd,EACJ,EAnCA,GCXM,GAA+B/uB,QAAQ,8BCG9B,SAASiwB,GACpB7vB,EACAe,EACA4H,GAEA,OAOmBtF,EAPDtC,IAQDsC,EAAOrD,MAAQqD,EAAOtC,OAP5B,IAAAqnB,SAAO,IAAA0H,IAAG/uB,IAAQ,IAAAgvB,aAAW,IAAAV,mBAAkBrvB,EAAMe,EAAMyC,QAASmF,MAGxE,IAAAonB,aAAW,IAAAV,mBAAkBrvB,EAAMe,EAAO4H,IAGrD,IAAuBtF,CAFvB,C,SCPA,YACI,WAAYxD,GAAZ,MACI,YACIA,GAAW,6EACd,K,OAED,EAAKE,KAAO,+BACZ,EAAKC,KAAO,8B,CAChB,CACJ,OAT0D,oBAS1D,EATA,CAA0D,G,GCgB1D,WACI,WACYsuB,EACA0B,GADA,KAAA1B,eAAAA,EACA,KAAA0B,2BAAAA,CACT,CAmJP,OAjJI,YAAAC,gBAAA,SACIC,EACAtsB,GAFJ,WAII,OAAO,SAACkpB,GACJ,IAAM1pB,EAAQ0pB,EAAMpQ,WACdwM,EAAW9lB,EAAM8lB,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,IAAMtN,EAAWrH,EAAMqH,SAASyS,cAEhC,GAAIzS,IAAaA,EAAS0lB,QACtB,MAAM,IAAI,GAGd,IAEIC,EAFEvqB,EAAiBzC,EAAMyC,eAAesW,oBAI5C,GAAKtW,EAEE,CACuDA,EAAc,QAAhE,IAAYwqB,GAAiC,YAAKxqB,EAApD,aAENuqB,GAA4B,gCACrBC,GACAH,E,MANPE,EAA4BF,EAUhC,OAAO,IAAAI,QACH,IAAAlI,SACI,IAAA0H,KAAG,IAAApB,cAAa7rB,EAAyBuD,4BACzC,IAAAmqB,QAAM,6D,uEACe,SAAMlvB,KAAKmvB,8BACxBtH,EAAStiB,GACTwpB,EACAxsB,I,OAGJ,OANQrD,EAAS,SAIhB,KAEM,CAAP,GAAO,IAAAmuB,cACH7rB,EAAyB8C,yBACzBpF,I,WAGVgsB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiBhtB,EAAyByD,sBAAuBvF,EAAjE,KAGR,EAAK0vB,uBAAuBP,EAAatsB,GAEjD,CACJ,EAEA,YAAA8sB,cAAA,SACIrV,EACAzX,GAFJ,WAII,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMprB,EAAQ0pB,EAAMpQ,WACdwM,EAAW9lB,EAAM8lB,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpDyW,EAASC,MAAK,IAAAC,cAAa7rB,EAAyBmD,gCAEpD,IAAMH,EAAiBzC,EAAMyC,eAAesW,oBAOtCiU,GAA4B,gCAC3B/U,GAAO,CACVsV,WAC6B,IAAlBtV,EAAQsV,OAAyB9qB,EAClCA,EAAe8qB,MACftV,EAAQsV,QAGlB9qB,GAAkBA,EAAee,KACjCwpB,EAA0BxpB,GAAKf,EAAee,IAGlD,EAAK4pB,8BAA8BtH,EAAStiB,GAAIwpB,EAA2BxsB,GACtEirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cACI7rB,EAAyB6C,8BACzBnF,IAGRiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACIxsB,EAAyBoD,2BACzBvF,GAGZ,GACR,GA/CA,CAgDR,EAEQ,YAAA+vB,uBAAR,SACI,EACA7sB,G,IADE+sB,EAAK,QAAEC,EAA0B,6BAAEC,EAA0B,6BAG/D,OACI,MAACD,GACD,MAACC,GAEM,IAAAC,SAGJzvB,KAAK2uB,2BAA2Be,oBACnC,CACIJ,MAAK,EACLE,2BAA4BA,IAA8B,EAC1DD,2BAA4BA,IAA8B,GAE9DhtB,EAER,EAEQ,YAAA4sB,8BAAR,SACIQ,EACA3V,EACAzX,GAEA,OAAKyX,EAAQzU,GAINvF,KAAKitB,eAAeoC,cAAcM,EAAY3V,EAASzX,GAHnDvC,KAAKitB,eAAe2C,cAAcD,EAAY3V,EAASzX,EAItE,EACJ,EAvJA,GCdA,IAAMstB,GAAiB,CACnBC,QAAS,CACL,uCACA,sCACA,WACA,sBACFnwB,KAAK,M,SAGX,WACI,WAAoBstB,GAAA,KAAAA,eAAAA,CAAgC,CAmCxD,OAjCI,YAAA2C,cAAA,SACID,EACA3V,EACA,G,IAAEqU,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,6BAA6BoB,EAAU,mBAC7CxwB,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe8C,KAAKxB,EAAK,CACjCrvB,KAAM8a,EACNsT,OAAQuC,GACR1wB,QAAO,EACPkvB,QAAO,GAEf,EAEA,YAAAgB,cAAA,SACIM,EACA3V,EACA,G,IAAEqU,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAED9oB,EAAgByU,EAAO,GAAhB9a,GAAI,YAAK8a,EAAlB,QACAuU,EAAM,6BAA6BoB,EAAU,oBAAoBpqB,EACjEpG,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe+C,IAAIzB,EAAK,CAAEjB,OAAQuC,GAAgB3wB,KAAI,EAAEC,QAAO,EAAEkvB,QAAO,GACxF,EACJ,EApCA,G,GCXA,WACI,WAAoBpB,GAAA,KAAAA,eAAAA,CAAgC,CAcxD,OAZI,YAAAgD,iBAAA,SACI/wB,EACA,G,IAAEmvB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGHlvB,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe8C,KANf,wBAMyB,CAAE7wB,KAAI,EAAEC,QAAO,EAAEkvB,QAAO,GACjE,EACJ,EAfA,G,GCSA,WACI,WACY6B,EACAC,EACAC,GAFA,KAAAF,uBAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,yBAAAA,CACT,CAsGP,OApGI,YAAAC,aAAA,SAAa9qB,EAAYhD,GAAzB,WACI,OAAO,IAAAwkB,SACH,IAAA0H,KAAG,IAAApB,cAAahsB,EAAmBoD,yBACnC,IAAAwqB,OACIjvB,KAAKmwB,qBAAqBG,YAAW,gCAC9B/tB,GAAO,CACV8pB,UAAU,EACViB,QAAQ,gCAAK/qB,aAAO,EAAPA,EAAS+qB,QAAM,CAAEqC,WAAYpqB,OAE9CvF,KAAKowB,yBAAyBG,gBAAe,gCAAKhuB,GAAO,CAAE8pB,UAAU,MACrE,IAAA6C,QAAM,WACF,SAAKgB,uBACAG,aAAa9qB,EAAIhD,GACjBirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACT,WAAAmuB,cAAahsB,EAAmBkD,sBAAuBrF,EAAvD,GAHR,MAOVgsB,MACE,IAAAC,aAAW,SAACzrB,GAAU,OAAA8uB,GAAiBntB,EAAmBqD,mBAAoBhF,EAAxD,IAE9B,EAEA,YAAA8wB,oBAAA,SACIjuB,GADJ,WAGI,OAAO,SAACkpB,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAahsB,EAAmBoD,yBACnC,IAAAwqB,OACI,EAAKkB,qBAAqBG,aAC1B,EAAKF,yBAAyBG,gBAAe,gCAAKhuB,GAAO,CAAE8pB,UAAU,OAEzE,IAAA6C,QAAM,6D,2EAIF,GAHMntB,EAAQ0pB,EAAMpQ,aACdqD,EAAU3c,EAAM0oB,OAAOxL,sBAEZP,EAAQiR,WACrB,MAAM,IAAI,GAAiBtZ,GAAqBO,uBAGnC,SAAM5W,KAAKkwB,uBAAuBG,aAC/C3R,EAAQiR,WACRptB,I,OAGJ,OALQrD,EAAS,SAGhB,KAEM,CAAP,GAAO,IAAAmuB,cAAahsB,EAAmBkD,sBAAuBrF,I,WAEpEgsB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiBntB,EAAmBqD,mBAAoBhF,EAAxD,IAvBR,CA0BR,EAEA,YAAA+wB,eAAA,SACIvxB,EACAqD,GAFJ,WAII,OAAO,SAACkpB,GACJ,WAAI,EAAAQ,YAAW,SAACkB,GACZ,IACMtF,EADQ4D,EAAMpQ,WACGwM,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpDyW,EAASC,MAAK,IAAAC,cAAahsB,EAAmB8U,0BAE9C,EAAK+Z,uBACAO,eAAe5I,EAAStiB,GAAIrG,EAAMqD,GAClCirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cAAahsB,EAAmB2U,wBAAyB9W,IAE7DiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBAAkB3sB,EAAmB+U,qBAAsB/W,GAEnE,GACR,GAvBA,CAwBR,EAEA,YAAAqxB,oBAAA,SACInuB,GADJ,WAGI,OAAO,SAACkpB,GACJ,IACM5D,EADQ4D,EAAMpQ,WACGwM,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,OAAO,EAAK2Z,aAAaxI,EAAStiB,GAAIhD,EAC1C,CACJ,EACJ,EA3GA,GCbe,SAASouB,GAAgBC,GACpC,OAAO,IAAAC,MAAKD,GAAUjxB,KAAK,IAC/B,CCEe,SAASmxB,GACpBC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOnxB,MAAMC,QAAQkxB,GACfL,IAAa,oBAAII,EAAiBC,ICH7B,SACXD,EACAE,GAEA,IAAMC,GAAY,IAAA/tB,OAAK,IAAAqL,QAAOyiB,GAAoB,SAACE,GAAO,OAACA,CAAD,KACpDC,GAAY,IAAAjuB,OAAK,IAAAH,QAAOiuB,IAE9B,OAAON,IAAa,qBAAI,IAAAU,YAAWN,EAAcG,GAAeE,GACpE,CDJUE,CAAcP,EAAcC,EACtC,CEJA,SATkC,CAC9B,uCACA,sCACA,WACA,yBACA,WACA,sB,GCIJ,YACI,WAAY3xB,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAASa,EAASH,KAAKiB,SAAQ,K,OAEjD,EAAKzB,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPuD,oBAOvD,EAPA,CAAuD,G,GCIvD,WACI,WAAoBsuB,GAAA,KAAAA,eAAAA,CAAgC,CAiDxD,OA/CI,YAAAoD,aAAA,SACI9qB,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE,IAAA+nB,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAASzB,EAAO,UAE7BE,EAAM,4BAA4BhpB,EAClCpG,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eACPnvB,IAAcywB,EAAK,CAChBjB,OAAQ,CACJwC,QAASgB,GAAoB,GAA2BhB,IAE5D3wB,QAAO,EACPkvB,QAAO,IAEVN,OAAM,SAACruB,GACJ,GAAIA,EAAMN,QAAU,KAAOM,EAAMN,OAAS,IACtC,MAAM,IAAI,GAA0BM,GAGxC,MAAMA,CACV,GACR,EAEA,YAAA+wB,eAAA,SACIlrB,EACArG,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE,IAAAouB,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAASzB,EAAO,UAE7BE,EAAM,4BAA4BhpB,EAClCpG,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe+C,IAAIzB,EAAK,CAChCjB,OAAQ,CACJwC,QAASgB,GAAoB,GAA2BhB,IAE5D5wB,KAAI,EACJC,QAAO,EACPkvB,QAAO,GAEf,EACJ,EAlDA,G,GCRA,wBAgDA,QA/CI,YAAAjsB,QAAA,SAAQmvB,EAAaC,GACjB,OAAO,IAAApvB,SAAQpC,KAAKyxB,WAAWF,GAAQvxB,KAAKyxB,WAAWD,GAC3D,EAEQ,YAAAC,WAAR,SAAmB1qB,GACf,MAAO,CACH2qB,WAAY3qB,EAAK2qB,WACjBC,SAAU5qB,EAAK4qB,SACfpsB,GAAIwB,EAAKxB,GACT0hB,UAAW,CACP2K,aAAc7qB,EAAKkgB,UAAU2K,aACxBC,QACA1e,MAAK,SAAC2e,EAAOC,GACV,UAAGD,EAAME,UAAYF,EAAMG,WAAYC,cACnC,GAAGH,EAAMC,UAAYD,EAAME,UAD/B,IAIH5xB,KAAI,SAAC+N,GAAS,OACX+jB,kBAAmB/jB,EAAK+jB,kBACxBH,UAAW5jB,EAAK4jB,UAChBI,SAAUhkB,EAAKgkB,SACfH,UAAW7jB,EAAK6jB,UAJL,IAMnBppB,iBAAkB9B,EAAKkgB,UAAUpe,iBAC5BgpB,QACA1e,MAAK,SAAC2e,EAAOC,GAAU,UAAGD,EAAMvsB,IAAK2sB,cAAc,GAAGH,EAAMxsB,GAArC,IACvBlF,KAAI,SAAC+N,GAAS,OACXikB,OAAQjkB,EAAKikB,OACbC,UAAWlkB,EAAKkkB,UAFL,IAInBpL,cAAengB,EAAKkgB,UAAUC,cACzB2K,QACA1e,MAAK,SAAC2e,EAAOC,GACV,UAAGD,EAAME,UAAYF,EAAMG,WAAYC,cACnC,GAAGH,EAAMC,UAAYD,EAAME,UAD/B,IAIH5xB,KAAI,SAAC+N,GAAS,OACX+jB,kBAAmB/jB,EAAK+jB,kBACxBH,UAAW5jB,EAAK4jB,UAChBI,SAAUhkB,EAAKgkB,SACfH,UAAW7jB,EAAK6jB,UAChBM,aAAcnkB,EAAKmkB,aALR,KAS/B,EACJ,EAhDA,G,GCHA,YASI,WAAYnf,EAA8Bof,GAA1C,MACI,YACI,2GACH,K,OAED,EAAK9zB,KAAO,mBACZ,EAAKC,KAAO,eACZ,EAAKoF,KAAO,CACRqP,SAAQ,EACRof,QAAO,G,CAEf,CACJ,OArB8C,oBAqB9C,EArBA,CAA8C,G,GCe9C,WACI,WAAoBtC,GAAA,KAAAA,uBAAAA,CAAgD,CAsDxE,OApDI,YAAAuC,SAAA,SAAS5K,EAAqBtlB,GAA9B,WACI,IAAKslB,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,OAAO1W,KAAKkwB,uBAAuBG,aAAaxI,EAAStiB,GAAIhD,GAASirB,MAAK,SAACnuB,GACxE,IAAMqzB,EAAa,IAAI,GAEvB,KACI7K,EAASK,qBAAuB7oB,EAASH,KAAKgpB,oBAC9C,EAAKyK,gBAAgB9K,EAASvf,QAASjJ,EAASH,KAAKoJ,UACrD,EAAKsqB,yBACD/K,EAAShf,iBACTxJ,EAASH,KAAK2J,mBAElB6pB,EAAWtwB,QAAQylB,EAAS9gB,KAAM1H,EAASH,KAAK6H,OAKpD,MAAM,IAAI,GACN,EAAK8rB,uBAAuBhL,GAC5B,EAAKgL,uBAAuBxzB,EAASH,MAE7C,GACJ,EAEQ,YAAAyzB,gBAAR,SAAwBG,EAAoBC,GACxC,OAAO,IAAA3wB,UAAQ,IAAA/B,KAAIyyB,EAAU,SAAS,IAAAzyB,KAAI0yB,EAAU,QACxD,EAEQ,YAAAH,yBAAR,SACII,EACAC,GAEA,OAAO,IAAA7wB,UAAQ,IAAA/B,KAAI2yB,EAAmB,SAAS,IAAA3yB,KAAI4yB,EAAmB,QAC1E,EAEQ,YAAAJ,uBAAR,SAA+BhL,GACnB,IAAA9gB,EAAwD8gB,EAAQ,KAA1Dvf,EAAkDuf,EAAQ,QAAjDhf,EAAyCgf,EAAQ,iBAA/BK,EAAuBL,EAAQ,mBAExE,MAAO,CACH9gB,KAAM,CACF2qB,WAAY3qB,EAAK2qB,WACjBC,SAAU5qB,EAAK4qB,SACf1K,UAAWlgB,EAAKkgB,WAEpB3e,QAAO,EACPO,iBAAgB,EAChBqf,mBAAkB,EAE1B,EACJ,EAvDA,G,GCRA,WACI,WAAoBgL,GAAA,KAAAA,qBAAAA,CAA4C,CAoBpE,OAjBI,YAAA5C,WAAA,SAAW/tB,GADX,WAEI,OAAO,EAAA0pB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MAAK,IAAAC,cAAarmB,EAAiBmB,sBAE5C,EAAK+qB,qBACA5C,WAAW/tB,GACXirB,MAAK,SAACnuB,GACH8tB,EAASC,MACL,IAAAC,cAAarmB,EAAiBiB,oBAAqB5I,EAASH,OAEhEiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OAAM,IAAAsuB,mBAAkBhnB,EAAiBkB,iBAAkB7I,GACxE,GACR,GACJ,GAhBA,iBADC,I,+BAkBL,C,CArBA,G,GCEA,WACI,WAAoB4tB,GAAA,KAAAA,eAAAA,CAAgC,CAuBxD,OArBI,YAAAqD,WAAA,SAAW,G,IAAA,aAAsC,CAAC,EAAC,EAAtCjC,EAAO,UAAEf,EAAM,SAGxB,OAAOttB,KAAKitB,eACPnvB,IAHO,oCAGU,CACduwB,QAAO,EACPlvB,SAAS,eACLmvB,OAAQ,UACR,iBAAkBH,IACfC,IAEPd,OAAM,IAETS,OAAM,SAACruB,GACJ,GAAIA,EAAMN,QAAU,KAAOM,EAAMN,OAAS,IACtC,MAAM,IAAI,GAA0BM,GAGxC,MAAMA,CACV,GACR,EACJ,EAxBA,GCVe,SAASyzB,GACpBnxB,GAEA,IAAMoxB,EAAkBpxB,EAExB,MAC+B,iBAApBoxB,GAC4B,iBAA5BA,EAAgBjxB,SACkB,iBAAlCixB,EAAgBjxB,QAAQkL,KAEvC,C,SCWA,WACI,WACYgmB,EACAC,EACAC,GAFA,KAAAF,uBAAAA,EACA,KAAAC,uBAAAA,EACA,KAAAC,6BAAAA,CACT,CAiHP,OA/GI,YAAAC,eAAA,SACIvQ,EACA1gB,GAFJ,WAII,OAAO,SAACkpB,GACJ,IAEQgI,EAFMhI,EAAMpQ,WACCoP,OAAOzL,wBACyB0U,iBAAgB,kCAE/DF,EAAiB,SAACnmB,GACpB,WAAA4d,MACI,EAAKoI,uBAAuBM,eAAc,gCACjC1Q,GAAe,CAAE5V,MAAK,IAC3B9K,IAEN2oB,MACE,IAAA0I,YAAU,WACN,WAAA7M,QACI,EAAKuM,uBAAuB5C,oBAAoBnuB,EAAhD,CAAyDkpB,IACzD,IAAAgD,KAAG,IAAApB,cAAa1kB,GAAmBa,0BAFvC,IAPR,EAcJ,OAAO,IAAAud,SACH,IAAA0H,KAAG,IAAApB,cAAa1kB,GAAmBY,0BACnCkqB,GACM,IAAAxI,MAAK,EAAKsI,6BAA6BM,SAAlC,CAA4CpI,IAAQP,MACrD,IAAA0I,YAAU,SAAC5xB,G,MACP,OAAAmxB,GAAuCnxB,IACjC,IAAA+kB,SAAO,IAAA0H,IAAGzsB,GAASwxB,EAA6B,QAAf,EAACxxB,EAAOG,eAAO,eAAEkL,SAClD,IAAAohB,IAAGzsB,E,KAGjBwxB,KACRtI,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB7lB,GAAmBc,qBAAsB/J,EAA1D,IAGZ,CACJ,EAEA,YAAAkwB,cAAA,SACIkE,EACAvxB,GAFJ,WAII,OAAO,IAAAwkB,SACH,IAAA0H,KAAG,IAAApB,cAAa1kB,GAAmBe,kCACnC,IAAAwlB,QAAM,6D,uEACe,SAAMlvB,KAAKqzB,uBAAuBzD,cAC/CkE,EACAvxB,I,OAGJ,OALQrD,EAAS,SAGhB,KAEM,CAAP,GAAO,IAAAmuB,cAAa1kB,GAAmBU,+BAAgCnK,I,WAE7EgsB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB7lB,GAAmBgB,4BAA6BjK,EAAjE,IAGZ,EAEA,YAAAq0B,eAAA,SACIlF,EACAtsB,GAFJ,WAII,OAAO,SAACkpB,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAa1kB,GAAmBqrB,2BACnC,IAAA/I,MAAK,EAAKoI,uBAAuBU,eAAelF,EAAatsB,IAAU2oB,MACnE,IAAA0I,YAAU,SAAC,G,IAAE10B,EAAI,OACb,WAAA6nB,QACI,EAAKuM,uBAAuB5C,oBAAoBnuB,EAAhD,CAAyDkpB,IACzD,IAAAgD,KAAG,IAAApB,cAAa1kB,GAAmBsrB,wBAAyB/0B,EAAK6E,OAFrE,MAMVmnB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB7lB,GAAmBurB,qBAAsBx0B,EAA1D,IAZR,CAeR,EAEA,YAAAy0B,gBAAA,SACI5xB,GADJ,WAGI,OAAO,SAACkpB,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAa1kB,GAAmByrB,4BACnC,IAAAnJ,MAAK,EAAKoI,uBAAuBc,gBAAgB5xB,IAAU2oB,MACvD,IAAA0I,YAAU,SAAC,G,IAAE10B,EAAI,OACb,WAAA6nB,QACI,EAAKuM,uBAAuB5C,oBAAoBnuB,EAAhD,CAAyDkpB,IACzD,IAAAgD,KACI,IAAApB,cACI1kB,GAAmBsJ,yBACnB/S,EAAK6E,OALjB,MAWVmnB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB7lB,GAAmB0rB,sBAAuB30B,EAA3D,IAjBR,CAoBR,EACJ,EAtHA,G,GCdA,WACI,WAAoButB,GAAA,KAAAA,eAAAA,CAAgC,CAgDxD,OA9CI,YAAA0G,cAAA,SACI1Q,EACA,G,IAAEoL,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAIT,OAAOruB,KAAKitB,eAAe8C,KAFf,2BAEyB,CACjC1B,QAAO,EACPlvB,QAASivB,GACTlvB,KAAM+jB,GAEd,EAEA,YAAA2M,cAAA,SACIkE,EACA,G,IAAEzF,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAIT,OAAOruB,KAAKitB,eAAe8C,KAFf,mCAEmC,CAC3C1B,QAAO,EACPlvB,QAASivB,GACTlvB,KAAM40B,GAEd,EAEA,YAAAC,eAAA,SACIlF,EACA,G,IAAER,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAIT,OAAOruB,KAAKitB,eAAe8C,KAFf,oCAEyB,CACjC1B,QAAO,EACPlvB,QAASivB,GACTlvB,KAAM2vB,GAEd,EAEA,YAAAsF,gBAAA,SAAgB,G,IAAE9F,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAKrB,OAAOruB,KAAKitB,eAAeqH,OAFf,oCAE2B,CAAEjG,QAAO,EAAElvB,QAASivB,IAC/D,EACJ,EAjDA,G,GCEA,WACI,WAAoBmG,GAAA,KAAAA,yBAAAA,CAAoD,CAiB5E,OAdI,YAAAhE,eAAA,SAAehuB,GADf,WAEI,OAAO,IAAAwkB,SACH,IAAA0H,KAAG,IAAApB,cAAazjB,GAAqB2C,2BACrC,IAAA2iB,QAAM,6D,uEACe,SAAMlvB,KAAKu0B,yBAAyBC,WAAWjyB,I,OAEhE,OAFQrD,EAAS,SAAuD,KAEjE,CAAP,GAAO,IAAAmuB,cAAazjB,GAAqByC,wBAAyBnN,I,WAExEgsB,MACE,IAAAC,aAAW,SAAC9rB,GACR,OAAAmvB,GAAiB5kB,GAAqB0C,qBAAsBjN,EAA5D,IAGZ,GAbA,iBADC,I,mCAeL,C,CAlBA,G,GCAA,WACI,WAAoB4tB,GAAA,KAAAA,eAAAA,CAAgC,CAcxD,OAZI,YAAAuH,WAAA,SAAW,G,IAAEnG,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGhB,OAAOruB,KAAKitB,eAAenvB,IAFf,8BAEwB,CAChCuwB,QAAO,EACPlvB,SAAS,eACLmvB,OAAQ,UACR,iBAAkBH,IACfC,KAGf,EACJ,EAfA,G,GCPI,SAAYqG,GAAZ,WACUC,EAAc,IAAIC,SAAW,SAAC/V,EAAGgW,GACnC,EAAKC,OAASD,CAClB,IAEA50B,KAAKy0B,QAAUE,QAAQG,KAAK,CAACL,EAASC,GAC1C,E,GCRJ,YACI,WAAYl2B,GAAZ,MACI,YACIA,GACI,2FACP,K,OAED,EAAKE,KAAO,4BACZ,EAAKC,KAAO,wB,CAChB,CACJ,OAVuD,oBAUvD,EAVA,CAAuD,G,GCGvD,WACI,WAAoBo2B,GAAA,KAAAA,kBAAAA,CAA6C,CAiCrE,OA/BU,YAAAC,eAAN,SAAwBC,EAAiBR,G,kIAC/BC,EAAc,IAAI,GAAmBD,IAErCtH,EAAWntB,KAAK+0B,kBAAkB9c,QAAO,SAACid,GAC5CA,EAAcniB,SAAQ,SAACoiB,GAKW,IAJPt1B,MAAMorB,KAAKkK,EAASC,cAAcpyB,QAAO,SAACqyB,GAC7D,OAAAJ,EAAQ/W,MAAK,SAACpG,GAAW,OAAAud,IAASvd,GAAUud,EAAKC,SAASxd,EAAjC,GAAzB,IAGe1X,QAInBs0B,EAAYG,OAAO,IAAI,GAC3B,GACJ,KAESU,QAAQC,SAASt2B,KAAM,CAAEu2B,WAAW,EAAMC,SAAS,I,iBAGzC,O,sBAAA,GAAMhB,EAAYD,S,OAIjC,OAJMkB,EAAS,SAEfxI,EAASyI,aAEF,CAAP,EAAOD,G,OAIP,M,WAFAxI,EAASyI,aAEH,E,yBAGlB,EAlCA,GCIA,kBACI,WAAoBC,QAAA,IAAAA,IAAAA,EAAkC9I,QAAlC,KAAA8I,QAAAA,CAAqE,CAK7F,OAHI,YAAA5d,OAAA,SAAO6d,GACH,OAAO,IAAI91B,KAAK61B,QAAQE,iBAAiBD,EAC7C,EACJ,EANA,G,SCFA,YACI,WAAYt3B,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAPkD,oBAOlD,EAPA,CAAkD,GCHnC,SAASq3B,GAASzH,GAC7B,IAAK,kBAAkB0H,KAAK1H,GACxB,MAAM,IAAI,GAAqB,sCAInC,IAAM2H,EAASV,SAASW,cAAc,KAEtCD,EAAOE,KAAO7H,EAId,IAAM8H,EACFH,EAAOG,OAA8D,IAAtD9H,EAAIpH,QAAW+O,EAAOI,SAAQ,IAAIJ,EAAOG,MAAiBH,EAAOG,KAAO,GAE3F,MAAO,CACHE,KAAML,EAAOK,KACbD,SAAUJ,EAAOI,SACjBF,KAAMF,EAAOE,KACbI,OAAWN,EAAOO,SAAQ,KAAKP,EAAOI,UAAWD,EAAO,IAAIA,EAAS,IACrEK,SAAUR,EAAOQ,SACjBL,KAAI,EACJI,SAAUP,EAAOO,SACjBE,OAAQT,EAAOS,OAEvB,CC3Be,SAASC,GACpBn4B,EACAE,GAEA,OAAOF,EAAOE,OAASA,CAC3B,C,SCSA,WAGI,WAAYk4B,EAA8BC,GAAA,KAAAA,cAAAA,EACtC92B,KAAK+2B,cAAiC,MAAjBF,EAAuB,IAAMb,GAASa,GAAcL,MAC7E,CAyDJ,OA/CI,YAAAzG,KAAA,SAIIiH,EACAz0B,GALJ,WAOU00B,EAAej3B,KAAK82B,cAE1B,GAAI/J,SAAWkK,EAAf,CAIA,IAAKA,EACD,MAAM,IAAIn4B,MAAM,4DAGpB,IAAMW,EACF8C,IACA,IAAA20B,WAAwBnK,OAAQ,WAC3B7B,MACG,IAAAloB,SACI,SAACg0B,GACG,OAAAA,EAAMR,SAAW,EAAKO,eACtBH,GAAcI,EAAMjzB,KAAMizB,EAAMjzB,KAAKpF,QAEhC,IADL,CAAC4D,EAAQ40B,YAAa50B,EAAQ60B,WAAWjQ,QAAQ6P,EAAMjzB,KAAKpF,KAF5D,KAKR,IAAA0B,MAAI,SAAC22B,GACD,GAAIz0B,EAAQ60B,YAAcJ,EAAMjzB,KAAKpF,KACjC,MAAMq4B,EAAMjzB,KAGhB,OAAOizB,EAAMjzB,IACjB,KACA,IAAAszB,MAAK,IAERC,YAIT,OAFAL,EAAaM,YAAYP,EAAOh3B,KAAK+2B,eAE9Bt3B,C,CACX,EAEA,YAAA+3B,UAAA,SAAUzK,GACN/sB,KAAK82B,cAAgB/J,CACzB,EACJ,EA9DA,GCGA,GARA,SAAuBjV,EAAara,EAAW8uB,GAC3C,OAAK9uB,GAAQ8uB,EAINkL,GAAoB3f,EAAQra,EAAK8uB,GASrC,SAA2DzU,GAC9D,IAAM4f,EAAe,YAAG,a,8CAAsB,QAAR,oBAAQ,EAAzB,CAAiB5f,GAgBtC,OAdAna,OAAO0a,oBAAoBP,EAAO7Z,WAAW8U,SAAQ,SAACtV,GAClD,IAAM8uB,EAAa5uB,OAAOg6B,yBAAyB7f,EAAO7Z,UAAWR,GAEhE8uB,GAAsB,gBAAR9uB,GAInBE,OAAOC,eACH85B,EAAgBz5B,UAChBR,EACAg6B,GAAoB3f,EAAO7Z,UAAWR,EAAK8uB,GAEnD,IAEOmL,CACX,CA9BeE,CAAmB9f,EAIlC,EA+BO,SAAS2f,GACZ7Y,EACAnhB,EACA8uB,GAEA,GAAgC,mBAArBA,EAAWjuB,MAClB,OAAOiuB,EAGX,IAAI7T,EAAY6T,EAAWjuB,MAE3B,MAAO,CACHR,IAAA,WACI,IAAM+5B,EAAcnf,EAAOof,KAAK93B,MAOhC,OALArC,OAAOC,eAAeoC,KAAMvC,GAAK,gCAC1B8uB,GAAU,CACbjuB,MAAOu5B,KAGJA,CACX,EACAhL,IAAG,SAACvuB,GACAoa,EAASpa,CACb,EAER,C,SCpEA,WAKI,WAAYy5B,GCRD,IAAmBxJ,EDS1BvuB,KAAKg4B,eAAiB,CAClBhC,GAAS+B,GAAcvB,QCVDjI,EDWZyH,GAAS+B,GCVpB/B,GAC6B,IAAhCzH,EAAI+H,SAASnP,QAAQ,OACfoH,EAAI6H,KACJ7H,EAAI6H,KAAK9yB,QAAQirB,EAAI+H,SAAU,OAAO/H,EAAI+H,YDOVE,QAEtCx2B,KAAKi4B,cAAe,EACpBj4B,KAAKk4B,WAAa,CAAC,CACvB,CA2EJ,OAzEI,YAAAC,OAAA,WACQn4B,KAAKi4B,eAITj4B,KAAKi4B,cAAe,EAEpBlL,OAAOqL,iBAAiB,UAAWp4B,KAAKq4B,gBAC5C,EAEA,YAAAC,WAAA,WACSt4B,KAAKi4B,eAIVj4B,KAAKi4B,cAAe,EAEpBlL,OAAOwL,oBAAoB,UAAWv4B,KAAKq4B,gBAC/C,EAEA,YAAAG,YAAA,SACI75B,EACA85B,GAEA,IAAIC,EAAY14B,KAAKk4B,WAAWv5B,GAE3B+5B,IACD14B,KAAKk4B,WAAWv5B,GAAQ+5B,EAAY,KAGH,IAAjCA,EAAUvR,QAAQsR,IAClBC,EAAUjqB,KAAKgqB,EAEvB,EAEA,YAAAE,eAAA,SACIh6B,EACA85B,GAEA,IAAMC,EAAY14B,KAAKk4B,WAAWv5B,GAElC,GAAK+5B,EAAL,CAIA,IAAMl2B,EAAQk2B,EAAUvR,QAAQsR,GAE5Bj2B,GAAS,GACTk2B,EAAUE,OAAOp2B,EAAO,E,CAEhC,EAEA,YAAAq2B,QAAA,SAAuC7B,GACnC,IAAM0B,EAAY14B,KAAKk4B,WAAWlB,EAAMr4B,MAEnC+5B,GAILA,EAAU3lB,SAAQ,SAAC0lB,GAAa,OAAAA,EAASzB,EAAT,GACpC,EAGQ,YAAAqB,eAAR,SAAuBrB,IAEgC,IAA/Ch3B,KAAKg4B,eAAe7Q,QAAQ6P,EAAMR,SACjCI,GAAcI,EAAMjzB,KAAoCizB,EAAMjzB,KAAKpF,OAKxEqB,KAAK64B,QAAQ7B,EAAMjzB,KACvB,GATA,iBADC,I,mCAWL,C,CAvFA,G,GEAA,YACI,mBACI,YAAM,0EAAwE,K,OAE9E,EAAKrF,KAAO,2CACZ,EAAKC,KAAO,0C,CAChB,CACJ,OAPsE,oBAOtE,EAPA,CAAsE,G,GCAtE,YACI,mBACI,YAAM,oEAAkE,K,OAExE,EAAKD,KAAO,8CACZ,EAAKC,KAAO,6C,CAChB,CACJ,OAPyE,oBAOzE,EAPA,CAAyE,G,GCAzE,YACI,mBACI,YAAM,2EAAyE,K,OAE/E,EAAKD,KAAO,+BACZ,EAAKC,KAAO,4B,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,G,GCM1D,WACI,WAAoBm6B,GAAA,KAAAA,iBAAAA,CAAoC,CA2F5D,OAvFU,YAAAC,OAAN,SAAaC,EAA2Bv7B,G,+FACpC,MAAyB,iBAAdu7B,EACA,CAAP,EAAOh5B,KAAKi5B,2BAA2BD,EAAWv7B,IAG/C,CAAP,EAAOuC,KAAKk5B,+CAA+CF,G,QAGjD,YAAAE,+CAAd,SACIx5B,G,sHAEA,IAAKM,KAAKm5B,mCAAmCz5B,GACzC,MAAMA,EAGV,SAAMM,KAAKo5B,YAAY15B,EAAMR,KAAKm6B,2BAA2Bt1B,KAAKtG,M,OAElE,OAFA,SAEO,CAAP,EAAOuC,KAAKs5B,qB,QAGF,YAAAL,2BAAd,SACI1zB,EACA9H,G,sHAEA,GAAW,iBAAP8H,EACA,MAAMzG,MAAM,+CAGhB,IAAKrB,EACD,MAAMqB,MAAM,kCAGhB,SAAMkB,KAAKo5B,YAAY37B,I,OAEvB,OAFA,SAEO,CAAP,EAAOuC,KAAKs5B,qB,QAGR,YAAAA,kBAAR,sBACI,OAAOt5B,KAAK84B,iBACPjF,UACA3I,MAAK,IAAAmM,MAAK,IACVnM,MACG,IAAA0I,YAAU,SAAO,G,IAAEl0B,EAAK,QAAE2N,EAAK,Q,4FAC3B,GAAI3N,aAAiB,GACjB,MAAM,IAAI,GAGd,GAAIA,IAAU2N,EACV,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO,CACH1O,KAAM,4BACNoF,KAAM,CACFw1B,yBAA0BlsB,I,WAKzCiqB,WACT,EAEQ,YAAA8B,YAAR,SAAoBI,GAChB,IAAMC,EAA6B,6BAE/BC,EAA2BlE,SAASmE,eAAeF,GAUvD,OARIC,GAA4BA,EAAyBE,YACrDF,EAAyBE,WAAWC,YAAYH,IAGpDA,EAA2BlE,SAASW,cAAc,QACzB2D,aAAa,KAAML,GAC5CjE,SAASt2B,KAAK66B,YAAYL,GAEnB15B,KAAK84B,iBAAiBkB,KAAKP,EAA4BD,EAClE,EAEQ,YAAAL,mCAAR,SAA2Cz5B,GACjC,MAA0CA,EAAuBR,MAAQ,CAAC,EAAxEm6B,EAA0B,6BAElC,MACe,+BAH2B,UAItCA,GACoC,8BAApCA,EAA2B16B,IAEnC,EACJ,EA5FA,GCVA,IAAYs7B,IAAZ,SAAYA,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAYA,KAAAA,GAAuB,K,SAanC,YACI,WAAmB3jB,GAAnB,MACI,YAOR,SAAyB3X,GACrB,OAAQA,GACJ,KAAKs7B,GAAwBC,uBACzB,MAAO,oFAEX,KAAKD,GAAwBE,sBACzB,MAAO,mFAEX,KAAKF,GAAwBG,uBACzB,MAAO,oFAEX,KAAKH,GAAwBI,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBc,CAAgB/jB,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAK5X,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OAPiD,oBAOjD,EAPA,CAAiD,G,GCTjD,YACI,mBACI,YAAM,sFAAoF,K,OAE1F,EAAKD,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPuD,oBAOvD,EAPA,CAAuD,G,GCAvD,YACI,mBACI,YAAM,qDAAmD,K,OAEzD,EAAKD,KAAO,+BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,G,GCiB1D,WAUI,WACY27B,EACAC,GAFZ,WACY,KAAAD,4BAAAA,EACA,KAAAC,wBAAAA,EAERv6B,KAAKw6B,WAAY,KAAA9iB,UACb,SAAC+iB,EAAkCC,EAAiBC,GAChD,IAAMC,EAAS,IAAI,EAAAC,QAEnB,IAAKF,EACD,MAAM,IAAI77B,MAmBd,OAhBA,EAAKg8B,UAAYL,EAAUM,OAAOJ,EAAUp1B,GAAI,CAC5Cm1B,QAAO,EACPM,KAAM,YACNlF,SAAU,WACN8E,EAAOxN,KAAK,CACR/f,MAAOotB,EAAUQ,YAAY,EAAKH,aAEtCL,EAAUS,MAAM,EAAKJ,UACzB,EACA,iBAAkB,WACdF,EAAOxN,KAAK,CACR1tB,MAAO,IAAI,IAEnB,IAGGk7B,CACX,GACA,CAAEx4B,QAAS,SAAC9E,EAAGgI,GAAM,OAAAhI,IAAMgI,CAAN,GAE7B,CAwEJ,OAtEI,YAAA00B,KAAA,SAAKvyB,EAAqBizB,GAA1B,WACI,OAAO16B,KAAKs6B,4BAA4BN,OAAOxM,MAAK,SAACiN,GAC7CA,IACA,EAAKU,QAAU,EAAKX,UAChBC,EACAC,EACAlF,SAASmE,eAAelyB,IAE5B,EAAK2zB,WAAaX,EAE1B,GACJ,EAEA,YAAA5G,QAAA,sBACI,OAAO,IAAA3E,QAAM,WACT,IAAM0L,EAAS,EAAKO,QACdV,EAAY,EAAKW,WAEvB,IAAKR,IAAWH,EACZ,MAAM,IAAI,GAAoBR,GAAwBI,8BAG1D,OAAO,IAAAnL,QAAM,WACT,IAAMmM,EAAU7F,SAAS8F,cAAc,yBAEvC,OAAOD,GAAU,IAAA5M,IAAG4M,IAAW,IAAA3M,YAAW,IAAI,GAClD,IAAGxD,MACC,IAAAqQ,YAAU,SAACj8B,GACP,OAAAA,EAAO4rB,MACH,IAAAsQ,OAjFD,MAkFC,IAAA5H,YAAU,SAACl0B,EAAO8C,GACd,OAAAA,EAlFRi5B,IAkF8B,IAAAhN,IAAG/uB,IAAS,IAAAgvB,YAAWhvB,EAA7C,IAHR,KAOJ,IAAAk0B,YAAU,SAACyH,GAIP,OAHA,EAAKK,+BAA+Bd,EAAQS,GAC5CZ,EAAU5G,QAAQ,EAAKiH,WAEhBF,CACX,KACA,IAAAzP,aAAW,SAACzrB,GAAU,WAAA+uB,IAAG,CAAE/uB,MAAK,GAAV,IAE9B,GACJ,EAEQ,YAAAg8B,+BAAR,SAAuC1E,EAAiCqE,GACpE,IAAMM,EAAkBN,EAAQO,cAEhC,IAAKD,EACD,MAAM,IAAI,GAGd,IAAMhB,EAAYgB,EAAgBC,cAElC,IAAKjB,EACD,MAAM,IAAI,GAGd36B,KAAKu6B,wBACAtiB,QAAO,WAE+B,WAA/B0iB,EAAUkB,MAAMC,YAChB9E,EAAM5J,KAAK,CACP1tB,MAAO,IAAI,IAGvB,IACC61B,QAAQoF,EAAW,CAAEoB,YAAY,EAAMC,gBAAiB,CAAC,UAClE,EACJ,EAlHA,G,GCrBA,WAGI,WACYC,EACApG,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAoG,cAAAA,EACA,KAAApG,QAAAA,CACT,CAyBP,OAvBI,YAAAmE,KAAA,WAKI,OAJKh6B,KAAKk8B,eACNl8B,KAAKk8B,aAAel8B,KAAKm8B,eAGtBn8B,KAAKk8B,YAChB,EAEQ,YAAAC,YAAR,sBAEU7O,EAAS,CAAC,uBAA0B,mBAAmB3tB,KAAK,KAElE,OAAO,IAAIg1B,SAAQ,SAACyH,EAASxH,GACzB,EAAKiB,QAAoB,cAAI,WAAM,OAAAuG,EAAQ,EAAKvG,QAAQwG,WAArB,EAEnC,EAAKJ,cACAK,WAAW,qCAAqChP,GAChDS,OAAM,SAACruB,GACJ,EAAKw8B,kBAAez4B,EACpBmxB,EAAOl1B,EACX,GACR,GACJ,EACJ,EA/BA,GCKe,SAAS68B,GAAqBC,GACzC,OAAO,IAAI,GACP,IAAI,GAA4BA,GAChC,IAAIC,GAEZ,C,SCVA,YACI,WAAYj+B,GAAZ,MACI,YACIA,GACI,yFACP,K,OAED,EAAKE,KAAO,+BACZ,EAAKC,KAAO,6B,CAChB,CACJ,OAV0D,oBAU1D,EAVA,CAA0D,G,GCA1D,YACI,WAAYH,GAAZ,MACI,YAAMA,GAAW,4EAA0E,K,OAE3F,EAAKE,KAAO,yBACZ,EAAKC,KAAO,sB,CAChB,CACJ,OAPoD,oBAOpD,EAPA,CAAoD,G,GCGpD,YACI,WAAmBW,GAAnB,MACI,aACI,qBACI,uDACG,IAAA8iB,UAAQ,IAAAhE,QAAO9e,IAAS,SAACo9B,GACxB,WAAAr8B,KAAIq8B,GAAa,SAAC,GAAgB,OAAP,SAAO,GAAlC,KAEN/8B,KAAK,QACV,K,OARc,EAAAL,OAAAA,EAUf,EAAKZ,KAAO,8BACZ,EAAKC,KAAO,4B,CAChB,CACJ,OAdyD,oBAczD,EAdA,CAAyD,GCCzD,IAAYg+B,GCGAC,IDHZ,SAAYD,GACR,kDACA,qDACA,qDACH,CAJD,CAAYA,KAAAA,GAAoB,KCGhC,SAAYC,GACR,kDACA,4CACA,wCACA,iCACA,iCACA,mDACA,iCACA,iCACA,kDACA,4CACA,oCACH,CAZD,CAAYA,KAAAA,GAAoB,K,SCqBhC,WAGI,WACYC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GARA,KAAAR,MAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,eAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,gBAAAA,EAERr9B,KAAKs9B,QAAU9H,SAASW,cAAc,UAEtCn2B,KAAKs9B,QAAQC,IAAM,iDACnBv9B,KAAKs9B,QAAQzB,MAAM2B,OAAS,OAC5Bx9B,KAAKs9B,QAAQzB,MAAM4B,OAAS,OAC5Bz9B,KAAKs9B,QAAQzB,MAAM6B,SAAW,SAC9B19B,KAAKs9B,QAAQzB,MAAM8B,MAAQ,MAC/B,CA0IJ,OAxII,YAAAC,QAAA,WACI,OAAO59B,KAAK68B,KAChB,EAEM,YAAAgB,OAAN,W,qIAGI,KAFMlD,EAAYnF,SAASmE,eAAe35B,KAAK88B,eAG3C,MAAM,IAAI,GACN,qEAyCR,OArCAnC,EAAUZ,YAAY/5B,KAAKs9B,SAC3Bt9B,KAAKm9B,eAAehF,SAEd1D,GAAU,IAAAyC,WAAUl3B,KAAKs9B,QAAS,QACnCpS,MACG,IAAA0I,YAAU,SAAO,G,IAAE9b,EAAM,S,yHAGrB,KAFMgmB,EAAgBhmB,GAAWA,EAA6BgmB,eAG1D,MAAM,IAAIh/B,MAAM,wDAKpB,OAFAkB,KAAKk9B,aAAa1F,UAAUsG,GAE5B,GAAM99B,KAAKk9B,aAAanN,KACpB,CACIpxB,KAAMg+B,GAAqBoB,gBAC3B57B,QAAS,CACL67B,mBAAoBh+B,KAAKg9B,oBACzBiB,eAAgBj+B,KAAKq9B,gBACrBa,SAAUl+B,KAAKm+B,eACfC,YAAap+B,KAAK+8B,aAClBsB,OAAQr+B,KAAKi9B,QACbzG,OAAQhB,SAAS8I,SAAS9H,OAC1B73B,KAAMqB,KAAK68B,QAGnB,CACI1F,YAAayF,GAAqB2B,gBAClCnH,UAAWwF,GAAqB4B,gB,cAfxC,S,eAmBJ,IAAAnH,MAAK,IAERC,YAEL,GAAMt3B,KAAKo9B,oBAAoBpI,eAAe,CAACh1B,KAAKs9B,SAAU7I,I,cAA9D,S,YAGJ,YAAAgK,OAAA,WACSz+B,KAAKs9B,QAAQ1B,gBAIlB57B,KAAKs9B,QAAQ1B,cAAc/B,YAAY75B,KAAKs9B,SAC5Ct9B,KAAKm9B,eAAe7E,aACxB,EAEM,YAAAoG,WAAN,SACIC,EACA56B,G,8HAcW,O,sBAXD0wB,EAAUz0B,KAAKk9B,aAAanN,KAC9B,CACIpxB,KAAMg+B,GAAqBiC,gBAC3Bz8B,QAAS,CAAEw8B,OAAM,EAAE56B,KAAI,IAE3B,CACIozB,YAAayF,GAAqBiC,gBAClCzH,UAAWwF,GAAqBkC,eAIjC,GAAM9+B,KAAKo9B,oBAAoBpI,eAAe,CAACh1B,KAAKs9B,SAAU7I,I,OAArE,MAAO,CAAP,EAAO,U,OAEP,G,WAAIz0B,KAAK++B,oBAAoB,GAAQ,CACjC,GAAiC,sBAA7B,EAAM58B,QAAQzC,MAAMY,KACpB,MAAM,IAAI,GAAuB,EAAM6B,QAAQzC,MAAMlB,SAGzD,GAAI,EAAM2D,QAAQ9C,SACd,MAAMO,EAA4B,EAAMuC,QAAQ9C,UAGpD,MAAM,IAAIP,MAAM,EAAMqD,QAAQzC,MAAMlB,Q,CAGxC,MAAM,E,yBAIR,YAAAwgC,aAAN,W,8HAUwB,OATdvK,EAAUz0B,KAAKk9B,aAAanN,KAC9B,CACIpxB,KAAMg+B,GAAqBsC,mBAE/B,CACI9H,YAAayF,GAAqBsC,YAItB,GAAMl/B,KAAKo9B,oBAAoBpI,eAAe,CAACh1B,KAAKs9B,SAAU7I,I,OAElF,KAFQtyB,EAAY,SAAsE,SAE7Eg9B,QACT,MAAM,IAAI,GAA4Bh9B,EAAQ7C,Q,kBAI9C,YAAA6+B,aAAR,sBACU7H,EAAW,uBACX8I,EAAQ5J,SAAS6J,iBAAiB,eAAe/I,EAAQ,wBAE/D,OAAOz2B,MAAM5B,UAAU4zB,MAClB1zB,KAAKihC,GACLp8B,QAAO,SAACs8B,GAAS,OAAAtJ,GAASsJ,EAAKlJ,MAAME,WAAaA,CAAjC,IACjBtzB,QAAO,SAACs8B,GACL,WAAAlhB,QAAO,EAAK6e,SACP58B,KAAI,SAACw7B,GAAU,OAAAA,GAASA,EAAM0D,UAAf,IACfv8B,QAAO,SAACw8B,GAA6B,MAAkB,iBAAXA,CAAP,IACrCthB,MAAK,SAACshB,GACH,OAAAA,EACKv+B,MAAM,OACNid,MAAK,SAACxf,GAAS,OAA+C,IAA/C4gC,EAAKlJ,KAAKjP,QAAQzoB,EAAK4E,QAAQ,IAAK,KAApC,GAFpB,GAJR,IASHjD,KAAI,SAACi/B,GAAS,OAAAA,EAAKlJ,IAAL,GACvB,EAEQ,YAAA2I,oBAAR,SAA4B/H,GACxB,OAAOA,EAAMr4B,OAASi+B,GAAqBkC,YAC/C,EACJ,EA/JA,G,GCLA,WAII,WACYW,EACAtC,EACAuC,EACAC,EACAC,GALZ,WACY,KAAAH,QAAAA,EACA,KAAAtC,eAAAA,EACA,KAAAuC,oBAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,iCAAAA,EA8FJ,KAAAC,aAAgE,SAAO,G,IAAE19B,EAAO,U,2HAEhF,O,sBAAA,GAAMnC,KAAKyyB,Y,cAAX,S,aAIA,GAAmB,iC,YAAT/zB,KACN,MAAM,E,+BAIC,KAAP,EAAmBsB,KAAK2/B,gBAAe,SAA7B,EAAAG,KAAI,GAEd39B,G,YAzGF,MAKFnC,KAAK2/B,gBAJL,IAAAI,OAAAA,OAAM,IAAG,IAAAD,KAAI,EACb,IAAAE,iBAAAA,OAAgB,IAAG,IAAAF,KAAI,EACvB,IAAAG,QAAAA,OAAO,IAAG,IAAAH,KAAI,EACd,IAAAI,WAAAA,OAAU,IAAG,IAAAJ,KAAI,EAGrB9/B,KAAKm9B,eAAe3E,YAAYoE,GAAqBuD,SAAS,SAAC,G,IAAEh+B,EAAO,UACpE,OAAA49B,EAAO59B,EAAP,IAEJnC,KAAKm9B,eAAe3E,YAAYoE,GAAqBwD,iBAAiB,SAAC,G,IAAEj+B,EAAO,UAC5E,OAAA69B,EAAiB79B,EAAjB,IAEJnC,KAAKm9B,eAAe3E,YAAYoE,GAAqByD,SAAS,SAAC,G,IAAEl+B,EAAO,UACpE,OAAA89B,EAAQ99B,EAAR,IAEJnC,KAAKm9B,eAAe3E,YAAYoE,GAAqBsC,WAAW,SAAC,G,IAAE/8B,EAAO,UACtE,OAAA+9B,EAAW/9B,EAAX,IAEJnC,KAAKm9B,eAAe3E,YAAYoE,GAAqB0D,QAAStgC,KAAK6/B,cAEnE7/B,KAAKm9B,eAAe3E,YAChBoE,GAAqBwD,iBACrB,SAAC,G,IAAEj+B,EAAO,UAAO,OAAC,EAAKo+B,UAAYp+B,EAAQq+B,QAA1B,IAErBxgC,KAAKm9B,eAAe3E,YAChBoE,GAAqB6D,YACrB,SAAC,G,IAAEt+B,EAAO,UAAO,OAAC,EAAKu+B,KAAOv+B,EAAQw+B,GAArB,GAEzB,CA8EJ,OA5EI,YAAAC,OAAA,WACI,OAAO5gC,KAAK0gC,IAChB,EAEA,YAAAG,YAAA,WACI,OAAO7gC,KAAKugC,SAChB,EAEM,YAAA1C,OAAN,W,8HAMI,OALA79B,KAAKm9B,eAAehF,SAEdtV,EAAQ7iB,KAAK8gC,iBACbC,GAAc,IAAAC,SAAQhhC,KAAKy/B,QAAS5c,GAE1C,GAAMA,EAAMgb,U,OACZ,OADA,SACA,GAAMlJ,QAAQsM,IAAIF,EAAY1gC,KAAI,SAAC6gC,GAAe,OAAAA,EAAWrD,QAAX,M,cAAlD,S,YAGJ,YAAAY,OAAA,WACIz+B,KAAKm9B,eAAe7E,aAEpBt4B,KAAKy/B,QAAQ1sB,SAAQ,SAAC8P,GAClBA,EAAM4b,QACV,GACJ,EAEM,YAAA0C,OAAN,SACIh/B,EACAi/B,G,8HAGW,O,sBAAA,GAAMphC,KAAK8gC,iBAAiBpC,WAC/B1+B,KAAKy/B,QAAQp/B,KAAI,SAACwiB,GAAU,OAAAA,EAAM+a,SAAN,IAC5B59B,KAAK0/B,oBAAoB99B,UAAUO,EAASi/B,K,cAKhD,MAAO,CAAP,EAAO,U,OAFkB,O,WAAA,GAAMphC,KAAK4/B,iCAAiC7G,OAAO,I,OAErE,OAFDsI,EAAmB,SAElB,GAAMrhC,KAAK8gC,iBAAiBpC,WAC/B1+B,KAAKy/B,QAAQp/B,KAAI,SAACwiB,GAAU,OAAAA,EAAM+a,SAAN,IAC5B59B,KAAK0/B,oBAAoB99B,UAAUO,EAASk/B,K,yBAKlD,YAAA5O,SAAN,W,+FACI,MAAO,CAAP,EAAOzyB,KAAK8gC,iBAAiB9B,e,QAGzB,YAAA8B,eAAR,WACI,IAAMje,EAAQ7iB,KAAKy/B,QAAQ,GAE3B,IAAK5c,EACD,MAAM,IAAI,GACN,oEAIR,OAAOA,CACX,EAiBJ,EAtHA,GCjBe,SAASye,GACpBzf,GAEA,OAAOgC,QAAShC,EAAiC7Q,aACrD,C,SCCA,WACI,WAAoBuwB,GAAA,KAAAA,OAAAA,CAAgC,CA6CxD,OA3CI,YAAA3/B,UAAA,SACIO,EACAk/B,GAEA,IAAMt/B,EAAQ/B,KAAKuhC,OAAOlmB,WACpBwM,EAAW9lB,EAAM8lB,SAAS1L,cAC1BsO,EAAS1oB,EAAM0oB,OAAOnM,YACtBkjB,EAAiBz/B,EAAMwf,YAAYe,qBACnCnV,EAAQpL,EAAMoL,MAAMmb,WACpBmZ,EAAY1/B,EAAMoL,MAAMqb,eACxBlb,GAAU,IAAAP,MACZ5K,EAAQu/B,YACR,WACA,SACA,WACA,SAEElgB,EAAgBzf,EAAMmiB,eAAeE,iBACvCjiB,EAAQoF,SACRpF,EAAQkiB,WAENsd,EAAoB5/B,EAAMmiB,eAAeC,wBACzCyd,EACFJ,GAAkBl0B,GAAWg0B,GAAoBh0B,GACxCvL,EAAMuL,QAAQ0P,kBAAiB,KAAKwkB,EAAeK,iBACtD9/B,EAAMuL,QAAQ0P,kBAExB,IAAK4kB,EACD,MAAM,IAAI,GAAiBvrB,GAAqBY,qBAGpD,MAAO,CACHoqB,iBAAgB,EAChBO,UAAS,EACT/Z,SAAQ,EACR4C,OAAM,EACNtd,MAAK,EACLs0B,UAAS,EACTn0B,QAAO,EACPkU,cAAa,EACbmgB,kBAAiB,EAEzB,EACJ,EA9CA,G,GCMA,WACI,WAAoBJ,GAAA,KAAAA,OAAAA,CAAgC,CAoDxD,OAlDI,YAAAtpB,OAAA,SAAOoH,EAAc9c,GAArB,WAEUo8B,EADahhC,OAAOwF,KAAKZ,EAAQo8B,QACbn/B,QAAsB,SAACC,EAAQd,GACrD,IAEMmjC,EAFSv/B,EAAQo8B,OAEKhgC,GAE5B,OAAKmjC,GAIE,oBACAriC,EAAM,CACT,IAAI,GACAd,EACAmjC,EAAar6B,YACbq6B,EAAa1D,aAAe,GAC5B0D,EAAa9D,oBAAsB,GACnCz7B,EAAQ87B,QAAU,CAAC,EACnB,IAAI,GAAkBhf,GACtB,IAAI,GAAoBA,GACxB,IAAI,GAAmB,IAAIod,IAC3B,iBAAkBqF,EACZ,EAAKC,mBAAmBD,EAAa9wB,mBACrCvN,KAhBHhE,CAmBf,GAAG,IAEH,OAAO,IAAI,GACPk/B,EACA,IAAI,GAAoBtf,GACxB,IAAI,GAA+Brf,KAAKuhC,SACxC,IAAAjzB,MAAK/L,EAAS,SAAU,UAAW,UAAW,mBAAoB,cAClE,IAAI,GAAgCg6B,IAAqB,KAAAyF,wBAEjE,EAEQ,YAAAD,mBAAR,SAA2B/wB,GAEJ,IAEb6Q,GAAaF,EADf3hB,KAAKuhC,OAAOlmB,WAAU,+BACWrK,GAErC,IAAK6Q,EACD,MAAM,IAAI,GAAiBxL,GAAqB6L,0BAGpD,OAAOL,CACX,EACJ,EArDA,G,GCdA,YACI,mBACI,YAAM,2DAAyD,K,OAE/D,EAAKnjB,KAAO,kCACZ,EAAKC,KAAO,gC,CAChB,CACJ,OAP6D,oBAO7D,EAPA,CAA6D,G,GCgB7D,WACI,WACYsjC,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,mBAAAA,CACT,CAgLP,OA9KI,YAAAC,UAAA,SAAUjsB,EAAiB3T,GAA3B,WACI,OAAO,IAAI,EAAA0pB,YAAW,SAACkB,GACnBA,EAASC,MAAK,IAAAC,cAAatlB,GAAgBwF,qBAE3C,EAAK00B,oBACAE,UAAUjsB,EAAS3T,GACnBirB,MAAK,SAACnuB,GACH8tB,EAASC,MAAK,IAAAC,cAAatlB,GAAgBM,mBAAoBhJ,EAASH,OACxEiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OAAM,IAAAsuB,mBAAkBjmB,GAAgB0F,gBAAiBpO,GACtE,GACR,GACJ,EAGA,YAAA+iC,kBAAA,SACIlsB,EACA3T,GAFJ,WAII,OAAO,IAAI,EAAA0pB,YAAW,SAACkB,GACnBA,EAASC,MAAK,IAAAC,cAAatlB,GAAgByF,6BAE3C,EAAKy0B,oBACAE,UAAUjsB,EAAS3T,GACnBirB,MAAK,SAACnuB,GACH8tB,EAASC,MACL,IAAAC,cAAatlB,GAAgB+E,2BAA4BzN,EAASH,OAEtEiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBAAkBjmB,GAAgB2F,wBAAyBrO,GAEnE,GACR,GACJ,EAEA,YAAAgjC,iBAAA,SACI9/B,GADJ,WAGI,OAAO,SAACkpB,GACJ,WAAAyD,QAAM,WACF,IAAMhZ,EAAU,EAAKosB,mBAAmB7W,EAAMpQ,YAE9C,IAAKnF,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO,EAAKorB,UAAUjsB,EAAS3T,EACnC,GARA,CASR,EAEA,YAAAggC,YAAA,SACIpgC,EACAI,GAFJ,WAII,OAAO,SAACkpB,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAatlB,GAAgBy6B,wBAChC,IAAAtT,QAAM,WACF,IAAMntB,EAAQ0pB,EAAMpQ,WACd8D,EAAiBpd,EAAM0oB,OAAOvL,oBAC9BO,EAA6B1d,EAAM0oB,OAAOjL,gCAC1CqI,EAAW9lB,EAAM8lB,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,GAAImR,EAAS4a,uBACT,MAAM,IAAI,GAGd,OAAO,IAAAxX,MACH,EAAKiX,mBAAmBzP,SAAS5K,EAAUtlB,GAASirB,MAAK,WACrD,SAAKyU,oBAAoBM,YACrB,EAAKG,uBACDvgC,QAAAA,EAAW,CAAC,EACZ0lB,EAAStiB,GACTsiB,EAAS8a,gBACTxjB,IACH,gCAEM5c,GAAO,CACVpD,QAAS,CACLyjC,gBAAiBnjB,KAV7B,KAeNyL,MACE,IAAA0I,YAAU,SAACv0B,GACP,WAAA0nB,QAEI,EAAKob,UAAU9iC,EAASH,KAAK6E,KAAKoJ,MAAM+I,QAAS3T,IACjD,IAAAksB,KACI,IAAApB,cACItlB,GAAgBkF,qBAChB5N,EAASH,KAAK6E,MAAI,gCACb1E,EAASH,KAAKoI,MAAI,CAAE+F,MAAOhO,EAASF,QAAQkO,UAP7D,IAaZ,IAAG6d,MACC,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiBzmB,GAAgB86B,kBAAmBnjC,EAApD,KAlDZ,CAsDR,EAEA,YAAAojC,cAAA,SACI5sB,EACA3T,GAFJ,WAII,OAAO,IAAAwkB,SACH,IAAA0H,KAAG,IAAApB,cAAatlB,GAAgBg7B,0BAChC,IAAA9X,MAAKjrB,KAAKiiC,oBAAoBa,cAAc5sB,EAAS3T,IAAU2oB,MAC3D,IAAA0I,YAAU,SAACv0B,GACP,WAAA0nB,QACI,EAAKob,UAAUjsB,EAAS3T,IACxB,IAAAksB,KACI,IAAApB,cACItlB,GAAgBiF,uBAChB3N,EAASH,KAAK6E,OAL1B,MAWVmnB,MAAK,IAAAC,aAAW,SAACzrB,GAAU,OAAA8uB,GAAiBzmB,GAAgBi7B,oBAAqBtjC,EAAtD,IACjC,EAEQ,YAAA4iC,mBAAR,SAA2BvgC,GACvB,IAAMoL,EAAQpL,EAAMoL,MAAMmb,WACpBT,EAAW9lB,EAAM8lB,SAAS1L,cAEhC,OAAQhP,GAASA,EAAM+I,SAAa2R,GAAYA,EAAS3R,OAC7D,EAEQ,YAAAwsB,uBAAR,SACIvgC,EACAorB,EACAoV,EACAxjB,GAEQ,IAAA7R,EAAsBnL,EAAO,QAAjBgL,GAAK,YAAKhL,EAAxB,aAEN,OAAKmL,GASE,gCACAH,GAAK,CACRogB,OAAM,EACNoV,gBAAe,EACfxjB,eAAc,EACd7R,QAAS,CACLo0B,YAAap0B,EAAQo0B,YACrBhjC,KAAM4O,EAAQ/F,SACdqH,QAAStB,EAAQ+W,cAhBd,gCACAlX,GAAK,CACRogB,OAAM,EACNoV,gBAAe,EACfxjB,eAAc,GAe1B,EACJ,EApLA,G,GCfA,YACI,WAAY3gB,GAAZ,MACI,YACIA,GACI,oHACP,K,OAED,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAVkD,oBAUlD,EAVA,CAAkD,G,GCAlD,YACI,WAAYH,GAAZ,MACI,YAAMA,GAAW,qCAAmC,K,OAEpD,EAAKE,KAAO,mCACZ,EAAKC,KAAO,2B,CAChB,CACJ,OAP8D,oBAO9D,EAPA,CAA8D,G,GCiB9D,WACI,WAAoBsuB,GAAA,KAAAA,eAAAA,CAAgC,CAmExD,OAjEI,YAAAkV,UAAA,SACIjsB,EACA,G,IAAA,aAAmD,CAAC,EAAC,EAAnDmY,EAAO,UAAEf,EAAM,SAEXiB,EAAM,0BAA0BrY,EAChC/W,GAAU,eACZmvB,OAAQ,WACLF,IAUP,OAAOpuB,KAAKitB,eAAenvB,IAAIywB,EAAK,CAChCjB,OAAQ,CACJwC,QAASa,IAAa,oBAVd,CACZ,WACA,sCACA,kCACA,qCACA,kCAK4CrD,GAAUA,EAAOwC,SAAY,MAEzE3wB,QAAO,EACPkvB,QAAO,GAEf,EAEA,YAAAkU,YAAA,SACIrjC,EACA,G,IAAA,aAAkD,CAAC,EAAC,EAAlDC,EAAO,UAAEkvB,EAAO,UAIlB,OAAOruB,KAAKitB,eACP8C,KAHO,iCAG8B,CAClC7wB,KAAI,EACJC,SAAS,IAAA0C,SAAO,eAER,qBAAsB1C,GAAWA,EAAQyjC,iBACtCxU,IAEP,EAAA6U,OAEJ5U,QAAO,IAEVN,OAAM,SAACruB,GACJ,GAAwB,6BAApBA,EAAMR,KAAKP,KACX,MAAM,IAAI,GAGd,GAAwB,qBAApBe,EAAMR,KAAKP,KACX,MAAM,IAAI,GAGd,MAAMe,CACV,GACR,EAEA,YAAAojC,cAAA,SACI5sB,EACA,G,IAAEmY,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,kCAAkCrY,EAE9C,OAAOlW,KAAKitB,eAAe8C,KAAKxB,EAAK,CAAEF,QAAO,EAAElvB,QAASivB,IAC7D,EACJ,EApEA,G,GCaA,WACI,WACY8U,EACAC,EACAC,EACAxD,GAJZ,WACY,KAAAsD,sBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,2BAAAA,EACA,KAAAxD,iCAAAA,EAuCZ,KAAAyD,yBAAqD,SAAC,G,IAClD97B,EAAQ,WACR8c,EAAS,YACTrT,EAAY,eACZ8G,EAAM,SACN2c,EAAO,UACP6O,EAAoB,uBACpBC,EAA4B,+BAE5B,OAAO,SAAC9X,GACJ,IAAIiW,EAIA1wB,EACA0wB,EAAc,CAAE8B,iBAAkB,CAAEC,aAAczyB,IAC3CsyB,IACP5B,EAAc,CACV8B,iBAAkB,CACdE,yBAA0BJ,EAC1BK,iCAAkCJ,GAAgC,QAK9E,IAAMphC,EAAU,EAAKihC,2BAA2BxhC,UAC5C,CAAEyiB,UAAS,EAAE9c,SAAQ,EAAEm6B,YAAW,GAClCjW,EAAMpQ,YAGV,OAAO,IAAA0L,SACH,IAAA0H,KAAG,IAAApB,cAAa1f,GAAkBi2B,oCAClCjP,QAAQG,KACJ,CACI,EAAKoO,sBAAsBG,yBAAyBlhC,EAAS2V,GAC7D2c,GACFzxB,OAAO6gB,UACX2J,MAAK,WAAM,WAAAH,cAAa1f,GAAkBk2B,kCAA/B,KACf3Y,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB7gB,GAAkBm2B,+BAAgCpkC,EAAnE,IAGZ,CACJ,CAlFG,CAmFP,OAjFI,YAAAqkC,cAAA,SAAcz2B,GAAd,WACI,OAAO,SAACme,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAa1f,GAAkBq2B,0BAClC,IAAA9U,QAAM,6D,yEAES,O,sBAAA,GAAMlvB,KAAKkjC,sBAAsBa,cACpC/jC,KAAKojC,2BAA2BxhC,UAAU0L,EAASme,EAAMpQ,c,cAO7D,MAAO,CAAP,EAAO,U,OAJkB,O,WAAA,GAAMrb,KAAK4/B,iCAAiC7G,OACjE,I,OAGG,OAJDsI,EAAmB,SAIlB,GAAMrhC,KAAKkjC,sBAAsBa,cACpC/jC,KAAKojC,2BAA2BxhC,WAAU,gCACjC0L,GAAO,CAAE+zB,iBAAgB,IAC9B5V,EAAMpQ,c,2BAInB6P,MACC,IAAA0I,YAAU,SAAC,G,IAAE10B,EAAI,OACb,WAAA6nB,QACI,EAAKoc,oBAAoBd,kBAAzB,CAA4C5W,IAC5C,IAAAgD,KAAG,IAAApB,cAAa1f,GAAkBI,uBAAwB7O,IAF9D,MAMVgsB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB7gB,GAAkBs2B,oBAAqBvkC,EAAxD,IA7BR,CAgCR,EA+CJ,EAzFA,G,GC7BA,WAKI,WAAoBwkC,GAAA,KAAAA,QAAAA,CAAe,CA4BvC,OA1BI,YAAAH,cAAA,SAAc5hC,GAAd,WACI,OAAO,IAAIwyB,SAAQ,SAACyH,EAASxH,GACzB,EAAKsP,QAAQH,cAAc5hC,GAAS,SAACzC,EAAYL,GACzCK,EACAk1B,EAAO,EAAKuP,mBAAmBzkC,IAE/B08B,EAAQ,EAAK+H,mBAAmB9kC,GAExC,GACJ,GACJ,EAEA,YAAAgkC,yBAAA,SAAyBlhC,EAA6B2V,GAAtD,WACI,OAAO,IAAI6c,SAAQ,WACf,EAAKuP,QAAQb,yBAAyBlhC,EAAS,KAAM2V,EACzD,GACJ,EAEQ,YAAAqsB,mBAAR,SAA2B9kC,GACvB,MAAO,CACHF,QAASE,EAASF,QAClBD,KAAMG,EAAS0E,KACf3E,OAAQC,EAASD,OACjBglC,WAAY/kC,EAAS+kC,WAE7B,EACJ,EAjCA,GCIe,SAASC,GACpBrqB,EACAhI,GAEA,IAAIsyB,EAQJ,OCnBW,SAA8BtqB,GAGzC,YAAoC,IAFbA,EAEMzU,EACjC,CDSQg/B,CAAqBvqB,GACrBsqB,EAAYtqB,EAAQzU,GACbyM,GAAgBA,EAAa5R,SACpCkkC,EAAYtyB,EAAa,GAAGzM,IAGzB,CACHA,GAAI++B,EACJrqB,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBC,QAASH,EAAQG,QACjBqqB,aAAcxqB,EAAQI,SACtBqqB,aAAczqB,EAAQK,SACtBC,KAAMN,EAAQM,KACdoqB,SAAU1qB,EAAQO,gBAClBoqB,aAAc3qB,EAAQ4qB,oBACtBC,SAAU7qB,EAAQS,WAClByI,QAASlJ,EAAQkJ,QACjB1I,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQU,MACfC,aAAcX,EAAQW,aAE9B,C,SEvCA,WACI,WAAoBmqB,GAAA,KAAAA,eAAAA,CAAyB,CAKjD,OAHI,YAAAC,UAAA,SAAU1S,GACN,OAAOrK,KAAKgd,MAAM3S,EAASrK,KAAKid,IAAI,GAAIjlC,KAAK8kC,gBACjD,EACJ,EANA,GCGA,ICHKI,GDGCC,GAAc,CAChB,oBACA,sBACA,qBACA,oBACA,iBAQW,SAASC,GAAoBC,GACxC,MAAO,CACH/kC,KAAM+kC,EAAO/kC,KACbglC,SAAUD,EAAOE,YACjBC,aAAcL,GAAYhe,QAAQke,EAAOI,YAEjD,CEde,SAASC,GACpBC,GAEA,MAAO,CACHrlC,KAAMqlC,EAAgBrlC,KACtBslC,iBAAkBD,EAAgBE,KAClCC,iBAAkBH,EAAgBI,UAClCJ,gBAAiB,CACbK,QAASL,EAAgBK,QACzB1lC,KAAMqlC,EAAgBrlC,KACtB2lC,aAAcN,EAAgBM,cAG1C,CCVe,SAASC,GACpBC,EACAC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,MAEQ1oC,OAAOwF,KAAKgjC,GAAsC3mC,QACtD,SAACC,EAAQhC,GAAQ,2BACVgC,EACC0mC,EAAQ1oC,GAAoB4C,KAAI,SAAC+N,GACjC,MAAY,qBAAR3Q,ECfL,SACX2Q,EACAg4B,GAEA,IAAME,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH7gC,GAAI6I,EAAK7I,GACTghC,SAAU,GACV7nC,KAAM0P,EAAK1P,KACX2zB,OAAQjkB,EAAKikB,OACbmU,oBAAqBp4B,EAAKikB,OAC1BiT,SAAU,EACVmB,cAAeH,EAAkBvB,UAAU32B,EAAKikB,QAChDqU,2BAA4BJ,EAAkBvB,UAAU32B,EAAKikB,QAC7DsU,iBAAkBL,EAAkBvB,UAAU32B,EAAKikB,QACnDuU,8BAA+BN,EAAkBvB,UAAU32B,EAAKikB,QAChEwU,gBAAiB,EACjBzU,SAAU,EACV0U,OAAQ14B,EAAK04B,OACbxU,UAAWlkB,EAAKkkB,UAChB3zB,KAAM,4BACNo9B,WAAY,GACZ9J,UAAW,KAEnB,CDT2B8U,CAAqC34B,EAAMg4B,GEXvD,SACXh4B,EACAzP,EACAynC,EACAC,QAAA,IAAAA,IAAAA,EAAA,MAEA,IAAMC,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH7gC,GAAI6I,EAAKi4B,GACTE,SAAUn4B,EAAKm4B,SACflU,OAAQjkB,EAAK44B,kBACbR,oBAAqBp4B,EAAK+jB,kBAC1BmT,SAAUl3B,EAAK64B,eACfR,cAAeH,EAAkBvB,UAAU32B,EAAK44B,mBAChDN,2BAA4BJ,EAAkBvB,UAAU32B,EAAK+jB,mBAC7D0U,gBAAiBP,EAAkBvB,UAAU32B,EAAK64B,gBAClDN,iBAAkBL,EAAkBvB,UAAU32B,EAAK84B,WACnDN,8BAA+BN,EAAkBvB,UAAU32B,EAAK+4B,WAChEC,iBAAmBh5B,EAAqBi5B,gBACxC3oC,KAAM0P,EAAK1P,KACX0zB,SAAUhkB,EAAKgkB,SACfkV,MAAOl5B,EAAKk5B,MACZC,IAAKn5B,EAAKm5B,IACVC,cAAep5B,EAAKo5B,cACpBvV,UAAW7jB,EAAK6jB,UAChBD,UAAW5jB,EAAK4jB,UAChB+J,YAAa3tB,EAAK7L,SAAW,IAAIlC,KAAI,SAAConC,GAAW,OAC7C/oC,KAAM+oC,EAAO/oC,KACbJ,MAAOmpC,EAAOnpC,MAF+B,IAIjDopC,iBAAkBt5B,EAAKs5B,iBACvB/oC,KAAI,EAEZ,CFpBuBgpC,CACHv5B,EAWpB,SAAmCzP,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,GAEnB,CAxBoBipC,CAA0BnqC,GAC1B2oC,EACAC,EAER,IAba,GAejB,GAER,CGnBe,SAASwB,GAAkBhgB,GACtC,ICXAigB,EAEMC,EDSA3B,EAAgBve,EAAS9gB,KAAK4qB,SAASyU,cACvCE,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH7gC,GAAIsiB,EAAS9gB,KAAKxB,GAClB4d,MAAO+iB,GAAuBre,EAAS9gB,KAAKkgB,UAAWmf,GACvDzU,SAAU9J,EAAS9gB,KAAK4qB,SAASrxB,KACjC+kC,OAAQ,CACJO,kBAAkB,IAAApmC,QACdqoB,EAAS9gB,KAAKuB,SACd,SAAC0/B,EAAK3C,GACF,OAAO2C,EAAM3C,EAAOO,gBACxB,GACA,GAEJt9B,QAASuf,EAAS9gB,KAAKuB,QAAQjI,IAAI+kC,KAEvCE,SAAU,CACNjT,OAAQxK,EAAS9gB,KAAKkgC,eACtBR,cAAeH,EAAkBvB,UAAUld,EAAS9gB,KAAKkgC,iBAE7DgB,uBChCJH,EDgCsDjgB,EAASigB,WC9BzDC,EAAwC,IAE7CD,GAAc,IAAI/0B,SAAQ,SAACm1B,IACvBA,EAAUC,SAAW,IAAIp1B,SAAQ,SAACq1B,GAC/BL,EAAct5B,KAAK,CACf45B,aAAc,GACd7C,aAAc,KACdhnC,QAAS,GACT8pC,YAAaF,EAAOG,MAE5B,GACJ,IAEOR,GDkBHpC,gBAAiB,CACb6C,uBAAuB,IAAAhpC,QACnBqoB,EAAShf,kBACT,SAACm/B,EAAKS,GACF,OAAOT,EAAMS,EAAY5C,IAC7B,GACA,GAEJ6C,yBAAyB,IAAAC,OACrB9gB,EAAShf,iBAAiBxI,IAAIqlC,IAC9B,SAGRn0B,SAAU,CACN8gB,OAAQxK,EAAS+gB,kBACjBnC,cAAeH,EAAkBvB,UAAUld,EAAS+gB,mBACpDC,qBAAsBhhB,EAASihB,2BAC/BC,4BAA6BzC,EAAkBvB,UAC3Cld,EAASihB,4BAEbplB,UAAU,IAAAxF,MACN2J,EAAS9gB,KAAKkgB,UAAUC,eACxB,SAAC8hB,GAAa,OAAAA,EAASC,kBAAT,KAGtBC,SAAU,CACN7W,OAAQxK,EAASqhB,SACjBzC,cAAeH,EAAkBvB,UAAUld,EAASqhB,WAExDnhB,YAAa,CACTsK,OAAQxK,EAASze,SAAWye,EAASze,SAAS2e,YAAc,GAEhEohB,YAAa,CACT9W,OAAQxK,EAASuhB,SACjB3C,cAAeH,EAAkBvB,UAAUld,EAASuhB,WAExDC,MAAOxhB,EAASwhB,MAChBD,SAAU,CACN/W,OAAQxK,EAASuhB,SACjB3C,cAAeH,EAAkBvB,UAAUld,EAASuhB,WAExDE,SAAU,CACNjX,OAAQxK,EAAS0hB,kBACjB9C,cAAeH,EAAkBvB,UAAUld,EAAS0hB,oBAExDzhB,WAAY,CACRuK,OAAQxK,EAASC,WACjB2e,cAAeH,EAAkBvB,UAAUld,EAASC,aAGhE,ELxFA,SAAKod,GACD,sBACA,4BACA,qCACA,mCACA,kDACA,uCACA,uCACA,iDACA,+BACA,2CACA,+CACA,mDACA,uCACA,qCACA,2CACA,0BACA,gCACA,kCACA,+CACA,yDACA,qEACA,+CACA,4CACH,CAxBD,CAAKA,KAAAA,GAAwB,KAyB7B,YObe,SAASsE,GACpBpgC,EACA5E,GAEA,IAAMyV,EAAY7Q,EAAS6Q,WAAazV,EAAeyV,WAAa,GAC9DC,EAAW9Q,EAAS8Q,UAAY1V,EAAe0V,UAAY,GAEjE,MAAO,CACHuvB,WAAYrgC,EAASqgC,WAAa,IAAIppC,KAAI,SAAC2Z,GAAY,OAAAqqB,GAAqBrqB,EAArB,IACvD0vB,WAAYtgC,EAAS7D,GACrBupB,QAAS1lB,EAAS0lB,QAClB/G,YAAa3e,EAAS2e,YACtBuH,MAAOlmB,EAASkmB,OAAS9qB,EAAe8qB,OAAS,GACjDrV,UAAS,EACTC,SAAQ,EACRxb,KAAM0K,EAASugC,UAAY,CAAC1vB,EAAWC,GAAUva,KAAK,KACtDiqC,kBAAmBxgC,EAASygC,eAAiBzgC,EAASygC,cAAcnrC,KAE5E,C,SC1BA,wBAgCA,QA/BI,YAAAorC,OAAA,SAAOxrC,GACG,MAA0BA,EAAM2C,MAAM,IAAI4B,OAAO,cAAhD,OAAAknC,OAAK,IAAG,KAAE,EAAE,OAAAC,OAAI,IAAG,KAAE,EACtBC,EAAeF,EAAMlY,MAAM,EAAG,GAC9BqY,EACc,IAAhBF,EAAK5pC,OAAe4pC,EAAKnY,OAAO,GAAKmY,EAAOA,EAAKnY,MAAM,EAAG,GAAKkY,EAAMlY,MAAM,GAG/E,OAAIvzB,EAAM8B,OAAS,EACR2pC,EAIPzrC,EAAM8B,OAAS,IAAM8pC,EACdD,EAGDA,QAAoCC,CAClD,EAEA,YAAAC,SAAA,SAAS7rC,GACC,MAA0BA,EAAM2C,MAAM,IAAI4B,OAAO,cAAhD,OAAAknC,OAAK,IAAG,KAAE,EAAE,OAAAC,OAAI,IAAG,KAAE,EAE5B,MAAK,QAAQ/T,KAAK8T,IAAW,QAAQ9T,KAAK+T,GAInC,CACHD,MAAwB,IAAjBA,EAAM3pC,OAAe,IAAI2pC,EAAUA,EAAMlY,MAAM,EAAG,GACzDmY,KAAsB,IAAhBA,EAAK5pC,OAAe,KAAK4pC,EAASA,EAAKnY,MAAM,EAAG,IAL/C,CAAEkY,MAAO,GAAIC,KAAM,GAOlC,EACJ,EAhCA,GCJM,GAA+BzrC,QAAQ,kB,GCK7C,wBA+BA,QA9BI,YAAAurC,OAAA,SAAOxrC,GACK,IAAAyjB,GAAS,KAAAqoB,QAAO9rC,GAAM,KAE9B,IAAKyjB,EACD,OAAOzjB,EAGX,IAAM+rC,GAAY,IAAApiB,MAAI,KAAAqiB,gBAAehsC,GAAO+B,KAAI,SAACkqC,GAAS,WAAAtiB,KAAIsiB,EAAKC,QAAT,KACpDC,EAAmBzqC,KAAK0qC,SAASpsC,GAAOuzB,MAAM,EAAGwY,GAEvD,OAAOtoB,EAAK4oB,KACP3nC,QAAO,SAAC4nC,GAAa,OAAAH,EAAiBrqC,OAASwqC,CAA1B,IACrBprC,QACG,SAACm2B,EAAQiV,EAAUpoC,GACf,OAACmzB,EAAO9D,MAAM,EAAG+Y,EAAWpoC,GAAQmzB,EAAO9D,MAAM+Y,EAAWpoC,IAAQ7C,KAjB/D,IAiBL,GAGJ8qC,EAEZ,EAEA,YAAAC,SAAA,SAASpsC,GAGL,OAFiB,KAAA8rC,QAAO9rC,GAAM,KAMvBA,EAAMgF,QAAQ,IAAIT,OA/BR,IA+BiC,KAAM,IAH7CvE,CAIf,EACJ,EA/BA,GCsBe,SAASusC,GACpB19B,EACAs0B,QAAA,IAAAA,IAAAA,EAAA,IAEA,IA0F2BhZ,EACrBtF,EA3FAijB,EAAgBj5B,EAAMwkB,SAASyU,cAC/BE,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACH7gC,GAAI4H,EAAM+I,QACViN,MAAO+iB,GAAuB/4B,EAAM8Z,UAAW9Z,EAAMwkB,SAASyU,cAAe,aAC7ElwB,QAAS/I,EAAM+I,QACfyb,SAAUxkB,EAAMwkB,SAASrxB,KACzBwqC,qBAAsB39B,EAAM29B,qBAC5Bx9B,QAASy9B,GAA0B59B,EAAMsb,SAAUgZ,EAAUn0B,SAC7D47B,SAAU,CACN7W,OAAQllB,EAAM69B,WACdvE,cAAeH,EAAkBvB,UAAU53B,EAAM69B,aAErD3F,OAAQ,CACJO,kBAAkB,IAAApmC,QACd2N,EAAM7E,SACN,SAAC0/B,EAAK3C,GACF,OAAO2C,EAAM3C,EAAOO,gBACxB,GACA,GAEJt9B,QAAS6E,EAAM7E,QAAQjI,IAAI+kC,KAE/BE,SAAU,CACNjT,OAAQllB,EAAM85B,eACdR,cAAeH,EAAkBvB,UAAU53B,EAAM85B,iBAErD55B,MAAOo0B,EAAUr0B,WACjBF,YAAau0B,EAAUv0B,YACvB+6B,sBAAuB,GACvBtC,iBA2DuBld,EA3DgBtb,EAAMsb,SA4D3CtF,GAAQ,IAAAngB,QAAOylB,EAAU,CAC3BM,WAAY,oBAGT,CACHyf,uBAAuB,IAAAhpC,QAAO2jB,GAAO,SAAC6kB,EAAK55B,GAAS,OAAAA,EAAKikB,OAAS2V,CAAd,GAAmB,GACvEU,yBAAyB,IAAAC,OACrBxlB,EAAM9iB,KAAI,SAAC+N,GAAS,OAChB9N,KAAM8N,EAAKlO,OAAOI,KAClBslC,iBAAkBx3B,EAAKikB,OACvByT,iBAAkB13B,EAAKlO,OAAO6lC,UAC9BJ,gBAAiB,CACbK,QAAS53B,EAAKikB,OAASjkB,EAAKlO,OAAO6lC,UACnCzlC,KAAM8N,EAAKlO,OAAOI,KAClB2lC,aAAc,IAPF,IAUpB,UA5EJgF,WAAYC,GAA4B/9B,GACxC/N,OAAQ+N,EAAM/N,OACd+rC,gBAAiBh+B,EAAMg+B,gBACvBC,eAAgBj+B,EAAMi+B,eACtBC,WAAYl+B,EAAMk+B,WAClB95B,SAAU,CACN8gB,OAAQllB,EAAMy7B,kBACdnC,cAAeH,EAAkBvB,UAAU53B,EAAMy7B,mBACjDC,qBAAsB17B,EAAM27B,2BAC5BC,4BAA6BzC,EAAkBvB,UAC3C53B,EAAM27B,6BAGd/gB,YAAa,CACTsK,OAAQiZ,GAAiBn+B,EAAMsb,WAEnC4gB,MAAOl8B,EAAMk8B,MACbD,SAAU,CACN/W,OAAQllB,EAAMi8B,SACd3C,cAAeH,EAAkBvB,UAAU53B,EAAMi8B,WAErDE,SAAU,CACNjX,OAAQllB,EAAMo8B,kBACd9C,cAAeH,EAAkBvB,UAAU53B,EAAMo8B,oBAErDzhB,WAAY,CACRuK,OAAQllB,EAAMo+B,YACd9E,cAAet5B,EAAMq+B,sBAGjC,CAsBA,SAASF,GAAiB7iB,GACtB,IAAMra,GAAO,IAAA+P,MAAKsK,EAAU,CAAEM,WAAY,gBAE1C,OAAO3a,EAAOA,EAAKikB,OAAS,CAChC,CAyBA,SAAS0Y,GACLtiB,EACAnb,QAAA,IAAAA,IAAAA,EAAA,IAEA,IArCgClO,EAqC1BgP,GAAO,IAAA+P,MAAKsK,EAAUgjB,IAE5B,OAAKr9B,EAIE,CACH7I,GAAI6I,EAAK2a,WACT3pB,QA7C4BA,EA6COgP,EAAKlO,OAAOgpB,KA5C5C,kBAAkB9pB,GA6CrBssC,SAAUt9B,EAAKlO,OAAOyrC,aACtBC,UAAWt+B,EAAQs+B,WAPZ,CAAC,CAShB,CAEA,SAASH,GAAsBn+B,GAC3B,MAA8B,oBAAvBA,EAAQyb,YAA2D,gBAAvBzb,EAAQyb,UAC/D,CAEA,SAASmiB,GACL/9B,GAEA,IAAM0+B,EAAiE,CAAC,EAOxE,OANc,oBAAI1+B,EAAM8Z,UAAUC,cAAkB/Z,EAAM8Z,UAAU2K,cAE9D7e,SAAQ,SAAC3E,GAOnB,IAAiC46B,EANzB6C,EAAiBz9B,EAAK7I,KAMGyjC,EAN2B56B,EAO1C,CAAC,KAAM,KAAM,MAEd5O,QAAO,SAACyrC,EAAY3qC,GAC7B,IAAM8N,EACF46B,EAAS8C,cAAe,IAAA3tB,MAAK6qB,EAAS8C,aAAa,SAAC19B,GAAS,OAAAA,EAAK9N,OAASA,CAAd,IAEjE,OAAK8N,GAIL68B,EAAW3qC,GAAQ,CACf5B,KAAMsqC,EAAStqC,KACfqtC,YAAa/C,EAAStqC,KACtBstC,MAAOhD,EAASzC,SAChBhY,IAAKngB,EAAKkxB,KACV2M,UAAW79B,EAAKm6B,KAChB2D,YAAa99B,EAAKkxB,KAClB6M,YAAa/9B,EAAKg+B,QAClBC,YAAaj+B,EAAK9N,MAGf2qC,GAdIA,CAef,GAAG,CAAC,GA5BJ,IAEOY,CACX,CCzKe,SAASS,GACpB7E,EACA8E,GAEA,MAAO,CACHR,YAAatE,EAAOsE,YACpB7uC,OAAQuqC,EAAO9oC,KACf6tC,MAAO/E,EAAOgF,KACdlnC,GAAIkiC,EAAOliC,GACXmnC,SAAUH,EACVI,cAAelF,EAAOkF,cACtBpG,SAAUkB,EAAOlB,SACjBqG,YAAanF,EAAOmF,YAE5B,C,SCKA,wBACY,KAAAC,qBAAuB,IAAI,GAC3B,KAAAC,qBAAuB,IAAI,EAgMvC,QA9LI,YAAAlrC,UAAA,SAAU0L,EAAkBy/B,GACxB,I3BLEC,E2BKIxoC,EAAiBuoC,EAAcvoC,eAAesW,oBAC9C+M,EAAWklB,EAAcllB,SAAS1L,cAClC/S,EAAW2jC,EAAc3jC,SAASyS,cAClC1O,EAAQ4/B,EAAc5/B,MAAMmb,WAC5B9G,EAAgBurB,EAAc7oB,eAAeE,iBAC/C9W,EAAQ/F,SACR+F,EAAQ+W,WAENzB,EAAkB5iB,KAAKitC,oBAAoBF,EAAevrB,GAC1DxP,EAAe+6B,EAAc/6B,aAAaiU,kBAC1CinB,EAAiBH,EAAc/6B,aAAauU,oBAC5CxH,EAAcguB,EAActiB,OAAO9L,iBACnCwuB,EAAgBJ,EAActiB,OAAOxL,mBACrCuiB,EAAiBuL,EAAcxrB,YAAYe,qBAC3C8qB,EAAcL,EAAc7oB,eAAeC,wBAC3Csd,EAAYsL,EAAc5/B,MAAMqb,eAChC6kB,EACFjkC,GAAY5E,GAAkBglC,GAAsBpgC,EAAU5E,GAE5Do9B,EACFJ,GACAl0B,EAAQo0B,cACPJ,GAAoBh0B,EAAQo0B,e3B3B/BsL,E2B4BmC1/B,EAAQo0B,Y3B3B5C8B,oBAO2C,iBAArCwJ,EAAoBvJ,cAC3B5f,QAAQmpB,EAAoBvJ,cAAgBuJ,EAAoBvJ,aAAap2B,S2BoBhE0/B,EAAcz/B,QAAQ0P,kBAAiB,KAAKwkB,EAAeK,iBAC9DkL,EAAcz/B,QAAQ0P,kBAEhC,IAAK4kB,EACD,MAAM,IAAI,GAAiBvrB,GAAqBY,qBAGpD,MAAO,CACHoqB,iBAAkB/zB,EAAQ+zB,iBAC1BO,UAAS,EACTx4B,SAAUikC,EACV7oC,eAAgBA,GAAkB6/B,GAAqB7/B,GACvDoe,gBAAiBA,GAAmByhB,GAAqBzhB,EAAiB5Q,GAC1Ek7B,eAAgBA,GAAkBZ,GAA4BY,GAAgB,GAC9EnmC,KAAM8gB,GAAYggB,GAAkBhgB,GACpC1a,MAAOA,GAAS09B,GAAmB19B,EAAOs0B,GAC1CA,UAAS,EACTn0B,QAASA,EAAQo0B,YACjBlgB,cACIA,GAAiBxhB,KAAKstC,wBAAwB9rB,EAAezC,GACjEwuB,UAAW,CACPC,SAAS,gCACFJ,GAAW,CACdK,eAAgBN,GAAiBA,EAAcM,kBAGvDC,OAAQ,8BACRjiB,OAAO,IAAAnd,MAAKyQ,GAAeA,EAAY4uB,aAAc,CACjD,YACA,UACA,gBACA,cAGZ,EAEA,YAAAC,4BAAA,SACIxvB,EACAra,EACAulB,GAGI,IAAA+X,EASAt9B,EAAI,iBARJ69B,EAQA79B,EAAI,UAPJ8jB,EAOA9jB,EAAI,SANJ0mB,EAMA1mB,EAAI,OALJoJ,EAKApJ,EAAI,MAJJ09B,EAIA19B,EAAI,UAHJ,EAGAA,EAAI,QAHJuJ,OAAO,IAAG,GAAC,EAAC,EACZkU,EAEAzd,EAAI,cADJ49B,EACA59B,EAAI,kBACFuhB,EAAcuC,GAAYA,EAAS7V,aAAa,GAChD4Q,EAAkB0C,GAAeA,EAAY1C,gBAC7CsqB,EAAiB5nB,GAAeA,EAAYkB,uBAElD,MAAO,CACH6a,iBAAgB,EAChBO,UAAS,EACTpgB,cAAeA,GAAiBxhB,KAAKstC,wBAAwB9rB,GAC7DpY,SACI+D,GACAA,EAAM3I,gBACNqjB,GACA2hB,GAAsB3hB,EAASze,SAAU+D,EAAM3I,gBACnDA,eACI2I,GAASA,EAAM3I,gBAAkB6/B,GAAqBl3B,EAAM3I,gBAChEoe,gBACIA,GACAiF,GACAwc,GAAqBzhB,EAAiBiF,EAAS7V,cACnDk7B,eAAgBA,GAAkBZ,GAA4BY,GAAgB,GAC9EnmC,KAAM8gB,GAAYggB,GAAkBhgB,GACpC1a,MAAOA,GAAS09B,GAAmB19B,EAAOs0B,GAC1CA,UAAS,EACTn0B,QAAStN,KAAK6tC,4BAA4BzvB,EAAQ9Q,EAASgc,GAC3DikB,UAAW,CACPC,SAAS,gCACF7L,GAAiB,CACpB8L,eAAgBhjB,GAAUA,EAAO/L,QAAQ+uB,kBAGjDC,OAAQ,8BACRjiB,MACIhB,IACA,IAAAnc,MAAKmc,EAAO1L,YAAY4uB,aAAc,CAClC,YACA,UACA,gBACA,cAGhB,EAEQ,YAAAL,wBAAR,SACI9rB,EACAzC,GAEA,MAA6B,iBAAzByC,EAAc9I,QAA8B8I,EAAc5S,QAI1D4S,EAAcssB,oBAAsBtsB,EAAcssB,mBAAmBl/B,SAC9D,gCAAK4S,GAAa,CAAEjc,GAAIic,EAAcssB,mBAAmBl/B,UAGhE4S,EAAcjc,KAAO,oBACd,gCAAKic,GAAa,CAAEjc,GAAI,sBAK/Bic,EAAc5S,UAAY,yBAC1BmQ,aAAW,EAAXA,EAAa2U,iBAAiBqa,SAAS,+CAEhC,gCACAvsB,GAAa,CAChB5S,QAAS,mCAIV4S,GAtBI,gCAAKA,GAAa,CAAE5S,QAAS4S,EAAcjc,IAuB1D,EAEQ,YAAAsoC,4BAAR,SACIzvB,EACA9Q,EACAgc,GAEA,MAAO,iBAAkBhc,GACnB,gCACOA,GAAO,CACV0gC,MAAO5vB,EAAO6vB,qBACdC,SACI9vB,EAAO+vB,wBACPnuC,KAAK8sC,qBAAqBpC,SAAStsB,EAAO+vB,wBAC9CC,gBAAiB9kB,KAErB,gCACOhc,GAAO,CACV0gC,MAAO5vB,EAAOiwB,SACdC,SAAUtuC,KAAK6sC,qBAAqB1C,SAAS/rB,EAAOmwB,YAAc,IAClEC,OAAQpwB,EAAOqwB,UAAY,GAC3BP,SAAUluC,KAAK8sC,qBAAqBpC,SAAStsB,EAAOswB,YAAc,IAClEN,gBAAiB9kB,GAE/B,EAEQ,YAAA2jB,oBAAR,SACIF,EACAvrB,G,YAEA,GAAIA,EAAe,CACf,IAAMmtB,EAAwD,QAA1C,EAAmC,QAAnC,EAAGntB,EAAcssB,0BAAkB,eAAEc,aAAK,eAAEC,QAC1DC,EAAyD,QAA1C,EAAmC,QAAnC,EAAGttB,EAAcssB,0BAAkB,eAAEc,aAAK,eAAEE,gBAC3D98B,EAAe+6B,EAAc/6B,aAAaiU,kBAC1C8oB,EAAW/8B,aAAY,EAAZA,EAAcoZ,OAAM,SAAC9F,GAAgB,OAAAA,EAAYC,oBAAZ,IAEtD,GAAIopB,GAAkBI,GAAgC,SAApBD,EAC9B,M,CAIR,OAAO/B,EAAcnqB,gBAAgBxG,oBACzC,EACJ,EAlMA,GC3BA,IAAY4yB,IAAZ,SAAYA,GACR,mEACA,0EACA,uEACH,CAJD,CAAYA,KAAAA,GAAgB,K,SCyC5B,WACI,WACYC,EACA/e,GADA,KAAA+e,0BAAAA,EACA,KAAA/e,uBAAAA,CACT,CAidP,OA/cI,YAAAgf,uBAAA,SACI5pB,EACA/iB,GAFJ,WAII,OAAO,SAACkpB,GACJ,IAAM1pB,EAAQ0pB,EAAMpQ,WAGpB,IAFiBtZ,EAAM8lB,SAAS1L,cAG5B,MAAM,IAAI,GAAiB9F,GAAqBK,iBAGpD,IAAMsD,EAAU,EAAKm1B,uBAAuB7pB,GACtCA,EAAYtL,QACZsL,EAAY1C,gBAEZwsB,EAAsBrtC,EAAMiQ,aAAaoU,wBAAwBpM,GAEvE,IAAKo1B,EACD,MAAM,IAAI,GAAqB,kDAGnC,IAAMnoB,EAAY,EAAKooB,iBACnB/pB,EAAY2B,UACZmoB,EACArtC,EAAMgF,KAAK+W,WAGf,OAAKmJ,EAAU7mB,OAIR,EAAKkvC,kBACR,CACI/pC,GAAI6pC,EAAoB7pC,GACxByU,QAAO,EACPiN,UAAS,GAEb1kB,EANG,CAOLkpB,GAVS,EAAK8jB,kBAAkBH,EAAoB7pC,GAAIhD,EAA/C,CAAwDkpB,EAWvE,CACJ,EAEA,YAAA+jB,qBAAA,SACIlqB,EACA/iB,GAFJ,WAII,OAAO,SAACkpB,GACJ,IAAM1pB,EAAQ0pB,EAAMpQ,WACdrB,EAAU,EAAKm1B,uBAAuB7pB,GACtCA,EAAYtL,QACZsL,EAAY1C,gBACZwsB,EAAsBrtC,EAAMiQ,aAAaoU,wBAAwBpM,GAEvE,OAAO,EAAKy1B,2BACR,CACIlqC,GAAI6pC,GAAuBA,EAAoB7pC,GAC/CyU,QAAO,EACPiN,UAAW,EAAKyoB,cACZpqB,EAAY2B,UACZmoB,EACArtC,EAAMgF,KAAK+W,YAGnBvb,EAVG,CAWLkpB,EACN,CACJ,EAEA,YAAAkkB,qBAAA,SACIpqC,EACAhD,GAFJ,WAII,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMprB,EAAQ0pB,EAAMpQ,WACdwM,EAAW9lB,EAAM8lB,SAAS1L,cAC1BnK,EAAejQ,EAAMiQ,aAAaiU,kBAExC,IAAK4B,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,IAAK1E,IAAiBA,EAAa5R,OAC/B,MAAM,IAAI,GAAiBiW,GAAqBI,qBAGpD,IAAMm5B,EAAwB,CAC1BrqC,GAAIyM,EAAa,GAAGzM,GACpBsqC,iBAAkBtqC,GAGhBuqC,EAAkB,CACpBvqC,GAAIyM,EAAa,GAAGzM,IAGxB4nB,EAASC,MACL,IAAAC,cACIlnB,EAAsBuM,mCACtBjP,EACAqsC,IAIR,EAAKb,0BACAK,kBAAkBznB,EAAStiB,GAAIqqC,EAAuBrtC,GACtDirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cACIlnB,EAAsBM,8BACtBvH,EACA4wC,IAIR3iB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI7nB,EAAsBwM,2BACtBtT,EACAywC,GAGZ,GACR,GApDA,CAqDR,EAEA,YAAAC,oBAAA,SACIxtC,GADJ,WAGI,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMtF,EAAW4D,EAAMpQ,WAAWwM,SAAS1L,cAE3C,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpDyW,EAASC,MAAK,IAAAC,cAAalnB,EAAsB+L,+BAEjD,EAAKge,uBACAG,aAAaxI,EAAStiB,IAAI,gCACpBhD,GAAO,CACV+qB,OAAQ,CACJwC,QAAS,CAACkf,GAAiBgB,8BAGlCxiB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cAAalnB,EAAsBO,6BAA8BxH,IAErEiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI7nB,EAAsBgM,0BACtB9S,GAGZ,GACR,GA9BA,CA+BR,EAEA,YAAAgwB,cAAA,SACIrV,EACAzX,GAFJ,WAII,OAAO,SAACkpB,GACJ,IAAMnG,EAAc,EAAK2qB,6BAA6Bj2B,EAASyR,GACzDzZ,EAAeyZ,EAAMpQ,WAAWrJ,aAAaiU,kBAMnD,OAJIjU,GAAgBA,EAAa5R,SAC5BklB,EAA6C/f,GAAKyM,EAAa,GAAGzM,IAGhE,EAAKkqC,2BAA2BnqB,EAAa/iB,EAA7C,CAAsDkpB,EACjE,CACJ,EAEA,YAAAykB,mBAAA,SACIl+B,EACAzP,GAFJ,WAII,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMtF,EAAW4D,EAAMpQ,WAAWwM,SAAS1L,cAE3C,IAAK0L,IAAaA,EAAStiB,GACvB,MAAM,IAAI,GAAiB8Q,GAAqBK,iBAGpDyW,EAASC,MAAK,IAAAC,cAAalnB,EAAsBiM,8BAEjD,EAAK68B,0BACAiB,mBAAmBroB,EAAStiB,GAAIyM,EAAczP,GAC9CirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cAAalnB,EAAsBG,4BAA6BpH,IAEpEiuB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI7nB,EAAsBkM,yBACtBhT,GAGZ,GACR,GAzBA,CA0BR,EAEA,YAAAiwC,kBAAA,SACIhqB,EACA/iB,GAFJ,WAII,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMtF,EAAW4D,EAAMpQ,WAAWwM,SAAS1L,cAE3C,IAAK0L,IAAaA,EAAStiB,GACvB,MAAM,IAAI,GAAiB8Q,GAAqBK,iBAGpD,IAAMo5B,EAAkB,CAAEvqC,GAAI+f,EAAY/f,IAE1C4nB,EAASC,MACL,IAAAC,cACIlnB,EAAsBmM,gCACtB7O,EACAqsC,IAIR,EAAKb,0BACAK,kBAAkBznB,EAAStiB,GAAI+f,EAAa/iB,GAC5CirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cACIlnB,EAAsBK,2BACtBtH,EACA4wC,IAGR3iB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI7nB,EAAsBoM,wBACtBlT,EACAywC,GAGZ,GACR,GAtCA,CAuCR,EAEA,YAAAP,kBAAA,SACI77B,EACAnR,GAFJ,WAII,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMtF,EAAW4D,EAAMpQ,WAAWwM,SAAS1L,cACrC2zB,EAAkB,CAAEvqC,GAAImO,GAE9B,IAAKmU,IAAaA,EAAStiB,GACvB,MAAM,IAAI,GAAiB8Q,GAAqBK,iBAGpDyW,EAASC,MACL,IAAAC,cACIlnB,EAAsBqM,gCACtB/O,EACAqsC,IAIR,EAAKb,0BACAM,kBAAkB1nB,EAAStiB,GAAImO,EAAenR,GAC9CirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cACIlnB,EAAsBI,2BACtBrH,EACA4wC,IAGR3iB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI7nB,EAAsBsM,wBACtBpT,EACAywC,GAGZ,GACR,GArCA,CAsCR,EAEA,YAAAK,qBAAA,SACI7qB,EACA/iB,GAFJ,WAII,OAAO,SAACkpB,GACJ,SAAAQ,WAAA,QAAkB,SAACkB,GACf,IAAMtF,EAAW4D,EAAMpQ,WAAWwM,SAAS1L,cAE3C,IAAK0L,IAAaA,EAAStiB,GACvB,MAAM,IAAI,GAAiB8Q,GAAqBK,iBAGpD,IAAMo5B,EAAkB,CAAEvqC,GAAI+f,EAAY/f,IAE1C4nB,EAASC,MACL,IAAAC,cACIlnB,EAAsBuM,mCACtBjP,EACAqsC,IAIR,EAAKb,0BACAK,kBAAkBznB,EAAStiB,GAAI+f,EAAa/iB,GAC5CirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cACIlnB,EAAsBM,8BACtBvH,EACA4wC,IAGR3iB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI7nB,EAAsBwM,2BACtBtT,EACAywC,GAGZ,GACR,GAtCA,CAuCR,EAEQ,YAAAL,2BAAR,SACInqB,EACA/iB,GAFJ,WAII,OAAO,SAACkpB,GACJ,IAAM5D,EAAW4D,EAAMpQ,WAAWwM,SAAS1L,cAE3C,IAAK0L,IAAaA,EAAStiB,GACvB,MAAM,IAAI,GAAiB8Q,GAAqBK,iBAGpD,OAAI,EAAK05B,4BAA4B9qB,GAC1B,EAAKgqB,kBAAkBhqB,EAAa/iB,EAApC,CAA6CkpB,GAGjD,EAAKykB,mBAAmB,CAAC5qB,GAAc/iB,EAAvC,CAAgDkpB,EAC3D,CACJ,EAEQ,YAAAwkB,6BAAR,SACIj2B,EACAyR,GAEA,IACM1kB,EADQ0kB,EAAMpQ,WACDtU,KAAK+W,UAExB,IAAK/W,EACD,MAAM,IAAI,GAAiBsP,GAAqBG,aAG9C,MAAsCzP,EAAKkgB,UAAzCC,EAAa,gBAAE,IAAAmpB,YAAAA,OAAW,IAAG,KAAE,EAEvC,MAAO,CACHr2B,QAAO,EACPiN,WAAW,oBAAIC,EAAkBmpB,GAAahwC,KAAI,SAAC+N,GAAS,OACxDkiC,OAAQliC,EAAK7I,GACb6sB,SAAUhkB,EAAKgkB,SAFyC,IAKpE,EAEQ,YAAAid,iBAAR,SACIpoB,EACA3B,EACAve,GAEA,IAAKA,EACD,MAAM,IAAI,GAAiBsP,GAAqBG,aAGpD,OAAOxW,KAAKuwC,kBAAkBjrB,EAAY0B,YAAajgB,GAClD1G,KAAI,SAACqO,GACF,IAAM8hC,GAAa,IAAAryB,MACf8I,GACA,SAAC+hB,GAAa,OAAAA,EAASsH,SAAW5hC,EAAa4hC,MAAjC,IAGlB,OAAO,gCACA5hC,GAAY,CACf0jB,SAAUoe,EACJ9hC,EAAa0jB,SAAWoe,EAAWpe,SACnC1jB,EAAa0jB,UAE3B,IACCpvB,QAAO,SAACgmC,GAAa,OAAAA,EAAS5W,SAAW,CAApB,GAC9B,EAEQ,YAAAsd,cAAR,SACIzoB,EACA3B,EACAve,GAEA,IAAKue,EACD,OAAO2B,EAGX,IAAKlgB,EACD,MAAM,IAAI,GAAiBsP,GAAqBG,aAGpD,OAAOyQ,EACFF,OAAO/mB,KAAKuwC,kBAAkBjrB,EAAY0B,YAAajgB,IACvD/D,QAAO,SAACgmC,GAAa,OAAAA,EAAS5W,SAAW,CAApB,GAC9B,EAEQ,YAAAme,kBAAR,SAA0BvpB,EAAuBjgB,GAC7C,OAAOigB,EAAY3mB,KAAI,SAACiwC,GACpB,IAAMliC,GAAO,IAAA+P,MAAKpX,EAAKkgB,UAAUC,eAAe,SAAC8hB,GAAa,OAAAA,EAASzjC,KAAO+qC,CAAhB,IAE9D,MAAO,CACHA,OAAM,EACNle,SAAUhkB,EAAOA,EAAKgkB,SAAW,EAEzC,GACJ,EAEQ,YAAAge,4BAAR,SACI5C,GAIA,QAFsBA,EAECjoC,EAC3B,EAEQ,YAAA4pC,uBAAR,SACI7pB,GAIA,MAA8B,iBAAhBA,GAA4B,YAAaA,CAC3D,EACJ,EArdA,GC5BA,IAAMmrB,GAAmB,CACrB,wCACA,uCACA,sCACA,WACA,sB,SAGJ,WACI,WAAoBxjB,GAAA,KAAAA,eAAAA,CAAgC,CA2DxD,OAzDI,YAAAijB,mBAAA,SACIvgB,EACA3d,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxEqc,EAAO,UAAE,IAAAf,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAEtBvB,EAAM,6BAA6BoB,EAAU,gBAC7CxwB,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe8C,KAAKxB,EAAK,CACjCrvB,KAAM8S,EACNsb,OAAQ,CACJwC,QAASgB,GAAoB2f,GAAkB3gB,IAEnD3wB,QAAO,EACPkvB,QAAO,GAEf,EAEA,YAAAihB,kBAAA,SACI3f,EACArK,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE+I,EAAO,UAAE,IAAAf,OAAUwC,QAAV,MAAsB,CAAC,EAAC,GAAP,QAEpBvqB,EAAgB+f,EAAW,GAApBpmB,GAAI,YAAKomB,EAAlB,QACAiJ,EAAM,6BAA6BoB,EAAU,iBAAiBpqB,EAC9DpG,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe+C,IAAIzB,EAAK,CAChCrvB,KAAI,EACJouB,OAAQ,CACJwC,QAASgB,GAAoB2f,GAAkB3gB,IAEnD3wB,QAAO,EACPkvB,QAAO,GAEf,EAEA,YAAAkhB,kBAAA,SACI5f,EACAjc,EACA,G,IAAE2a,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,6BAA6BoB,EAAU,iBAAiBjc,EAC9DvU,GAAU,eACZmvB,OAAQ,WACLF,IAED0B,EAAUa,GAAa8f,IAE7B,OAAOzwC,KAAKitB,eAAeqH,OAAO/F,EAAK,CAAEjB,OAAQ,CAAEwC,QAAO,GAAI3wB,QAAO,EAAEkvB,QAAO,GAClF,EACJ,EA5DA,G,GCNA,WACI,WACYyK,EACA7L,GADA,KAAA6L,iBAAAA,EACA,KAAA7L,eAAAA,CACT,CA8GP,OA5GI,YAAAyjB,WAAA,SACInuC,GADJ,WAGI,OAAO,SAACkpB,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAaxX,GAAyB5L,yBAAqBxG,KAC9D,IAAAyrB,QAAM,6D,+EAgBF,OAfMyhB,EAA0BpuC,EAC1BA,EAAQkF,YACR,0BAEDlF,GAAYizB,SAASmE,eAAegX,MAC/BC,EAAwBpb,SAASW,cAAc,QAE/B2D,aAAa,KAAM6W,GACzCnb,SAASt2B,KAAK66B,YAAY6W,IAGxB7uC,EAAQ0pB,EAAMpQ,WACd0D,EAAchd,EAAM0oB,OAAOzL,wBAC3Bwa,EAAmBza,EAAY2U,iBAAiBmd,uBAEtD,GAAM7wC,KAAK84B,iBAAiBkB,KAAK2W,EAAyBnX,I,OAE1D,OAFA,SAEO,CAAP,GAAO,IAAAnM,cAAaxX,GAAyB/L,sB,WAEnDohB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB3Y,GAAyBzL,iBAAkB1K,EAA5D,IAxBR,CA2BR,EAEA,YAAAoxC,6BAAA,sBACI,OAAO,SAACrlB,GACJ,WAAAyD,QAAM,WACF,IACMrH,EADQ4D,EAAMpQ,WACGwM,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,OAAO,IAAAqQ,SACH,IAAA0H,KAAG,IAAApB,cAAaxX,GAAyBk7B,2BACzC,IAAA9lB,MAAK,EAAK4I,SAAL,CAAepI,IAAQP,MACxB,IAAA0I,YAAU,SAAC5xB,GACP,OACKmxB,GAAuCnxB,IACvCA,EAAOG,SAKL,IAAA8oB,MACH,EAAKgC,eAAewF,SAAS5K,EAAStiB,GAAIvD,EAAOG,QAAQkL,QAC3D6d,MACE,IAAA0I,YAAU,SAAC,G,IAAE10B,EAAI,OACb,WAAA6nB,SACI,IAAA0H,IAAGzsB,IACH,IAAAysB,KACI,IAAApB,cACIxX,GAAyBI,wBACzB/W,IALZ,MAPG,IAAAuvB,IAAGzsB,EAkBlB,MAENkpB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB3Y,GAAyBm7B,qBAAsBtxC,EAAhE,IAGZ,GAzCA,CA0CR,EAEA,YAAAm0B,QAAA,sBACI,OAAO,SAACpI,GACJ,WAAA1E,SACI,IAAA0H,KAAG,IAAApB,cAAaxX,GAAyBpG,mBACzC,EAAKihC,YAAL,CAAkBjlB,GAClB,EAAKqN,iBACAjF,UACA3I,MAAK,IAAAmM,MAAK,IACVnM,MACG,IAAA0I,YAAU,SAAO,G,IAAEl0B,EAAK,QAAE2N,EAAK,Q,4FAC3B,GAAI3N,aAAiB,GACjB,MAAMA,EAGV,GAAIA,IAAU2N,EACV,MAAM,IAAI,GAGd,MAAO,CAAP,GAAO,IAAAggB,cAAaxX,GAAyBnG,iBAAkB,CAC3DrC,MAAK,I,YAIvB6d,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiB3Y,GAAyBhG,cAAenQ,EAAzD,IAvBR,CA0BR,EACJ,EAlHA,G,GCVA,WACI,WAAoButB,GAAA,KAAAA,eAAAA,CAAgC,CAexD,OAbI,YAAAwF,SAAA,SACI9C,EACAtiB,EACA,G,IAAEghB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,6BAA6BoB,EAAU,mBAC7CxwB,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe8C,KAAKxB,EAAK,CAAErvB,KAAM,CAAEmO,MAAK,GAAIlO,QAAO,EAAEkvB,QAAO,GAC5E,EACJ,EAhBA,G,GCAA,YACI,WAAYhvB,GAAZ,MACI,YAAMA,IAAS,K,OAEf,EAAKX,KAAO,2BACZ,EAAKC,KAAO,uB,CAChB,CACJ,OAPsD,oBAOtD,EAPA,CAAsD,G,GCUtD,WACI,WAAoBsyC,GAAA,KAAAA,4BAAAA,CAA0D,CAyBlF,OAvBI,YAAAvhB,oBAAA,SACInF,EACAhoB,GAFJ,WAII,OAAO,IAAAwkB,SACH,IAAA0H,KAAG,IAAApB,cAAa9rB,EAAwBsD,gCACxC,IAAAqqB,QAAM,6D,uEACe,SAAMlvB,KAAKixC,4BAA4BvhB,oBACpDnF,EACAhoB,I,OAGJ,OALQrD,EAAS,SAGhB,KAEM,CAAP,GAAO,IAAAmuB,cAAa9rB,EAAwBuD,6BAA8B5F,I,WAEhFgsB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GACIjtB,EAAwByD,0BACxB,IAAI,GAAyBtF,GAFjC,IAMZ,EACJ,EA1BA,G,GCTA,WACI,WAAoButB,GAAA,KAAAA,eAAAA,CAAgC,CAcxD,OAZI,YAAAyC,oBAAA,SACInF,EACA,G,IAAE8D,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGHlvB,GAAU,eACZmvB,OAAQ,WACLF,IAGP,OAAOpuB,KAAKitB,eAAe8C,KANf,gCAMyB,CAAE7wB,KAAMqrB,EAAeprB,QAAO,EAAEkvB,QAAO,GAChF,EACJ,EAfA,GCFA,IAAM6iB,IAAY,IAAAx5B,UAAQ,SAAIy5B,GAC1B,OAAItxC,MAAMC,QAAQqxC,GAENA,EAAgB9wC,KAAI,SAAC/B,GAAsB,OAAA8yC,GAAc9yC,EAAd,IAGnDqD,EAAcwvC,GACNxzC,OAAOwF,KAAKguC,GAA0B3xC,QAC1C,SAACC,EAAQhC,G,MAAQ,OAAC,gCACXgC,KAAM,MACRhC,GAAM2zC,GAAcD,EAAM1zC,IAAK,GAFnB,GAIjB,CAAC,GAIF0zC,CACX,IAKAD,GAAUG,MAAQ,IAAI5kB,QAQtB,IAAM2kB,GAAgB,SAAID,GACtB,MAAwB,iBAAVA,GAAgC,OAAVA,EAAiBD,GAAUC,GAASA,CAC5E,EAMe,SAASG,GAA4BtlB,GAChD,OAAO,W,IAAE,sDAAmB,OAAAolB,GAAcplB,EAAE,aAAIzU,GAAM,CAC1D,CCvCe,SAASg6B,GAAkC,G,IACtD,IAAA/sC,eAAkBsW,EAAiB,oBAAEC,EAAwB,2BAC7D,IAAAhU,KAAQ+W,EAAO,UAAEC,EAAc,iBAC/B,IAAA8J,SAAY1L,EAAW,cAAEuL,EAAkB,qBAC3C,IAAA+C,OAAUrL,EAAO,UAAEE,EAAS,YAAEX,EAAc,iBAAEK,EAAqB,wBACnE,IAAAhN,aAAgBiU,EAAe,kBAAEC,EAAsB,yBACvD,IAAA9c,SAAYyS,EAAW,cAAEC,EAAkB,qBAC3C,IAAAyF,YAAeI,EAAiB,oBAAEM,EAAwB,2BAC1D,IAAA9U,MAASmb,EAAQ,WAAEC,EAAe,kBAClC,IAAAjb,QACI0P,EAAe,kBACfC,EAAsB,yBACtBL,EAAY,eACZC,EAAmB,sBACnBC,EAAgB,mBAChBC,EAAuB,0BACvBG,EAAqB,wBACrBC,EAA4B,+BAC5BC,EAAqB,wBAEzB,IAAA8G,eAAkBE,EAAgB,mBAAEE,EAAuB,0BACvBktB,EAA0B,kCAC9D,IAAA5uB,gBACIxG,EAAkB,qBAClBC,EAAyB,4BACzBC,EAAoB,uBACpBC,EAA2B,8BAG/B,MAAO,CACH6C,QAAS,GAAMA,GACfE,UAAW,GAAMA,GACjBxE,kBAAmB,GAAMA,GACzBC,yBAA0B,GAAMA,GAChC+C,QAAS,GAAMA,GACfC,eAAgB,GAAMA,GACtB5B,YAAa,GAAMA,GACnBuL,mBAAoB,GAAMA,GAC1B/I,eAAgB,GAAMA,GACtBK,sBAAuB,GAAMA,GAC7BiH,gBAAiB,GAAMA,GACvBC,uBAAwB,GAAMA,GAC9BrK,YAAa,GAAMA,GACnBC,mBAAoB,GAAMA,GAC1B6F,kBAAmB,GAAMA,GACzBM,yBAA0B,GAAMA,GAChCqG,SAAU,GAAMA,GAChBC,gBAAiB,GAAMA,GACvBvL,gBAAe,EACfC,uBAAsB,EACtBL,aAAY,EACZC,oBAAmB,EACnBC,iBAAgB,EAChBC,wBAAuB,EACvBG,sBAAqB,EACrBC,6BAA4B,EAC5BiH,iBAAkB,GAAMA,GACxBE,wBAAyB,GAAMA,GAC/BlI,mBAAoB,GAAMA,GAC1BC,0BAA2B,GAAMA,GACjCC,qBAAsB,GAAMA,GAC5BC,4BAA6B,GAAMA,GACnCa,sBAAqB,EACrBo0B,2BAA0B,EAElC,C,SC1CA,WAGI,WACYjQ,EACAkQ,EACAne,EACAoe,EACAvO,EACAwO,EACAC,EACAC,EACAC,EACAC,EACAC,GAVA,KAAAzQ,OAAAA,EACA,KAAAkQ,wBAAAA,EACA,KAAAne,uBAAAA,EACA,KAAAoe,mBAAAA,EACA,KAAAvO,oBAAAA,EACA,KAAAwO,6BAAAA,EACA,KAAAC,0BAAAA,EACA,KAAAC,4BAAAA,EACA,KAAAC,sBAAAA,EACA,KAAAC,uBAAAA,EACA,KAAAC,mBAAAA,EAERhyC,KAAKiyC,iBAAmBjyC,KAAKyxC,wBAAwBx5B,OAAOjY,KAAKuhC,OACrE,CAmIJ,OAjII,YAAA2Q,iBAAA,SAAiB7yB,EAAc9c,GAC3B,OAAOvC,KAAK0xC,mBAAmBz5B,OAAOoH,EAAM9c,EAChD,EAEA,YAAAopB,UAAA,SACIwmB,G,UACA,oDAEA,OAAO,EAAAnyC,KAAKiyC,kBAAiBtmB,UAAS,8BAACwmB,GAAeC,GAC1D,EAEA,YAAA/2B,SAAA,WACI,OAAOrb,KAAKiyC,iBAAiB52B,UACjC,EAEM,YAAAgoB,yBAAN,SACIgP,G,sHAEA,SAAMryC,KAAKuhC,OAAO+Q,SACdtyC,KAAK8xC,sBAAsBzO,yBAAyBgP,K,OAGxD,OAJA,SAIO,CAAP,EAAOryC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAgV,aAAN,SAAmB9qB,G,6HACXA,EACA,GAAMvF,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuBjD,aAAa9qB,KADpE,M,cACA,S,aAEA,SAAMvF,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB5C,wB,OAAvD,S,iBAGJ,MAAO,CAAP,EAAO1wB,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAmV,oBAAN,W,sHACI,SAAMxwB,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB9C,wB,OAEvD,OAFA,SAEO,CAAP,EAAOxwB,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAA4S,kBAAN,SAAwB1mB,G,sHACpB,SAAMvH,KAAKuhC,OAAO+Q,SAAStyC,KAAK6xC,4BAA4B5jB,kBAAkB1mB,K,OAE9E,OAFA,SAEO,CAAP,EAAOvH,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAknB,YAAN,SACIpgC,EACAI,G,sHAEA,SAAMvC,KAAKuhC,OAAO+Q,SAAStyC,KAAKmjC,oBAAoBZ,YAAYpgC,EAASI,K,OAEzE,OAFA,SAEO,CAAP,EAAOvC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAA0oB,cAAN,SAAoBz2B,G,sHAChB,SAAMtN,KAAKuhC,OAAO+Q,SAAStyC,KAAK8xC,sBAAsB/N,cAAcz2B,K,OAEpE,OAFA,SAEO,CAAP,EAAOtN,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAynB,cAAN,SAAoBvgC,G,4HAKhB,OAHagmB,EACTvoB,KAAKuhC,OAAOlmB,WAAU,sBAE1B,GAAMrb,KAAKuhC,OAAO+Q,SACdtyC,KAAKmjC,oBAAoBL,cAAcva,IAAkBrS,QAAS3T,K,OAGtE,OAJA,SAIO,CAAP,EAAOvC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAk3B,qBAAN,SACIpwC,G,sHAEA,SAAMnC,KAAKuhC,OAAO+Q,SAAStyC,KAAK2xC,6BAA6BtiB,cAAcltB,K,OAE3E,OAFA,SAEO,CAAP,EAAOnC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAm3B,sBAAN,SACIrwC,G,sHAEA,SAAMnC,KAAKuhC,OAAO+Q,SAAStyC,KAAK4xC,0BAA0BviB,cAAcltB,K,OAExE,OAFA,SAEO,CAAP,EAAOnC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAAs0B,qBAAN,SACIpqC,EACAhD,G,sHAEA,SAAMvC,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BjC,qBAAqBpqC,EAAIhD,K,OAG5D,OAJA,SAIO,CAAP,EAAOvC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAA0Y,eAAN,SACIlF,EACAtsB,G,sHAEA,SAAMvC,KAAKuhC,OAAO+Q,SACdtyC,KAAK+xC,uBAAuBhe,eAAelF,EAAatsB,K,OAG5D,OAJA,SAIO,CAAP,EAAOvC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAA8Y,gBAAN,SAAsB5xB,G,sHAClB,SAAMvC,KAAKuhC,OAAO+Q,SAAStyC,KAAK+xC,uBAAuB5d,gBAAgB5xB,K,OAEvE,OAFA,SAEO,CAAP,EAAOvC,KAAKiyC,iBAAiB52B,Y,QAG3B,YAAA4U,iBAAN,SACIwiB,EACAlwC,G,sHAE6B,SAAMvC,KAAKgyC,mBAAmB/hB,iBACvDwiB,EACAlwC,I,OAGJ,MAAO,CAAP,EAL6B,SAG5B,M,QAIT,EApJA,GC1BA,IAAKmwC,IAAL,SAAKA,GACD,2BACH,CAFD,CAAKA,KAAAA,GAAoB,K,SCGzB,WACI,WACYC,GAAA,KAAAA,oBAAAA,CAGT,CAKP,OAHI,YAAA16B,OAAA,SAAOwT,GACH,ODGO,SACXA,EACAF,GAEA,IAAMqnB,GAAa,IAAAtnB,kBAKf,SAACvpB,EAAOC,GACJ,OAAAA,EAAOrD,OAAS+zC,GAAqBG,YAAc7wC,EAAOG,QAAUJ,CAApE,GACJ0pB,EAAMpQ,WACN,CAAEkQ,iBAAgB,IAYtB,OATAE,EAAME,WACF,SAAC5pB,GACG6wC,EAAWN,UACP,IAAAjlB,cAAaqlB,GAAqBG,YAAa9wC,GAEvD,GACA,CAAE+wC,SAAS,IAGRF,CACX,CC5BeG,CAA0BtnB,EAAOzrB,KAAK2yC,oBACjD,EACJ,EAVA,GCLM,GAA+Bp0C,QAAQ,gB,eCiBtC,SAASy0C,GAAsB3yC,GAClC,OAAO1C,OAAOM,UAAUC,eAAeC,KAAKkC,EAAK,WACrD,C,SCKA,WAMI,WAAYkC,GALJ,KAAA0wC,QAAU,EACV,KAAAC,KAAwB,CAAEC,KAAM,IAChC,KAAAC,UAAmC,GAIvCpzC,KAAKqzC,UAAW,eACZC,QAAS,EACTlxC,QAAS,KACTmxC,SAAU,EAAAzT,MACPv9B,EAEX,CA4IJ,OA1II,YAAAixC,OAAA,W,IAAO,sDACH,IAAM/zC,EAASO,KAAKyzC,YAAW,MAAhBzzC,KAAoBuX,GAC3B/U,EAAqB/C,EAAM,MAApBi0C,EAAcj0C,EAAM,UAC7BY,EAAQZ,EAAM,IAYpB,OAVIY,GAAOA,EAAIszC,SACXtzC,EAAIuzC,YAEJvzC,EAAML,KAAK6zC,aAAaH,EAAWn8B,EAAKsa,MAAMrvB,IAKlDxC,KAAK8zC,oBAAoBzzC,GAElBA,EAAIszC,QACf,EAEA,YAAAI,aAAA,W,IAAa,sDACD,IAAA1zC,EAAQL,KAAKyzC,YAAW,MAAhBzzC,KAAoBuX,GAAI,IAExC,OAAOlX,EAAMA,EAAIuzC,UAAY,CACjC,EAEQ,YAAAH,YAAR,W,UAAoB,kDAUhB,IATA,IAAIjxC,EAAQ,EACRkxC,EAAY1zC,KAAKkzC,KAQdQ,EAAUP,KAAK/yC,QAAQ,CAG1B,IAFA,IAAI4zC,GAAY,EAEPC,EAAW,EAAGA,EAAWP,EAAUP,KAAK/yC,OAAQ6zC,IAAY,CACjE,IAAM5zC,EAAMqzC,EAAUP,KAAKc,GAE3B,GAAKj0C,KAAKqzC,SAASjxC,QAAQ/B,EAAI/B,MAAOiZ,EAAK/U,IAA3C,CAQA,IAFA,EAAAkxC,EAAUP,MAAKe,QAAO,QAAIR,EAAUP,KAAKva,OAAOqb,EAAU,KAGrC,IAAhB18B,EAAKnX,QAAgBoC,IAAU+U,EAAKnX,OAAS,IAC9C4yC,GAAsB3yC,GAEtB,MAAO,CAAEmC,MAAK,EAAEnC,IAAG,EAAEqzC,UAAS,GAGlCM,GAAY,EACZN,EAAYrzC,EACZmC,IAEA,K,EAGJ,IAAKwxC,EACD,K,CAIR,MAAO,CAAExxC,MAAK,EAAEkxC,UAAS,EAC7B,EAEQ,YAAAG,aAAR,SACIhhC,EACA0E,GAEA,IAEIlX,EAFAmC,EAAQ,EACRkxC,EAAY7gC,EAGhB,GACIxS,EAAM,CACF8yC,KAAM,GACNO,UAAS,EACTE,UAAW,EACXt1C,MAAOiZ,EAAK/U,IAMhBkxC,EAAUP,KAAKe,QAAQ7zC,GAEvBqzC,EAAYrzC,EACZmC,UACKA,EAAQ+U,EAAKnX,QAEtB,IAAM+zC,EAAc9zC,EAIpB,OAFA8zC,EAAYR,SAAW,MAAK3zC,KAAKizC,QAE1BkB,CACX,EAEQ,YAAAL,oBAAR,SAA4BM,GACxB,GAAKp0C,KAAKqzC,SAASC,QAAnB,CAIA,IAAM9wC,EAAQxC,KAAKozC,UAAUjsB,QAAQitB,GAIrC,GAFAp0C,KAAKozC,UAAUxa,QAAkB,IAAXp2B,EAAe,EAAIA,GAAkB,IAAXA,EAAe,EAAI,EAAG4xC,KAElEp0C,KAAKozC,UAAUhzC,QAAUJ,KAAKqzC,SAASC,SAA3C,CAIA,IAAMjzC,EAAML,KAAKozC,UAAU57B,MAEtBnX,IAILL,KAAKq0C,WAAWh0C,GAChBL,KAAKqzC,SAASE,SAASlzC,EAAIszC,U,EAC/B,EAEQ,YAAAU,WAAR,SAAmBh0C,GACVA,EAAIqzC,YAITrzC,EAAIqzC,UAAUP,KAAKva,OAAOv4B,EAAIqzC,UAAUP,KAAKhsB,QAAQ9mB,GAAM,GDpJ5D,SAA2BA,GAC9B,OAAO1C,OAAOM,UAAUC,eAAeC,KAAKkC,EAAK,YACrD,CCoJYi0C,CAAkBj0C,EAAIqzC,YAI1B1zC,KAAKq0C,WAAWh0C,EAAIqzC,WACxB,EACJ,EAzJA,GCxBe,SAASa,GAAU92C,GAC9B,OAAkC,KAA3B,GAAGA,GAAM0pB,QAAQ,OAAyC,KAA1B,GAAG1pB,GAAM0pB,QAAQ,IAC5D,CCQe,SAASqtB,GAAiD18B,GACrE,IAAM4f,EAAe,YAAG,a,8CAAsB,QAAR,oBAAQ,EAAzB,CAAiB5f,GAgBtC,OAdAna,OAAO0a,oBAAoBP,EAAO7Z,WAAW8U,SAAQ,SAACtV,GAClD,IAAM8uB,EAAa5uB,OAAOg6B,yBAAyB7f,EAAO7Z,UAAWR,GAEhE8uB,GAAsB,gBAAR9uB,GAInBE,OAAOC,eACH85B,EAAgBz5B,UAChBR,EAQZ,SACIqa,EACAra,EACA8uB,GAEA,GAAgC,mBAArBA,EAAWjuB,MAClB,OAAOiuB,EAGX,IAAIkoB,EAAW,IAAI,GACf/7B,EAAS6T,EAAWjuB,MACpBo2C,GAAiB,KAAAh9B,SAAQgB,GAE7B,OAAO,GAAcZ,EAAQra,EAAK,CAC9BK,IAAA,sBACUQ,EAAQ,W,IAAE,sDACZ,IAAMq2C,EAAcD,EAAev2C,KAAI,MAAnBu2C,GAAc,qBAAM,GAASn9B,IAEjD,GAAuC,IAAnCk9B,EAASV,aAAY,MAArBU,EAAyBl9B,GACzB,OAAOo9B,EAGX,IAAMnxC,EAAWkV,EAAOva,KAAI,MAAXua,GAAM,qBAAM,GAASnB,IAEtC,OAAInV,EAAQoB,EAAUmxC,EAAa,CAAE1xC,UAAW,SAACxF,GAAQ,OAAC82C,GAAU92C,EAAX,IAC9Ck3C,GAGXD,EAAerD,MAAMxkB,IAAI4nB,EAASjB,OAAM,MAAfiB,EAAmBl9B,GAAO/T,GAE5CA,EACV,EAID,OAFA7F,OAAOC,eAAeoC,KAAMvC,GAAK,gCAAK8uB,GAAU,CAAEjuB,MAAK,KAEhDA,CACX,EACAuuB,IAAG,SAACvuB,GACAm2C,EAAW,IAAI,GACf/7B,EAASpa,EACTo2C,GAAiB,KAAAh9B,SAAQgB,EAC7B,GAER,CAlDYk8B,CAAwB98B,EAAO7Z,UAAWR,EAAK8uB,GAEvD,IAEOmL,CACX,C,SCrBA,WAMI,WAAYlN,GACRxqB,KAAK60C,gBAAkBrqB,EAAUT,cACrC,CASJ,OAPI,YAAA+qB,yBAAA,SAAyBvtC,GACrB,OAAOvH,KAAK60C,gBAAgBv5B,mBAAmB/T,EACnD,EAEA,YAAAwtC,2BAAA,SAA2BxtC,GACvB,OAAOvH,KAAK60C,gBAAgBt5B,qBAAqBhU,EACrD,GAhB4C,iBAD/C,IACoBytC,E,CAArB,G,GCAA,WAMI,WAAYxqB,GACRxqB,KAAK60C,gBAAkBrqB,EAAUT,cACrC,CASJ,OAPI,YAAAkrB,qBAAA,SAAqB1tC,GACjB,OAAOvH,KAAK60C,gBAAgBhpC,eAAetE,EAC/C,EAEA,YAAA2tC,uBAAA,SAAuB3tC,GACnB,OAAOvH,KAAK60C,gBAAgB/oC,iBAAiBvE,EACjD,GAhB6C,iBADhD,IACoB4tC,E,CAArB,GCDe,SAASC,GACpB5qB,GAKA,MAAO,CACHlrB,OAJW,IAAI,GAA4BkrB,GAK3C5mB,SAJa,IAAI,GAA6B4mB,GAMtD,C,SCNA,WAMI,WACY+W,EACA8T,GAFZ,WACY,KAAA9T,OAAAA,EACA,KAAA8T,6BAAAA,EAERr1C,KAAKs1C,OAASF,GAA8Bp1C,KAAKuhC,OAAOlmB,YAExDrb,KAAKuhC,OAAO5V,WAAU,SAAC5pB,GACnB,EAAKuzC,OAASF,GAA8BrzC,EAChD,GACJ,CAuHJ,OAtGI,YAAAsZ,SAAA,WACI,OAAOrb,KAAKs1C,MAChB,EAgCA,YAAA3pB,UAAA,SACIwmB,G,UADJ,OAEI,oDAEA,OAAO,EAAAnyC,KAAKuhC,QAAO5V,UAAS,8BACxB,WAAM,OAAAwmB,EAAW,EAAK92B,WAAhB,EACN,SAACtZ,GAAU,OAAAA,EAAMgoB,eAAe1O,UAArB,GACR+2B,EAAQ/xC,KACP,SAAC2C,GAAW,gBAACjB,GACT,OAAAiB,EAAOoyC,GAA8BrzC,GAArC,CADQ,KAIxB,EAoBA,YAAAwzC,iBAAA,SAAiBhzC,GAAjB,IC3GgCgD,ED2GhC,OACUiwC,GC5GsBjwC,ED4GKhD,EAAQkF,YC3GtC,kBAAkBwuB,KAAK1wB,GD4GpB,CAAChD,EAAQkF,aE1GR,SAA4BguC,EAAkBC,GACzD,IAAMC,EAAangB,SAAS6J,iBAAiBoW,GAE7C,IAAKE,EAAWv1C,OACZ,MAAM,IAAI,GACN,2DAA2Dq1C,GAInE,OAAO51C,MAAM5B,UAAU4zB,MAAM1zB,KAAKw3C,GAAYt1C,KAAI,SAACs6B,GAK/C,OAJKA,EAAUp1B,KACXo1B,EAAUp1B,IAAK,IAAAqwC,UAASF,IAGrB/a,EAAUp1B,EACrB,GACJ,CF2FcswC,CAAmBtzC,EAAQkF,YAAgBlF,EAAQgF,SAAQ,eAEjE,OAAOotB,QAAQsM,IACXuU,EAAan1C,KAAI,SAACoH,GACd,IAAMzF,EAAS,EAAKqzC,6BAA6B3E,YAAW,gCACrDnuC,GAAO,CACVkF,YAAW,KAETquC,EAAU,0BAA0BvzC,EAAQgF,SAAQ,IAAIE,EAE9D,OAAO,EAAK85B,OAAO+Q,SAAStwC,EAAQ,CAAE8zC,QAAO,GACjD,KACFtoB,MAAK,WAAM,SAAKnS,UAAL,GACjB,EAcA,YAAA06B,mBAAA,SAAmBxzC,GAAnB,WACUP,EAAShC,KAAKq1C,6BAA6BW,aAAazzC,GACxDuzC,EAAU,0BAA0BvzC,EAAQgF,SAElD,OAAOvH,KAAKuhC,OAAO+Q,SAAStwC,EAAQ,CAAE8zC,QAAO,IAAItoB,MAAK,WAAM,SAAKnS,UAAL,GAChE,GArI0C,iBAD7C,IACoB46B,E,CAArB,G,GGUA,WACI,WACYC,EACAC,EACAtE,GAFA,KAAAqE,UAAAA,EACA,KAAAC,YAAAA,EACA,KAAAtE,4BAAAA,CACT,CAgHP,OA9GI,YAAAnB,WAAA,SACInuC,GADJ,WAGI,OAAO,SAACkpB,GACJ,IAAMnkB,EAAO,CACTC,SAAUhF,EAAQgF,SAClBE,YAAalF,EAAQkF,aAGzB,GACIgkB,EAAMpQ,WAAW0O,eAAehgB,cAAcxH,EAAQgF,SAAUhF,EAAQkF,aAExE,OAAO,IAAAgoB,SAGX,IAAM2mB,EAA6B7zC,EAAQ8zC,aACrC,CAAE/oB,OAAQ,CAAE+oB,aAAc9zC,EAAQ8zC,eAClC,CAAC,EAEDC,GAA8B,gCAC7BF,GAA0B,CAC7B/nB,QAAS9rB,EAAQ8rB,QACjBhC,UAAU,IAGd,OAAO,IAAAtF,SACH,IAAA0H,KACI,IAAApB,cACIjnB,EAAyBuB,+BACzBlE,EACA6D,IAGR,EAAKuqC,4BAA4B5jB,kBAC7B1rB,EAAQgF,SACR+uC,EAFJ,CAGE7qB,IACF,IAAAyD,QAAM,WACF,SAAKqnB,aAAah0C,EAAQgF,UACrBmpC,WAAWnuC,GACXirB,MAAK,WACF,WAAAH,cACIjnB,EAAyBoB,+BACzB/D,EACA6D,EAHJ,GAHR,KAUN4jB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GAAiBpoB,EAAyBwB,uBAAwBlI,EAAO4H,EAAzE,IAGZ,CACJ,EAEA,YAAA0uC,aAAA,SACIzzC,GADJ,WAGI,OAAO,SAACkpB,GACJ,IAAMnkB,EAAO,CAAEC,SAAUhF,EAAQgF,UAEjC,OAAKkkB,EAAMpQ,WAAW0O,eAAehgB,cAAcxH,EAAQgF,WAIpD,IAAAwf,SACH,IAAA0H,KACI,IAAApB,cACIjnB,EAAyByB,iCACzBpE,EACA6D,KAGR,IAAA4nB,QAAM,WACF,SAAKqnB,aAAah0C,EAAQgF,UACrByuC,eACAxoB,MAAK,WACF,WAAAH,cACIjnB,EAAyBsB,iCACzBjE,EACA6D,EAHJ,GAHR,KAUN4jB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GACIpoB,EAAyB0B,yBACzBpI,EACA4H,EAHJ,MAxBG,IAAAmoB,QA+Bf,CACJ,EAEQ,YAAA8mB,aAAR,SACIhvC,GAEA,IAAIivC,EAEJ,IACIA,EAAWx2C,KAAKm2C,YAAYr4C,IAAI,CAAEyH,GAAIgC,G,CACxC,SACEivC,EAAWx2C,KAAKk2C,UAAUp4C,IAAIyJ,E,CAGlC,OAAOivC,CACX,EACJ,EArHA,G,GChBA,WAOI,WAAYj0C,G,UACRvC,KAAKy2C,WAAa,CAAC,EACnBz2C,KAAK02C,WAAa,CAAC,EACnB12C,KAAK22C,cAAqC,QAAxB,EAAGp0C,aAAO,EAAPA,EAASq0C,oBAAY,QAAI,UAC9C52C,KAAK62C,aAAmC,QAAvB,EAAGt0C,aAAO,EAAPA,EAASu0C,mBAAW,SACxC92C,KAAK+2C,eAAuC,QAAzB,EAAGx0C,aAAO,EAAPA,EAASy0C,qBAAa,QAAI,SAAE3pC,GAAU,OAAAA,CAAK,CACrE,CA+CJ,OA7CI,YAAAvP,IAAA,SAAIuP,EAAW4pC,GACX,IACI,OAAOj3C,KAAKk3C,aACR7pC,GAASrN,KAAK22C,cACdM,GAAc5pC,GAASrN,KAAK22C,c,CAElC,MAAOj3C,GACL,IAAKM,KAAK62C,aACN,MAAMn3C,EAGV,OAAOM,KAAKk3C,aAAal3C,KAAK22C,cAAeM,GAAcj3C,KAAK22C,c,CAExE,EAEA,YAAA12C,SAAA,SAASoN,EAAUwd,GACf,GAAI7qB,KAAKm3C,YAAY9pC,GACjB,MAAM,IAAI,GAAqB,IAAIA,EAAK,4BAG5CrN,KAAKy2C,WAAWppC,GAASwd,CAC7B,EAEU,YAAAssB,YAAV,SAAsB9pC,GAClB,QAASrN,KAAKy2C,WAAWppC,EAC7B,EAEQ,YAAA+pC,aAAR,SAAqB/pC,GACjB,QAASrN,KAAK02C,WAAWrpC,EAC7B,EAEQ,YAAA6pC,aAAR,SAAqB7pC,EAAe4pC,GAChC,IAAKj3C,KAAKo3C,aAAaH,GAAa,CAChC,IAAMI,EAAgBr3C,KAAK+2C,eAAe1pC,EAAO1P,OAAOwF,KAAKnD,KAAKy2C,aAC5D5rB,EAAUwsB,GAAiBr3C,KAAKy2C,WAAWY,GAEjD,IAAKxsB,EACD,MAAM,IAAI,GAAqB,IAAIxd,EAAK,wBAG5CrN,KAAK02C,WAAWO,GAAcpsB,G,CAGlC,OAAO7qB,KAAK02C,WAAWO,EAC3B,EACJ,EA5DA,GCAe,SAASK,GAAuBvwC,GAC3C,OCDsCkgB,EDCblgB,EAAKkgB,UAAUC,cAAclkB,QAAO,SAACoL,GAAS,OAACA,EAAKs5B,gBAAN,KCAhE,IAAAloC,QAAOynB,GAAW,SAACswB,EAAOnpC,GAAS,OAAAmpC,EAAQnpC,EAAKgkB,QAAb,GAAuB,GADtD,IAA2BnL,CDE1C,CEoLA,IAAYuwB,GAOAC,GAUAC,GAiBAC,GAOAC,GAQAC,IAjDZ,SAAYL,GACR,UACA,UACA,UACA,SACH,CALD,CAAYA,KAAAA,GAAkB,KAO9B,SAAYC,GACR,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,eACH,CARD,CAAYA,KAAAA,GAA2B,KAUvC,SAAYC,GAER,cAGA,oBAGA,cAGA,sBAGA,eACH,CAfD,CAAYA,KAAAA,GAAoB,KAiBhC,SAAYC,GACR,YACA,YACA,YACA,WACH,CALD,CAAYA,KAAAA,GAAyB,KAOrC,SAAYC,GAER,0BAGA,mBACH,CAND,CAAYA,KAAAA,GAAqB,KAQjC,SAAYC,GACR,cACA,wBACA,qBACH,CAJD,CAAYA,KAAAA,GAAsB,K,SC3MlC,WAMI,WAAoBC,GAAA,KAAAA,yBAAAA,CAAoD,CAwQ5E,OAtQU,YAAApH,WAAN,SAAiBlvB,G,4HACU,OAAvB,EAAAxhB,KAAuB,GAAMA,KAAK83C,yBAAyB9d,KAAKxY,I,cAAhE,EAAKu2B,gBAAkB,SACvB/3C,KAAKg4C,uBACDh4C,KAAKg4C,wBAA0Bh4C,KAAKi4C,wC,YAG5C,YAAAjC,aAAA,W,MAMI,OALAh2C,KAAKk4C,wBAAqBz0C,EACC,QAA3B,EAAAzD,KAAKg4C,8BAAsB,SAAEG,SAC7Bn4C,KAAKg4C,4BAAyBv0C,EAC9BzD,KAAK+3C,qBAAkBt0C,EAEhBkxB,QAAQyH,SACnB,EAEA,YAAAgc,WAAA,SACIC,EACAC,EACAC,GAEAv4C,KAAKw4C,qBAAqBC,IAAIC,iBAAiB,IAAIL,EAAY,CAC3DM,wBAAyBL,EACzBC,aAAY,GAEpB,EAEA,YAAAK,aAAA,SAAanxC,EAAqBlF,GAC9BvC,KAAKk4C,mBAAqBl4C,KAAKw4C,qBAAqBC,IAAII,aACpD,IAAIpxC,EACJlF,EAER,EAEA,YAAAu2C,gBAAA,SAAgBC,GAAhB,WACUC,EAAgBh5C,KAAKi5C,sBAAsBF,GAEjD/4C,KAAKk5C,wBAAwBC,SAAQ,WACjC,EAAKD,wBAAwBE,aAAaJ,EAC9C,GACJ,EAEA,YAAAK,yCAAA,SACIC,GADJ,WAOIt5C,KAAKk5C,wBAAwBC,SAAQ,6D,yEAClB,SAAMG,K,cAAf7uB,EAAS,SACTuuB,EAAgBh5C,KAAKi5C,sBACvBxuB,EAAOsuB,4BACPtuB,EAAO8uB,qBACP9uB,EAAO+uB,aAGXx5C,KAAKk5C,wBAAwBE,aAAaJ,G,aAElD,EAEM,YAAAS,QAAN,W,+FAKI,OAJIz5C,KAAK+3C,iBACL/3C,KAAK+3C,gBAAgBU,IAAIgB,UAGtB,CAAP,EAAO9kB,QAAQyH,U,QAGnB,YAAAsd,sBAAA,SAAsB,G,IAClB3M,EAAa,gBACbtlC,EAAW,cACX,IAAAkyC,2BAAAA,OAA0B,IAAG,GAAK,EAClCpyC,EAAQ,WACRhF,EAAO,UACPq3C,EAAS,YAEHjf,EAAYnF,SAAS8F,cAA2B,IAAI7zB,GAE1D,IAAKkzB,EACD,MAAM,IAAI,GACN,gFAIA,IAAIkf,EAAsBlf,EAAUZ,YAAY/5B,KAAK85C,6BAA4B,GAEnFC,EACFx3C,QAAAA,EACAvC,KAAKg6C,6BACDjN,EACAxlC,EACAqyC,EACAD,GAKR,OAFA35C,KAAK44C,aAAaiB,EAAmBE,GAE9B/5C,KAAK85C,2BAChB,EAEA,YAAAG,mBAAA,SAAmBxH,GACfzyC,KAAKk6C,uBAAyBzH,CAClC,EAKA,YAAA0H,aAAA,SACIpM,EACAqM,GAEA,IAAMD,IAAiBpM,EAAS,+BAC1BsM,IAAgBtM,EAAS,mCAE/B,OAAIoM,GAAgBE,EACY,OAArBD,EAGJD,CACX,EAEQ,YAAAlB,sBAAR,SACIF,EACAQ,EACAC,GAEQ,IAAAc,EAAkCvB,EAA2B,YAA7CwB,GAAa,YAAKxB,EAApC,iBAEN,OAAO,8BACHA,4BAA6B/4C,KAAKw6C,uBAAuBF,GACnDC,EACAxB,GACFQ,GAAwB,CAAEA,qBAAoB,IAC9CC,GAAe,CAAEA,YAAW,GAExC,EAEQ,YAAAvB,sCAAR,WACI,IAAMwC,EAAMzyB,KAAK0yB,SAAS53C,SAAS,IAAI63C,QAAQ,GACzCC,EAAkBplB,SAASW,cAAc,OAI/C,OAFAykB,EAAgBr1C,GAAK,qCAAqCk1C,EAEnDG,CACX,EAEQ,YAAAZ,6BAAR,SACI,EAMAzyC,EACAqyC,EACAD,G,MAPY77B,EAAO,eACH3B,EAAW,uBACb6C,EAAqB,oCAKnC,IAAA26B,IAAAA,GAAA,GAEM,OAUFr1B,EAhByC,0CAgBjB/c,GATxB,IAAAkjB,OAAUowB,EAAU,aAAEC,EAAQ,WAC9B,IAAAhN,mBACIiN,EAAgB,mBAChBC,EAAqB,wBACrBjC,EAA2B,8BAC3BkC,EAA8B,iCAC9BC,EAAc,iBACdZ,EAAW,cAInB,IAAKO,IAAeK,EAChB,MAAM,IAAI,GAAiB7kC,GAAqBa,sBAGpD,IAAMikC,EAA4C,CAC9CN,WAAU,EACVK,eAAc,EACdH,iBAAgB,EAChBnB,UAAS,EACTwB,YAAavD,GAAuBwD,MAGxC,GAAIr7C,KAAKk6C,uBACL,OAAO,gCACAiB,GAAgB,CACnBG,UAAWR,IAInB,IAAM/zC,EAAO+W,IAEbq9B,EAAiB3B,YACbzyC,GAAyC,IAAjCuwC,GAAuBvwC,GACzB6wC,GAAsB2D,QACtB3D,GAAsB4D,WAE1B,MAGFx8B,IAFoB+uB,EAAQ,4BAC5B,IAAAJ,aAAgB8N,EAAQ,WAAErB,EAAgB,mBAG9C,GAAIp6C,KAAKm6C,aAAapM,EAAUqM,GAAmB,CAC/C,IAAM/nB,EAAsB,QAAhB,EAAGlW,WAAa,eAAE+L,mBAAmBplB,WAC3CuzC,EAAetvC,aAAI,EAAJA,EAAM4qB,SAASrxB,KAC9Bo7C,GAAa,iBAAoCP,GACnDQ,OAAS,EAkBb,OAhBI37C,KAAKw6C,uBAAuBF,IAC5BoB,EAAcpB,YAAcA,EAC5BqB,EAAY5C,IAEZ2C,EAAcJ,UAAYR,EAC1Ba,GAAY,gCAAK5C,GAA2B,CAAEuB,YAAW,KAGxDX,IACD+B,EAAc3C,4BAA8B4C,GAG5CtpB,GAAUgkB,IACVqF,EAAcnC,qBAAuB,CAAElnB,OAAM,EAAEgkB,aAAY,IAGxDqF,C,CAGX,IAAME,EAAwB,CAC1BljC,OAAQsiC,EACRzsB,IAAKwf,EAAS,gCACR,oBAAoBxmC,EAAQ,mBACzBk0C,EAAQ,oBAAoBl0C,EAAQ,mBAC7C0zC,+BAA8B,GAGlC,OAAO,gCACAE,GAAgB,CACnBS,sBAAqB,EACrBN,UAAWR,GAEnB,EAEQ,YAAAN,uBAAR,SAA+BF,GAC3B,MAAO,kBAAkBrkB,KAAKqkB,EAClC,EAEQ,YAAA9B,mBAAR,WACI,OAAOx4C,KAAK67C,YAAY77C,KAAK+3C,gBACjC,EAEQ,YAAA+B,0BAAR,WACI,OAAO95C,KAAK67C,YAAY77C,KAAKg4C,uBACjC,EAEQ,YAAAkB,sBAAR,WACI,OAAOl5C,KAAK67C,YAAY77C,KAAKk4C,mBACjC,EAEQ,YAAA2D,YAAR,SAAuBv9C,GACnB,OAAOqZ,GACHrZ,GACA,WAAM,WAAI,GAAoB27B,GAAwBE,sBAAhD,GAEd,EACJ,EA9QA,G,GC1BA,YACI,WAAY37B,GAAZ,MACI,YACIA,GACI,wGACP,K,OAED,EAAKE,KAAO,sCACZ,EAAKC,KAAO,oC,CAChB,CACJ,OAViE,oBAUjE,EAVA,CAAiE,G,GCCjE,WACI,WACYs9B,EACApG,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAoG,cAAAA,EACA,KAAApG,QAAAA,CACT,CAiBP,OAfU,YAAAmE,KAAN,SAAWthB,G,gIAKP,OAJQ,EAA+CA,EAAM,mBAA/B,QAAtB,MAAwC,CAAC,EAAC,GAApBojC,OAExBC,EAAqBvE,QAFS,IAAG,OAAI,GAI3C,GAAMx3C,KAAKi8B,cAAcK,WACrB,kBAAkByf,EAAiB,qC,OAGvC,GAJA,UAIK/7C,KAAK61B,QAAQmmB,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOh8C,KAAK61B,QAAQmmB,Q,QAE5B,EArBA,G,GCLA,wBAMA,QALI,YAAA/jC,OAAA,SAAOu1B,GAGH,OAFAxgB,GAAqBD,QAEd,IAAIkvB,gBAAgB,EAAGzO,EAClC,EACJ,EANA,G,GCIA,YACI,WAAYhvC,GAAZ,MACI,YAAMA,GAAW,8BAA4B,K,OAE7C,EAAKE,KAAO,0BACZ,EAAKC,KAAO,sB,CAChB,CACJ,OAPqD,oBAOrD,EAPA,CAAqD,GCc9C,IAAMu9C,GAAoB,CAAC,UAAW,Y,SCI7C,WAeI,WAAoBC,GAAA,KAAAA,uBAAAA,EAPZ,KAAAC,gBAGJ,CAAC,EAKDp8C,KAAK61B,QAAU9I,MACnB,CAiMJ,OA/LI,YAAA2jB,WAAA,SAAW2L,GACPr8C,KAAKs8C,aAAeD,CACxB,EAEA,YAAAE,UAAA,sBACI,IAAKv8C,KAAKs8C,aACN,MAAM,IAAI,GAAoBriB,GAAwBE,uBAS1D,OANKn6B,KAAKkkC,UACNlkC,KAAKkkC,QAAUlkC,KAAKm8C,uBACfK,aACAhvB,MAAK,SAACivB,GAAW,OAAAA,EAAOxkC,OAAO,CAAEykC,cAAe,EAAKJ,cAApC,KAGnBt8C,KAAKkkC,OAChB,EAEA,YAAAyY,UAAA,WAQI,OAPK38C,KAAK48C,UACN58C,KAAK48C,QAAUjoB,QAAQsM,IAAI,CACvBjhC,KAAKu8C,YACLv8C,KAAKm8C,uBAAuBU,eAC7BrvB,MAAK,SAAC,G,IAACivB,EAAM,KAAc,OAAN,KAAaxkC,OAAO,CAAEwkC,OAAM,GAAtB,KAG3Bz8C,KAAK48C,OAChB,EAEM,YAAAE,kBAAN,SACIryB,EACAsyB,EACAC,G,yIAEe,SAAMh9C,KAAKu8C,a,OACH,OADjBE,EAAS,SACQ,GAAMz8C,KAAKm8C,uBAAuBc,sB,OA0BzD,OA1BMC,EAAiB,SAEjBC,EAAuB,CAAEV,OAAM,GAC/BW,EAAyB,SAC3B19C,EACA29C,GAEA,GAAI39C,EACA,OAAOs9C,EAAQt9C,GAGnB,IACM49C,EAAsB,CACxB3rB,SAAUlH,EAAOkH,SACjB4rB,WAAYrB,GAAkBp5C,YAG7B,EAAK+yB,QAAQ2nB,OAGdT,EAAUM,GAFVA,EAAwBI,cAAcH,GAPZ,WAAM,OAAAP,EAAUM,EAAV,GAWxC,EAEAr9C,KAAK09C,gBAAkBR,EAAejlC,OAAOklC,EAAsBC,GAE5D,CAAP,EAAOp9C,KAAK09C,iB,QAGV,YAAAC,iBAAN,SACIZ,EACAC,G,yIAEKh9C,KAAK49C,eAAN,MACe,GAAM59C,KAAKu8C,a,OAEJ,OAFhBE,EAAS,SAEO,GAAMz8C,KAAKm8C,uBAAuB0B,qB,OAAlDC,EAAgB,SAEhBC,EAAsB,CACxBtB,OAAM,EACNuB,cAAc,EACdC,mBAAoB,aAGlBC,EAAwB,SAC1Bx+C,EACAy+C,GAEA,OAAIz+C,EACOs9C,EAAQt9C,GAGdy+C,EAAuBC,0BAI5BrB,EAAUoB,GAHCnB,EAAQ,IAAI,GAI3B,EAEAh9C,KAAK49C,eAAiBE,EAAc7lC,OAAO8lC,EAAqBG,G,iBAGpE,MAAO,CAAP,EAAOl+C,KAAK49C,gB,QAGhB,YAAAS,OAAA,WAOI,OANKr+C,KAAKs+C,OACNt+C,KAAKs+C,KAAO3pB,QAAQsM,IAAI,CAACjhC,KAAKu8C,YAAav8C,KAAKm8C,uBAAuBoC,YAAY/wB,MAC/E,SAAC,G,IAACivB,EAAM,KAAoB,OAAN,KAAmBxkC,OAAO,CAAEwkC,OAAM,EAAE+B,QAAS,GAAvC,KAI7Bx+C,KAAKs+C,IAChB,EAEA,YAAAG,iBAAA,SAAiBl8C,GACb,IAAMoxC,EAAWpxC,GAAWA,EAAQi7C,OAAS,SAAW,UACpDkB,EAAS1+C,KAAKo8C,gBAAgBzI,GAqBlC,OAnBK+K,IACDA,EAAS/pB,QAAQsM,IAAI,CACjBjhC,KAAKu8C,YACLv8C,KAAKm8C,uBAAuBwC,sBAE3BnxB,MAAK,SAAC,G,IAACivB,EAAM,KACV,OADyB,KACXxkC,QAAO,eAAEwkC,OAAM,EAAEmC,OAAO,GAASr8C,GAA/C,IAEHwrB,OAAM,SAACruB,GACJ,GAAIA,GAAwB,qCAAfA,EAAMY,KACf,MAAO,CAAEu+C,gBAAYp7C,EAAWq7C,SAAU,WAAM,OAAAnqB,QAAQyH,SAAR,GAGpD,MAAM18B,CACV,IAEJM,KAAKo8C,gBAAgBzI,GAAY+K,GAG9BA,CACX,EAEA,YAAAK,gBAAA,WAQI,OAPK/+C,KAAKg/C,gBACNh/C,KAAKg/C,cAAgBrqB,QAAQsM,IAAI,CAC7BjhC,KAAKu8C,YACLv8C,KAAKm8C,uBAAuB8C,qBAC7BzxB,MAAK,SAAC,G,IAACivB,EAAM,KAAoB,OAAN,KAAmBxkC,OAAO,CAAEwkC,OAAM,GAA5B,KAGjCz8C,KAAKg/C,aAChB,EAEA,YAAAE,0BAAA,WAQI,OAPKl/C,KAAKm/C,aACNn/C,KAAKm/C,WAAaxqB,QAAQsM,IAAI,CAC1BjhC,KAAKu8C,YACLv8C,KAAKm8C,uBAAuBiD,sBAC7B5xB,MAAK,SAAC,G,IAACivB,EAAM,KAAiB,OAAN,KAAgBxkC,OAAO,CAAEwkC,OAAM,GAAzB,KAG9Bz8C,KAAKm/C,UAChB,EAEM,YAAAE,mBAAN,SACI98C,G,8HAE+B,SAAMoyB,QAAQsM,IAAI,CAC7CjhC,KAAKu8C,YACLv8C,KAAKm8C,uBAAuBmD,sB,OAGhC,OALM,EAAyB,SAAxB7C,EAAM,KAKN,CAAP,EAL2B,KAKPxkC,QAAO,gCAAK1V,GAAO,CAAEk6C,OAAM,M,QAGnD,YAAAqC,SAAA,sBACI,OAAOnqB,QAAQsM,IAAI,CACfjhC,KAAKu/C,UAAUv/C,KAAKs+C,MACpBt+C,KAAKu/C,UAAUv/C,KAAKo8C,gBAAgBx7C,SACpCZ,KAAKu/C,UAAUv/C,KAAKo8C,gBAAgBoB,QACpCx9C,KAAKu/C,UAAUv/C,KAAKm/C,YACpBn/C,KAAKu/C,UAAUv/C,KAAK09C,iBACpB19C,KAAKu/C,UAAUv/C,KAAK49C,gBACpB59C,KAAKu/C,UAAUv/C,KAAKg/C,iBACrBxxB,MAAK,WACJ,EAAK8wB,UAAO76C,EACZ,EAAK24C,gBAAkB,CAAC,EACxB,EAAK+C,gBAAa17C,EAClB,EAAKi6C,qBAAkBj6C,EACvB,EAAKm6C,oBAAiBn6C,EACtB,EAAKu7C,mBAAgBv7C,CACzB,GACJ,EAEQ,YAAA87C,UAAR,SAAkBriD,GACd,OAAOA,EAASA,EAAOswB,MAAK,SAACgyB,GAAQ,OAAAA,EAAIV,UAAJ,IAAkBnqB,QAAQyH,SACnE,EACJ,EAlNA,G,GCLA,WACI,WACYH,EACApG,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAoG,cAAAA,EACA,KAAApG,QAAAA,CACT,CA6GP,OA3GI,YAAA2mB,WAAA,sBACI,OAAOx8C,KAAKi8B,cACPK,WAAW,yDACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAU6jC,OACnD,MAAM,IAAI,GAGd,OAAO,EAAK5mB,QAAQjd,UAAU6jC,MAClC,GACR,EAEA,YAAA8B,QAAA,sBACI,OAAOv+C,KAAKi8B,cACPK,WAAW,iEACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAU6mC,aACnD,MAAM,IAAI,GAGd,OAAO,EAAK5pB,QAAQjd,UAAU6mC,YAClC,GACR,EAEA,YAAAd,kBAAA,sBACI,OAAO3+C,KAAKi8B,cACPK,WAAW,iEACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAU8mC,cACnD,MAAM,IAAI,GAGd,OAAO,EAAK7pB,QAAQjd,UAAU8mC,aAClC,GACR,EAEA,YAAA7C,WAAA,sBACI,OAAO78C,KAAKi8B,cACPK,WAAW,yDACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAU4kC,OACnD,MAAM,IAAI,GAGd,OAAO,EAAK3nB,QAAQjd,UAAU4kC,MAClC,GACR,EAEA,YAAAP,mBAAA,sBACI,OAAOj9C,KAAKi8B,cACPK,WAAW,kEACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAUskC,eACnD,MAAM,IAAI,GAGd,OAAO,EAAKrnB,QAAQjd,UAAUskC,cAClC,GACR,EAEA,YAAA+B,iBAAA,sBACI,OAAOj/C,KAAKi8B,cACPK,WAAW,gEACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAU+mC,aACnD,MAAM,IAAI,GAGd,OAAO,EAAK9pB,QAAQjd,UAAU+mC,YAClC,GACR,EAEA,YAAA9B,kBAAA,sBACI,OAAO79C,KAAKi8B,cACPK,WAAW,wDACX9O,MAAK,W,MACF,KAA2B,QAAvB,EAAC,EAAKqI,QAAQjd,iBAAS,eAAEgnC,OACzB,MAAM,IAAI,GAGd,OAAO,EAAK/pB,QAAQjd,UAAUgnC,KAClC,GACR,EAEA,YAAAR,kBAAA,sBACI,OAAOp/C,KAAKi8B,cACPK,WAAW,iEACX9O,MAAK,WACF,IAAK,EAAKqI,QAAQjd,YAAc,EAAKid,QAAQjd,UAAUinC,cACnD,MAAM,IAAI,GAGd,OAAO,EAAKhqB,QAAQjd,UAAUinC,aAClC,GACR,EAEM,YAAAP,iBAAN,W,sHACI,SAAMt/C,KAAKi8B,cAAcK,WACrB,iE,OAGJ,GAJA,UAIKt8B,KAAK61B,QAAQjd,YAAc5Y,KAAK61B,QAAQjd,UAAUknC,aACnD,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO9/C,KAAK61B,QAAQjd,UAAUknC,c,QAEtC,EAjHA,G,GCbA,YACI,WAAmBpgD,GAAnB,MACI,YACI,qGACH,K,OAHc,EAAAA,MAAAA,EAKf,EAAKhB,KAAO,qCACZ,EAAKC,KAAO,kC,CAChB,CACJ,OATgE,oBAShE,EATA,CAAgE,GC+HhE,IAAYohD,GAIAC,GAqBAC,GC9JL,SAASC,GAAoBvW,GAChC,IAAMwW,EAAYxW,EAAS1oC,MAAM,KAEjC,OAAyB,IAArBk/C,EAAU//C,OACH,CAACupC,EAAU,IAMf,CAHWwW,EAAUtuB,MAAM,GAAI,GAAGlyB,KAAK,KAC7BwgD,EAAUA,EAAU//C,OAAS,GAGlD,ED0HA,SAAY2/C,GACR,cACA,eACH,CAHD,CAAYA,KAAAA,GAAU,KAItB,SAAYC,GACR,oBACA,gBACA,eACH,CAJD,CAAYA,KAAAA,GAAW,KAqBvB,SAAYC,GAIR,YAIA,aACH,CATD,CAAYA,KAAAA,GAAoB,K,SE9HhC,WAMI,WACY1e,EACAsQ,EACAuO,EACAC,EACA1O,EACAC,EACA3kB,GANA,KAAAsU,OAAAA,EACA,KAAAsQ,4BAAAA,EACA,KAAAuO,uBAAAA,EACA,KAAAC,sBAAAA,EACA,KAAA1O,6BAAAA,EACA,KAAAC,0BAAAA,EACA,KAAA3kB,eAAAA,EATJ,KAAAqzB,eAAgB,CAUrB,CA+QP,OA7QI,YAAA5P,WAAA,SAAWnpC,GAGP,OAFAvH,KAAKugD,UAAYh5C,EAEVvH,KAAKwgD,kBAChB,EAEA,YAAAxK,aAAA,WACI,OAAOh2C,KAAKqgD,sBAAsBvB,UACtC,EAEA,YAAAlG,aAAA,SACIO,EACAsH,EACArF,GAEA,QAHA,IAAAqF,IAAAA,EAAyBV,GAAWW,YACpC,IAAAtF,IAAAA,EAA2B4E,GAAYW,UAElC3gD,KAAK4gD,iBACN,MAAM,IAAI,GAAoB3mB,GAAwBE,uBAG1D,OAAOn6B,KAAK4gD,iBAAiBhI,aAAa,CACtCwC,YAAW,EACXqF,WAAU,EACVtH,QAAO,GAEf,EAEA,YAAA0H,yBAAA,SAAyBC,GACrB,IAAMC,EAAqB/gD,KAAKghD,yBAEhCD,EAAmBE,gBAAgB5K,aAAeyK,EAAgBzK,aAClE0K,EAAmBE,gBAAgBC,WAAaJ,EAAgBI,WAEhElhD,KAAKmhD,oBAAsBJ,CAC/B,EAEA,YAAAK,cAAA,WACI,IAAKphD,KAAK4gD,iBACN,MAAM,IAAI,GAAoB3mB,GAAwBE,uBAG1D,OAAOn6B,KAAK4gD,iBAAiBS,gBAAgBrhD,KAAKghD,yBACtD,EAEA,YAAAM,cAAA,SAAc5f,GAAd,WACI,OAAO1hC,KAAKqgD,sBACPkB,cAAc7f,GACdlU,MAAK,SAACg0B,GAAoB,SAAKC,UAAUD,EAAf,IAC1Bh0B,MAAK,WAAM,SAAKk0B,sBAAsBhgB,EAA3B,GACpB,EAEA,YAAA8Q,sBAAA,SAAsB5vB,GAClB,OAAO5iB,KAAKuhC,OAAO+Q,SACftyC,KAAK4xC,0BAA0BviB,cAC3BrvB,KAAK2hD,sCAAsC/+B,IAGvD,EAEA,YAAAg/B,qBAAA,SAAqBC,GACjB7hD,KAAKsgD,cAAgBuB,CACzB,EAEQ,YAAArB,iBAAR,e,EAAA,OACUzS,EAAyD,QAAjD,EAAG/tC,KAAKuhC,OAAOlmB,WAAWoP,OAAO9L,wBAAgB,eAAE+U,iBAAiBqa,SAC5ExrC,EACFwrC,GAAYA,EAAS,kCACf,CAAEzgB,OAAQ,CAAEkJ,OAAQzJ,OAAOuR,SAAShI,gBACpC7yB,EACJ8D,EAAWvH,KAAK8hD,eAEtB,OAAO9hD,KAAKuhC,OACP+Q,SAAStyC,KAAK6xC,4BAA4B5jB,kBAAkB1mB,EAAUhF,IACtEirB,MAAK,SAACzrB,GACH,IAAM8lB,EAAW,EAAKk6B,aAAahgD,GAC7Byf,EAAgBzf,EAAMmiB,eAAeE,iBAAiB7c,GACtDy6C,IAAuBjgD,EAAM6gB,gBAAgBxG,qBAEnD,IAAKoF,EACD,MAAM,IAAI,GAAiBnL,GAAqBa,sBAG5C,IAAA4jC,EAAat5B,EAAciJ,OAAM,SAEzC,OAAOkK,QAAQsM,IAAI,CACf,EAAKmf,uBAAuBpmB,OAC5B,EAAKqmB,sBAAsB3P,WACvB7oB,EACArG,EACAwgC,KAELx0B,MAAK,SAAC,G,IAACy0B,EAAS,KAAElB,EAAkB,KAInC,OAHA,EAAKH,iBAAmB,EAAKsB,oBAAoBD,EAAWnH,GAC5D,EAAKqG,oBAAsBJ,EAEpB,EAAKH,iBACPuB,aAAa,CACVC,sBAAuB,CACnB,CACIzjD,KAAMoiD,EAAmBqB,sBAAsB,GAAGzjD,KAClD0jD,WAAY,CACRC,mBACIvB,EAAmBqB,sBAAsB,GAAGC,WACvCC,mBACTC,oBACIxB,EAAmBqB,sBAAsB,GAAGC,WACvCE,uBAIrBC,WAAYzB,EAAmByB,WAC/BC,gBAAiB1B,EAAmB0B,kBAEvCj1B,MAAK,SAACnuB,GACH,IAAIA,EAASI,OAIb,MAAM,IAAI,CACd,GACR,GACJ,GACR,EAEQ,YAAAijD,oBAAR,SAA4BC,GACxB,MAAO,CACHhkD,KAAMgkD,EAAgBniB,SACtB4J,OAAQuY,EAAgBC,SAEhC,EAEQ,YAAAb,aAAR,SAAqBhgD,GACjB,IAAI/B,KAAKsgD,cAAT,CAIA,IAAMz4B,EAAW9lB,EAAM8lB,SAAS1L,cAEhC,IAAK0L,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,OAAOmR,C,CACX,EAEQ,YAAAm5B,uBAAR,WACI,IAAKhhD,KAAKmhD,oBACN,MAAM,IAAI,GAGd,OAAOnhD,KAAKmhD,mBAChB,EAEQ,YAAAe,oBAAR,SAA4BW,EAAsB/H,GAC9C,QAAiBr3C,IAAbq3C,EACA,MAAM,IAAI,GAAiBzkC,GAAqBa,sBAGpD,IAAM4rC,EAA+BhI,EAAW,OAAS,aAEzD,OAAO,IAAI+H,EAAOp6B,SAASs6B,IAAIC,eAAe,CAAEF,YAAW,GAC/D,EAEQ,YAAAhB,aAAR,WACI,IAAK9hD,KAAKugD,UACN,MAAM,IAAI,GAAoBtmB,GAAwBE,uBAG1D,OAAOn6B,KAAKugD,SAChB,EAEQ,YAAA0C,qCAAR,SACIvhB,EACAn8B,EACA29C,GAEA,IACM,EAAwBhD,GADbxe,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe9F,MAC5Dub,EAAS,KAAEC,EAAQ,KACpBE,EAAWsnB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe4V,SAC7DE,EAAOonB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe4+C,SACzD3oC,EAAainB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAeiW,WAC/DD,EAAcknB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAegW,YAEtE,KAAKP,GAAcG,GAAaE,GAASG,GAAeD,GACpD,MAAM,IAAI,GAAiBnE,GAAqBE,uBAGpD,MAAO,CACHhR,GAAE,EACF0U,UAAS,EACTC,SAAQ,EACRC,QAASunB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe6+C,YAC3DjpC,SAAQ,EACRC,SACIqnB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe6V,SAClDqnB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe8+C,SACtDhpC,KAAI,EACJC,gBAAiBmnB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe++C,mBACnE3e,oBACIlD,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAe++C,mBACtD9oC,WAAU,EACVD,YAAW,EACXE,MAAOgnB,EAAYyhB,kBAAkB5Y,KAAK/lC,eAAeg/C,YACzD7oC,aAAc,GACd2U,MAAO4zB,GAAiBxhB,EAAYpS,MAE5C,EAEQ,YAAAqyB,sCAAR,SAA8C3nC,GACpC,MAAwBkmC,GAAoBlmC,EAAQtb,MAE1D,MAAO,CACHub,UAHY,KAIZC,SAJsB,KAKtBC,QAASH,EAAQqpC,YACjBjpC,SAAUJ,EAAQI,SAClBC,SAAUL,EAAQK,SAAWL,EAAQspC,SACrChpC,KAAMN,EAAQopC,SACd7oC,gBAAiBP,EAAQupC,mBACzB3e,oBAAqB5qB,EAAQupC,mBAC7B9oC,WAAYT,EAAQS,WACpBD,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQwpC,YACf7oC,aAAc,GAEtB,EAEQ,YAAA8mC,UAAR,SAAkBgC,GACd,IAAMd,EAAkBc,EAAgBC,QAClCC,EAAe3jD,KAAKsgD,cACpBtgD,KAAKuhC,OAAOlmB,WAAWtU,KAAKgX,iBAAiBxY,QAC7C9B,EAEN,OAAOzD,KAAKitB,eAAe8C,KAAK,gBAAiB,CAC7C5wB,SAAS,eACLmvB,OAAQ,YACR,eAAgB,qCACbF,IAEPlvB,MAAM,eACF0kD,aAAcH,EAAgB9kD,KAC9B2qB,MAAOm6B,EAAgBn6B,MACvBu6B,YAAaJ,EAAgBI,YAC7BprC,SAAUzY,KAAK8hD,eACf9/C,OAAQ,wBACR8hD,iBAAkB9jD,KAAK0iD,oBAAoBC,IACvCgB,GAAgB,CAAEI,QAASJ,KAG3C,EAEQ,YAAAjC,sBAAR,SACIhgB,GAEA,IAAMsiB,EAAuBhkD,KAAKuhC,OAAOlmB,WAAW7W,eAAesW,oBAEnE,IAAKkpC,EACD,MAAM,IAAI,GAAiB3tC,GAAqBE,uBAGpD,IAAM0tC,EAAyBjkD,KAAKijD,qCAChCvhB,EACAsiB,EAAqBz+C,GACrBy+C,EAAqB10B,OAGzB,OAAOtvB,KAAKuhC,OAAO+Q,SACftyC,KAAK2xC,6BAA6BtiB,cAAc40B,GAExD,EACJ,EA7RA,G,GC1BA,WACI,WACYhoB,EACApG,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAoG,cAAAA,EACA,KAAApG,QAAAA,CACT,CAWP,OATI,YAAAmE,KAAA,sBACI,OAAOh6B,KAAKi8B,cAAcK,WAAW,yCAAyC9O,MAAK,WAC/E,IAAK,EAAKqI,QAAQgtB,OACd,MAAM,IAAI,GAGd,OAAO,EAAKhtB,QAAQgtB,MACxB,GACJ,EACJ,EAfA,GCQe,SAASqB,GACpBz4B,EACA04B,GAEA,IAAMC,GAAgB,IAAAC,uBAChB7nB,GAAe,KAAA8nB,mBAErB,OAAO,IAAI,GACP74B,EACA,IAAI,GAA2B,IAAI,GAA2B24B,IAC9D,IAAI,GAAsB5nB,GAC1B2nB,EACA,IAAI,GACA,IAAI,GAA4BC,GAChC,IAAI,GAA2B,IAAI,GAA2BA,KAElE,IAAI,GACA,IAAI,GAAyBA,GAC7B,IAAI,GAAsBA,IAE9BA,EAER,C,SCvBA,wBAqGA,QApGI,YAAA1T,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GAEN,MAKAA,EAAW,kBAJP/iC,EAAI,OACgB0O,EAAK,yBACzB,IAAAk9B,KAAqB/J,EAAQ,cAAeoiB,EAAQ,cAI5D,OAAOjuB,QAAQyH,QAAQ,CACnBz9B,KAAI,EACJ2qB,MAAOjc,EACPq2C,QAAS,CACLljB,SAAQ,EACRoiB,SAAQ,IAGpB,EAEQ,YAAA2B,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFcwuB,EAEtBxuB,EAAQ,mBAGR,EAQArG,EAAa,mBAPTgjC,EAAiB,oBACHhqC,EAAW,eACLiqC,EAAY,qBACd5J,EAAU,mBAMpC,MAAO,CACH2H,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtB9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfZ/gC,EAAa,eAemCnhB,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,QACT41C,kBAAiB,MAKjCvD,gBAAiB,CACbzmC,YAAW,EACX67B,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,IAErDC,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EArGA,G,GCAA,wBAqGA,QApGI,YAAArU,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GAEN,MAKAA,EAAW,kBAJP/iC,EAAI,OACgB0O,EAAK,yBACzB,IAAAk9B,KAAqB/J,EAAQ,cAAeoiB,EAAQ,cAI5D,OAAOjuB,QAAQyH,QAAQ,CACnBz9B,KAAI,EACJ2qB,MAAOjc,EACPq2C,QAAS,CACLljB,SAAQ,EACRoiB,SAAQ,IAGpB,EAEQ,YAAA2B,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFcwuB,EAEtBxuB,EAAQ,mBAGR,EAQArG,EAAa,mBAPTgjC,EAAiB,oBACHhqC,EAAW,eACLiqC,EAAY,qBACd5J,EAAU,mBAMpC,MAAO,CACH2H,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtB9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfZ/gC,EAAa,eAemCnhB,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,QACT41C,kBAAiB,MAKjCvD,gBAAiB,CACbzmC,YAAW,EACX67B,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,IAErDC,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EArGA,GCCA,IAAMO,GAAc,CAChB9C,WAAY,EACZC,gBAAiB,G,SAGrB,wBAmHA,QAlHI,YAAA/R,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKulD,6BAA6B19B,EAAUrG,EAAewgC,GAEnE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GAEN,MAKAA,EAAW,kBAJP/iC,EAAI,OACgB0O,EAAK,yBACzB,IAAAk9B,KAAqB/J,EAAQ,cAAeoiB,EAAQ,cAI5D,OAAOjuB,QAAQyH,QAAQ,CACnBz9B,KAAI,EACJ2qB,MAAO1V,KAAKvG,GACZq2C,QAAS,CACLljB,SAAQ,EACRoiB,SAAQ,IAGpB,EAEQ,YAAA2C,6BAAR,SACI19B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFcwuB,EAEtBxuB,EAAQ,mBAGR,EAQArG,EAAa,mBAPSgjC,EAAiB,mBACrBhqC,EAAW,eACLiqC,EAAY,qBACd5J,EAAU,mBACb8J,EAAO,gBAE1Ba,EACAhkC,EAAa,eAEXikC,EAA8BzlD,KAAK0lD,gCAAgClB,GACnEmB,EAAoB3lD,KAAK4lD,sBAC3BH,EACAD,GAGJ,OAAO,gCACAF,IAAW,CACdlD,sBAAuB,CAACuD,GACxB1E,gBAAiB,CACbgE,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,GACjD7O,aAAY,EACZ77B,YAAW,GAEfkqC,aAAc,CACVD,aAAY,EACZ5J,WAAU,EACV8J,QAAO,GAEXQ,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,IAGjC,EAEQ,YAAAW,gCAAR,SAAwClB,GACpC,MAAO,CACH7lD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,eACT41C,kBAAiB,GAG7B,EAEQ,YAAAoB,sBAAR,SACIZ,EACAQ,GAEA,MAAO,CACH7mD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBiD,EAAenlD,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAAyB,EAEjC,EACJ,EAnHA,G,GCNA,wBAmGA,QAlGI,YAAAtU,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GAEN,MAKAA,EAAW,kBAJP/iC,EAAI,OACgB0O,EAAK,yBACzB,IAAAk9B,KAAqB/J,EAAQ,cAAeoiB,EAAQ,cAI5D,OAAOjuB,QAAQyH,QAAQ,CACnB9S,MAAO1V,KAAKvG,GACZ1O,KAAI,EACJ+kD,QAAS,CACLljB,SAAQ,EACRoiB,SAAQ,IAGpB,EAEQ,YAAA2B,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFcwuB,EAEtBxuB,EAAQ,mBAGR,EAOArG,EAAa,mBANTgjC,EAAiB,oBACGC,EAAY,qBACd5J,EAAU,mBAMpC,MAAO,CACH2H,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtB9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfZ/gC,EAAa,eAemCnhB,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,cACT41C,kBAAiB,MAKjCvD,gBAAiB,CACb5K,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,IAErDC,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EAnGA,G,GCMA,WAGI,WAAoBc,GAAA,KAAAA,qBAAAA,CAA4C,CA0IpE,OAxII,YAAAnV,WAAA,SACI7oB,EACArG,EACAwgC,GAHJ,WAKI,IAAKxgC,EAAc66B,YACf,MAAM,IAAI,GAAiBhmC,GAAqBa,sBAKpD,OAFAlX,KAAK6lD,qBAAqBnV,WAAWlvB,EAAc66B,aAE5Cr8C,KAAK6lD,qBACP3G,4BACA1xB,MAAK,SAACs4B,GAGH,OAFA,EAAKC,uBAAyBD,EAEvB,EAAKE,wBACRn+B,EACArG,EAAcssB,mBACdkU,EAER,GACR,EAEA,YAAAlD,SAAA,WACI,OAAO9+C,KAAK6lD,qBAAqB/G,UACrC,EAEA,YAAAyC,cAAA,SAAc7f,GACV,IAAMv/B,EAAU0R,KAAKoyC,MAAMvkB,EAAYyhB,kBAAkB+C,iBAAiB74C,OACrE84C,gBAAgB,GAErB,OAAOxxB,QAAQyH,QAAQ,CACnB9S,MAAOnnB,EAAQmnB,MACf3qB,KAAMwD,EAAQxD,KACdotC,YAAa5pC,EAAQ4pC,YACrB2X,QAAS,CACLljB,SAAUr+B,EAAQuhD,QAAQljB,SAC1BoiB,SAAUzgD,EAAQuhD,QAAQd,SAC1BwD,QAASjkD,EAAQuhD,QAAQ0C,SAE7BC,QAASlkD,EAAQkkD,SAEzB,EAEQ,YAAAL,wBAAR,SACIn+B,EACAimB,EACAkU,GAEA,IAAKlU,EAAmBwY,cACpB,MAAM,IAAI,GAAiBjwC,GAAqBa,sBAGpD,IAAMm/B,GAAexuB,aAAQ,EAARA,EAAU9gB,KAAK4qB,SAASrxB,OAAQ,GAC/C4gD,GAAar5B,aAAQ,EAARA,EAAUK,qBACvB,IAAA8c,OAAMnd,EAASK,mBAAoB,GAAGg9B,QAAQ,GAC9C,GAEAqB,EAAsE,CACxE7B,aAAc,CACVC,QAAS7W,EAAmBwY,cAC5B7B,aAAc3W,EAAmB0Y,mBACjC3L,WAAY/M,EAAmB2Y,kBAEnCxF,gBAAiB,CACb5K,aAAY,EACZ4O,iBAAkB,QAClB/D,WAAU,GAEdwF,iBAAkB,CACd9B,wBAAwB,EACxB+B,qBAAsB,QAE1BvB,yBAA0BpD,EAC1BmD,eAAe,EACfJ,qBAAqB,GAGzB,OAAO/kD,KAAK4mD,0DACR5mD,KAAK+lD,uBAAuBc,yBACxBN,GAGZ,EAEQ,YAAAK,0DAAR,SACIE,GAEA,MAAO,CACHtE,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAASmC,EAAgCpC,aAAaC,QACtD9J,WAAYiM,EAAgCpC,aAAa7J,WACzD4J,aAAcqC,EAAgCpC,aAAaD,cAE/DrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBACIuE,EAAgCJ,iBAAiBnE,oBACrDqC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,YACT,uBAAwB,KACxB,qCACIk4C,EAAgCC,oCAC3B1E,WAAW,sCACpB,uBACIyE,EAAgCC,oCAC3B1E,WAAW,wBACpB,uBACIyE,EAAgCC,oCAC3B1E,WAAW,4BAKpCpB,gBAAiB6F,EAAgC7F,gBACjDkE,eAAe,EACfC,wBAAyB0B,EAAgC1B,wBACzDC,0BAA2B,CACvBN,oBAAqB+B,EAAgC/B,qBAGjE,EACJ,EA7IA,G,GCZA,YACI,WAAYvmD,GAAZ,MACI,YACIA,GACI,qGACP,K,OAED,EAAKE,KAAO,2BACZ,EAAKC,KAAO,gC,CAChB,CACJ,OAVsD,oBAUtD,EAVA,CAAsD,G,GCWtD,WAKI,WAAoBsuB,GAAA,KAAAA,eAAAA,EAJZ,KAAA+5B,gBAAkB,GAClB,KAAAC,WAAY,EACZ,KAAAC,cAAgB,0CAE4B,CA+IxD,OA7IU,YAAAxW,WAAN,SACI7oB,EACArG,EACAwgC,G,+FAKA,OAHAhiD,KAAKgnD,gBAAkBxlC,EAAcssB,mBAAmBqZ,eACxDnnD,KAAKinD,YAAczlC,EAAciJ,OAAOqwB,SAEjC,CAAP,EAAO96C,KAAKonD,4DACRv/B,EACArG,EAAcssB,mBACdkU,G,QAIR,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEM,YAAAmlB,cAAN,SAAoB7f,G,gIAGhB,IACIr0B,EAAQwG,KAAKoyC,MAAMvkB,EAAYyhB,kBAAkB+C,iBAAiB74C,M,CACpE,MAAOg6C,GACL,MAAM,IAAI,GAAqBrnD,KAAKknD,c,CAGxC,IAAK75C,EAAMi6C,YAAcj6C,EAAMk6C,kBAAoBl6C,EAAMm6C,cACrD,MAAM,IAAI,GAAyBxnD,KAAKknD,eAGzB,SAAMlnD,KAAKynD,cAAcznD,KAAKinD,UAAWjnD,KAAKgnD,gBAAiB35C,I,OAgBlF,OAhBMq6C,EAAa,SAEbvlD,EAA2B,CAC7BmnB,MAAOo+B,EAAWr6C,MAClB1O,KAAM,aACNotC,YAAarK,EAAYyhB,kBAAkBpX,YAC3C2X,QAAS,CACLljB,SAAUkB,EAAYyhB,kBAAkB5Y,KAAKod,YAC7C/E,SAAUlhB,EAAYyhB,kBAAkB5Y,KAAKqd,cAIjDF,EAAWG,eACX1lD,EAAQ0hD,YAAc6D,EAAWG,cAG9B,CAAP,EAAO1lD,G,QAGG,YAAAslD,cAAd,SACI3M,EACAqM,EACA95C,G,4HAE2C,SAAMrN,KAAK8nD,4BAClDhN,EACAqM,EACA,CACIxoD,KAAM,YACNopD,WAAY16C,K,OAIpB,KATM26C,EAAqC,YASjBA,EAAiB36C,MACvC,MAAM,IAAI,GAAyB,8CAGvC,MAAO,CAAP,EAAO26C,G,QAGG,YAAAF,4BAAd,SACIhN,EACAmN,EACAlkD,G,YAAA,IAAAA,IAAAA,EAAA,K,qHAOiB,OAFXwqB,EAAMusB,EAHK,0CACA,kCAIA,GAAM96C,KAAKitB,eAAe8C,KAAKxB,EAAK,CACjDM,aAAa,EACb3vB,KAAM6E,EACN5E,QAAS,CACL,eAAgB,QAChB+oD,cAAeD,EACf,eAAgB,S,OAIxB,MAAO,CAAP,EAViB,SAUD/oD,M,QAGZ,YAAAkoD,4DAAR,SACIv/B,EACAimB,EACAkU,GAEA,MAAO,CACHQ,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAAS7W,EAAmBwY,cAC5BzL,WAAY/M,EAAmB2Y,iBAC/BhC,aAAc3W,EAAmB0Y,oBAErCpE,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqB,CAAC,OAAQ,WAAY,MAAO,aAAc,QAC/DqC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,cACT41C,kBAAmB1W,EAAmBqZ,mBAKtDlG,gBAAiB,CACb5K,aAAcxuB,EAAS9gB,KAAK4qB,SAASrxB,KACrC2kD,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAMnd,EAASK,mBAAoB,GAAGg9B,QAAQ,IAE9DC,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EApJA,G,GCLA,wBAmGA,QAlGI,YAAArU,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GAEN,MAKAA,EAAW,kBAJP/iC,EAAI,OACgB0O,EAAK,yBACzB,IAAAk9B,KAAqB/J,EAAQ,cAAeoiB,EAAQ,cAI5D,OAAOjuB,QAAQyH,QAAQ,CACnB9S,MAAO1V,KAAKvG,GACZ1O,KAAI,EACJ+kD,QAAS,CACLljB,SAAQ,EACRoiB,SAAQ,IAGpB,EAEQ,YAAA2B,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFcwuB,EAEtBxuB,EAAQ,mBAGR,EAOArG,EAAa,mBANTgjC,EAAiB,oBACGC,EAAY,qBACd5J,EAAU,mBAMpC,MAAO,CACH2H,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtB9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfZ/gC,EAAa,eAemCnhB,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,cACT41C,kBAAiB,MAKjCvD,gBAAiB,CACb5K,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,IAErDC,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EAnGA,G,GCAA,wBAmGA,QAlGI,YAAArU,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GAEN,MAKAA,EAAW,kBAJP/iC,EAAI,OACgB0O,EAAK,yBACzB,IAAAk9B,KAAqB/J,EAAQ,cAAeoiB,EAAQ,cAI5D,OAAOjuB,QAAQyH,QAAQ,CACnB9S,MAAO1V,KAAKvG,GACZ1O,KAAI,EACJ+kD,QAAS,CACLljB,SAAQ,EACRoiB,SAAQ,IAGpB,EAEQ,YAAA2B,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFcwuB,EAEtBxuB,EAAQ,mBAGR,EAOArG,EAAa,mBANTgjC,EAAiB,oBACGC,EAAY,qBACd5J,EAAU,mBAMpC,MAAO,CACH2H,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QATsB,gBAUtB9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfZ/gC,EAAa,eAemCnhB,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,QACT41C,kBAAiB,MAKjCvD,gBAAiB,CACb5K,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,IAErDC,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EAnGA,G,GCCA,wBA2GA,QA1GI,YAAArU,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GACV,IACI,IAAMv/B,EAAU0R,KAAKoyC,MAAMvkB,EAAYyhB,kBAAkB+C,iBAAiB74C,OAE1E,OAAOsnB,QAAQyH,QAAQ,CACnB9S,MAAOnnB,EAAQoD,GACf5G,KAAMwD,EAAQxD,KACd+kD,QAAS,CACLljB,SAAUr+B,EAAQ4f,KAAKulB,MACvBsb,SAAUzgD,EAAQ4f,KAAKomC,Q,CAGjC,MAAOd,GACL,MAAM,IAAI,GAAqB,4C,CAEvC,EAEQ,YAAA9C,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAKAL,EAAQ,mBAHcwuB,EAGtBxuB,EAAQ,mBADR7V,EACA6V,EAAQ,aAGR,EAUArG,EAAa,mBATWijC,EAAY,qBACd5J,EAAU,mBACb8J,EAAO,gBACtByD,EAAa,gBACbC,EAAoB,uBACpBC,EAAsB,yBACtB1Z,EAAK,QAET4W,EACAhkC,EAAa,eAEXutB,EAAW/8B,EAAaoZ,OAAM,SAAC9F,GAAgB,OAAAA,EAAYC,oBAAZ,IAErD,MAAO,CACHi9B,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAAO,EACP9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBiD,EAAenlD,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,SACT,iBAAkBw5C,EAClB,wBAA4BC,EAAoB,IAAIC,MAKpErH,gBAAiB,CACb5K,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoB,GAAGg9B,QAAQ,IAErDC,eAAe,EACfC,2BACIxW,aAAK,EAALA,EAAOC,UAAWE,GAAuC,UAA3BH,aAAK,EAALA,EAAOE,kBAE9BkT,GACXqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EA3GA,G,GCCA,wBAgHA,QA/GI,YAAArU,WAAA,SACI7oB,EACArG,EACAwgC,GAEA,OAAOrtB,QAAQyH,QACXp8B,KAAKukD,gCAAgC18B,EAAUrG,EAAewgC,GAEtE,EAEA,YAAAlD,SAAA,WACI,OAAOnqB,QAAQyH,SACnB,EAEA,YAAAmlB,cAAA,SAAc7f,GACV,IAAIv/B,EAEJ,IACIA,EAAU0R,KAAKoyC,MAAMvkB,EAAYyhB,kBAAkB+C,iBAAiB74C,M,CACtE,MAAOg6C,GACL,MAAM,IAAI,GAAqB,4C,CAGnC,KACKllD,EAAQoD,IACRpD,EAAQxD,MACRwD,EAAQ4f,MACR5f,EAAQ4f,KAAKulB,OACbnlC,EAAQ4f,KAAKomC,OAEd,MAAM,IAAI,GAAyB,6CAGvC,OAAOxzB,QAAQyH,QAAQ,CACnB9S,MAAOnnB,EAAQoD,GACf5G,KAAMwD,EAAQxD,KACd+kD,QAAS,CACLljB,SAAUr+B,EAAQ4f,KAAKulB,MACvBsb,SAAUzgD,EAAQ4f,KAAKomC,QAGnC,EAEQ,YAAA5D,gCAAR,SACI18B,EACArG,EACAwgC,GAGI,IAAA95B,EAIAL,EAAQ,mBAFJ,EAEJA,EAAQ,cAFcwuB,EAAY,OAAEjQ,EAAa,gBAKjD,EASA5kB,EAAa,mBARWijC,EAAY,qBACd5J,EAAU,mBACb8J,EAAO,gBACtByD,EAAa,gBACbC,EAAoB,uBACpBC,EAAsB,yBAK9B,MAAO,CACH9F,WAAY,EACZC,gBAAiB,EACjBiC,aAAc,CACVC,QAAO,EACP9J,WAAU,EACV4J,aAAY,GAEhBrC,sBAAuB,CACnB,CACIzjD,KAAM,OACN0jD,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfZ/gC,EAAa,eAemCnhB,KAAI,SAAC0hB,GACrC,MAAS,OAATA,EAAgB,aAAeA,CAA/B,IAEJ6iC,wBAAwB,EACxBC,yBAA0B,CACtB/a,OAAQmW,GAAqB6E,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBrmD,KAAM,kBACN0jD,WAAY,CACRzzC,QAAS,SACT,iBAAkBw5C,EAClB,wBAA4BC,EAAoB,IAAIC,MAKpErH,gBAAiB,CACb5K,aAAY,EACZ4O,iBAAkB,QAClB/D,YAAY,IAAAlc,OAAM9c,EAAoBke,GAAe8e,QAAQ9e,IAEjE+e,eAAe,EACfC,yBAA0BpD,EAC1BqD,0BAA2B,CACvBN,qBAAqB,GAGjC,EACJ,EAhHA,G,GCFA,WACI,WACY9oB,EACDpG,QAAA,IAAAA,IAAAA,EAAA,QADC,KAAAoG,cAAAA,EACD,KAAApG,QAAAA,CACR,CAoCP,OAlCU,YAAAmE,KAAN,SAAW,G,IACPuuB,EAAgB,mBAChBC,EAAQ,WACR1N,EAAQ,WACRnrB,EAAU,a,mIAEN44B,GAIME,EAAY,CACd,YAJc3N,EAAW,WAAa,IAIlB,kDAHT,CAAC,UAAU0N,EAAY,cAAc74B,GAIzChwB,KAAK,MACdA,KAAK,KAEP,GAAMK,KAAKi8B,cAAcK,WAAWmsB,KATpC,M,cAsBJ,GAJA,UAIKzoD,KAAK61B,QAAQ6yB,WACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO1oD,KAAK61B,QAAQ6yB,Y,OARpB,SAAM1oD,KAAKi8B,cAAcK,WACrB,MAAKwe,EAAW,WAAa,IAAE,2C,QAS3C,EAxCA,G,GCPA,WAGI,WAAoB7e,GAAA,KAAAA,cAAAA,EAChBj8B,KAAK61B,QAAU9I,MACnB,CAmBJ,OAjBU,YAAA8vB,WAAN,SAAiBhC,G,YAAA,IAAAA,IAAAA,EAAA,K,8HACP8N,EAAY,8CACZpmD,EAA6B,CAC/BqmD,OAAO,EACP7sB,WAAY,CAAE,mBAAoB8e,IAGtCA,EACM,GAAM76C,KAAKi8B,cAAcK,WAAWqsB,EAAWpmD,IADrD,M,cACM,S,aACA,SAAMvC,KAAKi8B,cAAcK,WAAWqsB,I,OAApC,S,iBAEN,IAAK3oD,KAAK61B,QAAQ2nB,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOx9C,KAAK61B,QAAQ2nB,Q,QAE5B,EAxBA,G,GCQA,WAII,WAAoBvhB,GAAA,KAAAA,cAAAA,EAChBj8B,KAAK61B,QAAU9I,MACnB,CAmHJ,OAjHU,YAAA87B,aAAN,SACIrnC,EACA60B,EACAyS,G,+FAYA,OAVK9oD,KAAK+oD,aACN/oD,KAAK+oD,WAAa/oD,KAAKy9C,cACnBz9C,KAAKgpD,iCACDxnC,EACA60B,EACAyS,KAKL,CAAP,EAAO9oD,KAAK+oD,W,QAGF,YAAAtL,cAAd,SACIwL,G,6HAEKjpD,KAAK61B,QAAQqzB,iBAAd,MAIA,GAAMlpD,KAAKi8B,cAAcK,WAFP,uEAE6B,CAAEssB,OAAO,EAAM7sB,WAAY,CAAC,K,OAE3E,GAFA,UAEK/7B,KAAK61B,QAAQqzB,iBACd,MAAM,IAAI,G,iBAIlB,SAAMlpD,KAAK61B,QAAQqzB,iBAAiBD,I,OAEpC,GAFA,UAEKjpD,KAAK61B,QAAQ2nB,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOx9C,KAAK61B,QAAQ2nB,Q,QAGhB,YAAAwL,iCAAR,SACIxnC,EACA60B,EACAyS,QAAA,IAAAA,IAAAA,GAAA,GAEQ,IAAAvjD,EAAwCic,EAAa,GAAjD66B,EAAoC76B,EAAa,YAApCssB,EAAuBtsB,EAAa,mBAE7D,KAAKssB,aAAkB,EAAlBA,EAAoBqb,UACrB,MAAM,IAAI,GAAiB9yC,GAAqBa,sBAIhD,IAAAkyC,EAUAtb,EAAkB,OATlBqb,EASArb,EAAkB,SARlB+M,EAQA/M,EAAkB,WAPlBub,EAOAvb,EAAkB,cANlBwb,EAMAxb,EAAkB,eALlByb,EAKAzb,EAAkB,wBAJlB0b,EAIA1b,EAAkB,wBAHlB2b,EAGA3b,EAAkB,wBAFlB,EAEAA,EAAkB,mCAFlB4b,OAAkC,IAAG,KAAE,EACvC,EACA5b,EAAkB,iCADlB6b,OAAgC,IAAG,KAAE,EAGnCC,GAA4Bd,GAA6BU,EAEzDK,EACFD,GAA4BL,GAA2BT,EAErDgB,EAAmBF,GAAmC,8BAAPrkD,EAC/CwkD,EAAoBD,EAAmB,CAAC,QAAU,GAClDE,EAAsBF,EAA8B,GAAX,CAAC,QAE1CG,EAAsBR,EAA0B,CAAC,SAAU,YAAc,GACzES,EAAwBT,EAAmD,GAAzB,CAAC,SAAU,YAE7DU,EAAmBrB,IAA8Be,EACjDO,EAAqBD,GAAoBb,EAAiB,CAAC,SAAW,GACtEe,EAAuBF,GAAqBb,EAA6B,GAAZ,CAAC,SAC9DgB,EAAoBH,EAAmBR,EAAmC,GAC1EY,EAAqBJ,EACrBT,EAAmC1mD,QAC/B,SAACwnD,GAAgB,OAACb,EAAiC/4B,SAAS45B,EAA3C,IAErBd,EAEAe,GAAc,oBACbT,EACAE,EACAG,EACAE,GAEDG,GAAa,oBACZX,EACAE,EACAG,EACAE,GAGP,MAAO,CACH,YAAanB,EACb,8BAA+BE,EAC/B,oBAAqBhN,EACrB,cAAexB,EACf,iBAAkB6P,EAActqD,OAAS,EAAIsqD,OAAgBjnD,EAC7D,kBAAmBgnD,EAAerqD,OAAS,EAAIqqD,OAAiBhnD,EAChEomD,OAAM,EACNtM,WAAY,CAAC,UAAW,gBAAiB,WAAY,kBACrD5rB,SAAU0kB,EACV+S,OAAM,EAEd,EACJ,EAzHA,G,GCKA,WACI,WAAoBn8B,GAAA,KAAAA,eAAAA,CAAgC,CAwExD,OApEU,YAAA09B,aAAN,SAAmBp9B,EAAgBD,G,YAAA,IAAAA,IAAAA,EAAA,K,wGAsB/B,OArBQs9B,EAAuDt9B,EAAM,SAAnDu9B,EAA6Cv9B,EAAM,WAAvCw9B,EAAiCx9B,EAAM,aAAzBy9B,EAAmBz9B,EAAM,MAAlB09B,EAAY19B,EAAM,QACjE7U,EAAW,iBAEXqyC,EACAryC,EAAW,oCACJoyC,EACPpyC,EAAWmyC,EAAW,+BAAiC,yBAChDA,IACPnyC,EAAW,wBAGXuyC,IAAYD,IACZtyC,EAAWoyC,EAAa,8BAAgC,uBAGxDE,IACAtyC,EAAWoyC,EACL,2CACA,mCAGH,CAAP,EAAO7qD,KAAKirD,YAAYxyC,EAAU,CAAE8U,OAAM,I,QAGxC,YAAA09B,YAAN,SACIliC,EACAmiC,G,gIAUY,OARN38B,EAAM,2BAA2BxF,EACjC7pB,EAAOgsD,EACP/rD,GAAU,eACZ,iBAAkBgvB,GAClB,eAAgB,SACbC,IAGK,GAAMpuB,KAAKitB,eAAe8C,KAAgBxB,EAAK,CAAEpvB,QAAO,EAAED,KAAI,K,OAE1E,MAAO,CAAP,EAFY,SAEDA,M,QAGT,YAAAisD,eAAN,W,4HAQgB,OANNhsD,GAAU,eACZ,iBAAkBgvB,GAClB,eAAgB,SACbC,IAGK,GAAMpuB,KAAKitB,eAAenvB,IAP1B,gDAOgD,CAAEqB,QAAO,K,OAErE,MAAO,CAAP,EAFY,SAEDD,M,QAGT,YAAAksD,YAAN,SAAkBjpD,G,8HASF,OAPNjD,EAAOiD,EACPhD,GAAU,eACZ,iBAAkBgvB,GAClB,eAAgB,SACbC,IAGK,GAAMpuB,KAAKitB,eAAe+C,IAR1B,gDAQmC,CAAE7wB,QAAO,EAAED,KAAI,K,OAE9D,MAAO,CAAP,EAFY,SAEDA,M,QAEnB,EAzEA,G,GCZA,WACI,WAAoB+tB,GAAA,KAAAA,eAAAA,CAAgC,CA8DxD,OA5DI,YAAAo+B,kBAAA,SACIC,EACAh+B,EACA,G,IAAEe,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,oBAAoB+8B,EAAU,WAE1C,OAAOtrD,KAAKitB,eAAenvB,IAAIywB,EAAK,CAAEjB,OAAM,EAAEe,QAAO,EAAElvB,QAASivB,IACpE,EAEA,YAAAm9B,mBAAA,SACID,EACAh+B,EACA,G,IAAEe,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,oBAAoB+8B,EAAU,YAE1C,OAAOtrD,KAAKitB,eAAenvB,IAAIywB,EAAK,CAAEjB,OAAM,EAAEe,QAAO,EAAElvB,QAASivB,IACpE,EAEA,YAAAo9B,kBAAA,SACIF,EACAh+B,EACA,G,IAAEe,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHE,EAAM,oBAAoB+8B,EAAU,WAE1C,OAAOtrD,KAAKitB,eAAenvB,IAAIywB,EAAK,CAAEjB,OAAM,EAAEe,QAAO,EAAElvB,QAASivB,IACpE,EAEA,YAAAq9B,aAAA,SAAaH,EAAoB,G,IAAEj9B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAChCE,EAAM,oBAAoB+8B,EAAU,YAE1C,OAAOtrD,KAAKitB,eAAenvB,IAAIywB,EAAK,CAAEF,QAAO,EAAElvB,QAASivB,IAC5D,EAEA,YAAAs9B,QAAA,SAAQJ,EAAoB,G,IAAEj9B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAC3BE,EAAM,oBAAoB+8B,EAAU,WAE1C,OAAOtrD,KAAKitB,eAAenvB,IAAIywB,EAAK,CAAEF,QAAO,EAAElvB,QAASivB,IAC5D,EAEA,YAAAu9B,cAAA,SAAc,G,IAAEt9B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGnB,OAAOruB,KAAKitB,eAAenvB,IAFf,yBAEwB,CAAEuwB,QAAO,EAAElvB,QAASivB,IAC5D,EAEA,YAAAw9B,wBAAA,SAAwB,G,IAAEv9B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAI7B,OAAOruB,KAAKitB,eAAe8C,KAFvB,oFAEiC,CAAE1B,QAAO,EAAElvB,QAASivB,IAC7D,EAEA,YAAAy9B,eAAA,SAAe,G,IAAEx9B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGpB,OAAOruB,KAAKitB,eAAe8C,KAFf,mCAEyB,CAAE1B,QAAO,EAAElvB,QAASivB,IAC7D,EACJ,EA/DA,G,GCWA,WACI,WACY09B,EACAx4B,GADA,KAAAw4B,6BAAAA,EACA,KAAAx4B,uBAAAA,CACT,CAkNP,OAhNI,YAAA+3B,kBAAA,SACI9jD,EACA+lB,EACA/qB,GAHJ,WAKI,OAAO,EAAA0pB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MACL,IAAAC,cAAahd,GAAyB07C,sCAAkCtoD,EAAW,CAC/E8D,SAAQ,KAIhB,EAAKukD,6BACAT,kBAAkB9jD,EAAU+lB,EAAQ/qB,GACpCirB,MAAK,SAAC,G,IAAE,IAAAtuB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdiuB,EAASC,MACL,IAAAC,cACIhd,GAAyBe,iCACzBlS,EACA,CAAEqI,SAAQ,KAGlB4lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI3d,GAAyB27C,8BACzB3sD,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAgkD,mBAAA,SACIhkD,EACA+lB,EACA/qB,GAHJ,WAKI,OAAO,EAAA0pB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MACL,IAAAC,cACIhd,GAAyB47C,uCACzBxoD,EACA,CAAE8D,SAAQ,KAIlB,EAAKukD,6BACAP,mBAAmBhkD,EAAU+lB,EAAQ/qB,GACrCirB,MAAK,SAAC,G,IAAE,IAAAtuB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdiuB,EAASC,MACL,IAAAC,cACIhd,GAAyBiB,kCACzBpS,EACA,CAAEqI,SAAQ,KAGlB4lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI3d,GAAyB67C,+BACzB7sD,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAikD,kBAAA,SACIjkD,EACA+lB,EACA/qB,GAHJ,WAKI,OAAO,EAAA0pB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MACL,IAAAC,cAAahd,GAAyB87C,sCAAkC1oD,EAAW,CAC/E8D,SAAQ,KAIhB,EAAKukD,6BACAN,kBAAkBjkD,EAAU+lB,EAAQ/qB,GACpCirB,MAAK,SAAC,G,IAAE,IAAAtuB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdiuB,EAASC,MACL,IAAAC,cACIhd,GAAyB+7C,iCACzBltD,EACA,CAAEqI,SAAQ,KAGlB4lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI3d,GAAyBg8C,8BACzBhtD,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAkkD,aAAA,SAAalkD,EAAkBhF,GAA/B,WACI,OAAO,EAAA0pB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MACL,IAAAC,cAAahd,GAAyBi8C,iCAA6B7oD,EAAW,CAC1E8D,SAAQ,KAIhB,EAAKukD,6BACAL,aAAalkD,EAAUhF,GACvBirB,MAAK,SAAC,G,IAAEtuB,EAAI,OACTiuB,EAASC,MACL,IAAAC,cAAahd,GAAyBmB,4BAA6BtS,EAAM,CACrEqI,SAAQ,KAGhB4lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI3d,GAAyBk8C,yBACzBltD,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAmkD,QAAA,SAAQnkD,EAAkBhF,GAA1B,WACI,OAAO,EAAA0pB,WAAA,QAAkB,SAACkB,GACtBA,EAASC,MACL,IAAAC,cAAahd,GAAyBm8C,oCAAgC/oD,EAAW,CAC7E8D,SAAQ,KAIhB,EAAKukD,6BACAJ,QAAQnkD,EAAUhF,GAClBirB,MAAK,WACFL,EAASC,MACL,IAAAC,cACIhd,GAAyBo8C,oCACzBhpD,EACA,CAAE8D,SAAQ,KAGlB4lB,EAASW,UACb,IACCC,OAAM,SAAC1uB,GACJ8tB,EAASztB,OACL,IAAAsuB,mBACI3d,GAAyBq8C,4BACzBrtD,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAskD,eAAA,SAAetkD,EAAkBhF,GAAjC,WACI,OAAO,IAAAwkB,SACH,IAAA0H,KACI,IAAApB,cACIhd,GAAyBs8C,2CACzBlpD,EACA,CAAE8D,SAAQ,MAGlB,IAAA2nB,QAAM,6D,iEACF,SAAMlvB,KAAK8rD,6BAA6BD,eAAetpD,I,OACvD,OADA,SACA,GAAMvC,KAAKszB,uBAAuB5C,uB,OAElC,OAFA,SAEO,CAAP,GAAO,IAAArD,cACHhd,GAAyBu8C,2CACzBnpD,EACA,CAAE8D,SAAQ,K,WAGpB2jB,MACE,IAAAC,aAAW,SAACzrB,GACR,OAAA8uB,GACIne,GAAyBw8C,mCACzBntD,EACA,CAAE6H,SAAQ,GAHd,IAOZ,EAEA,YAAAkpB,eAAA,SACIlpB,EACAxD,GAEA,OAAO,IAAAspB,cAAahd,GAAyBoB,qBAAsB1N,EAAM,CAAEwD,SAAQ,GACvF,EACJ,EAtNA,G,GCZA,YACI,WAAY/I,GAAZ,MACI,YACIA,GACI,mGACP,K,OAED,EAAKE,KAAO,0BACZ,EAAKC,KAAO,8B,CAChB,CACJ,OAVqD,oBAUrD,EAVA,CAAqD,GCH9C,SAASmuD,GAAqBvqD,GACjC,OAAMA,aAAmB5E,QAIlB,4BAA6B4E,CACxC,C,SCPA,YACI,WAAY/D,GAAZ,MACI,YACIA,GACI,6FACP,K,OAED,EAAKE,KAAO,iCACZ,EAAKC,KAAO,sC,CAChB,CACJ,OAV4D,oBAU5D,EAVA,CAA4D,G,GCqB5D,WAGI,WACY4iC,EACAjO,EACAy5B,EACA/a,EACAgb,GAJA,KAAAzrB,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAAy5B,6BAAAA,EACA,KAAA/a,mBAAAA,EACA,KAAAgb,gCAAAA,CACT,CA6GP,OA3GU,YAAAtc,WAAN,SAAiBnuC,G,0IAGb,GAFQgF,EAAqChF,EAAO,SAAlCkF,EAA2BlF,EAAO,YAArB0qD,EAAc1qD,EAAO,WAE/CgF,IAAaE,EACd,MAAM,IAAI,GACN,mFAQR,OAHsB6c,EAClBtkB,KAAKuhC,OAAOlmB,WAAU,uCAE1B,GAAMrb,KAAK+sD,6BAA6Brc,WAAWpsB,EAAwB/c,K,cAA3E,SAEK0lD,EAAD,MACA,GAAMjtD,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB9C,wB,OAAvD,S,wBAGE08B,EAAgCJ,GAAqBG,QACrDxpD,EACAwpD,EAGFH,GAAqBG,IACmD,mBAA/B,QAAzC,EAAOA,aAAS,EAATA,EAAWE,+BAAuB,eAAEC,4BAE3CptD,KAAKk6C,uBACD+S,EAAUE,wBAAwBC,2BAElCptD,KAAKk6C,wBACLl6C,KAAK+sD,6BAA6B9S,mBAAmBj6C,KAAKk6C,yBAIlEl6C,KAAK+sD,6BAA6BrT,sBAAsB,CACpD3M,cAAe/sC,KAAKuhC,OAAOlmB,WAC3B5T,YAAW,EACXF,SAAQ,EACRhF,QAAS2qD,EACTtT,UAAWlC,GAAqB2V,OAGhCrtD,KAAKk6C,wBACLl6C,KAAK+sD,6BAA6B1T,yCAC9Br5C,KAAKstD,kCAAkCx1B,KAAK93B,O,YAKxD,YAAAg2C,aAAA,WACI,OAAOh2C,KAAK+sD,6BAA6B/W,cAC7C,EAEc,YAAAuX,kBAAd,W,sHACI,IAAKvtD,KAAKk6C,uBACN,MAAM,IAAI,GAAiB7jC,GAAqBG,a,iBAInB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACvDjwB,KAAKk6C,yB,OAGT,MAAO,CAAP,EAJ6B,SAE5B,M,OAID,M,SAAM,IAAI,G,yBAIJ,YAAAsT,sBAAd,SACIjoD,G,kIAKQ,O,sBAAA,GAAMvF,KAAKgtD,gCAAgC1T,qBAAqB/zC,I,OAEpE,OAHI,EACA,SAAmE,KAD3DpD,EAAO,UAAEsrD,EAAU,aAAKC,GAAI,cAA9B,0BAGH,CAAP,kBACIC,YAAaxrD,EACbm4C,YAAamT,GACVC,I,OAGP,M,SAAM,IAAI,G,yBAIJ,YAAAJ,kCAAd,W,8HACuB,SAAMttD,KAAKutD,qB,OAOM,OAP9BK,EAAa,SAEbrU,EAAuB,CACzBlnB,OAAQw7B,OAAOD,EAAW5iB,YAC1BqL,aAAcuX,EAAWj8B,SAASrxB,MAGF,GAAMN,KAAKwtD,sBAAsBI,EAAWroD,K,OAEhF,MAAO,CAAP,EAAO,CACHwzC,4BAHgC,SAIhCQ,qBAAoB,EACpBC,YAC2C,IAAvClC,GAAuBsW,GACjBhW,GAAsB2D,QACtB3D,GAAsB4D,a,QAG5C,EAtHA,G,GCbA,WACI,WAAoBvuB,GAAA,KAAAA,eAAAA,CAAgC,CAYxD,OAVI,YAAAqsB,qBAAA,SAAqB/rB,GACjB,IAAMruB,EAAO,CAAEquB,OAAM,GACfpuB,GAAU,eACZ,iBAAkBgvB,GAClB,eAAgB,SACbC,IAGP,OAAOpuB,KAAKitB,eAAe8C,KAAK,oCAAqC,CAAE5wB,QAAO,EAAED,KAAI,GACxF,EACJ,EAbA,G,GCHA,YACI,WAAYV,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKE,KAAO,8BACZ,EAAKC,KAAO,oB,CAChB,CACJ,OAPyD,oBAOzD,EAPA,CAAyD,GCwBzD,IAGKmvD,IAAL,SAAKA,GACD,sBACA,qBACH,CAHD,CAAKA,KAAAA,GAAa,K,SASlB,WAOI,WACYvsB,EACAjO,EACArG,EACA4kB,EACAD,EACAD,EACAG,EACAic,EACA5qB,EACA6qB,GATA,KAAAzsB,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAArG,eAAAA,EACA,KAAA4kB,4BAAAA,EACA,KAAAD,0BAAAA,EACA,KAAAD,6BAAAA,EACA,KAAAG,sBAAAA,EACA,KAAAic,6BAAAA,EACA,KAAA5qB,oBAAAA,EACA,KAAA6qB,gBAAAA,EAdJ,KAAAC,qBAAuB,EAAAnuB,KACvB,KAAAouB,eAAyBJ,GAAcK,SACvC,KAAAC,eAAyBN,GAAcO,QAa5C,CAobP,OAlbU,YAAA3d,WAAN,SAAiBnuC,G,sIAKb,GAJQgF,EAAoChF,EAAO,SAAjCkF,EAA0BlF,EAAO,YAApB+rD,EAAa/rD,EAAO,SAEnDyqB,GAAqBD,SAEhBxlB,IAAa+mD,EACd,MAAM,IAAI,GAAiBj4C,GAAqBa,sBAOpD,OAJQq3C,EAAwCD,EAAQ,gBAA/BE,EAAuBF,EAAQ,mBAExDtuD,KAAKiuD,qBAAuBO,EAE5B,GAAMxuD,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB9C,wB,OAEzC,OAFd,SAEc,GAAMxwB,KAAKuhC,OAAO+Q,SAC5BtyC,KAAK6xC,4BAA4B5jB,kBAAkB1mB,K,OAQvD,OATMxF,EAAQ,SAId/B,KAAKyuD,eAAiB1sD,EAAMmiB,eAAeI,wBAAwB/c,GAEnEvH,KAAK0uD,gBAAkB1uD,KAAK2uD,cAAclnD,EAAa8mD,GACvDvuD,KAAK0uD,gBAAgBt2B,iBAAiB,QAASp4B,KAAK4uD,0BAE7C,CAAP,EAAOj6B,QAAQyH,W,QAGnB,YAAA4Z,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAuyB,cAAR,SACIlnD,EACA8mD,QAAA,IAAAA,IAAAA,EAAA,6BAEA,IAAM5zB,EAAYnF,SAASmE,eAAelyB,GAE1C,IAAKkzB,EACD,MAAM,IAAI,GACN,8DAIRnF,SAASt2B,KAAK2vD,UAAUC,IAAI,uBAE5B,IAAMC,EAASv5B,SAASW,cAAc,OAOtC,OALA44B,EAAOF,UAAUC,IAAIP,GACrBQ,EAAOj1B,aAAa,OAAQ,UAC5Bi1B,EAAOj1B,aAAa,aAAc,oBAClCa,EAAUZ,YAAYg1B,GAEfA,CACX,EAGQ,YAAAH,yBAAR,SAAiC53B,GAC7BA,EAAMg4B,iBAEN,IAAMjtD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBtU,EAAOhF,EAAMgF,KAAKgX,iBAClB0M,EAAS1oB,EAAM0oB,OAAOzL,wBACtB6I,EAAW9lB,EAAM8lB,SAASH,qBAEhC,IAAK1nB,KAAKyuD,iBAAmBzuD,KAAKyuD,eAAe3gB,mBAC7C,MAAM,IAAI,GAAiBz3B,GAAqBa,sBAGpD,IAAMs2B,EAAUxtC,KAAKivD,gBAAgBloD,EAAM8gB,EAAU4C,EAAQzqB,KAAKyuD,gBAC5DS,EAAkBlvD,KAAKguD,gBAAgB/1C,OAAOu1B,GAEpDxtC,KAAKmvD,sBAAsBD,EAAiBlvD,KAAKyuD,eAAgBhkC,GAEjEykC,EAAgBE,OACpB,EAEQ,YAAAH,gBAAR,SACIloD,EACA8gB,EACA4C,EACAjJ,G,MAGI,EACAiJ,EAAM,aADU2vB,EAAgB,mBAAEiV,EAAS,YAG3C,EACAtoD,EAAI,SADQzG,EAAI,OAAE8lC,EAAa,gBAI/B,EACA5kB,EAAa,mBADS8tC,EAAoB,uBAAEC,EAAiB,oBAG3DC,EAAmBzoD,EAAKkgB,UAAUC,cAAc9mB,OAAS,EAazDotC,EAA6C,CAC/CiiB,6BAA8B,CAAC,iBAC/BC,8BAA+B,CAAC,QAAS,SACzCl1C,YAAa4/B,EACb/D,aAAc/1C,EACdgvD,qBAAoB,EACpBC,kBAAiB,EACjBtoC,UAAW,GACXswB,MApBuCiY,EACrC,CACIpsC,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,GACvCznC,KAAM,WAEV,CACIykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,GACvCznC,KAAM,UAchB,GAAI6wD,EACqC,QAArC,EAAAhiB,EAAQkiB,qCAA6B,SAAEjhD,KAAK,qBACzC,CACH,IAAM,EAA2C,CAC7C,CACI2U,MAAOpjB,KAAKkuD,eACZ77B,OAAQ,GAAGxK,EAASqhB,SAASgc,QAAQ9e,KAI7Cve,EAASwhB,MAAMt2B,SAAQ,SAAC48C,GACpB,SAAUlhD,KAAK,CAAE2U,MAAOusC,EAAIjxD,KAAM2zB,OAAQ,GAAGs9B,EAAIt9B,OAAO6yB,QAAQ9e,IAAhE,IAGJoH,EAAQvmB,UAAY,C,CAGxB,OAAOumB,CACX,EAEQ,YAAA2hB,sBAAR,SACID,EACA1tC,EACAiJ,GAHJ,WAKIykC,EAAgBU,mBAAqB,SAAO54B,GAAK,kD,uEAEP,O,sBAAA,GAAMh3B,KAAK6vD,oBACzCruC,EACAwV,I,cAFU84B,EAAoB,SAGjC,KAEDZ,EAAgBa,2BAA2BD,G,aAE3C,M,SAAM,IAAIhxD,MAAM,8B,yBAIxBowD,EAAgBc,0BAA4B,SAAOh5B,GAAK,4FACpD,SAAAh3B,KAAKiwD,+BAA+Bf,EAAiBzkC,EAAQuM,G,QAEjEk4B,EAAgBgB,yBAA2B,SAAOl5B,GAAK,4FACnD,SAAAh3B,KAAKmwD,8BAA8BjB,EAAiBzkC,EAAQuM,G,QAEhEk4B,EAAgBkB,SAAW,6D,iEAEnB,O,sBAAA,GAAMpwD,KAAKuhC,OAAO+Q,SACdtyC,KAAK+tD,6BAA6BrC,QAAQlqC,EAAcjc,M,OAGrD,OAJP,SAIO,GAAMvF,KAAKuhC,OAAO+Q,SACrBtyC,KAAKszB,uBAAuB5C,wB,OADhC,MAAO,CAAP,EAAO,U,OAIP,M,SAAM,IAAI,G,yBAIlBw+B,EAAgBmB,oBAAsB,SAAOr5B,GAAK,4FAC9C,SAAAh3B,KAAKswD,qBAAqBt5B,EAAOk4B,EAAiB1tC,G,OAC1D,EAEc,YAAAyuC,+BAAd,SACIf,EACAzkC,EACAuM,G,0JAEMpU,EAAkB5iB,KAAKuwD,2BAA2Bv5B,EAAMw5B,iB,iBAG1D,O,sBAAA,GAAMxwD,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BviB,cAAczM,K,cADjD,S,aAMA,M,SAFAssC,EAAgBuB,QAEV,IAAI3xD,MAAM,kC,OAqCpB,GAjCoBuwD,EAChB5kC,EAAM,uBACN1oB,EAAQ/B,KAAKuhC,OAAOlmB,WAER+qB,EACZrkC,EAAMgF,KAAKgX,iBAAgB,uBAC3B8J,EAAW9lB,EAAM8lB,SAASH,qBACxBgpC,EAA2E,QAAlD,EAAG7oC,EAAS7V,aAAa,GAAGwU,8BAAsB,eAAEjhB,GAC7EorD,EAAmB9oC,EAAS7V,aAAa,GAAG4+C,yBAC5CC,EAAiBF,aAAgB,EAAhBA,EAAkBxyC,MAAK,SAAC,GAAW,OAAP,OAAcuyC,CAAP,IACpDI,EAAoBH,aAAgB,EAAhBA,EAAkB3tD,QACxC,SAACykC,GAAW,OAAAA,EAAOliC,KAAOmrD,CAAd,IAEVK,EAAuDF,EACvD,CACI,CACIztC,MAAOytC,EAAe9kB,YACtB1Z,OAAQ,GAAGw+B,EAAepkB,KAAKyY,QAAQ9e,GACvClmC,OAAQ2wD,EAAeG,sBACvBC,WAAYJ,EAAetrD,KAGnC,GAENurD,SAAAA,EAAmB/9C,SAAQ,SAAC00B,GACxB,OAAAspB,EAAgBtiD,KAAK,CACjB2U,MAAOqkB,EAAOsE,YACd1Z,OAAQ,GAAGoV,EAAOgF,KAAKyY,QAAQ9e,GAC/BlmC,OAAQunC,EAAOupB,sBACfC,WAAYxpB,EAAOliC,IAJvB,MAQmBorD,aA7PD9wD,OA8PlB,MAAM,IAAIf,MAAM,mCAGpB,GAAgC,IAA5B6xD,EAAiBvwD,OAYjB,OAXA8uD,EAAgBgC,iCACZjV,gBAAgBkV,uCAChB,GACA,CACIxyD,KAAM,UACNykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,IAE3C,IAGJ,IAGEgrB,EAAoBT,EAAiBxyC,MAAK,SAACspB,GAAW,OAAAA,EAAOkF,aAAP,IAEtD0kB,EAAWD,EAAoBA,EAAkB7rD,GAAKorD,EAAiB,GAAGprD,GAC1E+rD,EAAmBT,EAAiBA,EAAetrD,GAAK8rD,E,iBAG1D,O,sBAAA,GAAMrxD,KAAKuxD,sBAAsBD,I,cAAjC,S,aAEA,M,SAAM,IAAIxyD,MAAM,kC,cAGpBiD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBwM,EAAW9lB,EAAM8lB,SAASH,qBAE1BwnC,EAAgBgC,iCAAiC,CAC7CM,mBAAoBT,EACpBU,SAAU,CACN9yD,KAAM,QACNykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,IAE3CsrB,aAAc1xD,KAAK2xD,qBAAqB9pC,EAAUue,K,YAI5C,YAAA+pB,8BAAd,SACIjB,EACAzkC,EACAuM,G,oIAGoBq4B,EAChB5kC,EAAM,uBAEwB4mC,EAC9Br6B,EAAK,0B,iBAGL,O,sBAAA,GAAMh3B,KAAKuxD,sBAAsBF,I,cAAjC,S,aAIA,M,SAFAnC,EAAgBuB,QAEV,IAAI3xD,MAAM,4C,cAGdiD,EAAQ/B,KAAKuhC,OAAOlmB,WAEV+qB,EACZrkC,EAAMgF,KAAKgX,iBAAgB,uBACzB8J,EAAW9lB,EAAM8lB,SAASH,qBAEhCwnC,EAAgB0C,gCAAgC,CAC5CH,SAAU,CACN9yD,KAAM,QACNykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,IAE3CsrB,aAAc1xD,KAAK2xD,qBAAqB9pC,EAAUue,K,YAIlD,YAAAurB,qBAAR,SACI9pC,EACAue,GAEA,IAAMnf,EAA2C,CAC7C,CAAE7D,MAAOpjB,KAAKkuD,eAAgB77B,OAAQ,GAAGxK,EAASqhB,SAASgc,QAAQ9e,KAWvE,OARAve,EAASwhB,MAAMt2B,SAAQ,SAAC48C,GACpB,OAAA1oC,EAAUxY,KAAK,CAAE2U,MAAOusC,EAAIjxD,KAAM2zB,OAAQ,GAAGs9B,EAAIt9B,OAAO6yB,QAAQ9e,IAAhE,IAEJnf,EAAUxY,KAAK,CACX2U,MAAOpjB,KAAKouD,eACZ/7B,OAAQ,GAAGxK,EAAS+gB,kBAAkBsc,QAAQ9e,KAG3Cnf,CACX,EAEc,YAAAsqC,sBAAd,SAAoCF,G,+FAChC,MAAO,CAAP,EAAOrxD,KAAKuhC,OAAO+Q,SAAStyC,KAAK4xC,0BAA0BjC,qBAAqB0hB,I,QAGtE,YAAAxB,oBAAd,SACInuB,EACA1K,G,qGASA,OAPM93B,EAAO,CACT,iBAAiB83B,EAAM66B,cACvB,sBAAsBnwB,EAAYoM,mBAAmB+M,WACrD,eAAenZ,EAAYoM,mBAAmBuhB,UAC9C,cAActiC,OAAOuR,SAAShI,UAChC32B,KAAK,KAEA,CAAP,EAAOK,KAAKitB,eAAe8C,MAxXP+hC,EAyXGpwB,EAAYoM,mBAAmBikB,YAxXvDD,EAAc,sDAyXT,CACIjjC,aAAa,EACb1vB,QAAS,CACLmvB,OAAQ,mBACR,eAAgB,oCAChB,eAAgB,MAEpBpvB,KAAI,KAjYO,IAAC4yD,C,QAsYV,YAAAxB,qBAAd,SACIt5B,EACAk4B,EACA1tC,G,kJAEM,EAA6CwV,EAAM1pB,QAAjDD,EAAK,QAAE2kD,EAAc,iBAAExB,EAAe,kBACxCzuD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBtU,EAAOhF,EAAMgF,KAAKgX,iBAClByxC,EAAmBzoD,EAAKkgB,UAAUC,cAAc9mB,OAAS,EACzDkN,EAAmB,CACrB/F,SAAUia,EAAcjc,GACxBm8B,YAAa,CACT8B,iBAAkB,CACdyuB,gBAAiB,CACbC,aAAc7kD,EAAMq0B,YACpBywB,eAAgB9kD,EAAMmU,cACtB4wC,eAAgB/kD,EAAMglD,0BAMhCC,EAA4BtyD,KAAKuwD,2BAA2ByB,GAC5DO,EAA6BvyD,KAAKuwD,2BAA2BC,GAC7DgC,EAAehC,aAAe,EAAfA,EAAiBgC,aAChC93C,EAAQ81C,aAAe,EAAfA,EAAiBhN,Y,iBAG3B,O,sBAAA,GAAMxjD,KAAKuhC,OAAO+Q,SACdtyC,KAAK2xC,6BAA6BtiB,eAAc,gCACzCijC,GAAyB,CAC5BhjC,MAAOkjC,EACP93C,MAAK,O,cAJb,SAQI80C,EACA,GAAMxvD,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BviB,cAAckjC,KAFjD,M,OACA,S,iBAKJ,SAAMvyD,KAAKuhC,OAAO+Q,SACdtyC,KAAKmjC,oBAAoBZ,YAAY,CACjC3a,gBAAgB,M,OAGxB,OALA,SAKA,GAAM5nB,KAAKuhC,OAAO+Q,SAAStyC,KAAK8xC,sBAAsB/N,cAAcz2B,K,OAGpE,OAHA,SACA4hD,EAAgBuD,gBAAgBxW,gBAAgByW,gBAEzC,CAAP,EAAO1yD,KAAKiuD,wB,OAIZ,M,SAFAiB,EAAgBuD,gBAAgBxW,gBAAgB0W,gBAE1C,IAAI7zD,MAAM,2B,yBAIhB,YAAAyxD,2BAAR,SACIqC,GAEA,MAAO,CACH34C,WAAW24C,aAAO,EAAPA,EAASC,YAAa,GACjC34C,UAAU04C,aAAO,EAAPA,EAASE,aAAc,GACjCx4C,MAAMs4C,aAAO,EAAPA,EAASxP,WAAY,GAC3BjpC,QAAS,GACTC,UAAWw4C,aAAO,EAAPA,EAASG,eAAgBH,EAAQG,aAAa,IAAO,GAChE14C,UAAWu4C,aAAO,EAAPA,EAASG,eAAgBH,EAAQG,aAAa,IAAO,GAChEt4C,YAAYm4C,aAAO,EAAPA,EAASn4C,aAAc,GACnCD,aAAao4C,aAAO,EAAPA,EAASp4C,cAAe,GACrCE,OAAOk4C,aAAO,EAAPA,EAASpP,cAAe,GAC/BjpC,iBAAiBq4C,aAAO,EAAPA,EAASrP,qBAAsB,GAChD3e,qBAAqBguB,aAAO,EAAPA,EAASrP,qBAAsB,GACpD5oC,aAAc,GAEtB,GAzXA,iBADC,I,6CA2XL,C,CAtcA,GCvCe,SAASq4C,GACpBh5C,GAEA,MAAO,CACHi5C,cAAkBj5C,EAAQC,UAAS,IAAID,EAAQE,SAC/Cg5C,MAAOl5C,EAAQI,SACf+4C,MAAOn5C,EAAQK,SACfC,KAAMN,EAAQM,KACdvY,MAAOiY,EAAQ4qB,oBACfnqB,WAAYT,EAAQS,WACpBD,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQU,MAEvB,CCbe,SAAS04C,GAAoBv3B,GAChC,IAAAw3B,EAA8Dx3B,EAAK,MAA5Dy3B,EAAuDz3B,EAAK,aAA9C4B,EAAyC5B,EAAK,OAAtC03B,EAAiC13B,EAAK,OAA9B23B,EAAyB33B,EAAK,MAAvBb,EAAkBa,EAAK,KAAjB43B,EAAY53B,EAAK,QAErE63B,EAAc,CAChBL,MAAK,EACLC,aAAY,EACZ71B,OAAQk2B,GAAel2B,GACvB81B,OAAM,EACNC,MAAOA,GAAS,OAChBx4B,KAAI,EACJy4B,QAAO,GAGX,OAAO,IAAA5xD,QAAO6xD,EAAa,EAAAzwB,MAC/B,CAEA,SAAS0wB,GAAel2B,GAIpB,MAAsB,iBAAXA,GAAuBA,EAFhB,MAMdA,EAPc,MAWXA,CACX,CC9Be,SAASm2B,GACpBlQ,GAEQ,IAAAl/C,EAAuEk/C,EAAO,eAA9Dp0B,EAAuDo0B,EAAO,MAAvDzpC,EAAgDypC,EAAO,UAA5CxpC,EAAqCwpC,EAAO,SAAlChpC,EAA2BgpC,EAAO,MAA3B9gC,EAAoB8gC,EAAO,gBAEhF1pC,EAAUxV,GAAkBoe,EAElC,MAAO,CACH0M,MAAK,EACLukC,WAAY55C,EACZ65C,UAAW55C,EACX65C,aAAcr5C,EACds5C,eAAgBh6C,aAAO,EAAPA,EAASk5C,MACzBe,eAAgBj6C,aAAO,EAAPA,EAASm5C,MACzB74C,KAAMN,aAAO,EAAPA,EAASM,KACfvY,MAAOiY,aAAO,EAAPA,EAASjY,MAChBmyD,aAAcl6C,aAAO,EAAPA,EAASQ,YACvB25C,YAAan6C,aAAO,EAAPA,EAASS,WAE9B,CCnBe,SAAS25C,GACpB1Q,GAEQ,IAAAp0B,EAAkCo0B,EAAO,MAAlChpC,EAA2BgpC,EAAO,MAA3B9gC,EAAoB8gC,EAAO,gBAG3C,IADgB9gC,aAAe,EAAfA,EAAiBqwC,gBAAiB,IACZhyD,MAAM,KAElD,MAAO,CACHquB,MAAK,EACLukC,WAJY,MAIa,GACzBC,UALsB,MAKC,GACvBC,aAAcr5C,EACds5C,eAAgBpxC,aAAe,EAAfA,EAAiBswC,MACjCe,eAAgBrxC,aAAe,EAAfA,EAAiBuwC,MACjC74C,KAAMsI,aAAe,EAAfA,EAAiBtI,KACvBvY,MAAO6gB,aAAe,EAAfA,EAAiB7gB,MACxBmyD,aAActxC,aAAe,EAAfA,EAAiBpI,YAC/B25C,YAAavxC,aAAe,EAAfA,EAAiBnI,WAEtC,C,SCUA,WAGI,WACY8mB,EACAjO,EACA0e,EACA6T,EACAwO,EACAx+B,GALA,KAAA0L,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA0e,mBAAAA,EACA,KAAA6T,qBAAAA,EACA,KAAAwO,YAAAA,EACA,KAAAx+B,QAAAA,CACT,CA0RP,OAxRU,YAAA6a,WAAN,SAAiBnuC,G,yJAIb,GAHQsW,EAA2CtW,EAAO,gBAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAClD+xD,GAAF,EAAoCz7C,GAAmB,CAAC,GAAlC,qBAAEmkC,EAAO,WAEhCz1C,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAKoR,EACD,MAAM,IAAI,GACN,4F,IAQJA,EAAgBs0C,wBAAhB,YAIA,GAHAprD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAExDsR,EAAgBw9B,aACjB,MAAM,IAAI,GACN,yG,OAIRA,EAAex9B,EAAgBw9B,a,aAEvB,SAAMr2C,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB9C,wB,OAA/DzuB,EAAQ,SACRyf,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,GAC7D8uC,EAAet0C,EAAMgF,KAAKgX,iBAAiB4T,SAASrxB,K,iBAGxD,IAAKkhB,EAAc66B,YACf,MAAM,IAAI,GAAiBhmC,GAAqBa,sBAmBpD,OAhBMq9C,EAAwB,CAAE5iC,SAAU0kB,GACpCme,EAAgC,SAClCnX,GAEA,EAAKoX,wBACDpX,EACAxkC,EACApR,EACAF,EACAsc,QAAQrC,EAAciJ,OAAOqwB,UAErC,EACM4Z,EAA8B,SAACh1D,GACjC,SAAKi1D,aAAaj1D,EAAO+H,EAAa6sD,EAAsBtX,EAA5D,EAEJh9C,KAAK6lD,qBAAqBnV,WAAWlvB,EAAc66B,aACnD,GAAMr8C,KAAK6lD,qBAAqB/I,kBAC5ByX,EACAC,EACAE,I,cAHJ,S,YAOJ,YAAA1e,aAAA,WAGI,OAFAh2C,KAAK6lD,qBAAqB/G,WAEnBnqB,QAAQyH,SACnB,EAEQ,YAAAq4B,wBAAR,SACIpX,EACAxkC,EACApR,EACAF,EACAuzC,GAEQ,IAAAwZ,EAAyBz7C,EAAe,qBAEhD7Y,KAAK40D,sBAAsBN,GAC3Bt0D,KAAK60D,oBACDxX,EACAxkC,EACApR,EACAF,EACAuzC,EAER,EAEQ,YAAA+Z,oBAAR,SACIxX,EACAxkC,EACApR,EACAF,EACAuzC,GALJ,WAOYjf,EAAkDhjB,EAAe,MAA1Di8C,EAA2Cj8C,EAAe,qBAApCk8C,EAAqBl8C,EAAe,iBAEjE2kC,EAAWx9C,KAAK61B,QAAO,OACzBm/B,EAAgBxX,aAAM,EAANA,EAAQyX,QAAQC,OAEtC,GAAI1X,GAAUwX,EAAe,CACzB,IAAMG,EAAmBt5B,EAAQu3B,GAAoBv3B,GAAS,CAAC,EAEzDu5B,EAAqB5X,EAAO6X,QAAQ,CACtCC,IAAKxa,EAAW,UAAY,aAC5B+O,QAAQ,EACRmL,cAAa,EACbn5B,MAAOs5B,EACPlK,YAAa,WAAM,SAAKsK,cAAclY,EAAyBxkC,EAA5C,EACnB28C,UAAW,SAACC,GACR,SAAKC,iBACDD,EACApY,EACA91C,EACAutD,EACAC,EALJ,IASJK,EAAmBO,cACnBP,EAAmBr6B,OAAO,IAAItzB,E,MAGlCzH,KAAK41D,eAAenuD,EAE5B,EAEQ,YAAAmtD,sBAAR,SAA8BN,GAC1B,IAAMuB,EACFvB,GAAwBzwC,QAAQ2R,SAASmE,eAAe26B,IACpD9W,EAAWx9C,KAAK61B,QAAO,OAE/B,GAAI2nB,GAAUqY,EAA6B,CACvC,IACM9uD,EADQ/G,KAAKuhC,OAAOlmB,WACPtU,KAAKgX,iBAEKy/B,EAAOsY,SAAS,CACzCzjC,OAAQtrB,EAAK2qB,WACbkoB,UAAW,SAGM7e,OAAO,IAAIu5B,E,MAEhCt0D,KAAK41D,eAAetB,EAE5B,EAEc,YAAAiB,cAAd,SACIlY,EACAxkC,G,sJAEQs0C,EAA6Dt0C,EAAe,wBAAnD+J,EAAoC/J,EAAe,gBAAlCk9C,EAAmBl9C,EAAe,e,iBAI7D,O,sBAAnB,EAAA7Y,KAAmB,GAAMA,KAAKutD,kBAAkB,CAAEJ,wBAAuB,K,cAAzE,EAAK6I,YAAc,SAEfh2D,KAAKg2D,aACLj0D,EAAQ/B,KAAKuhC,OAAOlmB,W,OADpB,M,OAGQ,SAAMrb,KAAKuhC,OAAO+Q,SACtBtyC,KAAKszB,uBAAuB9C,wB,OADhCzuB,EAAQ,S,iBAkBL,OAbDqH,EAAWrH,EAAMqH,SAASyS,cAE1BwW,EAASryB,KAAKg2D,YACdh2D,KAAKg2D,YAAYtkC,WACjB3vB,EAAM8lB,SAASH,qBAAqBQ,mBACpCmuB,EAC0B,QADd,EACdx9B,EAAgBw9B,oBAAY,QAAIt0C,EAAM0oB,OAAOzL,wBAAwB2S,SAASrxB,KAE5E0Z,EAAU4I,IAAmBxZ,aAAQ,EAARA,EAAUqgC,UAAU,IACjDwsB,EAA0Bj8C,EAC1Bg5C,GAAsCh5C,QACtCvW,EAEC,GAAM45C,EAAwB6Y,cAAc,CAC/CC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBJ,wBAAuB,EACvB5jC,OAAM,EACNV,SAAU0kB,EACVigB,aAAa,K,OAPjB,MAAO,CAAP,EAAO,U,OAcP,M,WAJIP,GACAA,EAAe,GAGb,E,yBAIA,YAAAxI,kBAAd,SAAgC,G,IAAEJ,EAAuB,0B,+HACY,mBAAtDA,aAAuB,EAAvBA,EAAyBC,0BAAhC,YAGA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAIzB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACjDsmC,I,OAGJ,MAAO,CAAP,EAJuB,SAEtB,M,OAID,M,SAAM,IAAI,G,yBAKR,YAAAb,iBAAd,SACID,EACApY,EACA91C,EACAutD,EACA9X,G,4IAG2B,O,sBAAA,GAAMh9C,KAAK6lD,qBAAqBpH,iBAAiB,CACpEjB,QAAQ,K,OAEY,OAHhBqB,EAAe,SAErB,WACsB,GAAMxB,EAAwBmZ,gBAAgBf,I,OAetE,OAfMjU,EAAkB,SAChBkC,EAAmBlC,EAAe,QAAzBl4B,EAAUk4B,EAAe,MACpCmC,EAA+B,QAAnB,EAAG3jD,KAAKg2D,mBAAW,eAAEzwD,GAEvCvF,KAAKq0D,YAAYoC,SAAS,iBAAiB,eACvC7S,aAAc,SACdnrC,SAAUlR,EACVvF,OAAQ8yD,EAAuB,kBAAoB,wBACnDxrC,MAAK,EACLotC,YAAa7X,EACb8X,gBAAiB9iD,KAAKC,UAAU8/C,GAA0BlQ,IAC1DkT,iBAAkB/iD,KAAKC,UAAUsgD,GAA2B1Q,KACxDC,GAAgB,CAAEI,QAASJ,KAG5B,CAAP,EAAOnC,G,OAMP,M,WAJIxE,GACAA,EAAQ,GAGN,E,yBAIN,YAAA2X,aAAR,SACIj1D,EACAm3D,EACAvC,EACAwC,GAEA92D,KAAK41D,eAAeiB,GACpB72D,KAAK41D,eAAetB,GAEhBwC,GACAA,EAAgBp3D,EAExB,EAEQ,YAAAk2D,eAAR,SAAuBmB,GACnB,IAAM17B,EAAU07B,GAAavhC,SAASmE,eAAeo9B,GAEjD17B,GACAA,EAAQ8c,QAEhB,EACJ,EApSA,GCuBA,IAAY6e,GAKAC,GAOAC,GAOAC,GAQAC,IA3BZ,SAAYJ,GACR,0BACA,qBACH,CAHD,CAAYA,KAAAA,GAA6B,KAKzC,SAAYC,GACR,gBACA,kBACA,gBACA,yBACH,CALD,CAAYA,KAAAA,GAA2B,KAOvC,SAAYC,GACR,cACA,cACA,kBACA,eACH,CALD,CAAYA,KAAAA,GAA4B,KAOxC,SAAYC,GACR,sBACA,YACA,kBACA,kBACA,iBACH,CAND,CAAYA,KAAAA,GAA4B,KAQxC,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAA4B,K,SC9CxC,WAGI,WACY71B,EACAjO,EACA0e,EACA6T,EACAwO,EACAx+B,GALA,KAAA0L,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA0e,mBAAAA,EACA,KAAA6T,qBAAAA,EACA,KAAAwO,YAAAA,EACA,KAAAx+B,QAAAA,CACT,CA4PP,OA1PU,YAAA6a,WAAN,SAAiBnuC,G,mJAGb,GAFQ80D,EAAiD90D,EAAO,sBAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAG5D,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,IAAK4vD,EACD,MAAM,IAAI,GACN,kG,IAQJA,EAAsBlK,wBAAtB,YAIA,GAHAprD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAExD8vD,EAAsBhhB,aACvB,MAAM,IAAI,GACN,+G,OAIRA,EAAeghB,EAAsBhhB,a,aAE7B,SAAMr2C,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB9C,wB,OAA/DzuB,EAAQ,SACRyf,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,GAC7D8uC,EAAet0C,EAAMgF,KAAKgX,iBAAiB4T,SAASrxB,K,iBAGxD,IAAKkhB,EAAc66B,YACf,MAAM,IAAI,GAAiBhmC,GAAqBa,sBAgBpD,OAbMq9C,EAAwB,CAAE5iC,SAAU0kB,GACpC+G,EAAyB,SAACC,GAC5B,SAAKwX,oBACDxX,EACAga,EACA5vD,EACAF,EACAsc,QAAQrC,EAAciJ,OAAOqwB,UALjC,EAOE4Z,EAA8B,SAACh1D,GACjC,SAAKi1D,aAAaj1D,EAAO+H,EAAa4vD,EAAsBra,QAA5D,EAEJh9C,KAAK6lD,qBAAqBnV,WAAWlvB,EAAc66B,aACnD,GAAMr8C,KAAK6lD,qBAAqB/I,kBAC5ByX,EACAnX,EACAsX,I,cAHJ,S,YAOJ,YAAA1e,aAAA,WAGI,OAFAh2C,KAAK6lD,qBAAqB/G,WAEnBnqB,QAAQyH,SACnB,EAEQ,YAAAy4B,oBAAR,SACIxX,EACAga,EACA5vD,EACAF,EACAuzC,GALJ,WAOYjf,EAAkDw7B,EAAqB,MAAhEvC,EAA2CuC,EAAqB,qBAA1CtC,EAAqBsC,EAAqB,iBACvE7Z,EAAWx9C,KAAK61B,QAAO,OAE3ByhC,GAAyB,EAE7B,GAAI9Z,EAAQ,CACR,IAAM+Z,EAAiB,CAAC/Z,EAAOyX,QAAQuC,SAAUha,EAAOyX,QAAQwC,QAC1D,EAAoB57B,EAAQu3B,GAAoBv3B,GAAS,CAAC,EAEhE07B,EAAexkD,SAAQ,SAACiiD,GACpB,IAAM0C,EACF1C,IAAkBxX,EAAOyX,QAAQwC,QAC3B,eAAEr0C,MAAO+zC,GAA6BM,QAAW,GACjD,EAEV,IAAKH,EAAwB,CACzB,IAAMlC,EAAqB5X,EAAO6X,QAAQ,CACtCC,IAAKxa,EAAW,UAAY,aAC5B+O,QAAQ,EACRmL,cAAa,EACbn5B,MAAO67B,EACPzM,YAAa,WACT,SAAKsK,cAAclY,EAAyBga,EAA5C,EACJ7B,UAAW,SAACC,GACR,SAAKC,iBACDD,EACApY,EACA91C,EACAutD,EACAC,EALJ,IASJK,EAAmBO,eACnBP,EAAmBr6B,OAAO,IAAItzB,GAC9B6vD,GAAyB,E,CAGrC,G,CAGC9Z,GAAW8Z,GACZt3D,KAAK41D,eAAenuD,EAE5B,EAEc,YAAA8tD,cAAd,SACIlY,EACAga,G,sJAEQtB,EAA6DsB,EAAqB,eAAlEz0C,EAA6Cy0C,EAAqB,gBAAjDlK,EAA4BkK,EAAqB,wB,iBAInE,O,sBAAnB,EAAAr3D,KAAmB,GAAMA,KAAKutD,kBAAkB,CAAEJ,wBAAuB,K,cAAzE,EAAK6I,YAAc,SAEfh2D,KAAKg2D,aACLj0D,EAAQ/B,KAAKuhC,OAAOlmB,W,OADpB,M,OAGQ,SAAMrb,KAAKuhC,OAAO+Q,SACtBtyC,KAAKszB,uBAAuB9C,wB,OADhCzuB,EAAQ,S,iBAmBL,OAdDqH,EAAWrH,EAAMqH,SAASyS,cAE1BwW,EAASryB,KAAKg2D,YACdh2D,KAAKg2D,YAAYtkC,WACjB3vB,EAAM8lB,SAASH,qBAAqBQ,mBACpCmuB,EACgC,QADpB,EACdghB,EAAsBhhB,oBAAY,QAClCt0C,EAAM0oB,OAAOzL,wBAAwB2S,SAASrxB,KAE5C0Z,EAAU4I,IAAmBxZ,aAAQ,EAARA,EAAUqgC,UAAU,IACjDwsB,EAA0Bj8C,EAC1Bg5C,GAAsCh5C,QACtCvW,EAEC,GAAM45C,EAAwB6Y,cAAc,CAC/CC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBJ,wBAAuB,EACvB5jC,OAAM,EACNV,SAAU0kB,EACVigB,aAAa,K,OAPjB,MAAO,CAAP,EAAO,U,OAcP,M,WAJIP,GACAA,EAAe,GAGb,E,yBAIA,YAAAxI,kBAAd,SAAgC,G,IAAEJ,EAAuB,0B,+HACY,mBAAtDA,aAAuB,EAAvBA,EAAyBC,0BAAhC,YAGA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAInB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACvDsmC,I,OAGJ,MAAO,CAAP,EAJ6B,SAE5B,M,OAID,M,SAAM,IAAI,G,yBAKR,YAAAb,iBAAd,SACID,EACApY,EACA91C,EACAutD,EACA9X,G,4IAG2B,O,sBAAA,GAAMh9C,KAAK6lD,qBAAqBpH,iBAAiB,CACpEjB,QAAQ,K,OAEY,OAHhBqB,EAAe,SAErB,WACsB,GAAMxB,EAAwBmZ,gBAAgBf,I,OAetE,OAfMjU,EAAkB,SAChBkC,EAAmBlC,EAAe,QAAzBl4B,EAAUk4B,EAAe,MACpCmC,EAA+B,QAAnB,EAAG3jD,KAAKg2D,mBAAW,eAAEzwD,GAEvCvF,KAAKq0D,YAAYoC,SAAS,iBAAiB,eACvC7S,aAAc,SACdnrC,SAAUlR,EACVvF,OAAQ8yD,EAAuB,kBAAoB,wBACnDxrC,MAAK,EACLotC,YAAa7X,EACb8X,gBAAiB9iD,KAAKC,UAAU8/C,GAA0BlQ,IAC1DkT,iBAAkB/iD,KAAKC,UAAUsgD,GAA2B1Q,KACxDC,GAAgB,CAAEI,QAASJ,KAG5B,CAAP,EAAOnC,G,OAMP,M,WAJIxE,GACAA,EAAQ,GAGN,E,yBAIN,YAAA2X,aAAR,SACIj1D,EACA+H,EACAqvD,GAEA92D,KAAK41D,eAAenuD,GAEhBqvD,GACAA,EAAgBp3D,EAExB,EAEQ,YAAAk2D,eAAR,SAAuBmB,GACnB,IAAM17B,EAAU07B,GAAavhC,SAASmE,eAAeo9B,GAEjD17B,GACAA,EAAQ8c,QAEhB,EACJ,EAtQA,GCXA,IAAMwf,GAAmB,CACrBC,gBAAiB,UACjBC,mBAAoB,UACpBC,eAAgB,YAChBC,gBAAiB,gEACjBC,iBAAkB,YAClBC,aAAc,MACdC,OAAQ,UACRC,WAAY,YACZC,UAAW,OACXC,SAAU,QACV56B,OAAQ,OACRE,MAAO,Q,SAWX,WAGI,WACY4D,EACAsQ,EACAG,EACA6T,EACAwO,GAJA,KAAA9yB,OAAAA,EACA,KAAAsQ,4BAAAA,EACA,KAAAG,mBAAAA,EACA,KAAA6T,qBAAAA,EACA,KAAAwO,YAAAA,EAPJ,KAAAiE,SAAW,EAAAx4B,IAQhB,CAkKP,OAhKU,YAAA4Q,WAAN,SAAiBnuC,G,2IAGb,GAFQg2D,EAA0Ch2D,EAAO,eAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAGrD,MAAM,IAAI,GACN,qFAIM,SAAMvC,KAAKuhC,OAAO+Q,SAC5BtyC,KAAK6xC,4BAA4B5jB,kBAAkB1mB,K,OAIvD,GALMxF,EAAQ,WAGRyf,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAEhD80C,YACf,MAAM,IAAI,GAAiBhmC,GAAqBa,sBAGpD,IAAKzP,EACD,MAAM,IAAI,GACN,wFAOR,OAHAzH,KAAKs4D,UAAWC,aAAc,EAAdA,EAAgBvb,UAAWh9C,KAAK20D,aAEhD30D,KAAK6lD,qBAAqBnV,WAAWlvB,EAAc66B,aACnD,GAAMr8C,KAAK6lD,qBAAqBlI,kBAC5B,SAACQ,GACG,SAAKqa,kCACDra,EACA12C,EACA8wD,aAAc,EAAdA,EAAgBpL,wBAHpB,IAKJ,SAACztD,GAAU,SAAK+4D,gCAAgC/4D,EAAO+H,EAA5C,K,cAPf,S,YAWJ,YAAAuuC,aAAA,WAGI,OAFAh2C,KAAK6lD,qBAAqB/G,WAEnBnqB,QAAQyH,SACnB,EAEQ,YAAAu4B,aAAR,SAAqBj1D,GACjB,MAAM,IAAIZ,MAAMY,EAAMlB,QAC1B,EAEQ,YAAAg6D,kCAAR,SACIra,EACAtE,EACAsT,GAEA,OAAOntD,KAAK04D,mBACRva,EACAtE,EACAsT,EAER,EAEQ,YAAAsL,gCAAR,SACI/4D,EACA+H,GAIA,OAFAzH,KAAK24D,sBAAsBlxD,GAEpBzH,KAAKs4D,SAAS54D,EACzB,EAEQ,YAAAi5D,sBAAR,SAA8BlxD,GAC1B,IAAMmxD,EAAkBpjC,SAASmE,eAAelyB,GAE5CmxD,GACAA,EAAgBzgB,QAExB,EAEQ,YAAAugB,mBAAR,SACIva,EACA12C,EACA0lD,GAHJ,WAKU0L,EAAcrjC,SAASmE,eAAelyB,GAE5C,IAAKoxD,EACD,MAAM,IAAI,GACN,8DAIRA,EAAY/+B,aAAa,aAAc,SACvCn8B,OAAOsV,OAAO4lD,EAAYh9B,MAAO87B,IAEjCkB,EAAYzgC,iBAAiB,SAAS,6D,8EAGf,OAFnBygC,EAAY/+B,aAAa,WAAY,QAElB,GAAM95B,KAAKutD,kBAAkBJ,I,cAA1C2L,EAAa,SAEf3a,EAAuB4a,UACvB5a,EAAuB4a,UACnB,SAAOr5D,EAAuByC,GAAiC,kD,iEAG3D,OAFA02D,EAAYG,gBAAgB,YAExBt5D,EACO,CAAP,EAAOM,KAAKs4D,SAAS54D,IAGzB,GAAMM,KAAKi5D,gBAAgB92D,EAAS22D,aAAU,EAAVA,EAAYvzD,K,cAAhD,S,4BAMhBszD,EAAYzgC,iBAAiB,cAAc,WACvCygC,EAAYh9B,MAAM+7B,gBApIT,SAqIb,IAEAiB,EAAYzgC,iBAAiB,cAAc,WACvCygC,EAAYh9B,MAAM+7B,gBAAkBD,GAAiBC,eACzD,GACJ,EAEc,YAAArK,kBAAd,SAAgCJ,G,+HACqC,mBAAtDA,aAAuB,EAAvBA,EAAyBC,0BAAhC,YAGA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAInB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACvDsmC,I,OAGJ,MAAO,CAAP,EAJ6B,SAE5B,M,OAID,M,SAAM,IAAI,G,yBAKR,YAAA0C,gBAAd,SACI92D,EACAwhD,G,gIAEuB,SAAM3jD,KAAK6lD,qBAAqBpH,oB,cAA/CI,EAAe,SAAkD,WACjEv1B,EAAmBnnB,EAAO,MAAnBuhD,EAAYvhD,EAAO,QAElCnC,KAAKq0D,YAAYoC,SAAS,iBAAiB,eACvCntC,MAAK,EACL7Q,SAAU,mBACVmrC,aAAc,SACd8S,YAAa7X,EACb78C,OAAQ,wBACR20D,gBAAiB9iD,KAAKC,UAAU8/C,GAA0BlQ,IAC1DkT,iBAAkB/iD,KAAKC,UAAUsgD,GAA2B1Q,KACxDC,GAAgB,CAAEI,QAASJ,K,YAG3C,EA3KA,G,SC1CA,YAII,WAAYnlD,G,ICXuBC,EAAaR,E,mBDWhD,EACI,YAAMO,GAAW,sCAAoC,K,OAJzD,EAAAE,KAAO,gBACP,EAAAC,KAAO,WCT4BF,EDchB,ECd6BR,EDcvB,EAAWA,UCbhCN,OAAOiB,eACPjB,OAAOiB,eAAeH,EAAQR,GAE9BQ,EAAOI,UAAYZ,EDYoB,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAIF,MAAM,EAAKN,SAASQ,M,CAE7C,CACJ,OAfoD,oBAepD,EAfA,CAAoDF,O,SEApD,YACI,WAAYN,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAPkD,oBAOlD,EAPA,CAAkD,ICLlD,IAAY,IAAZ,SAAYs7B,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAY,QAAuB,K,SAanC,YACI,WAAmB3jB,GAAnB,MACI,YAOR,SAAyB3X,GACrB,OAAQA,GACJ,KAAK,GAAwBu7B,uBACzB,MAAO,oFAEX,KAAK,GAAwBC,sBACzB,MAAO,mFAEX,KAAK,GAAwBC,uBACzB,MAAO,oFAEX,KAAK,GAAwBC,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBc,CAAgB/jB,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAK5X,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OAPiD,oBAOjD,EAPA,CAAiD,ICbjD,IAAY,IAAZ,SAAY0X,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAY,QAAoB,K,SAyBhC,YACI,WAAmBC,GAAnB,MACI,YAOR,SAAyB3X,GACrB,OAAQA,GACJ,KAAK,GAAqB4X,sBACtB,MAAO,iEAEX,KAAK,GAAqBC,YACtB,MAAO,sDAEX,KAAK,GAAqBC,oBACtB,MAAO,8DAEX,KAAK,GAAqBC,gBACtB,MAAO,0DAEX,KAAK,GAAqBC,gBACtB,MAAO,0DAEX,KAAK,GAAqBC,sBAC1B,KAAK,GAAqBC,mBACtB,MAAO,+DAEX,KAAK,GAAqBC,aACtB,MAAO,uDAEX,KAAK,GAAqBC,eACtB,MAAO,0EAEX,KAAK,GAAqBC,eACtB,MAAO,yDAEX,KAAK,GAAqBC,oBACtB,MAAO,+EAEX,KAAK,GAAqBC,qBACtB,MAAO,2FAEX,KAAK,GAAqBC,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CAjDc,CAAgBb,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAK5X,KAAO,mBACZ,EAAKC,KAAO,e,CAChB,CACJ,OAP8C,oBAO9C,EAPA,CAA8C,I,GCF9C,WAKI,WACY4iC,EACA8yB,EACA/gC,EACA4lC,EACAlnB,GAJA,KAAAzQ,OAAAA,EACA,KAAA8yB,YAAAA,EACA,KAAA/gC,uBAAAA,EACA,KAAA4lC,2BAAAA,EACA,KAAAlnB,mBAAAA,CACT,CAwOP,OAtOU,YAAAtB,WAAN,SAAiBnuC,G,oIAKb,GAJQkF,EAAwClF,EAAO,YAAlCgF,EAA2BhF,EAAO,SAAxB8zC,EAAiB9zC,EAAO,aAEjD42D,EAAmBn5D,KAAKo5D,qBAAqB72D,IAE9CkF,IAAgBF,EACjB,MAAM,IAAI,GACN,qE,GAIRvH,KAAKugD,UAAYh5C,IAEX8xD,EAAuBx1C,QAAQs1C,aAAgB,EAAhBA,EAAkBhM,0BAEnD,YACA,IAAK9W,EACD,MAAM,IAAI,GACN,yF,mBAIR,SAAMr2C,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuB9C,wB,OAAvD,S,iBAIJ,OADAxwB,KAAKk5D,2BAA2BtX,qBAAqByX,GACrD,GAAMr5D,KAAKk5D,2BAA2BxoB,WAAW1wC,KAAK8hD,iB,cAAtD,SAEA9hD,KAAKs5D,cAAgBt5D,KAAKu5D,oBAAoB9xD,EAAa0xD,EAAkB9iB,G,YAGjF,YAAAL,aAAA,WAMI,OALIh2C,KAAKs5D,eAAiBt5D,KAAKs5D,cAAc1/B,aACzC55B,KAAKs5D,cAAc1/B,WAAWC,YAAY75B,KAAKs5D,eAC/Ct5D,KAAKs5D,mBAAgB71D,GAGlBzD,KAAKk5D,2BAA2BljB,cAC3C,EAEQ,YAAAujB,oBAAR,SACI9xD,EACAi0C,EACArF,GAHJ,WAKU1b,EAAYnF,SAASmE,eAAelyB,GAClCg5C,EAAqD/E,EAAa,WAAtDN,EAAyCM,EAAa,YAAzCyR,EAA4BzR,EAAa,wBAE1E,IAAK/gB,EACD,MAAM,IAAI,GACN,+DAIR,IAGM6+B,EAAkBx5D,KAAKk5D,2BAA2BtgB,cAHzB,SAAC5hB,GAC5B,SAAK43B,yBAAyB53B,EAAO,CAAEm2B,wBAAuB,GAAI9W,EAAlE,GAIAoK,EACArF,GAKJ,OAFAzgB,EAAUZ,YAAYy/B,GAEfA,CACX,EAEQ,YAAA1X,aAAR,WACI,IAAK9hD,KAAKugD,UACN,MAAM,IAAI,GAAoB,0BAGlC,OAAOvgD,KAAKugD,SAChB,EAEQ,YAAA6Y,qBAAR,SACI72D,GAEA,GACIA,EAAQgF,WAAa,sBACrBhF,EAAQk3D,iBAER,OAAOl3D,EAAQk3D,iBAGnB,GACIl3D,EAAQgF,WAAa,sBACrBhF,EAAQm3D,iBAER,OAAOn3D,EAAQm3D,iBAGnB,GACIn3D,EAAQgF,WAAa,2BACrBhF,EAAQo3D,sBAER,OAAOp3D,EAAQo3D,sBAGnB,GAAIp3D,EAAQgF,WAAa,kBAA0ChF,EAAQq3D,aACvE,OAAOr3D,EAAQq3D,aAGnB,GACIr3D,EAAQgF,WAAa,wBACrBhF,EAAQs3D,mBAER,OAAOt3D,EAAQs3D,mBAGnB,GACIt3D,EAAQgF,WAAa,0BACrBhF,EAAQu3D,qBAER,OAAOv3D,EAAQu3D,qBAGnB,GACIv3D,EAAQgF,WAAa,4BACrBhF,EAAQw3D,uBAER,OAAOx3D,EAAQw3D,uBAGnB,GACIx3D,EAAQgF,WAAa,sBACrBhF,EAAQy3D,iBAER,OAAOz3D,EAAQy3D,iBAGnB,GACIz3D,EAAQgF,WAAa,qBACrBhF,EAAQ03D,gBAER,OAAO13D,EAAQ03D,gBAGnB,GACI13D,EAAQgF,WAAa,wBACrBhF,EAAQ23D,mBAER,OAAO33D,EAAQ23D,mBAGnB,MAAM,IAAI,EACd,EAEc,YAAA3M,kBAAd,SAAgC,G,IAAEJ,EAAuB,0B,+HACY,mBAAtDA,aAAuB,EAAvBA,EAAyBC,0BAAhC,YAGA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB,gB,iBAIJ,O,sBAAA,GAAMptD,KAAKgyC,mBAAmB/hB,iBACjDsmC,I,OAGJ,MAAO,CAAP,EAJuB,SAEtB,M,OAID,M,SAAM,IAAI,G,yBAMR,YAAA3H,yBAAd,SACI53B,EACA,EACAqf,G,IADE8W,EAAuB,0B,sIAKN,OAFnBn2B,EAAMg4B,iBAEN,EAAAhvD,KAAmB,GAAMA,KAAKutD,kBAAkB,CAAEJ,wBAAuB,K,cAAzE,EAAK6I,YAAc,SAEbjvD,EAAO/G,KAAKg2D,aAAeh2D,KAAKuhC,OAAOlmB,WAAWtU,KAAKgX,iBACvDo8C,EAAmB7iB,GAAuBvwC,GAAQ,EAEpD/G,KAAKg2D,aAAe3f,GACdyK,EAAkB,CACpBzK,aAAY,EACZ6K,WAAY2M,OAAO9mD,EAAK2qB,aAG5B1xB,KAAKk5D,2BAA2BrY,yBAAyBC,GAEzD,GAAM9gD,KAAKuhC,OAAO+Q,SACdtyC,KAAKszB,uBAAuBjD,aAAarwB,KAAKg2D,YAAYzwD,OAT9D,M,OAQA,S,iBAMoB,O,uBAAA,GAAMvF,KAAKk5D,2BAA2B9X,iB,OAE1D,OAFM1f,EAAc,SAEpB,GAAM1hC,KAAKk5D,2BAA2B5X,cAAc5f,I,cAApD,SAEIy4B,GAAoBz4B,EAAY9e,gBAChC,GAAM5iB,KAAKk5D,2BAA2B1mB,sBAClC9Q,EAAY9e,kBAFhB,M,OACA,S,iBAKJ,SAAM5iB,KAAKo6D,4B,cAAX,S,cAEA,I,aAA+B,aAAlB,EAAM57D,QACf,MAAM,E,uCAKV,YAAA47D,yBAAR,W,MACUzW,EAA+B,QAAnB,EAAG3jD,KAAKg2D,mBAAW,eAAEzwD,GAEvCvF,KAAKq0D,YAAYoC,SAAS,iBAAiB,eACvCt3D,SAAS,eACLmvB,OAAQ,YACR,eAAgB,qCACbF,KAEHu1B,GAAgB,CAChB3hD,OAAQ,wBACRyW,SAAUzY,KAAKugD,UACfwD,QAASJ,IAGrB,GA3DA,iBADC,I,6CA6DL,C,CAnPA,GCzBO,IAAM0W,GAAqD,CAC9DC,GAAI,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,SAClDC,GAAI,CACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEJC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,QAAS,QAAS,QAAS,SAChCC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,QAAS,UC/BH,SAASC,GAAaC,GAC3B,MAAsBA,EAAeh4D,QAAQ,IAAK,KAAKi4D,cAAct6D,MAAM,KAA1EunD,EAAQ,KACTgT,EAAqBhT,EAAQ,IADX,KAElBiT,EAAiBpB,GAAiB7R,GAExC,OAAKiT,EAIEA,EAAet0C,QAAQq0C,IAAoB,EAAIA,EAAkBC,EAAe,GAH5E,OAIf,C,SCOA,WAKI,WACYl6B,EACAjO,EACAooC,EACAC,GAHA,KAAAp6B,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAAooC,wBAAAA,EACA,KAAAC,QAAAA,CACT,CAkIP,OAhII,YAAAjrB,WAAA,SAAWnuC,GAAX,WACYkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAEzC,IAAKkF,IAAgBF,EACjB,MAAM,IAAI,GACN,qEAMR,OAFAvH,KAAKugD,UAAYh5C,EAEVvH,KAAKuhC,OACP+Q,SAAStyC,KAAKszB,uBAAuB9C,uBACrChD,MAAK,SAACzrB,GACH,IAAMyf,EAAgBzf,EAAMmiB,eAAeE,iBAAiB7c,GAE5D,IAAKia,IAAkBA,EAAcssB,mBAAmBne,WACpD,MAAM,IAAI,GAAiBtZ,GAAqBa,sBAGpD,IAAM0kD,EAA+B,CACjCrT,iBAAkB/mC,EAAcssB,mBAAmB+tB,uBACnDrT,SAAU6S,GAAa,EAAKM,SAC5B7gB,SAAUt5B,EAAciJ,OAAOqwB,SAC/BnrB,WAAYnO,EAAcssB,mBAAmBne,YAGjD,OAAO,EAAK+rC,wBAAwB1hC,KAAK4hC,EAC7C,IACCpuC,MAAK,SAACk7B,GACH,EAAKoT,kBAAoBpT,EACzB,EAAKqT,cAAgB,EAAKxC,oBAAoB9xD,EAClD,GACR,EAEA,YAAAuuC,aAAA,WAOI,OANIh2C,KAAK+7D,eAAiB/7D,KAAK+7D,cAAcniC,aACzC55B,KAAK+7D,cAAcxjC,oBAAoB,QAASv4B,KAAK4uD,0BACrD5uD,KAAK+7D,cAAcniC,WAAWC,YAAY75B,KAAK+7D,eAC/C/7D,KAAK+7D,mBAAgBt4D,GAGlBkxB,QAAQyH,SACnB,EAEQ,YAAAm9B,oBAAR,SAA4B9xD,GACxB,IAAMmxD,EAAkBpjC,SAASmE,eAAelyB,GAC1C1F,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBxhB,KAAKugD,UACrBx+C,EAAMmiB,eAAeE,iBAAiBpkB,KAAKugD,WAC3C,KACAxhC,EAAchd,EAAM0oB,OAAO9L,iBAEjC,IAAKi6C,EACD,MAAM,IAAI95D,MAAM,wCAGpB,IAAK0iB,EACD,MAAM,IAAI,GAAiBnL,GAAqBa,sBAGpD,IAAK6H,EACD,MAAM,IAAI,GAAqB,0CAGnC,IAAMgwC,EAASv5B,SAASW,cAAc,SAItC,GAFA44B,EAAOpwD,KAAO,QAEV6iB,EAAcssB,mBAAmB+tB,uBAAwB,CACzD,IAAMG,EAAYx6C,EAAciJ,OAAOqwB,SAAW,WAAa,GACvDnrB,EAAenO,EAAcssB,mBAAkB,WAEjDxgB,EAAS,CACX,UAAU+tC,GAAar7D,KAAK27D,SAC5B,0CACA,cAAchsC,GAGlBo/B,EAAOxxB,IAAM,CACT,WAAWy+B,EAAS,8DACpB1uC,EAAO3tB,KAAK,MACdA,KAAK,I,MAEPovD,EAAOxxB,IACH,4EAOR,OAJAq7B,EAAgB7+B,YAAYg1B,GAE5BA,EAAO32B,iBAAiB,QAASp4B,KAAK4uD,0BAE/BG,CACX,EAEQ,YAAAkN,yBAAR,WACI,IAAMl6D,EAAQ/B,KAAKuhC,OAAOlmB,WACpBwM,EAAW9lB,EAAM8lB,SAAS1L,cAC1BqF,EAAgBxhB,KAAKugD,UACrBx+C,EAAMmiB,eAAeE,iBAAiBpkB,KAAKugD,WAC3C,KAEN,IAAK14B,EACD,MAAM,IAAI,GAAiBxR,GAAqBK,iBAGpD,IAAK8K,EACD,MAAM,IAAI,GAAiBnL,GAAqBa,sBAGpD,MAAO,CACHyY,WAAYnO,EAAcssB,mBAAmBne,WAC7CusC,iBAAkB16C,EAAcssB,mBAAmBouB,iBACnD7pC,OAAQxK,EAAS9gB,KAAK2qB,WAAW5uB,WACjC6uB,SAAU9J,EAAS9gB,KAAK4qB,SAASrxB,KACjCitB,OAAQ1F,EAAS9gB,KAAKxB,GACtB2H,aAA4B,OClJ1B6f,OAAOuR,SAAS9H,OAAhBzJ,6FDoJV,EAGQ,YAAA6hC,yBAAR,WACI,IAAK5uD,KAAK87D,kBACN,MAAM,IAAI,GAAoB7hC,GAAwBkiC,8BAG1Dn8D,KAAK87D,kBAAkBj0C,SAAS7nB,KAAKi8D,2BACzC,GANA,iBADC,I,6CAQL,C,CA5IA,G,GEMA,WAGI,WACY16B,EACAjO,EACA8oC,EACA/H,EACAgI,QAAA,IAAAA,IAAAA,EAAA,IAJA,KAAA96B,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA8oC,oBAAAA,EACA,KAAA/H,YAAAA,EACA,KAAAgI,MAAAA,CACT,CAkJP,OAhJI,YAAA3rB,WAAA,SAAWnuC,GAAX,WACU+5D,EAAgB/5D,EAAQi7C,OACxBz7C,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAiBxhB,KAAKyuD,eAAiB1sD,EAAMmiB,eAAeE,iBAC9D7hB,EAAQgF,UAGZ,IAAK+0D,EACD,MAAM,IAAI,GAGd,IAAK96C,EACD,MAAM,IAAI,GAAiBnL,GAAqBa,sBAGpD,OAAOlX,KAAKo8D,oBACPvf,WAAWr7B,EAAciJ,OAAOowB,YAChCrtB,MAAK,SAACgwB,G,UACH,IAAKh8B,IAAkBA,EAAciJ,OAAOowB,WACxC,MAAM,IAAI,GAAiBxkC,GAAqBa,sBAGpD,IAAM2jC,EAAar5B,EAAciJ,OAAOowB,WAClCya,EAAM9zC,EAAciJ,OAAOqwB,SAAW,UAAY,aAClDuB,IAAW,MAAyBiZ,GAAMgH,EAAcnT,SAAQ,GAEhEoT,EAAsB/e,EAAOyX,QAAQwC,QAAU,SAC/C+E,EAAiBF,EAAcG,YAAc,CAACF,GAAuB,GACrEG,EAAqBJ,EAAcG,YAAsC,GAAxB,CAACF,GAExD,OAAO/e,EAAOmf,OAAO5hC,OACjB,CACIu6B,IAAG,EACH7Y,OAAQJ,EACRwN,OAAQyS,EAAcxH,qBACtB8H,QAAS,CACLC,QAASL,EACTM,WAAYJ,GAEhB7gC,OAAO,8BACH23B,MAAO4D,GAA6B2F,OACjC,IAAAzuD,MACCguD,EAAczgC,MACd,SACA,QACA,QACA,QACA,UACA,iBACH,CACDb,KACyB,kBAArBxZ,EAAcjc,IACgB,WAAX,QAAnB,EAAA+2D,EAAczgC,aAAK,eAAEb,MACfi8B,GAA4B+F,WACT,QAApB,EAACV,EAAczgC,aAAK,eAAEb,OAEnC1tB,QAAS,SAACsR,EAAGq+C,GACT,SAAK1H,cAAc1a,EAAYoiB,EAASX,EAAcvG,eAAtD,EACJmH,YAAa,SAACn5D,EAAMk5D,GAChB,SAAKvH,iBACD3xD,EACAk5D,EACAX,EAAcxH,qBACdwH,EAAcvH,iBAJlB,GAORxyD,EAAQkF,YAEhB,GACR,EAEA,YAAAuuC,aAAA,WAGI,OAFAh2C,KAAKyuD,oBAAiBhrD,EAEfkxB,QAAQyH,SACnB,EAEQ,YAAAm5B,cAAR,SACI1a,EACAoiB,EACAjgB,GAHJ,WAKI,IAAKigB,EACD,MAAM,IAAI,GAAoBhjC,GAAwBkiC,8BAG1D,OAAOn8D,KAAKuhC,OACP+Q,SAAStyC,KAAKszB,uBAAuB9C,uBACrChD,MAAK,SAACzrB,GACH,IAAMgF,EAAOhF,EAAMgF,KAAK+W,UAClByP,EAASxmB,EAAOA,EAAKxB,GAAK,GAEhC,OAAO03D,EAAQzvB,QAAQzd,KAChB,EAAKssC,MAAK,wCACb,CAAExhB,WAAU,EAAEttB,OAAM,GACpB,CACIpuB,SAAS,eACL,iBAAkBgvB,IACfC,KAInB,IACCZ,MAAK,SAAC2vC,GAAQ,OAAAA,EAAI53D,EAAJ,IACdwoB,OAAM,SAACruB,GAKJ,MAJIs9C,GACAA,EAAQt9C,GAGNA,CACV,GACR,EAEQ,YAAAg2D,iBAAR,SACI3xD,EACAk5D,EACAnI,EACAwD,GAJJ,WAMI,IAAKt4D,KAAKyuD,eACN,MAAM,IAAI,GAAoBx0B,GAAwBkiC,8BAG1D,IAAKc,EACD,MAAM,IAAI,GAAoBhjC,GAAwBkiC,8BAG1D,IAAKp4D,EAAKq5D,YAAcr5D,EAAKs5D,QACzB,MAAM,IAAI,GAAiBhnD,GAAqBW,gBAGpD,IAAMzP,EAAWvH,KAAKyuD,eAAelpD,GAErC,OAAO03D,EAAQ3vD,QAAQxP,IAAIiG,EAAKq5D,WAAW5vC,MAAK,SAACrrB,GAC7C,EAAKkyD,YAAYoC,SAAS,gBAAiB,CACvC7S,aAAc,SACdnrC,SAAUlR,EACVvF,OAAQ8yD,EAAuB,kBAAoB,wBACnDnsC,UAAW5kB,EAAKq5D,UAChBE,QAASv5D,EAAKs5D,QACdE,UAAW1pD,KAAKC,UAAU3R,EAAQq7D,MAAMC,aAEhD,GACJ,EACJ,EA3JA,GCLA,IAAYC,GAQAC,GAKAC,GAQAC,GAmRAC,GClTG,SAAS,GAAoBjiC,GAChC,IAAAzY,EAAiDyY,EAAK,MAA/Cw3B,EAA0Cx3B,EAAK,MAAxC03B,EAAmC13B,EAAK,OAAhC23B,EAA2B33B,EAAK,MAAzB4B,EAAoB5B,EAAK,OAAjB43B,EAAY53B,EAAK,QAExD63B,EAAc,CAChBL,MAAO0K,GAAc1K,GACrB51B,OAAQ,GAAeA,GACvBra,MAAO46C,GAAc56C,GACrBmwC,OAAQ0K,GAAe1K,GACvBC,MAAO0K,GAAc1K,GACrBC,QAAS0K,GAAgB1K,EAASF,IAGtC,OAAO,IAAA1xD,QAAO6xD,EAAa,EAAAzwB,MAC/B,CAEA,SAAS86B,GAAc1K,GACnB,OAAOA,GAASuK,GAAuBvK,GAASA,OAAQ5vD,CAC5D,CAEA,SAASu6D,GAAc56C,GACnB,OAAOA,GAASs6C,GAAuBt6C,GAASA,OAAQ3f,CAC5D,CAEA,SAASw6D,GAAe1K,GACpB,OAAOA,GAAUoK,GAAwBpK,GAAUA,OAAS9vD,CAChE,CAEA,SAASy6D,GAAc1K,GACnB,OAAOA,GAASqK,GAAuBrK,GAASA,OAAQ/vD,CAC5D,CAEA,SAAS06D,GAAgB1K,EAAmBF,GACxC,GAAIE,GAA8B,kBAAZA,GAAyBF,IAAWoK,GAAwBS,WAC9E,OAAO3K,CAIf,CAEA,SAAS,GAAeh2B,GAKpB,OAAKA,GAA4B,iBAAXA,EAIlBA,EANc,MAUdA,EAXc,MAeXA,EAhBe,EAiB1B,ED/CA,SAAYigC,GACR,kBACA,sBACA,kBACA,YACA,2BACH,CAND,CAAYA,KAAAA,GAAsB,KAQlC,SAAYC,GACR,sBACA,yBACH,CAHD,CAAYA,KAAAA,GAAuB,KAKnC,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAYA,KAAAA,GAAsB,KAQlC,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAAsB,KAmRlC,SAAYC,GACR,wBACA,mBACH,CAHD,CAAYA,KAAAA,GAAoB,K,SE3RhC,WAII,WACYv8B,EACAjO,EACA0e,EACAqiB,EACA+H,EACAiC,EACAzsB,EACAD,EACAG,EACA3O,GATA,KAAA5B,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA0e,mBAAAA,EACA,KAAAqiB,YAAAA,EACA,KAAA+H,oBAAAA,EACA,KAAAiC,6BAAAA,EACA,KAAAzsB,0BAAAA,EACA,KAAAD,6BAAAA,EACA,KAAAG,sBAAAA,EACA,KAAA3O,oBAAAA,CACT,CAwXP,OAtXU,YAAAuN,WAAN,SAAiBnuC,G,0IAGb,GAFQ+7D,EAA0C/7D,EAAO,eAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAGrD,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,IAAK62D,EACD,MAAM,IAAI,GACN,2F,IAIJA,EAAenR,wBAAf,YAIA,GAHMprD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAE9D+2D,EAAejoB,aAChB,MAAM,IAAI,GACN,wGAIkB,OAA1B,EAAAr2C,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACA88C,EAAejoB,aACfioB,EAAexV,4B,cAHnB,EAAKyV,mBAAqB,S,aAMZ,SAAMv+D,KAAKuhC,OAAO+Q,SAC5BtyC,KAAKszB,uBAAuB9C,wB,OAKN,OANpBzuB,EAAQ,SAGRs0C,EAAet0C,EAAMgF,KAAKgX,iBAAiB4T,SAASrxB,KACpDkhB,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,GAEnE,EAAAvH,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACA60B,EACAioB,EAAexV,4B,OAHnB,EAAKyV,mBAAqB,S,wBAO9Bv+D,KAAKw+D,cAAc/2D,EAAaF,EAAU+2D,G,YAG9C,YAAAtoB,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAoiC,cAAR,SACI/2D,EACAF,EACA+2D,GAHJ,WAKYnR,EACJmR,EAAc,wBADexV,EAC7BwV,EAAc,0BAD0CziC,EACxDyiC,EAAc,MADiDG,EAC/DH,EAAc,WACZI,EAAoB1+D,KAAK2+D,+BAGvBpV,EAFMvpD,KAAKuhC,OAAOlmB,WACE6I,eAAeI,wBAAwB/c,GACjBumC,mBAAkB,wBAEpE,GAAIyb,KAA6BkV,GAAoC,mBAAfA,GAClD,MAAM,IAAI,GACN,8HAIR,IAcMG,EAAkBrV,EAdQ,CAC5BsV,wBAAyB,SAAC96D,GACtB,SAAK+6D,yBAAyB/6D,EAA9B,EACJg7D,wBAAyB,SAACh7D,GACtB,SAAKi7D,yBAAyBj7D,EAA9B,EACJyxD,UAAW,SAACzxD,EAA8Bk5D,GACtC,SAAKgC,yBAAyBl7D,EAAMk5D,EAAS11D,EAAUk3D,EAAvD,GAGiB,CACrBjJ,UAAW,SAAC,G,IAAE0J,EAAO,UACjB,SAAKxJ,iBAAiBnuD,EAAU23D,EAAhC,GAOFC,GAAmB,eACrBnK,cAAe0J,EAAkBzJ,QAAQC,OACzCr5B,MAAOA,EAAQ77B,KAAKo/D,gBAAgBvjC,GAAS,CAAC,EAC9Csd,QAAS,WAAM,SAAKkmB,aAAalS,EAAlB,EACflC,YAAa,WAAM,SAAKqU,aAAaxW,EAAlB,GAChB8V,GAGDW,EAAeb,EAAkBrJ,QAAQ8J,GAE3CI,EAAa5J,aACb4J,EAAaxkC,OAAO,IAAItzB,GAExBzH,KAAK41D,eAAenuD,EAE5B,EAEc,YAAA43D,aAAd,SACIlS,G,kIAGIA,GAC4D,mBAArDA,EAAwBC,yBAD/B,YAKA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAIzB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACjDsmC,I,OAIJ,OALcxvD,EAAS,SAEtB,KAED/G,KAAKw/D,cAAgBz4D,EAAKxB,GAC1B,GAAMvF,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuBjD,aAAatpB,EAAKxB,M,cAAzE,S,aAEA,M,SAAM,IAAI,G,yBAKR,YAAA05D,yBAAd,SACIl7D,EACAk5D,EACA11D,EACAk3D,G,kJAIqB,OAFf18D,EAAQ/B,KAAKuhC,OAAOlmB,WACpBtU,EAAOhF,EAAMgF,KAAKgX,iBACH,GAAM/d,KAAKy/D,wBAAwBxC,I,OAAlDyC,EAAe,S,gDAGb34D,EAAKkgB,UAAUC,cAAc9mB,OAAS,GAC9Bo9D,EAA0BkC,EAAY,MAA/BC,EAAmBD,EAAY,eACxC98C,GAA6C,QAA3B,EAAiB,QAAjB,EAAA+8C,EAAe,UAAE,eAAEpuD,gBAAQ,eAAEyI,UAAW,CAAC,EAE3DA,EAAUha,KAAK4/D,YAAY,CAC7B3lD,UAAWujD,EAAM9+D,KAAKmhE,WACtB3lD,SAAUsjD,EAAM9+D,KAAKohE,QACrBxwC,MAAOkuC,EAAMuC,cACb3lD,SAAUwI,EAAgBoxC,eAC1B15C,KAAMsI,EAAgBo9C,aACtBxlD,YAAaoI,EAAgBsxC,aAC7Bz5C,WAAYmI,EAAgBuxC,YAC5BvvB,oBAAqBhiB,EAAgBq9C,eAGzC,GAAMjgE,KAAKuhC,OAAO+Q,SACdtyC,KAAK2xC,6BAA6BtiB,cAAcrV,MAhBpD,M,OAkBA,OAHA,SAGA,GAAMha,KAAKuhC,OAAO+Q,SAAStyC,KAAK4xC,0BAA0BviB,cAAcrV,K,OACxE,OADA,SACA,GAAMha,KAAKkgE,gB,cAAX,S,aAeA,OAbQ1C,EAAUkC,EAAY,MAExB1lD,EAAUha,KAAK4/D,YAAY,CAC7B3lD,UAAWujD,EAAM9+D,KAAKmhE,WACtB3lD,SAAUsjD,EAAM9+D,KAAKohE,QACrBxwC,MAAOkuC,EAAMuC,cACb3lD,SAAUojD,EAAMxjD,QAAQg6C,eACxB15C,KAAMkjD,EAAMxjD,QAAQgmD,aACpBxlD,YAAagjD,EAAMxjD,QAAQk6C,aAC3Bz5C,WAAY+iD,EAAMxjD,QAAQm6C,YAC1BvvB,oBAAqB44B,EAAMxjD,QAAQimD,eAGvC,GAAMjgE,KAAKuhC,OAAO+Q,SACdtyC,KAAK2xC,6BAA6BtiB,cAAcrV,K,OADpD,S,iBAKJ,SAAMha,KAAKuhC,OAAO+Q,SACdtyC,KAAKmjC,oBAAoBZ,YAAY,CAAC,EAAG,CAAEjV,OAAQ,CAAE/lB,SAAQ,O,OAEjE,OAHA,SAGA,GAAMvH,KAAKmgE,eAAe54D,EAAUxD,EAAKm7D,U,QAMzC,OANA,SAEIT,GACAA,IAGG,CAAP,GAAO,G,QAEP,M,WAAM,IAAI3/D,MAAM,G,0BAIV,YAAA2gE,wBAAd,SAAsCxC,G,+FAClC,IACI,MAAO,CAAP,EAAOA,EAAQ9vD,MAAMrP,M,CACvB,MAAO4B,GACL,MAAM,IAAI,C,kBAIJ,YAAAo/D,yBAAd,SACI/6D,G,gIAEMiW,EAAUha,KAAK4/D,YAAY,CAC7BtlD,KAAMvW,EAAK6e,gBAAgBtI,KAC3BE,YAAazW,EAAK6e,gBAAgBsxC,aAClCz5C,WAAY1W,EAAK6e,gBAAgBuxC,YACjCvvB,oBAAqB7gC,EAAK6e,gBAAgB7gB,Q,iBAM1C,O,sBAAA,GAAM/B,KAAKuhC,OAAO+Q,SAAStyC,KAAK2xC,6BAA6BtiB,cAAcrV,K,OAC3E,OADA,SACA,GAAMha,KAAKuhC,OAAO+Q,SAAStyC,KAAK4xC,0BAA0BviB,cAAcrV,K,OAIxE,OAJA,SAEMkzB,EAAiBltC,KAAKogE,4BAE5B,GAAMpgE,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BjC,qBAAqBzC,EAAe3nC,M,OAEvE,OAHA,SAGA,GAAMvF,KAAKkgE,gB,cAAX,S,aAEA,M,WAAM,IAAIphE,MAAM,G,yBAIV,YAAAkgE,yBAAd,SACIj7D,G,8HAEMmpC,EAAiBltC,KAAKogE,0BAA0Br8D,EAAKyiB,uBAAuBjhB,I,iBAG9E,O,sBAAA,GAAMvF,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BjC,qBAAqBzC,EAAe3nC,M,OAEvE,OAHA,SAGA,GAAMvF,KAAKkgE,gB,cAAX,S,aAEA,M,WAAM,IAAIphE,MAAM,G,yBAIV,YAAAqhE,eAAd,SAA6B54D,EAAkB2O,G,4HAa3C,OAZMwrB,EAAc,CAChB8B,iBAAkB,CACdE,yBAA0B,KAC1BC,iCAAkC,KAClC08B,YAAa,KACbC,UAAW/4D,EACXg5D,eAAgB,CACZC,SAAUtqD,KAKtB,GAAMlW,KAAKuhC,OAAO+Q,SACdtyC,KAAK8xC,sBAAsB/N,cAAc,CAAEx8B,SAAQ,EAAEm6B,YAAW,M,cADpE,S,YAKU,YAAAw+B,aAAd,W,gIACUn+D,EAAQ/B,KAAKuhC,OAAOlmB,WACpBtU,EAAOhF,EAAMgF,KAAKgX,iBAClBuH,EAAcvjB,EAAMiQ,aAAakU,yBAAyB,G,iBAG5D,O,sBAAA,GAAMlmB,KAAKq+D,6BAA6BjT,YAAY,CAChDwF,yBAA0BtrC,EAAYsrC,yBACtCrjC,OAAQxmB,EAAKxB,GACbihB,uBAAwBlB,EAAYkB,0B,cAHxC,S,aAMA,M,SAAM,IAAI,E,yBAIV,YAAAo5C,YAAR,SAAoB5lD,GAChB,MAAO,CACHC,WAAWD,aAAO,EAAPA,EAASC,YAAa,GACjCC,UAAUF,aAAO,EAAPA,EAASE,WAAY,GAC/BoV,OAAOtV,aAAO,EAAPA,EAASsV,QAAS,GACzB5U,MAAO,GACPP,QAAS,GACTC,UAAUJ,aAAO,EAAPA,EAASI,WAAY,GAC/BC,SAAU,GACVC,MAAMN,aAAO,EAAPA,EAASM,OAAQ,GACvBE,aAAaR,aAAO,EAAPA,EAASQ,cAAe,GACrCC,YAAYT,aAAO,EAAPA,EAASS,aAAc,GACnCF,gBAAiB,GACjBqqB,qBAAqB5qB,aAAO,EAAPA,EAAS4qB,sBAAuB,GACrDjqB,aAAc,GAEtB,EAEQ,YAAAylD,0BAAR,SAAkCK,GAC9B,IACMn7C,EADQtlB,KAAKuhC,OAAOlmB,WACArJ,aAAakU,yBAAyB,GAE1D0qC,EAA2BtrC,EAAYsrC,0BAA4B,GAEnE8P,EAA4B9P,EAAyBzyC,MACvD,SAACspB,GAAW,OAAAA,EAAOkF,aAAP,IAQVg0B,GANyBF,EACzB7P,EAAyBzyC,MAAK,SAACspB,GAAW,OAAAA,EAAOliC,KAAOk7D,CAAd,IAC1C7P,EAAyBzyC,MACrB,SAACspB,GAAM,MAAK,OAAAA,EAAOliC,MAAyC,QAAvC,EAAK+f,EAAYkB,8BAAsB,eAAEjhB,GAAE,MAGjBm7D,EAEzD,IAAKC,EACD,MAAM,IAAI7hE,MAAM,+CAGpB,OAAO6hE,CACX,EAEc,YAAArB,aAAd,SAA2BxW,G,8HAKH,OAJdv7B,EAASvtB,KAAKw/D,eAAiBx/D,KAAKuhC,OAAOlmB,WAAWtU,KAAKgX,iBAAiBxY,GAE5EwjB,EAAa+/B,EAA4B,yBAA2B,iBAEtD,GAAM9oD,KAAKq+D,6BAA6BpT,YAAYliC,EAAY,CAChFwE,OAAM,K,OAGV,MAAO,CAAP,EAJoB,SAElB,S,QAKE,YAAAmoC,iBAAR,SAAyBnuD,EAAkB2O,GACvC,IAAKA,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO/W,KAAKq0D,YAAYoC,SAAS,iBAAiB,eAC9C7S,aAAc,SACd5hD,OAAQ,wBACRyW,SAAUlR,EACVi5D,SAAUtqD,GACNlW,KAAKw/D,eAAiB,CAAEzb,QAAS/jD,KAAKw/D,gBAElD,EAEQ,YAAAb,6BAAR,WACI,IAAK3+D,KAAKu+D,mBACN,MAAM,IAAI,GAGd,OAAOv+D,KAAKu+D,kBAChB,EAEQ,YAAAa,gBAAR,SAAwBvjC,GACd,MAA0C,GAAoBA,GAEpE,MAAO,CAAEw3B,MAFI,QAEG51B,OAFK,SAEGra,MAFI,QAEGmwC,OAFK,SAEGC,MAFI,QAG/C,EAEQ,YAAAoC,eAAR,SAAuBmB,GACnB,IAAM17B,EAAU07B,GAAavhC,SAASmE,eAAeo9B,GAEjD17B,GACAA,EAAQ8c,QAEhB,EACJ,EAvYA,G,GCAA,WAII,WACY5W,EACAjO,EACA0e,EACAqiB,EACA+H,EACAiC,EACAl7B,EACAyO,EACAD,EACAG,GATA,KAAAvQ,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA0e,mBAAAA,EACA,KAAAqiB,YAAAA,EACA,KAAA+H,oBAAAA,EACA,KAAAiC,6BAAAA,EACA,KAAAl7B,oBAAAA,EACA,KAAAyO,0BAAAA,EACA,KAAAD,6BAAAA,EACA,KAAAG,sBAAAA,CACT,CAwZP,OAtZU,YAAApB,WAAN,SAAiBnuC,G,kJAGb,GAFQq+D,EAAgDr+D,EAAO,qBAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAG3D,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,IAAKm5D,EACD,MAAM,IAAI,GACN,iG,GAKJzT,EAIAyT,EAAoB,wBAHpBvqB,EAGAuqB,EAAoB,aAFpB9X,EAEA8X,EAAoB,0BADpBtM,EACAsM,EAAoB,sBAEpBzT,EAAA,YAIA,GAHMprD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAE9D8uC,EACD,MAAM,IAAI,GACN,8GAIkB,OAA1B,EAAAr2C,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACA60B,EACAyS,I,cAHJ,EAAKyV,mBAAqB,S,aAMZ,SAAMv+D,KAAKuhC,OAAO+Q,SAC5BtyC,KAAKszB,uBAAuB9C,wB,OAKN,OANpBzuB,EAAQ,SAGRgF,EAAOhF,EAAMgF,KAAKgX,iBAClByD,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,GAEnE,EAAAvH,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACAza,EAAK4qB,SAASrxB,KACdwoD,I,OAHJ,EAAKyV,mBAAqB,S,wBAO9Bv+D,KAAKw+D,cAAc/2D,EAAaF,EAAUq5D,GAC1C5gE,KAAK6gE,gBAAgBvM,G,YAGzB,YAAAte,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAoiC,cAAR,SACI/2D,EACAF,EACAq5D,GAHJ,WAKYzT,EACJyT,EAAoB,wBADS9X,EAC7B8X,EAAoB,0BADoC/kC,EACxD+kC,EAAoB,MAD2CnC,EAC/DmC,EAAoB,WAClBlC,EAAoB1+D,KAAK2+D,+BAGvBpV,EAFMvpD,KAAKuhC,OAAOlmB,WACE6I,eAAeI,wBAAwB/c,GACjBumC,mBAAkB,wBAEpE,GAAIyb,KAA6BkV,GAAoC,mBAAfA,GAClD,MAAM,IAAI,GACN,oIAIR,IAcMG,EAAkBrV,EAdQ,CAC5BsV,wBAAyB,SAAC96D,GACtB,SAAK+6D,yBAAyB/6D,EAA9B,EACJg7D,wBAAyB,SAACh7D,GACtB,SAAKi7D,yBAAyBj7D,EAA9B,EACJyxD,UAAW,SAACzxD,EAA8Bk5D,GACtC,SAAKgC,yBAAyBl7D,EAAMk5D,EAAS11D,EAAUk3D,EAAvD,GAGiB,CACrBjJ,UAAW,SAAC,G,IAAE0J,EAAO,UACjB,SAAKxJ,iBAAiBnuD,EAAU23D,EAAhC,GAOF3H,EAAiB,CACnBmH,EAAkBzJ,QAAQuC,SAC1BkH,EAAkBzJ,QAAQwC,QAG1BH,GAAyB,EAE7BC,EAAexkD,SAAQ,SAACiiD,GACpB,IAAKsC,EAAwB,CACzB,IAAM6H,GAAmB,eACrBnK,cAAa,EACbn5B,MAAOA,EAAQ,EAAKujC,gBAAgBvjC,GAAS,CAAC,EAC9Csd,QAAS,WAAM,SAAKkmB,aAAalS,EAAlB,EACflC,YAAa,WAAM,SAAKqU,aAAaxW,EAAlB,GAChB8V,GAGDW,EAAeb,EAAkBrJ,QAAQ8J,GAE3CI,EAAa5J,eACb4J,EAAaxkC,OAAO,IAAItzB,GACxB6vD,GAAyB,E,CAGrC,IAEKA,GACDt3D,KAAK41D,eAAenuD,EAE5B,EAEc,YAAAw3D,yBAAd,SACIl7D,EACAk5D,EACA11D,EACAk3D,G,gJAIqB,OAFf18D,EAAQ/B,KAAKuhC,OAAOlmB,WACpBtU,EAAOhF,EAAMgF,KAAKgX,iBACH,GAAM/d,KAAKy/D,wBAAwBxC,I,cAAlDyC,EAAe,SAEjB34D,EAAKkgB,UAAUC,cAAc9mB,OAAS,GAC9Bo9D,EAA0BkC,EAAY,MAA/BC,EAAmBD,EAAY,eACxC98C,GAA6C,QAA3B,EAAiB,QAAjB,EAAA+8C,EAAe,UAAE,eAAEpuD,gBAAQ,eAAEyI,UAAW,CAAC,EAE3DA,EAAUha,KAAK4/D,YAAY,CAC7B3lD,UAAWujD,EAAM9+D,KAAKmhE,WACtB3lD,SAAUsjD,EAAM9+D,KAAKohE,QACrBxwC,MAAOkuC,EAAMuC,cACb3lD,SAAUwI,EAAgBoxC,eAC1B15C,KAAMsI,EAAgBo9C,aACtBxlD,YAAaoI,EAAgBsxC,aAC7Bz5C,WAAYmI,EAAgBuxC,YAC5BvvB,oBAAqBhiB,EAAgBq9C,eAGzC,GAAMjgE,KAAKuhC,OAAO+Q,SAAStyC,KAAK2xC,6BAA6BtiB,cAAcrV,MAf3E,M,OAgBA,OADA,SACA,GAAMha,KAAKuhC,OAAO+Q,SAAStyC,KAAK4xC,0BAA0BviB,cAAcrV,K,OACxE,OADA,SACA,GAAMha,KAAKkgE,gB,cAAX,S,aAeA,OAbQ1C,EAAUkC,EAAY,MAExB1lD,EAAUha,KAAK4/D,YAAY,CAC7B3lD,UAAWujD,EAAM9+D,KAAKmhE,WACtB3lD,SAAUsjD,EAAM9+D,KAAKohE,QACrBxwC,MAAOkuC,EAAMuC,cACb3lD,SAAUojD,EAAMxjD,QAAQg6C,eACxB15C,KAAMkjD,EAAMxjD,QAAQgmD,aACpBxlD,YAAagjD,EAAMxjD,QAAQk6C,aAC3Bz5C,WAAY+iD,EAAMxjD,QAAQm6C,YAC1BvvB,oBAAqB44B,EAAMxjD,QAAQimD,eAGvC,GAAMjgE,KAAKuhC,OAAO+Q,SAAStyC,KAAK2xC,6BAA6BtiB,cAAcrV,K,OAA3E,S,iBAGJ,SAAMha,KAAKuhC,OAAO+Q,SACdtyC,KAAKmjC,oBAAoBZ,YAAY,CAAC,EAAG,CAAEjV,OAAQ,CAAE/lB,SAAQ,O,OAEjE,OAHA,SAGA,GAAMvH,KAAKmgE,eAAe54D,EAAUxD,EAAKm7D,U,OAMzC,OANA,SAEIT,GACAA,IAGG,CAAP,GAAO,G,QAGG,YAAAgB,wBAAd,SAAsCxC,G,+FAClC,IACI,MAAO,CAAP,EAAOA,EAAQ9vD,MAAMrP,M,CACvB,MAAO4B,GACL,MAAM,IAAI,C,kBAIJ,YAAAs/D,yBAAd,SACIj7D,G,4HAIA,OAFMmpC,EAAiBltC,KAAKogE,0BAA0Br8D,EAAKyiB,uBAAuBjhB,IAElF,GAAMvF,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BjC,qBAAqBzC,EAAe3nC,M,OAEvE,OAHA,SAGA,GAAMvF,KAAKkgE,gB,cAAX,S,YAGU,YAAAC,eAAd,SAA6B54D,EAAkB2O,G,4HAa3C,OAZMwrB,EAAc,CAChB8B,iBAAkB,CACdE,yBAA0B,KAC1BC,iCAAkC,KAClC08B,YAAa,KACbC,UAAW/4D,EACXg5D,eAAgB,CACZC,SAAUtqD,KAKtB,GAAMlW,KAAKuhC,OAAO+Q,SACdtyC,KAAK8xC,sBAAsB/N,cAAc,CAAEx8B,SAAQ,EAAEm6B,YAAW,M,cADpE,S,YAKU,YAAAo9B,yBAAd,SACI/6D,G,8HAWA,OATMiW,EAAUha,KAAK4/D,YAAY,CAC7BtlD,KAAMvW,EAAK6e,gBAAgBtI,KAC3BE,YAAazW,EAAK6e,gBAAgBsxC,aAClCz5C,WAAY1W,EAAK6e,gBAAgBuxC,YACjCvvB,oBAAqB7gC,EAAK6e,gBAAgB7gB,QAK9C,GAAM/B,KAAKuhC,OAAO+Q,SAAStyC,KAAK2xC,6BAA6BtiB,cAAcrV,K,OAC3E,OADA,SACA,GAAMha,KAAKuhC,OAAO+Q,SAAStyC,KAAK4xC,0BAA0BviB,cAAcrV,K,OAIxE,OAJA,SAEMkzB,EAAiBltC,KAAKogE,4BAE5B,GAAMpgE,KAAKuhC,OAAO+Q,SACdtyC,KAAK4xC,0BAA0BjC,qBAAqBzC,EAAe3nC,M,OAEvE,OAHA,SAGA,GAAMvF,KAAKkgE,gB,cAAX,S,YAGU,YAAAA,aAAd,W,gIACUn+D,EAAQ/B,KAAKuhC,OAAOlmB,WACpBtU,EAAOhF,EAAMgF,KAAKgX,iBAClBuH,EAAcvjB,EAAMiQ,aAAakU,yBAAyB,G,iBAG5D,O,sBAAA,GAAMlmB,KAAKq+D,6BAA6BjT,YAAY,CAChDwF,yBAA0BtrC,EAAYsrC,yBACtCrjC,OAAQxmB,EAAKxB,GACbihB,uBAAwBlB,EAAYkB,0B,cAHxC,S,aAMA,M,SAAM,IAAI,E,yBAIV,YAAA45C,0BAAR,SAAkCK,GAC9B,IACMn7C,EADQtlB,KAAKuhC,OAAOlmB,WACArJ,aAAakU,yBAAyB,GAE1D0qC,EAA2BtrC,EAAYsrC,0BAA4B,GAEnE8P,EAA4B9P,EAAyBzyC,MACvD,SAACspB,GAAW,OAAAA,EAAOkF,aAAP,IAQVg0B,GANyBF,EACzB7P,EAAyBzyC,MAAK,SAACspB,GAAW,OAAAA,EAAOliC,KAAOk7D,CAAd,IAC1C7P,EAAyBzyC,MACrB,SAACspB,GAAM,MAAK,OAAAA,EAAOliC,MAAyC,QAAvC,EAAK+f,EAAYkB,8BAAsB,eAAEjhB,GAAE,MAGjBm7D,EAEzD,IAAKC,EACD,MAAM,IAAI7hE,MAAM,+CAGpB,OAAO6hE,CACX,EAEQ,YAAAf,YAAR,SAAoB5lD,GAChB,MAAO,CACHC,WAAWD,aAAO,EAAPA,EAASC,YAAa,GACjCC,UAAUF,aAAO,EAAPA,EAASE,WAAY,GAC/BoV,OAAOtV,aAAO,EAAPA,EAASsV,QAAS,GACzB5U,MAAO,GACPP,QAAS,GACTC,UAAUJ,aAAO,EAAPA,EAASI,WAAY,GAC/BC,SAAU,GACVC,MAAMN,aAAO,EAAPA,EAASM,OAAQ,GACvBE,aAAaR,aAAO,EAAPA,EAASQ,cAAe,GACrCC,YAAYT,aAAO,EAAPA,EAASS,aAAc,GACnCF,gBAAiB,GACjBqqB,qBAAqB5qB,aAAO,EAAPA,EAAS4qB,sBAAuB,GACrDjqB,aAAc,GAEtB,EAEQ,YAAAkmD,gBAAR,SAAwBvM,GACpB,IAAMoK,EAAoB1+D,KAAK2+D,+BAK/B,GAJ4B96C,QACxBywC,GAAwB9+B,SAASmE,eAAe26B,IAG3B,CACrB,IAGMwM,EAAwB,CAC1BzuC,OAJUryB,KAAKuhC,OAAOlmB,WACPtU,KAAKgX,iBAGP2T,WACbkoB,UAAW,OACX/d,MAAO,CACH03B,OAAQ,SAIOmL,EAAkB5I,SAASgL,GAEnC/lC,OAAO,IAAIu5B,E,CAElC,EAEc,YAAA+K,aAAd,SACIlS,G,kIAGIA,GAC4D,mBAArDA,EAAwBC,yBAD/B,YAKA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAIzB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACjDsmC,I,OAIJ,OALcxvD,EAAS,SAEtB,KAED/G,KAAKw/D,cAAgBz4D,EAAKxB,GAC1B,GAAMvF,KAAKuhC,OAAO+Q,SAAStyC,KAAKszB,uBAAuBjD,aAAatpB,EAAKxB,M,cAAzE,S,aAEA,M,SAAM,IAAI,G,yBAKR,YAAA+5D,aAAd,SAA2BxW,G,8HAOH,OANdv7B,EAASvtB,KAAKw/D,eAAiBx/D,KAAKuhC,OAAOlmB,WAAWtU,KAAKgX,iBAAiBxY,GAE5EwjB,EAAa+/B,EACb,+BACA,uBAEc,GAAM9oD,KAAKq+D,6BAA6BpT,YAAYliC,EAAY,CAChFwE,OAAM,K,OAGV,MAAO,CAAP,EAJoB,SAElB,S,QAKE,YAAAmoC,iBAAR,SAAyBnuD,EAAkB2O,GACvC,IAAKA,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO/W,KAAKq0D,YAAYoC,SAAS,iBAAiB,eAC9C7S,aAAc,SACd5hD,OAAQ,wBACRyW,SAAUlR,EACVi5D,SAAUtqD,GACNlW,KAAKw/D,eAAiB,CAAEzb,QAAS/jD,KAAKw/D,gBAElD,EAEQ,YAAAb,6BAAR,WACI,IAAK3+D,KAAKu+D,mBACN,MAAM,IAAI,GAGd,OAAOv+D,KAAKu+D,kBAChB,EAEQ,YAAAa,gBAAR,SAAwBvjC,GACd,MAA0C,GAAoBA,GAEpE,MAAO,CAAEw3B,MAFI,QAEG51B,OAFK,SAEGra,MAFI,QAEGmwC,OAFK,SAEGC,MAFI,QAG/C,EAEQ,YAAAoC,eAAR,SAAuBmB,GACnB,IAAM17B,EAAU07B,GAAavhC,SAASmE,eAAeo9B,GAEjD17B,GACAA,EAAQ8c,QAEhB,EACJ,EAvaA,G,GCRA,WAMI,WACY5W,EACAjO,EACA0e,EACAqiB,EACA+H,EACAiC,GALA,KAAA98B,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA0e,mBAAAA,EACA,KAAAqiB,YAAAA,EACA,KAAA+H,oBAAAA,EACA,KAAAiC,6BAAAA,CACT,CAmLP,OAjLU,YAAA3tB,WAAN,SAAiBnuC,G,gJAGb,GAFQw+D,EAA4Dx+D,EAAO,iCAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAGvE,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,IAAKs5D,EACD,MAAM,IAAI,GACN,6GAIR,IAAKA,EAAiCvW,IAClC,MAAM,IAAI,GACN,iH,GAIA2C,EACJ4T,EAAgC,wBADH1qB,EAC7B0qB,EAAgC,aADWjY,EAC3CiY,EAAgC,2BAEhC5T,EAAA,YAIA,GAHMprD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAE9D8uC,EACD,MAAM,IAAI,GACN,0HAIkB,OAA1B,EAAAr2C,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACA60B,EACAyS,I,cAHJ,EAAKyV,mBAAqB,S,aAMZ,SAAMv+D,KAAKuhC,OAAO+Q,SAC5BtyC,KAAKszB,uBAAuB9C,wB,OAKN,OANpBzuB,EAAQ,SAGRgF,EAAOhF,EAAMgF,KAAKgX,iBAClByD,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,GAEnE,EAAAvH,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACAza,EAAK4qB,SAASrxB,KACdwoD,I,OAHJ,EAAKyV,mBAAqB,S,wBAO9Bv+D,KAAKw+D,cAAcj3D,EAAUE,EAAas5D,G,YAG9C,YAAA/qB,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAoiC,cAAR,SACIj3D,EACAE,EACAs5D,GAHJ,WAKYvW,EACJuW,EAAgC,IADvB5T,EACT4T,EAAgC,wBADEjY,EAClCiY,EAAgC,0BAD6BllC,EAC7DklC,EAAgC,MAE9BrC,EAAoB1+D,KAAK2+D,+BAG/B,IAFiChhE,OAAOygB,OAAOsgD,EAAkBzJ,SAASrkC,SAAS45B,GAG/E,MAAM,IAAI,GACN,mIAIR,IAEM2U,EAAsC,CACxCnK,cAAexK,EACf3uB,MAJqBA,EAAQ77B,KAAKo/D,gBAAgBvjC,GAAS,CAAC,EAK5Dsd,QAAS,WAAM,SAAKkmB,aAAalS,EAAlB,EACflC,YAAa,WAAM,SAAKqU,aAAaxW,EAAlB,EACnB0M,UAAW,SAAC,G,IAAE0J,EAAO,UACjB,SAAKxJ,iBAAiBnuD,EAAU23D,EAAhC,GAGF9J,EAAqBsJ,EAAkBrJ,QAAQ8J,GAEjD/J,EAAmBO,aACnBP,EAAmBr6B,OAAO,IAAItzB,GAE9BzH,KAAK41D,eAAenuD,EAE5B,EAEc,YAAA43D,aAAd,SACIlS,G,kIAGIA,GAC4D,mBAArDA,EAAwBC,yBAD/B,YAKA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAIzB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACjDsmC,I,cADUxvD,EAAS,SAEtB,KAED/G,KAAKw/D,cAAgBz4D,EAAKxB,G,aAE1B,M,SAAM,IAAI,G,yBAKR,YAAA+5D,aAAd,SAA2BxW,G,8HAOH,OANdv7B,EAASvtB,KAAKw/D,eAAiBx/D,KAAKuhC,OAAOlmB,WAAWtU,KAAKgX,iBAAiBxY,GAE5EwjB,EAAa+/B,EACb,2CACA,kCAEc,GAAM9oD,KAAKq+D,6BAA6BpT,YAAYliC,EAAY,CAChFwE,OAAM,K,OAGV,MAAO,CAAP,EAJoB,SAElB,S,QAKE,YAAAmoC,iBAAR,SAAyBnuD,EAAkB2O,GACvC,IAAKA,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO/W,KAAKq0D,YAAYoC,SAAS,iBAAiB,eAC9C7S,aAAc,SACd5hD,OAAQ,wBACRyW,SAAUlR,EACVi5D,SAAUtqD,GACNlW,KAAKw/D,eAAiB,CAAEzb,QAAS/jD,KAAKw/D,gBAElD,EAEQ,YAAAb,6BAAR,WACI,IAAK3+D,KAAKu+D,mBACN,MAAM,IAAI,GAGd,OAAOv+D,KAAKu+D,kBAChB,EAEQ,YAAAa,gBAAR,SAAwBvjC,GACd,MAAmC,GAAoBA,GAE7D,MAAO,CAAE4B,OAFK,SAEGra,MAFI,QAEGmwC,OAFK,SAEGC,MAFI,QAGxC,EAEQ,YAAAoC,eAAR,SAAuBmB,GACnB,IAAM17B,EAAU07B,GAAavhC,SAASmE,eAAeo9B,GAEjD17B,GACAA,EAAQ8c,QAEhB,EACJ,EAhMA,G,GCCA,WAII,WACY5W,EACAjO,EACA0e,EACAqiB,EACA+H,EACAiC,GALA,KAAA98B,OAAAA,EACA,KAAAjO,uBAAAA,EACA,KAAA0e,mBAAAA,EACA,KAAAqiB,YAAAA,EACA,KAAA+H,oBAAAA,EACA,KAAAiC,6BAAAA,CACT,CAsKP,OApKU,YAAA3tB,WAAN,SAAiBnuC,G,gJAGb,GAFQy+D,EAA+Cz+D,EAAO,oBAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAG1D,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,IAAKu5D,EACD,MAAM,IAAI,GACN,gG,GAIA7T,EACJ6T,EAAmB,wBADU3qB,EAC7B2qB,EAAmB,aADwBlY,EAC3CkY,EAAmB,2BAEnB7T,EAAA,YAIA,GAHMprD,EAAQ/B,KAAKuhC,OAAOlmB,WACpBmG,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,IAE9D8uC,EACD,MAAM,IAAI,GACN,6GAIkB,OAA1B,EAAAr2C,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACA60B,EACAyS,I,cAHJ,EAAKyV,mBAAqB,S,aAMZ,SAAMv+D,KAAKuhC,OAAO+Q,SAC5BtyC,KAAKszB,uBAAuB9C,wB,OAKN,OANpBzuB,EAAQ,SAGRgF,EAAOhF,EAAMgF,KAAKgX,iBAClByD,EAAgBzf,EAAMmiB,eAAeI,wBAAwB/c,GAEnE,EAAAvH,KAA0B,GAAMA,KAAKo8D,oBAAoBvT,aACrDrnC,EACAza,EAAK4qB,SAASrxB,KACdwoD,I,OAHJ,EAAKyV,mBAAqB,S,wBAO9Bv+D,KAAKw+D,cAAc/2D,EAAaF,EAAUy5D,G,YAG9C,YAAAhrB,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAoiC,cAAR,SACI/2D,EACAF,EACAy5D,GAHJ,WAKY7T,EAA8D6T,EAAmB,wBAAxDlY,EAAqCkY,EAAmB,0BAA7BnlC,EAAUmlC,EAAmB,MAEnFtC,EAAoB1+D,KAAK2+D,+BAKzBQ,EAAsC,CACxCnK,cALkB0J,EAAkBzJ,QAAQgM,MAM5CplC,MAJqBA,EAAQ77B,KAAKkhE,qBAAqBrlC,GAAS,CAAC,EAKjEsd,QAAS,WAAM,SAAKkmB,aAAalS,EAAlB,EACflC,YAAa,WAAM,SAAKqU,aAAaxW,EAAlB,EACnB0M,UAAW,SAAC,G,IAAE0J,EAAO,UACjB,SAAKxJ,iBAAiBnuD,EAAU23D,EAAhC,GAGF9J,EAAqBsJ,EAAkBrJ,QAAQ8J,GAEjD/J,EAAmBO,aACnBP,EAAmBr6B,OAAO,IAAItzB,GAE9BzH,KAAK41D,eAAenuD,EAE5B,EAEc,YAAA43D,aAAd,SACIlS,G,kIAGIA,GAC4D,mBAArDA,EAAwBC,yBAD/B,YAKA,KAFMmJ,EAAkBpJ,EAAwBC,4BAG5C,MAAM,IAAI,GAAiB/2C,GAAqBG,a,iBAIzB,O,sBAAA,GAAMxW,KAAKgyC,mBAAmB/hB,iBACjDsmC,I,cADUxvD,EAAS,SAEtB,KAED/G,KAAKw/D,cAAgBz4D,EAAKxB,G,aAE1B,M,SAAM,IAAI,G,yBAKR,YAAA+5D,aAAd,SAA2BxW,G,8HAOH,OANdv7B,EAASvtB,KAAKw/D,eAAiBx/D,KAAKuhC,OAAOlmB,WAAWtU,KAAKgX,iBAAiBxY,GAE5EwjB,EAAa+/B,EACb,8BACA,sBAEc,GAAM9oD,KAAKq+D,6BAA6BpT,YAAYliC,EAAY,CAChFwE,OAAM,K,OAGV,MAAO,CAAP,EAJoB,SAElB,S,QAKE,YAAAmoC,iBAAR,SAAyBnuD,EAAkB2O,GACvC,IAAKA,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO/W,KAAKq0D,YAAYoC,SAAS,iBAAiB,eAC9C7S,aAAc,SACd5hD,OAAQ,wBACRyW,SAAUlR,EACVi5D,SAAUtqD,GACNlW,KAAKw/D,eAAiB,CAAEzb,QAAS/jD,KAAKw/D,gBAElD,EAEQ,YAAAb,6BAAR,WACI,IAAK3+D,KAAKu+D,mBACN,MAAM,IAAI,GAGd,OAAOv+D,KAAKu+D,kBAChB,EAEQ,YAAA2C,qBAAR,SAA6BrlC,GACnB,MAAmC,GAAoBA,GAE7D,MAAO,CAAE4B,OAFK,SAEGra,MAFI,QAEGmwC,OAFK,SAEGC,MAFI,QAGxC,EAEQ,YAAAoC,eAAR,SAAuBmB,GACnB,IAAM17B,EAAU07B,GAAavhC,SAASmE,eAAeo9B,GAEjD17B,GACAA,EAAQ8c,QAEhB,EACJ,EAjLA,G,SCvBA,WAGI,WAAoBtB,QAAA,IAAAA,IAAAA,GAAA,QAAAA,aAAAA,EAChB72C,KAAKk2C,UAAY,IAAI,GAAS,CAC1Bc,cAAeh3C,KAAKmhE,cAAcrpC,KAAK93B,MACvC82C,YAAa92C,KAAK62C,cAE1B,CAyDJ,OAvDI,YAAA/4C,IAAA,SAAIsjE,GACA,OAAOphE,KAAKk2C,UAAUp4C,IAAIkC,KAAKqhE,aAAaD,GAChD,EAEA,YAAAnhE,SAAA,SAASmhE,EAAmBv2C,GACxB7qB,KAAKk2C,UAAUj2C,SAASD,KAAKqhE,aAAaD,GAAYv2C,EAC1D,EAEQ,YAAAw2C,aAAR,SAAqBD,GACjB,OAAOxtD,KAAKC,KAAKC,UAAUstD,GAC/B,EAEQ,YAAAE,aAAR,SAAqBj0D,GACjB,OAAOwG,KAAKoyC,MAAMsb,KAAKl0D,GAC3B,EAEQ,YAAA8zD,cAAR,SAAsB9zD,EAAem0D,GAArC,I,EAAA,OACUC,EAAQzhE,KAAKshE,aAAaj0D,GAC1Bq0D,EAAuE,GAE7EF,EAAiBzuD,SAAQ,SAAC4uD,GAItB,IAHA,IAAMC,EAAa,EAAKN,aAAaK,GAC/BliE,EAAS,CAAE4N,MAAOs0D,EAAiBE,QAAS,EAAGjhE,SAAS,GAEnC,MAAAjD,OAAOmkE,QAAQF,GAAf,eAA4B,CAA5C,WAACnkE,EAAG,KAAEa,EAAK,KACdb,KAAOgkE,GAASA,EAAMhkE,KAASa,GAC/BmB,EAAOoiE,UAGC,YAARpkE,IAA+B,IAAVa,IACrBmB,EAAOmB,SAAU,E,CAIzB8gE,EAAQjzD,KAAKhP,EACjB,IAEA,IAAMsiE,EAAUL,EACXvuD,MAAK,SAAC7V,EAAGgI,GAAM,OAAAA,EAAEu8D,QAAUvkE,EAAEukE,OAAd,IACf7+D,QAAO,SAACvD,GAAW,OAAAA,EAAOoiE,QAAU,CAAjB,IAAoB,GAE5C,GAAIE,GAAWA,EAAQ10D,MACnB,OAAO00D,EAAQ10D,MAGnB,GAAIrN,KAAK62C,aAAc,CACnB,IAAMD,EAAuD,QAA3C,EAAG8qB,EAAQvjD,MAAK,SAAC1e,GAAW,OAAAA,EAAOmB,OAAP,WAAe,eAAEyM,MAE/D,GAAIupC,EACA,OAAOA,C,CAIf,MAAM,IAAI93C,MAAM,mEACpB,EACJ,EAjEA,GCDe,SAASkjE,GACpB9kE,EACA+kE,GAEA,OAAOtkE,OAAOsV,OAAO/V,EAAQ,CAAE+kE,WAAU,GAC7C,C,SCAA,YACI,WAAYzjE,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKE,KAAO,8BACZ,EAAKC,KAAO,oB,CAChB,CACJ,OAPyD,oBAOzD,EAPA,CAAyD,ICClD,SAAS,GAAqBouB,GACjC,IALJ,SAA0BA,GACtB,MAAO,oBAAqBA,CAChC,CAGS,CAAiBA,GAClB,MAAM,IAAIjuB,MAAM,6BAExB,C,SAEA,wBAMA,QALI,YAAAmZ,OAAA,SAAOu1B,GAGH,OAFA,GAAqBzgB,QAEd,IAAIkvB,gBAAgB,EAAGzO,EAClC,EACJ,EANA,GCSA,IAGK,IAAL,SAAKsgB,GACD,sBACA,qBACH,CAHD,CAAK,QAAa,K,SASlB,WAOI,WACY7gC,EACAi1C,EACAlU,GAFA,KAAA/gC,eAAAA,EACA,KAAAi1C,2BAAAA,EACA,KAAAlU,gBAAAA,EAPJ,KAAAC,qBAAuB,EAAAnuB,KACvB,KAAAouB,eAAyB,GAAcC,SACvC,KAAAC,eAAyB,GAAcC,QAM5C,CAsbP,OApbU,YAAA3d,WAAN,SACInuC,G,sIAMA,GAJQgF,EAAoChF,EAAO,SAAjCkF,EAA0BlF,EAAO,YAApB+rD,EAAa/rD,EAAO,SAEnD,GAAqBwqB,SAEhBxlB,IAAa+mD,EACd,MAAM,IAAI,GAAiB,yBAO/B,OAJQC,EAAwCD,EAAQ,gBAA/BE,EAAuBF,EAAQ,mBAExDtuD,KAAKiuD,qBAAuBO,EAE5B,GAAMxuD,KAAKkiE,2BAA2B1xC,uB,OAEtC,OAFA,SAEA,GAAMxwB,KAAKkiE,2BAA2Bj0C,kBAAkB1mB,I,OASxD,OATA,SAEMxF,EAAQ/B,KAAKkiE,2BAA2B7mD,WAE9Crb,KAAKyuD,eAAiB1sD,EAAMuiB,wBAAwB/c,GAEpDvH,KAAK0uD,gBAAkB1uD,KAAK2uD,cAAclnD,EAAa8mD,GACvDvuD,KAAK0uD,gBAAgBt2B,iBAAiB,QAASp4B,KAAK4uD,yBAAyB92B,KAAK93B,OAE3E,CAAP,EAAO20B,QAAQyH,W,QAGnB,YAAA4Z,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAuyB,cAAR,SACIlnD,EACA8mD,QAAA,IAAAA,IAAAA,EAAA,6BAEA,IAAM5zB,EAAYnF,SAASmE,eAAelyB,GAE1C,IAAKkzB,EACD,MAAM,IAAI,GACN,8DAIRnF,SAASt2B,KAAK2vD,UAAUC,IAAI,uBAE5B,IAAMC,EAASv5B,SAASW,cAAc,OAOtC,OALA44B,EAAOF,UAAUC,IAAIP,GACrBQ,EAAOj1B,aAAa,OAAQ,UAC5Bi1B,EAAOj1B,aAAa,aAAc,oBAClCa,EAAUZ,YAAYg1B,GAEfA,CACX,EAEQ,YAAAH,yBAAR,SAAiC53B,GAC7BA,EAAMg4B,iBAEN,IAAMjtD,EAAQ/B,KAAKkiE,2BAA2B7mD,WACxCtU,EAAOhF,EAAMgc,iBACb0M,EAAS1oB,EAAMid,wBACf6I,EAAW9lB,EAAM2lB,qBAEvB,IAAK1nB,KAAKyuD,iBAAmBzuD,KAAKyuD,eAAe3gB,mBAC7C,MAAM,IAAI,GAAiB,yBAG/B,IAAMN,EAAUxtC,KAAKivD,gBAAgBloD,EAAM8gB,EAAU4C,EAAQzqB,KAAKyuD,gBAC5DS,EAAkBlvD,KAAKguD,gBAAgB/1C,OAAOu1B,GAEpDxtC,KAAKmvD,sBAAsBD,EAAiBlvD,KAAKyuD,eAAgBhkC,GAEjEykC,EAAgBE,OACpB,EAEQ,YAAAH,gBAAR,SACIloD,EACA8gB,EACA4C,EACAjJ,G,MAGI,EACAiJ,EAAM,aADU2vB,EAAgB,mBAAEiV,EAAS,YAG3C,EACAtoD,EAAI,SADQzG,EAAI,OAAE8lC,EAAa,gBAI/B,EACA5kB,EAAa,mBADS8tC,EAAoB,uBAAEC,EAAiB,oBAG3DC,EAAmBzoD,EAAKkgB,UAAUC,cAAc9mB,OAAS,EAazDotC,EAA6C,CAC/CiiB,6BAA8B,CAAC,iBAC/BC,8BAA+B,CAAC,QAAS,SACzCl1C,YAAa4/B,EACb/D,aAAc/1C,EACdgvD,qBAAoB,EACpBC,kBAAiB,EACjBtoC,UAAW,GACXswB,MApBuCiY,EACrC,CACIpsC,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,GACvCznC,KAAM,WAEV,CACIykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,GACvCznC,KAAM,UAchB,GAAI6wD,EACqC,QAArC,EAAAhiB,EAAQkiB,qCAA6B,SAAEjhD,KAAK,qBACzC,CACH,IAAM,EAA2C,CAC7C,CACI2U,MAAOpjB,KAAKkuD,eACZ77B,OAAQ,GAAGxK,EAASqhB,SAASgc,QAAQ9e,KAI7Cve,EAASwhB,MAAMt2B,SAAQ,SAAC48C,GACpB,SAAUlhD,KAAK,CACX2U,MAAOusC,EAAIjxD,KACX2zB,OAAQ,GAAGs9B,EAAIt9B,OAAO6yB,QAAQ9e,IAFlC,IAMJoH,EAAQvmB,UAAY,C,CAGxB,OAAOumB,CACX,EAEQ,YAAA2hB,sBAAR,SACID,EACA1tC,EACAiJ,GAHJ,WAKIykC,EAAgBU,mBAAqB,SAAO54B,GAAK,kD,uEAEP,O,sBAAA,GAAMh3B,KAAK6vD,oBACzCruC,EACAwV,I,cAFU84B,EAAoB,SAGjC,KAEDZ,EAAgBa,2BAA2BD,G,aAE3C,M,SAAM,IAAIhxD,MAAM,8B,yBAIxBowD,EAAgBc,0BAA4B,SAAOh5B,GAAK,4FACpD,SAAAh3B,KAAKiwD,+BAA+Bf,EAAiBzkC,EAAQuM,G,QAEjEk4B,EAAgBgB,yBAA2B,SAAOl5B,GAAK,4FACnD,SAAAh3B,KAAKmwD,8BAA8BjB,EAAiBzkC,EAAQuM,G,QAEhEk4B,EAAgBkB,SAAW,6D,uEAInB,O,sBAFM7hC,EAAM,oBAAoB/M,EAAcjc,GAAE,WAEhD,GAAMvF,KAAKitB,eAAenvB,IAAIywB,I,OAEvB,OAFP,SAEO,GAAMvuB,KAAKkiE,2BAA2B7xC,gB,OAA7C,MAAO,CAAP,EAAO,U,OAEP,M,SAAM,IAAI,G,yBAIlB6+B,EAAgBmB,oBAAsB,SAAOr5B,GAAK,4FAC9C,SAAAh3B,KAAKswD,qBAAqBt5B,EAAOk4B,EAAiB1tC,G,OAC1D,EAEc,YAAAyuC,+BAAd,SACIf,EACAzkC,EACAuM,G,0JAEMpU,EAAkB5iB,KAAKuwD,2BAA2Bv5B,EAAMw5B,iB,iBAG1D,O,sBAAA,GAAMxwD,KAAKkiE,2BAA2B1vB,sBAAsB5vB,I,cAA5D,S,aAIA,M,SAFAssC,EAAgBuB,QAEV,IAAI3xD,MAAM,kC,OAqCpB,GAjCoBuwD,EAChB5kC,EAAM,uBACN1oB,EAAQ/B,KAAKkiE,2BAA2B7mD,WAE5B+qB,EACZrkC,EAAMgc,iBAAgB,uBACtB8J,EAAW9lB,EAAM2lB,qBACfgpC,EAA2E,QAAlD,EAAG7oC,EAAS7V,aAAa,GAAGwU,8BAAsB,eAAEjhB,GAC7EorD,EAAmB9oC,EAAS7V,aAAa,GAAG4+C,yBAC5CC,EAAiBF,aAAgB,EAAhBA,EAAkBxyC,MAAK,SAAC,GAAW,OAAP,OAAcuyC,CAAP,IACpDI,EAAoBH,aAAgB,EAAhBA,EAAkB3tD,QACxC,SAACykC,GAAW,OAAAA,EAAOliC,KAAOmrD,CAAd,IAEVK,EAAuDF,EACvD,CACI,CACIztC,MAAOytC,EAAe9kB,YACtB1Z,OAAQ,GAAGw+B,EAAepkB,KAAKyY,QAAQ9e,GACvClmC,OAAQ2wD,EAAeG,sBACvBC,WAAYJ,EAAetrD,KAGnC,GAENurD,SAAAA,EAAmB/9C,SAAQ,SAAC00B,GACxB,OAAAspB,EAAgBtiD,KAAK,CACjB2U,MAAOqkB,EAAOsE,YACd1Z,OAAQ,GAAGoV,EAAOgF,KAAKyY,QAAQ9e,GAC/BlmC,OAAQunC,EAAOupB,sBACfC,WAAYxpB,EAAOliC,IAJvB,MAQmBorD,aAtPD9wD,OAuPlB,MAAM,IAAIf,MAAM,mCAGpB,GAAgC,IAA5B6xD,EAAiBvwD,OAYjB,OAXA8uD,EAAgBgC,iCACZjV,gBAAgBkV,uCAChB,GACA,CACIxyD,KAAM,UACNykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,IAE3C,IAGJ,IAGEgrB,EAAoBT,EAAiBxyC,MAAK,SAACspB,GAAW,OAAAA,EAAOkF,aAAP,IAEtD0kB,EAAWD,EAAoBA,EAAkB7rD,GAAKorD,EAAiB,GAAGprD,GAC1E+rD,EAAmBT,EAAiBA,EAAetrD,GAAK8rD,E,iBAG1D,O,sBAAA,GAAMrxD,KAAKuxD,sBAAsBD,I,cAAjC,S,aAEA,M,SAAM,IAAIxyD,MAAM,kC,cAGpBiD,EAAQ/B,KAAKkiE,2BAA2B7mD,WACxCwM,EAAW9lB,EAAM2lB,qBAEjBwnC,EAAgBgC,iCAAiC,CAC7CM,mBAAoBT,EACpBU,SAAU,CACN9yD,KAAM,QACNykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,IAE3CsrB,aAAc1xD,KAAK2xD,qBAAqB9pC,EAAUue,K,YAI5C,YAAA+pB,8BAAd,SACIjB,EACAzkC,EACAuM,G,oIAGoBq4B,EAChB5kC,EAAM,uBAEwB4mC,EAC9Br6B,EAAK,0B,iBAGL,O,sBAAA,GAAMh3B,KAAKuxD,sBAAsBF,I,cAAjC,S,aAIA,M,SAFAnC,EAAgBuB,QAEV,IAAI3xD,MAAM,4C,cAGdiD,EAAQ/B,KAAKkiE,2BAA2B7mD,WAE9B+qB,EACZrkC,EAAMgc,iBAAgB,uBACpB8J,EAAW9lB,EAAM2lB,qBAEvBwnC,EAAgB0C,gCAAgC,CAC5CH,SAAU,CACN9yD,KAAM,QACNykB,MAAOisC,EACPh9B,OAAQ,GAAGxK,EAASC,WAAWo9B,QAAQ9e,IAE3CsrB,aAAc1xD,KAAK2xD,qBAAqB9pC,EAAUue,K,YAIlD,YAAAurB,qBAAR,SACI9pC,EACAue,GAEA,IAAMnf,EAA2C,CAC7C,CACI7D,MAAOpjB,KAAKkuD,eACZ77B,OAAQ,GAAGxK,EAASqhB,SAASgc,QAAQ9e,KAe7C,OAXAve,EAASwhB,MAAMt2B,SAAQ,SAAC48C,GACpB,OAAA1oC,EAAUxY,KAAK,CACX2U,MAAOusC,EAAIjxD,KACX2zB,OAAQ,GAAGs9B,EAAIt9B,OAAO6yB,QAAQ9e,IAFlC,IAKJnf,EAAUxY,KAAK,CACX2U,MAAOpjB,KAAKouD,eACZ/7B,OAAQ,GAAGxK,EAAS+gB,kBAAkBsc,QAAQ9e,KAG3Cnf,CACX,EAEc,YAAAsqC,sBAAd,SAAoCF,G,+FAChC,MAAO,CAAP,EAAOrxD,KAAKkiE,2BAA2BvyB,qBAAqB0hB,G,QAGlD,YAAAxB,oBAAd,SACInuB,EACA1K,G,qGASA,OAPM93B,EAAO,CACT,iBAAiB83B,EAAM66B,cACvB,sBAAsBnwB,EAAYoM,mBAAmB+M,WACrD,eAAenZ,EAAYoM,mBAAmBuhB,UAC9C,cAActiC,OAAOuR,SAAShI,UAChC32B,KAAK,KAEA,CAAP,EAAOK,KAAKitB,eAAe8C,MAvXP+hC,EAwXGpwB,EAAYoM,mBAAmBikB,YAvXvDD,EAAc,sDAwXT,CACIjjC,aAAa,EACb1vB,QAAS,CACLmvB,OAAQ,mBACR,eAAgB,oCAChB,eAAgB,MAEpBpvB,KAAI,KAhYO,IAAC4yD,C,QAqYV,YAAAxB,qBAAd,SACIt5B,EACAk4B,EACA1tC,G,kJAEM,EAA6CwV,EAAM1pB,QAAjDD,EAAK,QAAE2kD,EAAc,iBAAExB,EAAe,kBACxCzuD,EAAQ/B,KAAKkiE,2BAA2B7mD,WACxCtU,EAAOhF,EAAMgc,iBACbyxC,EAAmBzoD,EAAKkgB,UAAUC,cAAc9mB,OAAS,EACzDkN,EAAmB,CACrB/F,SAAUia,EAAcjc,GACxBm8B,YAAa,CACT8B,iBAAkB,CACdyuB,gBAAiB,CACbC,aAAc7kD,EAAMq0B,YACpBywB,eAAgB9kD,EAAMmU,cACtB4wC,eAAgB/kD,EAAMglD,0BAMhCC,EAA4BtyD,KAAKuwD,2BAA2ByB,GAC5DO,EAA6BvyD,KAAKuwD,2BAA2BC,GAC7DgC,EAAehC,aAAe,EAAfA,EAAiBgC,aAChC93C,GAAQ81C,aAAe,EAAfA,EAAiBhN,cAAe,G,iBAG1C,O,sBAAA,GAAMxjD,KAAKkiE,2BAA2B3vB,sBAAqB,gCACpD+f,GAAyB,CAC5BhjC,MAAOkjC,EACP93C,MAAK,M,cAHT,SAMI80C,EACA,GAAMxvD,KAAKkiE,2BAA2B1vB,sBAClC+f,IAFJ,M,OACA,S,iBAKJ,SAAMvyD,KAAKkiE,2BAA2B3/B,YAAY,CAC9C3a,gBAAgB,K,OAEpB,OAHA,SAGA,GAAM5nB,KAAKkiE,2BAA2Bn+B,cAAcz2B,I,OAGpD,OAHA,SACA4hD,EAAgBuD,gBAAgBxW,gBAAgByW,gBAEzC,CAAP,EAAO1yD,KAAKiuD,wB,OAIZ,M,SAFAiB,EAAgBuD,gBAAgBxW,gBAAgB0W,gBAE1C,IAAI7zD,MAAM,2B,yBAIhB,YAAAyxD,2BAAR,SACIqC,GAEA,MAAO,CACH34C,WAAW24C,aAAO,EAAPA,EAASC,YAAa,GACjC34C,UAAU04C,aAAO,EAAPA,EAASE,aAAc,GACjCx4C,MAAMs4C,aAAO,EAAPA,EAASxP,WAAY,GAC3BjpC,QAAS,GACTC,UAAWw4C,aAAO,EAAPA,EAASG,eAAgBH,EAAQG,aAAa,IAAO,GAChE14C,UAAWu4C,aAAO,EAAPA,EAASG,eAAgBH,EAAQG,aAAa,IAAO,GAChEt4C,YAAYm4C,aAAO,EAAPA,EAASn4C,aAAc,GACnCD,aAAao4C,aAAO,EAAPA,EAASp4C,cAAe,GACrCE,OAAOk4C,aAAO,EAAPA,EAASpP,cAAe,GAC/BjpC,iBAAiBq4C,aAAO,EAAPA,EAASrP,qBAAsB,GAChD3e,qBAAqBguB,aAAO,EAAPA,EAASrP,qBAAsB,GACpD5oC,aAAc,GAEtB,EACJ,EAjcA,GCbA,GAAeqnD,IAZ6E,SACxFG,GAEQ,IAAA/iD,EAAY+iD,EAA0B9mD,WAAU,QAExD,OAAO,IAAI,IACP,IAAAgpC,qBAAoB,CAAEhlC,KAAMD,MAC5B+iD,EACA,IAAI,GAEZ,GAEgE,CAAC,CAAE58D,GAAI,cCtBhE,ICAF,GDAQ,GACT,2ECDJ,SAAK2oB,GACD,0BACA,qCACH,CAHD,CAAK,QAAW,KAKhB,YCLO,IAAM,GAAsB,CAAE,yBAA0B,W,SCc/D,WACI,WAAoBk2B,GAAA,KAAAA,cAAAA,CAA+B,CAgCvD,OA9BU,YAAA6G,YAAN,SACIliC,EACAmiC,G,gIAUY,OARN38B,EAAM,2BAA2BxF,EACjC7pB,EAAOgsD,EACP/rD,GAAU,eACZ,iBAAkB,GAClB,eAAgB,SACb,IAGK,GAAMa,KAAKokD,cAAcr0B,KAAsBxB,EAAK,CAAEpvB,QAAO,EAAED,KAAI,K,OAE/E,MAAO,CAAP,EAFY,SAEDA,M,QAGT,YAAAksD,YAAN,SAAkBF,G,8HASF,OAPNhsD,EAAOgsD,EACP/rD,GAAU,eACZ,iBAAkB,GAClB,eAAgB,SACb,IAGK,GAAMa,KAAKokD,cAAcp0B,IARzB,gDAQkC,CAAE7wB,QAAO,EAAED,KAAI,K,OAE7D,MAAO,CAAP,EAFY,SAEDA,M,QAEnB,EAjCA,G,SCRA,YACI,WAAYV,GAAZ,MACI,YACIA,GACI,wGACP,K,OAED,EAAKE,KAAO,sCACZ,EAAKC,KAAO,oC,CAChB,CACJ,OAViE,oBAUjE,EAVA,CAAiE,I,GCajE,WAII,WAAoB69B,GAAA,KAAAA,aAAAA,EAChBx8B,KAAK+sB,OAASA,MAClB,CAkHJ,OAhHU,YAAA87B,aAAN,SACIrnC,EACA60B,EACAyS,G,mIAEK9oD,KAAKoiE,UAAN,OACA,EAAApiE,KAAiB,GAAMA,KAAKy9C,cACxBz9C,KAAKqiE,gCACD7gD,EACA60B,EACAyS,M,OAJR,EAAKsZ,UAAY,S,iBASrB,MAAO,CAAP,EAAOpiE,KAAKoiE,W,QAGF,YAAA3kB,cAAd,SACIwL,G,6HAEKjpD,KAAK+sB,OAAOm8B,iBAAb,MAGA,GAAMlpD,KAAKw8B,aAAaF,WAFN,uEAE4B,CAAEssB,OAAO,EAAM7sB,WAAY,CAAC,K,OAE1E,GAFA,UAEK/7B,KAAK+sB,OAAOm8B,iBACb,MAAM,IAAI,G,iBAIlB,SAAMlpD,KAAK+sB,OAAOm8B,iBAAiBD,I,OAEnC,GAFA,UAEKjpD,KAAK+sB,OAAOywB,OACb,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOx9C,KAAK+sB,OAAOywB,Q,QAGf,YAAA6kB,gCAAR,SACI7gD,EACA60B,EACAyS,QAAA,IAAAA,IAAAA,GAAA,GAEQ,IAAAvjD,EAAwCic,EAAa,GAAjD66B,EAAoC76B,EAAa,YAApCssB,EAAuBtsB,EAAa,mBAE7D,KAAKssB,aAAkB,EAAlBA,EAAoBqb,UACrB,MAAM,IAAI,GAAiB,yBAI3B,IAAAC,EAUAtb,EAAkB,OATlBqb,EASArb,EAAkB,SARlB+M,EAQA/M,EAAkB,WAPlBub,EAOAvb,EAAkB,cANlBwb,EAMAxb,EAAkB,eALlByb,EAKAzb,EAAkB,wBAJlB0b,EAIA1b,EAAkB,wBAHlB2b,EAGA3b,EAAkB,wBAFlB,EAEAA,EAAkB,mCAFlB4b,OAAkC,IAAG,KAAE,EACvC,EACA5b,EAAkB,iCADlB6b,OAAgC,IAAG,KAAE,EAGnCC,GAA4Bd,GAA6BU,EAEzDK,EACFD,GAA4BL,GAA2BT,EAErDgB,EAAmBF,GAAmC,8BAAPrkD,EAC/CwkD,EAAoBD,EAAmB,CAAC,QAAU,GAClDE,EAAsBF,EAA8B,GAAX,CAAC,QAE1CG,EAAsBR,EAA0B,CAAC,SAAU,YAAc,GACzES,EAAwBT,EAAmD,GAAzB,CAAC,SAAU,YAE7DU,EAAmBrB,IAA8Be,EACjDO,EAAqBD,GAAoBb,EAAiB,CAAC,SAAW,GACtEe,EAAuBF,GAAqBb,EAA6B,GAAZ,CAAC,SAC9DgB,EAAoBH,EAAmBR,EAAmC,GAC1EY,EAAqBJ,EACrBT,EAAmC1mD,QAC/B,SAACwnD,GAAgB,OAACb,EAAiC/4B,SAAS45B,EAA3C,IAErBd,EAEAe,GAAc,oBACbT,EACAE,EACAG,EACAE,GAEDG,GAAa,oBACZX,EACAE,EACAG,EACAE,GAGP,MAAO,CACH,YAAanB,EACb,8BAA+BE,EAC/B,oBAAqBhN,EACrB,cAAexB,EACf,iBAAkB6P,EAActqD,OAAS,EAAIsqD,OAAgBjnD,EAC7D,kBAAmBgnD,EAAerqD,OAAS,EAAIqqD,OAAiBhnD,EAChEomD,OAAM,EACNtM,WAAY,CAAC,UAAW,gBAAiB,WAAY,kBACrD5rB,SAAU0kB,EACV+S,OAAM,EAEd,EACJ,EAxHA,GC+BA,IAAY,GAwMAkZ,GAQAC,GAKAC,GAQAC,IA7NZ,SAAY3E,GACR,wBACA,mBACH,CAHD,CAAY,QAAoB,KAwMhC,SAAYwE,GACR,kBACA,sBACA,kBACA,YACA,2BACH,CAND,CAAYA,KAAAA,GAAgB,KAQ5B,SAAYC,GACR,sBACA,yBACH,CAHD,CAAYA,KAAAA,GAAiB,KAK7B,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAYA,KAAAA,GAAgB,KAQ5B,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAAgB,K,SClP5B,WAEI,WACYN,EACAO,EACAC,GAFA,KAAAR,0BAAAA,EACA,KAAAO,4BAAAA,EACA,KAAAC,2BAAAA,CACT,CAwTP,OAtTU,YAAAjyB,WAAN,SACInuC,G,wIAIA,GAFQkF,EAAgDlF,EAAO,YAA1CgF,EAAmChF,EAAO,SAAhCqgE,EAAyBrgE,EAAO,sBAE1DgF,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAKm7D,EACD,MAAM,IAAI,GACN,iGAIR,SAAM5iE,KAAKmiE,0BAA0B3xC,uB,OAOpB,OAPjB,SAGMzuB,EAAQ/B,KAAKmiE,0BAA0B9mD,WACvCg7B,EAAet0C,EAAMgc,iBAAiB4T,SAASrxB,KAC/CkhB,EAAgBzf,EAAMuiB,wBAAwB/c,GAEpD,EAAAvH,KAAiB,GAAMA,KAAK2iE,2BAA2B9Z,aACnDrnC,EACA60B,GACA,I,cAHJ,EAAK+rB,UAAY,SAMjBpiE,KAAK64C,aAAatxC,EAAUE,EAAam7D,G,YAG7C,YAAA5sB,aAAA,WACI,OAAOrhB,QAAQyH,SACnB,EAEQ,YAAAyc,aAAR,SACItxC,EACAE,EACAm7D,GAHJ,WAKUR,EAAYpiE,KAAK6iE,sBACfC,EAAyDF,EAAoB,yBAAnD/mC,EAA+B+mC,EAAoB,MAA5CnE,EAAwBmE,EAAoB,WAAhC5lB,EAAY4lB,EAAoB,QAErF,IAAKnE,GAAoC,mBAAfA,EACtB,MAAM,IAAI,GACN,oIAIR,IAAMU,EAAoD,CACtD4D,WAAY,cACZ/N,cAAeoN,EAAUnN,QAAQ+N,KACjCnnC,MAAK,EACLovB,YAAa,WAAM,SAAKA,YAAY1jD,EAAjB,EACnBs3D,wBAAyB,SAAC96D,GACtB,SAAK86D,wBAAwB96D,EAA7B,EACJg7D,wBAAyB,SAACh7D,GACtB,SAAKg7D,wBAAwBh7D,EAA7B,EACJyxD,UAAW,SAACzxD,EAA8Bk5D,GACtC,SAAKzH,UAAUzxD,EAAMk5D,EAAS11D,EAA9B,EACJk3D,WAAY,SAAC16D,GACT,SAAK06D,WAAW16D,EAAMwD,EAAUk3D,EAAhC,EACJzhB,QAAS,SAACt9C,GAAiB,SAAKs9C,QAAQt9C,EAAOs9C,EAApB,GAGzBoY,EAAqBgN,EAAU/M,QAAQ8J,GAE7C,GAAI/J,EAAmBO,aAAc,CACjC,IAAMkB,EAAuBpvD,EAAW,sCAExCzH,KAAKijE,4BACDx7D,EACAovD,EACAiM,GAGJ1N,EAAmBr6B,OAAO,IAAI87B,E,CAEtC,EAEc,YAAA5L,YAAd,SAA0B1jD,G,8HAIF,OAHdxF,EAAQ/B,KAAKmiE,0BAA0B9mD,WACvCkS,EAASxrB,EAAMgc,iBAAiBxY,GAElB,GAAMvF,KAAK0iE,4BAA4BzX,YAAY1jD,EAAU,CAC7EgmB,OAAM,K,OAGV,MAAO,CAAP,EAJoB,SAElB,S,QAKQ,YAAAsxC,wBAAd,SACI96D,G,gIAWA,OATMiW,EAAUha,KAAKkjE,WAAW,CAC5B5oD,KAAMvW,EAAK6e,gBAAgBtI,KAC3BE,YAAazW,EAAK6e,gBAAgBsxC,aAClCz5C,WAAY1W,EAAK6e,gBAAgBuxC,YACjCvvB,oBAAqB7gC,EAAK6e,gBAAgB7gB,QAK9C,GAAM/B,KAAKmiE,0BAA0B5vB,qBAAqBv4B,I,OAC1D,OADA,SACA,GAAMha,KAAKmiE,0BAA0B3vB,sBAAsBx4B,I,OAA3D,SAEMkzB,EAAiBltC,KAAKmjE,2B,iBAGxB,O,sBAAA,GAAMnjE,KAAKmiE,0BAA0BxyB,qBAAqBzC,EAAe3nC,K,OACzE,OADA,SACA,GAAMvF,KAAKorD,e,cAAX,S,+BAEAprD,KAAKg9C,QAAQ,G,+BAIP,YAAA+hB,wBAAd,SACIh7D,G,8HAEMmpC,EAAiBltC,KAAKmjE,yBAAyBp/D,EAAKyiB,uBAAuBjhB,I,iBAG7E,O,sBAAA,GAAMvF,KAAKmiE,0BAA0BxyB,qBAAqBzC,EAAe3nC,K,OACzE,OADA,SACA,GAAMvF,KAAKorD,e,cAAX,S,+BAEAprD,KAAKg9C,QAAQ,G,+BAIP,YAAAwY,UAAd,SACIzxD,EACAk5D,EACA11D,G,gJAEA,IAAKxD,EAAKm7D,QACN,MAAM,IAAI,GAAiB,mBAKV,OAFfn9D,EAAQ/B,KAAKmiE,0BAA0B9mD,WACvCtU,EAAOhF,EAAMgc,iBACE,GAAMk/C,EAAQ9vD,MAAMrP,O,cAAnC4hE,EAAe,SAEjB34D,EAAKkgB,UAAUC,cAAc9mB,OAAS,GAC9Bo9D,EAA0BkC,EAAY,MAA/BC,EAAmBD,EAAY,eACxC98C,GAA6C,QAA3B,EAAiB,QAAjB,EAAA+8C,EAAe,UAAE,eAAEpuD,gBAAQ,eAAEyI,UAAW,CAAC,EAE3DA,EAAUha,KAAKkjE,WAAW,CAC5BjpD,UAAWujD,EAAM9+D,KAAKmhE,WACtB3lD,SAAUsjD,EAAM9+D,KAAKohE,QACrBxwC,MAAOkuC,EAAMuC,cACb3lD,SAAUwI,EAAgBoxC,eAC1B15C,KAAMsI,EAAgBo9C,aACtBxlD,YAAaoI,EAAgBsxC,aAC7Bz5C,WAAYmI,EAAgBuxC,YAC5BvvB,oBAAqBhiB,EAAgBq9C,eAGzC,GAAMjgE,KAAKmiE,0BAA0B5vB,qBAAqBv4B,KAf1D,M,OAgBA,OADA,SACA,GAAMha,KAAKmiE,0BAA0B3vB,sBAAsBx4B,I,OAC3D,OADA,SACA,GAAMha,KAAKorD,e,cAAX,S,aAeA,OAbQoS,EAAUkC,EAAY,MAExB1lD,EAAUha,KAAKkjE,WAAW,CAC5BjpD,UAAWujD,EAAM9+D,KAAKmhE,WACtB3lD,SAAUsjD,EAAM9+D,KAAKohE,QACrBxwC,MAAOkuC,EAAMuC,cACb3lD,SAAUojD,EAAMxjD,QAAQg6C,eACxB15C,KAAMkjD,EAAMxjD,QAAQgmD,aACpBxlD,YAAagjD,EAAMxjD,QAAQk6C,aAC3Bz5C,WAAY+iD,EAAMxjD,QAAQm6C,YAC1BvvB,oBAAqB44B,EAAMxjD,QAAQimD,eAGvC,GAAMjgE,KAAKmiE,0BAA0B5vB,qBAAqBv4B,I,OAA1D,S,iBAGJ,SAAMha,KAAKmiE,0BAA0B5/B,YAAY,CAAC,EAAG,CAAEjV,OAAQ,CAAE/lB,SAAQ,M,OACzE,OADA,SACA,GAAMvH,KAAK+jC,cAAcx8B,EAAUxD,EAAKm7D,U,OAExC,OAFA,SAEO,CAAP,GAAO,G,QAGG,YAAAT,WAAd,SACI16D,EACAwD,EACAuuB,G,mIAEM/zB,EAAQ/B,KAAKmiE,0BAA0B9mD,WACvBtZ,EAAMuiB,wBAAwB/c,GACnBumC,mBAAkB,SAEpC,WAAX,MACA,GAAM9tC,KAAK+jC,cAAcx8B,EAAUxD,EAAKm7D,U,OAAxC,S,wBAGAppC,GACAA,I,YAIA,YAAAknB,QAAR,SAAgBt9C,EAAcs9C,GAK1B,MAJIA,GAA8B,mBAAZA,GAClBA,IAGE,IAAIl+C,MAAMY,EAAMlB,QAC1B,EAEc,YAAA4sD,YAAd,W,gIAKI,OAJMrpD,EAAQ/B,KAAKmiE,0BAA0B9mD,WACvCtU,EAAOhF,EAAMgc,iBACbuH,EAAcvjB,EAAMmkB,yBAAyB,GAEnD,GAAMlmB,KAAK0iE,4BAA4BtX,YAAY,CAC/CwF,yBAA0BtrC,EAAYsrC,yBACtCrjC,OAAQxmB,EAAKxB,GACbihB,uBAAwBlB,EAAYkB,0B,cAHxC,S,YAOU,YAAAud,cAAd,SAA4Bx8B,EAAkB2O,G,4HAa1C,OAZMwrB,EAAc,CAChB8B,iBAAkB,CACdE,yBAA0B,KAC1BC,iCAAkC,KAClC08B,YAAa,KACbC,UAAW/4D,EACXg5D,eAAgB,CACZC,SAAUtqD,KAKtB,GAAMlW,KAAKmiE,0BAA0Bp+B,cAAc,CAAEx8B,SAAQ,EAAEm6B,YAAW,K,cAA1E,S,YAGI,YAAAyhC,yBAAR,SAAiC1C,GAC7B,IAAMn7C,EAActlB,KAAKmiE,0BAA0B9mD,WAAW6K,yBAAyB,GACjF0qC,EAA2BtrC,EAAYsrC,0BAA4B,GAEnE8P,EAA4B9P,EAAyBzyC,MACvD,SAACspB,GAAW,OAAAA,EAAOkF,aAAP,IAQVg0B,GANyBF,EACzB7P,EAAyBzyC,MAAK,SAACspB,GAAW,OAAAA,EAAOliC,KAAOk7D,CAAd,IAC1C7P,EAAyBzyC,MACrB,SAACspB,GAAM,MAAK,OAAAA,EAAOliC,MAAyC,QAAvC,EAAK+f,EAAYkB,8BAAsB,eAAEjhB,GAAE,MAGjBm7D,EAEzD,IAAKC,EACD,MAAM,IAAI7hE,MAAM,+CAGpB,OAAO6hE,CACX,EAEQ,YAAAuC,WAAR,SAAmBlpD,GACf,MAAO,CACHC,WAAWD,aAAO,EAAPA,EAASC,YAAa,GACjCC,UAAUF,aAAO,EAAPA,EAASE,WAAY,GAC/BoV,OAAOtV,aAAO,EAAPA,EAASsV,QAAS,GACzB5U,MAAO,GACPP,QAAS,GACTC,UAAUJ,aAAO,EAAPA,EAASI,WAAY,GAC/BC,SAAU,GACVC,MAAMN,aAAO,EAAPA,EAASM,OAAQ,GACvBE,aAAaR,aAAO,EAAPA,EAASQ,cAAe,GACrCC,YAAYT,aAAO,EAAPA,EAASS,aAAc,GACnCF,gBAAiB,GACjBqqB,qBAAqB5qB,aAAO,EAAPA,EAAS4qB,sBAAuB,GACrDjqB,aAAc,GAEtB,EAEQ,YAAAsoD,4BAAR,SACIx7D,EACAovD,EACAiM,QAAA,IAAAA,IAAAA,EAAA,8BAEA,IAAMM,EAAwB5tC,SAASW,cAAc,OAErDitC,EAAsBtpC,aAAa,QAASgpC,GAC5CM,EAAsBtpC,aAAa,KAAM+8B,GAEzC,IAAMl8B,EAAYnF,SAASmE,eAAelyB,GAEtCkzB,IACAA,EAAU0oC,UAAY,GACtB1oC,EAAU2oC,OAAOF,GAEzB,EAEQ,YAAAP,oBAAR,WACI,IAAK7iE,KAAKoiE,UACN,MAAM,IAAI,GAGd,OAAOpiE,KAAKoiE,SAChB,EACJ,EA9TA,GCLA,GAAeJ,IAVX,SAACG,GACO,IAAA/iD,EAAY+iD,EAA0B9mD,WAAU,QAExD,OAAO,IAAI,GACP8mD,EACA,IAAI,IAA4B,IAAA9d,qBAAoB,CAAEhlC,KAAMD,OAC5D,IAAI,IAA2B,KAAAklC,oBAEvC,GAE4E,CACxE,CAAE/+C,GAAI,0BCeK,SAASg+D,GACpBhhE,GAEM,MAA0BA,QAAAA,EAAW,CAAC,EAApC8c,EAAI,OAAE,IAAAE,OAAAA,OAAM,IAAG,OAAI,EACrBkM,EAAQd,KACRe,EAAgBF,GAAoBC,GACpC24B,GAAgB,IAAAC,qBAAoB,CAAEhlC,KAAI,IAC1CmkD,GAAa,IAAAC,kBAAiB,CAAEpkD,KAAI,IACpC8iD,ECTK,SACX12C,GAGc,IAAArM,EACVqM,EAAMpQ,WAAU,eAEd+oC,GAAgB,IAAAC,qBAAoB,CAAEhlC,KAAMD,MAE5CskD,EAAyB,IAAI,GAC/BnyB,IAGEoyB,EAAwB,IAAI,GAC9B,IAAI,GAAsBvf,GAC1B,IAAI,GAAoB,IAAI,GAAoBA,IAChD,IAAI,GAAwB,IAAI,GAAwBA,KAGtDwf,EAAoB,IAAI,GAAkBn4C,GAE1Co4C,EAAqB,IAAI,GAC3B,IAAI,GAAmBzf,GACvB,IAAI,GAAkB,IAAI,GAAsBA,KAG9C0f,EAA8B,IAAI,GACpC,IAAI,GAA4B1f,GAChC,IAAI,GAA2B,IAAI,GAA2BA,KAG5D2f,EAA2B,IAAI,GACjC,IAAI,GAAyB3f,GAC7B,IAAI,GAAsBA,IAGxB4f,EAA6B,IAAI,GACnC,IAAI,GAA2B5f,IAG7B6f,EAAuB,IAAI,GAC7B,IAAI,GAAqBz4C,GAAoBC,IAC7Co4C,EACA,IAAI,GACJ,IAAI,GAAgCtnC,IAAqB,KAAAyF,yBAGvDkiC,EAAwB,IAAI,GAC9B,IAAI,GAAsB9f,GAC1Buf,EACA,IAAI,GACApnC,IAAqB,KAAAyF,uBACrB,IAAI,GAA4BoiB,KAIlC+f,EAAoB,IAAI,GAAkB/f,GAEhD,OAAO,IAAI,GACP34B,EACAi4C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAER,CD9DsCC,CAAgC34C,GAC5D44C,EElCK,SACXlC,EACAmC,QAAA,IAAAA,IAAAA,EAAA,GAOA,IALA,IAAMC,EAAW,IAAI,G,WAKPC,GAGV,ICzBO,SACXtnE,GAEA,MAAO,eAAgBA,CAC3B,CDsBaunE,CAGCD,G,iBAKN,IAAyB,UAAAA,EAA6BvC,WAA7B,eAAyC,CAA7D,IAAML,EAAU,KACjB2C,EAAStkE,SAAS2hE,GAAY,WAC1B,OAAA4C,EAA6BrC,EAA7B,G,GAdmC,MAAAxkE,OAAOmkE,QAClDwC,GAD2C,e,EAApC,KAA+B,IAmB1C,OAAOC,CACX,CFKuB,CAA+BpC,GAElD,OAAO,IAAI,GACP12C,EACA,IAAI,GIgBG,SACXA,EACAC,EACA04B,EACAof,EACAjkD,EACAF,GAEA,IAAMklD,EAAW,IAAI,GACf/nC,GAAe,KAAA8nB,mBACfogB,EAAwB,IAAI,GAAsBtgB,GAClDuf,EAAwB,IAAI,GAC9Be,EACA,IAAI,GAAoB,IAAI,GAAoBtgB,IAChD,IAAI,GAAwB,IAAI,GAAwBA,KAEtD4f,EAA6B,IAAI,GACnC,IAAI,GAA2B5f,IAE7BugB,EAA8B,IAAI,GAA4BvgB,GAC9DwgB,EAA8B,IAAI,GACpCD,EACAhB,GAEEkB,EAAoB,IAAI,GAAkBH,GAC1Cb,EAAqB,IAAI,GAC3B,IAAI,GAAmBzf,GACvBygB,GAEEC,EAAuB,IAAI,GAAqBp5C,GAChDq5C,EAA4B,IAAI,GAChCC,EAAkC,IAAI,GACxCzoC,IAAqB,KAAAyF,wBAEnBiiC,EAAuB,IAAI,GAC7Ba,EACAjB,EACAkB,EACAC,GAEEC,EAAsB,IAAI,GAAoB,IAAI,GAAsBzoC,IACxE0oC,EAAqB,IAAI,GAA2B1oC,GACpDkmC,EAA8B,IAAI,GAA4Bte,GAC9D+gB,EAA6B,IAAI,GAA2B/gB,GAC5DghB,EAA6B,IAAI,GAA2BD,GAC5DE,EAA8B,IAAI,GAA4BjhB,GAC9D0f,EAA8B,IAAI,GACpCuB,EACAD,GAEEE,EAA2B,IAAI,GAAyBlhB,GACxD2f,EAA2B,IAAI,GACjCuB,EACAZ,GAEEP,EAAoB,IAAI,GAAkB/f,GAC1CmhB,EAA2B,IAAI,GAAyBnhB,GAsR9D,OApRAmgB,EAAStkE,SACL,aACA,WACI,WAAI,GACAwrB,EACAk4C,EACAvf,EACA4f,EACAD,EACAD,EACAG,EACAW,EACAf,EACA,IAAI,GAVR,IAcRU,EAAStkE,SACL,kBACA,WACI,WAAI,GACAwrB,EACAk4C,EC/IL,IAAI,GAA4B,IAAI,IAAwB,KAAArf,qBDiJvD6f,EACAoB,EALJ,IASRhB,EAAStkE,SACL,qBACA,WACI,WAAI,GACAwrB,EACAk4C,EACAQ,EACAc,EACAzB,EACAz2C,OANJ,IAURw3C,EAAStkE,SACL,4BACA,WACI,WAAI,GACAwrB,EACAk4C,EACAQ,EACAc,EACAzB,EACAz2C,OANJ,IAURw3C,EAAStkE,SACL,oBACA,WACI,WAAI,GACAwrB,EACAu4C,EACAG,EACAc,EACAzB,EALJ,IASRe,EAAStkE,SACL,sBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,sBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,2BACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,kBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,wBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GACIz4B,EACA,IAAI,GAA8Bw5C,IAEtCd,EARJ,IAYRI,EAAStkE,SACL,0BACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GACIz4B,EACA,IAAI,GAAgC24B,IAExC+f,EARJ,IAYRI,EAAStkE,SACL,4BACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,sBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,qBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,wBACA,WACI,WAAI,GACAwrB,EACA+3C,EACAG,EACAzf,GAAgCz4B,EAAO,IAAI,IAC3C04C,EALJ,IASRI,EAAStkE,SACL,eACA,WACI,WAAI,GACAwrB,EACAk4C,EACA,IAAI,GAAuBnnC,GAC3Bjd,EAJJ,IAQRglD,EAAStkE,SACL,kBACA,WACI,WAAI,GACAwrB,EACAk4C,EACA,IAAI,GAAmBnnC,GACvBgnC,EACAnkD,EALJ,IASRklD,EAAStkE,SACL,mBACA,WACI,WAAI,GACAwrB,EACAk4C,EACAQ,EACAX,EACA0B,EACAxC,EACAqB,EACAD,EACAG,EACAJ,EAVJ,IAcRU,EAAStkE,SACL,0BACA,WACI,WAAI,GACAwrB,EACAk4C,EACAQ,EACAX,EACA0B,EACAxC,EACAmB,EACAE,EACAD,EACAG,EAVJ,IAcRM,EAAStkE,SACL,wBACA,WACI,WAAI,GACAwrB,EACAk4C,EACAQ,EACAX,EACA0B,EACAxC,EANJ,IAUR6B,EAAStkE,SACL,yBACA,WACI,WAAI,GACAwrB,EACAk4C,EACAQ,EACAX,EACA0B,EACAxC,EANJ,IAUD6B,CACX,CJ9VYiB,CACI/5C,EACAC,EACA04B,EACAof,EACAjkD,EACAF,GAEJglD,EACA,IAAI,GAA2B,IAAI,GAA2BjgB,KAG1E,C","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/apple-pay/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-inline/paypal-commerce-inline-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-inline/create-paypal-commerce-inline-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from './error-response-body';\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CustomerActionType.StripeLinkAuthenticated:\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({\n                    ...options,\n                    useCache: true,\n                    params: { ...options?.params, checkoutId: id },\n                }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() =>\n                    this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) =>\n                            createAction(CheckoutActionType.LoadCheckoutSucceeded, body),\n                        ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error)),\n        );\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig(),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\n        Response<InternalCustomerResponseBody>\n    > {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '../utility';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(event.origin) === -1 ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(\n        orderId: number,\n        { timeout, params }: RequestOptions<OrderParams> = {},\n    ): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([...include, ...((params && params.include) || [])]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\",\n    PAYPALCOMMERCE = \"paypalcommerce\",\n    PAYPALCOMMERCE_CREDIT = \"paypalcommercecredit\",\n    PAYPALCOMMERCE_APMS = \"paypalcommercealternativemethods\",\n    PAYPALCOMMERCE_APMS_TEMPORARY = \"paypalcommercealternativemethodsv2\",\n    PAYPALCOMMERCE_INLINE = \"paypalcommerceinline\",\n    PAYPALCOMMERCE_VENMO = \"paypalcommercevenmo\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { StoreConfig } from '../config';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod:\n                paymentMethod && this._transformPaymentMethod(paymentMethod, storeConfig),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(\n        paymentMethod: PaymentMethod,\n        storeConfig?: StoreConfig,\n    ): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        // TODO: this block of code should be removed in PAYPAL-1921\n        if (\n            paymentMethod.gateway === CheckoutButtonMethodType.PAYPALCOMMERCE_APMS &&\n            storeConfig?.checkoutSettings.features['PAYPAL-1883.paypal-commerce-split-gateway']\n        ) {\n            return {\n                ...paymentMethod,\n                gateway: CheckoutButtonMethodType.PAYPALCOMMERCE_APMS_TEMPORARY,\n            };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport { ConsignmentActionCreator } from '../shipping';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(methodId: string): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutSettings } from '../../../../src/config/config';\nimport BuyNowCartRequestBody from '../../../cart/buy-now-cart-request-body';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _buttonParentContainer?: HTMLDivElement;\n    private _amazonPayV2Button?: AmazonPayV2Button;\n    private _buyNowCartRequestBody?: BuyNowCartRequestBody;\n\n    constructor(private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n        this._buttonParentContainer =\n            this._buttonParentContainer || this._createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2Button = undefined;\n        this._buttonParentContainer?.remove();\n        this._buttonParentContainer = undefined;\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this._prepareRequestConfig(createCheckoutSessionConfig);\n\n        this._getAmazonPayV2Button().onClick(() => {\n            this._getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<{\n            createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n            estimatedOrderAmount: AmazonPayV2Price;\n            productType: AmazonPayV2PayOptions;\n        }>,\n    ) {\n        this._getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n            const requestConfig = this._prepareRequestConfig(\n                config.createCheckoutSessionConfig,\n                config.estimatedOrderAmount,\n                config.productType,\n            );\n\n            this._getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this._getButtonParentContainer());\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this._getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this._getButtonParentContainer();\n    }\n\n    setCartRequestBody(buyNowCartRequestBody: BuyNowCartRequestBody) {\n        this._buyNowCartRequestBody = buyNowCartRequestBody;\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private _prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private _createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData: {\n                checkoutLanguage,\n                checkoutSessionMethod,\n                createCheckoutSessionConfig,\n                extractAmazonCheckoutSessionId,\n                ledgerCurrency,\n                publicKeyId,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor: AmazonPayV2ButtonColor.Gold,\n        };\n\n        if (this._buyNowCartRequestBody) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this._isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this._getOrThrow(this._amazonPayV2SDK);\n    }\n\n    private _getButtonParentContainer(): HTMLDivElement {\n        return this._getOrThrow(this._buttonParentContainer);\n    }\n\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\n        return this._getOrThrow(this._amazonPayV2Button);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const { initializationData: { region = 'us' } = {} } = method;\n\n        const amazonPayV2Region = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { assertApplePayWindow } from './is-apple-pay-window';\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayCreator,\n    GooglePaymentData,\n    TokenizePayload,\n} from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(\n        request?: GooglePayBraintreeDataRequest,\n    ): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n    PAYPAL_COMPONENTS,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: { currency: string },\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                components: PAYPAL_COMPONENTS.toString(),\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ? module.then((mod) => mod.teardown()) : Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window,\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(\n            `//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`,\n        );\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(public error?: Error) {\n        super(\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\n        );\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport {\n    BraintreeModuleCreator,\n    BraintreeVerifyPayload,\n    GooglePayBraintreeSDK,\n} from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(\n        checkout: Checkout | void,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n        publishableKey?: string,\n    ): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport type GooglePayTransactionInfo = Pick<GooglePayPaymentDataRequestV2, 'transactionInfo'>;\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload,\n} from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n    private _isBuyNowFlow = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default,\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updatePaymentDataRequest(payloadToUpdate: { currencyCode: string; totalPrice: string }) {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo.currencyCode = payloadToUpdate.currencyCode;\n        paymentDataRequest.transactionInfo.totalPrice = payloadToUpdate.totalPrice;\n\n        this._paymentDataRequest = paymentDataRequest;\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer\n            .parseResponse(paymentData)\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\n            ),\n        );\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow: boolean): void {\n        this._isBuyNowFlow = isBuyNowFlow;\n    }\n\n    private _configureWallet(): Promise<void> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options =\n            features && features['INT-5826.google_hostname_alias']\n                ? { params: { origin: window.location.hostname } }\n                : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then((state) => {\n                const checkout = this._getCheckout(state);\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(\n                        checkout,\n                        paymentMethod,\n                        hasShippingAddress,\n                    ),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient\n                        .isReadyToPay({\n                            allowedPaymentMethods: [\n                                {\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                    parameters: {\n                                        allowedAuthMethods:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedAuthMethods,\n                                        allowedCardNetworks:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedCardNetworks,\n                                    },\n                                },\n                            ],\n                            apiVersion: paymentDataRequest.apiVersion,\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                        })\n                        .then((response) => {\n                            if (response.result) {\n                                return;\n                            }\n\n                            throw new PaymentMethodInvalidError();\n                        });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getCheckout(state: InternalCheckoutSelectors): Checkout | void {\n        if (this._isBuyNowFlow) {\n            return;\n        }\n\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return checkout;\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(\n        paymentData: GooglePaymentData,\n        id: string,\n        customerEmail?: string,\n    ): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2:\n                paymentData.paymentMethodData.info.billingAddress.address2 +\n                paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode:\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n        const buyNowCartId = this._isBuyNowFlow\n            ? this._store.getState().cart.getCartOrThrow().id\n            : undefined;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            },\n        });\n    }\n\n    private _updateBillingAddress(\n        paymentData: GooglePaymentData,\n    ): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\n            paymentData,\n            remoteBillingAddress.id,\n            remoteBillingAddress.email,\n        );\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window,\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\n            if (!this._window.google) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.google;\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(\n    store: CheckoutStore,\n    initializer: GooglePayInitializer,\n): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender),\n        ),\n        requestSender,\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizationSpecification,\n    TokenizePayload,\n} from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(\n            paymentGatewaySpecification,\n            supportedCards,\n        );\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo: {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(\n        tokenizationSpecification: TokenizationSpecification,\n        supportedCards: string[],\n    ) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map((card) =>\n                    card === 'MC' ? 'MASTERCARD' : card,\n                ),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\nimport {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n} from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator\n            .getGooglePaymentComponent()\n            .then((googleBraintreePaymentInstance) => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress,\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token)\n            .androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout | undefined,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice,\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(\n                googlePayBraintreePaymentDataRequest,\n            ),\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n        googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks:\n                            googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'braintree',\n                            'braintree:apiVersion': 'v1',\n                            'braintree:authorizationFingerprint':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:authorizationFingerprint'],\n                            'braintree:merchantId':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:merchantId'],\n                            'braintree:sdkVersion':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:sdkVersion'],\n                        },\n                    },\n                },\n            ],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(private _requestSender: RequestSender) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress,\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(\n        testMode: boolean,\n        checkoutcomkey: string,\n        token: CheckoutcomGooglePayToken,\n    ): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\n            testMode,\n            checkoutcomkey,\n            {\n                type: 'googlepay',\n                token_data: token,\n            },\n        );\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(\n        testMode: boolean,\n        checkoutcomKey: string,\n        data = {},\n    ): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'checkoutltd',\n                            gatewayMerchantId: initializationData.checkoutcomkey,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'chase',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n            consignments,\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired:\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                    ? false\n                    : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (\n            !payload.id ||\n            !payload.type ||\n            !payload.card ||\n            !payload.card.brand ||\n            !payload.card.last4\n        ) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode, decimalPlaces },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, decimalPlaces).toFixed(decimalPlaces),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    FundingType,\n    PaypalCommerceHostWindow,\n    PaypalCommerceInitializationData,\n    PaypalCommerceScriptParams,\n    PaypalCommerceSDK,\n} from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n    private _paypalSdk?: Promise<PaypalCommerceSDK>;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._paypalSdk) {\n            this._paypalSdk = this.loadPayPalSDK(\n                this._getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this._paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PaypalCommerceScriptParams,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._window.paypalLoadScript) {\n            const PAYPAL_SDK_VERSION = '5.0.5';\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    private _getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PaypalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit =\n            shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport {\n    OrderData,\n    OrderStatus,\n    PayPalCreateOrderRequestBody,\n    UpdateOrderPayload,\n} from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n    isVenmo?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    // TODO: this method should be removed when provider will be passed as an argument\n    // (to prevent containing unnecessary provider detecting logic inside)\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM, isVenmo } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        if (isVenmo && !isAPM) {\n            provider = isCheckout ? 'paypalcommercevenmocheckout' : 'paypalcommercevenmo';\n        }\n\n        if (isAPM) {\n            provider = isCheckout\n                ? 'paypalcommercealternativemethodscheckout'\n                : 'paypalcommercealternativemethod';\n        }\n\n        return this.createOrder(provider, { cartId });\n    }\n\n    async createOrder(\n        providerId: string,\n        requestBody: PayPalCreateOrderRequestBody,\n    ): Promise<OrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post<OrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, { headers });\n\n        return res.body;\n    }\n\n    async updateOrder(payload: UpdateOrderPayload) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = payload;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { BuyNowCartRequestBody } from '../../../cart';\nimport { AmazonPayV2ButtonParameters } from '../../../payment/strategies/amazon-pay-v2';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n\nexport interface WithBuyNowFeature {\n    /**\n     * The options that are required to initialize Buy Now functionality.\n     */\n    buyNowInitializeOptions?: {\n        getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n    };\n}\n\n/**\n * The required config to render the AmazonPayV2 button.\n */\nexport type AmazonPayV2ButtonInitializeOptions = AmazonPayV2ButtonParameters | WithBuyNowFeature;\n","import { StandardError } from '../../../../common/error/errors';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { CartRequestSender } from '../../../cart';\nimport BuyNowCartRequestBody from '../../../cart/buy-now-cart-request-body';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { isWithBuyNowFeatures } from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartRequestBody?: BuyNowCartRequestBody | void;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n        private _amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay?.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowCartRequestBody =\n                amazonpay.buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (this._buyNowCartRequestBody) {\n                this._amazonPayV2PaymentProcessor.setCartRequestBody(this._buyNowCartRequestBody);\n            }\n        }\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n        });\n\n        if (this._buyNowCartRequestBody) {\n            this._amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this._amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCart() {\n        if (!this._buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                this._buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this._amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCart();\n\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string | number): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n} from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport {\n    ApplePaySessionFactory,\n    assertApplePayWindow,\n} from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(\n                    this._remoteCheckoutActionCreator.signOut(paymentMethod.id),\n                );\n\n                return await this._store.dispatch(\n                    this._checkoutActionCreator.loadCurrentCheckout(),\n                );\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}` },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._store.dispatch(this._consignmentActionCreator.selectShippingOption(optionId));\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                }),\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    useStoreCredit: false,\n                }),\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypal),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: cart.cartAmount,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(braintreePaypalCheckout, braintreepaypalcredit),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n} from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            (braintreeVenmoCheckout) =>\n                this._handleInitializationVenmoSuccess(\n                    braintreeVenmoCheckout,\n                    containerId,\n                    braintreevenmo?.buyNowInitializeOptions,\n                ),\n            (error) => this._handleInitializationVenmoError(error, containerId),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        parentContainerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        return this._renderVenmoButton(\n            braintreeVenmoCheckout,\n            parentContainerId,\n            buyNowInitializeOptions,\n        );\n    }\n\n    private _handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            return this._onError(error);\n                        }\n\n                        await this._handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\n\ntype BuyNowInitializeOptions = Pick<GooglePayButtonInitializeOptions, 'buyNowInitializeOptions'>;\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, currencyCode } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        const hasBuyNowCartOptions = Boolean(googlePayOptions?.buyNowInitializeOptions);\n\n        if (hasBuyNowCartOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._googlePayPaymentProcessor.updateBuyNowFlowFlag(hasBuyNowCartOptions);\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions, currencyCode);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayButtonInitializeOptions,\n        currencyCode?: string,\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor, buyNowInitializeOptions } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const handleValidButtonClick = (event: Event) =>\n            this._handleWalletButtonClick(event, { buyNowInitializeOptions }, currencyCode);\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(\n            handleValidButtonClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(\n        options: CheckoutButtonInitializeOptions,\n    ): GooglePayButtonInitializeOptions {\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 &&\n            options.googlepayadyenv2\n        ) {\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 &&\n            options.googlepayadyenv3\n        ) {\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE &&\n            options.googlepaystripe\n        ) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    @bind\n    private async _handleWalletButtonClick(\n        event: Event,\n        { buyNowInitializeOptions }: BuyNowInitializeOptions,\n        currencyCode?: string,\n    ): Promise<void> {\n        event.preventDefault();\n\n        this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n        const cart = this._buyNowCart || this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        if (this._buyNowCart && currencyCode) {\n            const payloadToUpdate = {\n                currencyCode,\n                totalPrice: String(cart.cartAmount),\n            };\n\n            this._googlePayPaymentProcessor.updatePaymentDataRequest(payloadToUpdate);\n\n            await this._store.dispatch(\n                this._checkoutActionCreator.loadCheckout(this._buyNowCart.id),\n            );\n        }\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        const buyNowCartId = this._buyNowCart?.id;\n\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            ...(buyNowCartId && {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                cart_id: buyNowCartId,\n            }),\n        });\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { ShippingOption } from '../../../shipping';\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum PaypalStyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum PaypalStyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum PaypalStyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum PaypalStyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalStyleButtonLayout;\n    color?: PaypalStyleButtonColor;\n    shape?: PaypalStyleButtonShape;\n    height?: number;\n    label?: PaypalStyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => PayPalOrderDetails;\n    };\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\n// TODO: this type should be merged with PayPalCheckoutButtonOptions in the future\nexport interface ButtonsOptions {\n    style?: PaypalStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string | void>; // TODO: this method should return only Promise<void>\n    onApprove?(data: ApproveCallbackPayload, actions?: ApproveCallbackActions): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalCheckoutButtonOptions {\n    experience: string;\n    style?: PaypalStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onError(error: Error): void;\n    onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onApprove(data: ApproveCallbackPayload, actions: ApproveCallbackActions): Promise<boolean>;\n    onComplete(data: CompleteCallbackDataPayload): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    OXXO: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport const NON_INSTANT_PAYMENT_METHODS = ['oxxo'];\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions | PaypalCheckoutButtonOptions): PaypalCommerceButtons;\n    PaymentFields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\n\nexport type EnableFundingType = FundingType | string;\n\nexport enum PayPalCommerceIntent {\n    authorize = 'authorize',\n    capture = 'capture',\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PaypalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport interface UpdateOrderPayload {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalCreateOrderRequestBody {\n    cartId: string;\n    instrumentId?: string;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    PaypalStyleButtonColor,\n    PaypalStyleButtonLabel,\n    PaypalStyleButtonLayout,\n    PaypalStyleButtonShape,\n    PaypalStyleOptions,\n} from '../../../payment/strategies/paypal-commerce';\n\nexport default function getValidButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n    const { label, color, layout, shape, height, tagline } = style;\n\n    const validStyles = {\n        color: getValidColor(color),\n        height: getValidHeight(height),\n        label: getValidLabel(label),\n        layout: getValidLayout(layout),\n        shape: getValidShape(shape),\n        tagline: getValidTagline(tagline, layout),\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidColor(color?: PaypalStyleButtonColor): PaypalStyleButtonColor | undefined {\n    return color && PaypalStyleButtonColor[color] ? color : undefined;\n}\n\nfunction getValidLabel(label?: PaypalStyleButtonLabel): PaypalStyleButtonLabel | undefined {\n    return label && PaypalStyleButtonLabel[label] ? label : undefined;\n}\n\nfunction getValidLayout(layout?: PaypalStyleButtonLayout): PaypalStyleButtonLayout | undefined {\n    return layout && PaypalStyleButtonLayout[layout] ? layout : undefined;\n}\n\nfunction getValidShape(shape?: PaypalStyleButtonShape): PaypalStyleButtonShape | undefined {\n    return shape && PaypalStyleButtonShape[shape] ? shape : undefined;\n}\n\nfunction getValidTagline(tagline?: boolean, layout?: string): boolean | undefined {\n    if (tagline && typeof tagline === 'boolean' && layout === PaypalStyleButtonLayout.horizontal) {\n        return tagline;\n    }\n\n    return undefined;\n}\n\nfunction getValidHeight(height?: number): number {\n    const defaultHeight = 40;\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (!height || typeof height !== 'number') {\n        return defaultHeight;\n    }\n\n    if (height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    PaypalStyleOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n    private _buyNowCartId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (paypalcommerce.buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!paypalcommerce.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                paypalcommerce.currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const currencyCode = state.cart.getCartOrThrow().currency.code;\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PaypalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommerce;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: paypalCommerceSdk.FUNDING.PAYPAL,\n            style: style ? this._getButtonStyle(style) : {},\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            ...paypalCallbacks,\n        };\n\n        const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        try {\n            if (cart.lineItems.physicalItems.length > 0) {\n                const { payer, purchase_units } = orderDetails;\n                const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: shippingAddress.address_line_1,\n                    city: shippingAddress.admin_area_2,\n                    countryCode: shippingAddress.country_code,\n                    postalCode: shippingAddress.postal_code,\n                    stateOrProvinceCode: shippingAddress.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n                await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n                await this._updateOrder();\n            } else {\n                const { payer } = orderDetails;\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: payer.address.address_line_1,\n                    city: payer.address.admin_area_2,\n                    countryCode: payer.address.country_code,\n                    postalCode: payer.address.postal_code,\n                    stateOrProvinceCode: payer.address.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n            );\n            await this._submitPayment(methodId, data.orderID);\n\n            if (onComplete) {\n                onComplete();\n            }\n\n            return true;\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n            const shippingOption = this._getShippingOptionOrThrow();\n\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercecheckout' : 'paypalcommerce';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    PaypalStyleOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceCreditButtonInitializeOptions } from './paypal-commerce-credit-button-options';\n\nexport default class PaypalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        const {\n            buyNowInitializeOptions,\n            currencyCode,\n            initializesOnCheckoutPage,\n            messagingContainerId,\n        } = paypalcommercecredit;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercecredit);\n        this._renderMessages(messagingContainerId);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PaypalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommercecredit;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const fundingSources = [\n            paypalCommerceSdk.FUNDING.PAYLATER,\n            paypalCommerceSdk.FUNDING.CREDIT,\n        ];\n\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: ButtonsOptions = {\n                    fundingSource,\n                    style: style ? this._getButtonStyle(style) : {},\n                    onClick: () => this._handleClick(buyNowInitializeOptions),\n                    createOrder: () => this._createOrder(initializesOnCheckoutPage),\n                    ...paypalCallbacks,\n                };\n\n                const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n        );\n        await this._submitPayment(methodId, data.orderID);\n\n        if (onComplete) {\n            onComplete();\n        }\n\n        return true;\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _renderMessages(messagingContainerId?: string): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isMessagesAvailable = Boolean(\n            messagingContainerId && document.getElementById(messagingContainerId),\n        );\n\n        if (isMessagesAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesOptions = {\n                amount: cart.cartAmount,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalCommerceSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceCreditButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercecreditcheckout'\n            : 'paypalcommercecredit';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    PaypalStyleOptions,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceAlternativeMethodsButtonOptions } from './paypal-commerce-alternative-methods-button-options';\n\nexport default class PaypalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods.apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercealternativemethods;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(methodId, containerId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommercealternativemethods: PaypalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, initializesOnCheckoutPage, style } =\n            paypalcommercealternativemethods;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalCommerceSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const validButtonStyle = style ? this._getButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: apm,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceAlternativeMethodsButtonOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercealternativemethodscheckout'\n            : 'paypalcommercealternativemethod';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    PaypalStyleOptions,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\nimport { PaypalCommerceVenmoButtonInitializeOptions } from './paypal-commerce-venmo-button-options';\n\nexport default class PaypalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercevenmo;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PaypalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style } = paypalcommercevenmo;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const fundingSource = paypalCommerceSdk.FUNDING.VENMO;\n\n        const validButtonStyle = style ? this._getVenmoButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercevenmocheckout'\n            : 'paypalcommercevenmo';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getVenmoButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matched = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0)[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithApplePayButtonInitializeOptions } from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._paymentIntegrationService.loadDefaultCheckout();\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalUpdateOrderRequestBody,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: PayPalCreateOrderRequestBody,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(requestBody: PayPalUpdateOrderRequestBody) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nconst PAYPAL_SDK_VERSION = '5.0.5';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n    private paypalSdk?: PayPalSDK;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PayPalSDK> {\n        if (!this.paypalSdk) {\n            this.paypalSdk = await this.loadPayPalSDK(\n                this.getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this.paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypalLoadScript) {\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this.window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this.window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit =\n            shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface PayPalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n    paypalLoadScript?(options: PayPalCommerceScriptParams): Promise<{ paypal: PayPalSDK }>;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(options?: PayPalCommerceHostedFieldsSubmitOptions): PayPalCommerceHostedFieldsApprove;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onError?(error: Error): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    PAYPAL = 'paypal',\n    CHECKOUT = 'checkout',\n    BUYNOW = 'buynow',\n    PAY = 'pay',\n    INSTALLMENT = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    VERTICAL = 'vertical',\n    HORIZONTAL = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SILVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum StyleButtonShape {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n *\n */\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface PayPalOrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalCreateOrderRequestBody {\n    cartId: string;\n}\n","import {\n    BillingAddressRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from '../paypal-commerce-script-loader';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    CompleteCallbackDataPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceIntent,\n    PayPalSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceInlineButtonInitializeOptions, {\n    WithPayPalCommerceInlineButtonInitializeOptions,\n} from './paypal-commerce-inline-button-initialize-options';\n\nexport default class PayPalCommerceInlineButtonStrategy implements CheckoutButtonStrategy {\n    private paypalSdk?: PayPalSDK;\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceInlineButtonInitializeOptions,\n    ): Promise<void> {\n        const { containerId, methodId, paypalcommerceinline } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.containerId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceinline) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerceinline\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n        // await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(methodId, containerId, paypalcommerceinline);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommerceinline: PayPalCommerceInlineButtonInitializeOptions,\n    ): void {\n        const paypalSdk = this.getPayPalSdkOrThrow();\n        const { buttonContainerClassName, style, onComplete, onError } = paypalcommerceinline;\n\n        if (!onComplete || typeof onComplete !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceinline.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            experience: 'accelerated',\n            fundingSource: paypalSdk.FUNDING.CARD,\n            style,\n            createOrder: () => this.createOrder(methodId),\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onApprove(data, actions, methodId),\n            onComplete: (data: CompleteCallbackDataPayload) =>\n                this.onComplete(data, methodId, onComplete),\n            onError: (error: Error) => this.onError(error, onError),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            const buttonContainerId = `${containerId}-paypal-accelerated-checkout-button`;\n\n            this.createPayPalButtonContainer(\n                containerId,\n                buttonContainerId,\n                buttonContainerClassName,\n            );\n\n            paypalButtonRender.render(`#${buttonContainerId}`);\n        }\n    }\n\n    private async createOrder(methodId: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(methodId, {\n            cartId,\n        });\n\n        return orderId;\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address except shipping data\n        await this.paymentIntegrationService.updateBillingAddress(address);\n        await this.paymentIntegrationService.updateShippingAddress(address);\n\n        const shippingOption = this.getShippingOptionOrThrow();\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.updateOrder();\n        } catch (error) {\n            this.onError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.updateOrder();\n        } catch (error) {\n            this.onError(error);\n        }\n    }\n\n    private async onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this.getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n            await this.updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this.getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this.paymentIntegrationService.updateBillingAddress(address);\n        }\n\n        await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n        await this.submitPayment(methodId, data.orderID);\n\n        return true;\n    }\n\n    private async onComplete(\n        data: CompleteCallbackDataPayload,\n        methodId: string,\n        callback?: () => void,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { intent } = paymentMethod.initializationData;\n\n        if (intent === PayPalCommerceIntent.CAPTURE) {\n            await this.submitPayment(methodId, data.orderID);\n        }\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    private onError(error: Error, onError?: () => void): void {\n        if (onError && typeof onError === 'function') {\n            onError();\n        }\n\n        throw new Error(error.message);\n    }\n\n    private async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        await this.paypalCommerceRequestSender.updateOrder({\n            availableShippingOptions: consignment.availableShippingOptions,\n            cartId: cart.id,\n            selectedShippingOption: consignment.selectedShippingOption,\n        });\n    }\n\n    private async submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({ methodId, paymentData });\n    }\n\n    private getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const consignment = this.paymentIntegrationService.getState().getConsignmentsOrThrow()[0];\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private createPayPalButtonContainer(\n        containerId: string,\n        buttonContainerId: string,\n        buttonContainerClassName = 'PaypalCommerceInlineButton',\n    ): void {\n        const paypalButtonContainer = document.createElement('div');\n\n        paypalButtonContainer.setAttribute('class', buttonContainerClassName);\n        paypalButtonContainer.setAttribute('id', buttonContainerId);\n\n        const container = document.getElementById(containerId);\n\n        if (container) {\n            container.innerHTML = '';\n            container.append(paypalButtonContainer);\n        }\n    }\n\n    private getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PayPalCommerceRequestSender, PayPalCommerceScriptLoader } from '../index';\n\nimport PayPalCommerceInlineButtonStrategy from './paypal-commerce-inline-button-strategy';\n\nconst createPayPalCommerceInlineButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceInlineButtonStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceInlineButtonStrategy(\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceInlineButtonStrategy, [\n    { id: 'paypalcommerceinline' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport {\n    createPaymentClient,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(\n                store,\n                paymentClient,\n                requestSender,\n                formPoster,\n                locale,\n                host,\n            ),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        customerActionCreator,\n        cartRequestSender,\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV3Initializer,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport {\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n} from '../payment/strategies/paypal-commerce';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport AmazonPayV2RequestSender from './strategies/amazon-pay-v2/amazon-pay-v2-request-sender';\nimport { ApplePayButtonStrategy } from './strategies/apple-pay';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n    BraintreeVenmoButtonStrategy,\n} from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport {\n    PaypalCommerceAlternativeMethodsButtonStrategy,\n    PaypalCommerceButtonStrategy,\n    PaypalCommerceCreditButtonStrategy,\n    PaypalCommerceVenmoButtonStrategy,\n} from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator,\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator,\n        paymentRequestTransformer,\n        paymentHumanVerificationHandler,\n    );\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n    const subscriptionsRequestSender = new SubscriptionsRequestSender(requestSender);\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(subscriptionsRequestSender);\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        billingAddressRequestSender,\n        subscriptionsActionCreator,\n    );\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        consignmentRequestSender,\n        checkoutRequestSender,\n    );\n    const cartRequestSender = new CartRequestSender(requestSender);\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.APPLEPAY,\n        () =>\n            new ApplePayButtonStrategy(\n                store,\n                checkoutActionCreator,\n                requestSender,\n                paymentMethodActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                remoteCheckoutActionCreator,\n                orderActionCreator,\n                new ApplePaySessionFactory(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\n        () =>\n            new AmazonPayV2ButtonStrategy(\n                store,\n                checkoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n                cartRequestSender,\n                amazonPayV2RequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoButtonStrategy(\n                store,\n                paymentMethodActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV3,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BNZ,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ORBITAL,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE,\n        () =>\n            new PaypalCommerceButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_CREDIT,\n        () =>\n            new PaypalCommerceCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                orderActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_APMS,\n        () =>\n            new PaypalCommerceAlternativeMethodsButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_VENMO,\n        () =>\n            new PaypalCommerceVenmoButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    return registry;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","OrderActionType","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","StripeLinkAuthenticated","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","FormFieldsActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","PaymentActionType","PaymentMethodActionType","orderBillingAddressReducer","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","provider","method","barclays","braintree","braintreepaypal","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","getOrderBillingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","shippingConsignments","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","orderBillingAddress","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","createPaymentClient","store","paymentClient","subscribe","setHost","paymentSettings","bigpayBaseUrl","cacheAction","fn","Observable","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","isApplePayWindow","window","assertApplePayWindow","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","createBuyNowCart","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","isSpamProtectionExecuteSucceededAction","succeededAction","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","checkoutSettings","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","delete","_formFieldsRequestSender","loadFields","promise","cancellable","Promise","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","all","otherField","submit","additionalActionData","additionalAction","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","features","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","initialize","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutFailed","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeProjection","createHostedForm","subscriber","filters","initializeOffsitePaymentConfig","dispatch","updateBillingAddress","updateShippingAddress","buyNowCartRequestBody","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","isPrivate","selectorDecorator","resolver","memoizedMethod","cachedValue","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","uniqueId","setUniqueElementId","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_buttonParentContainer","_createAmazonPayButtonParentContainer","_amazonPayV2Button","remove","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","_prepareRequestConfig","_getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","decoupleCheckoutInitiation","placement","parentContainerId","_getButtonParentContainer","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","setCartRequestBody","_buyNowCartRequestBody","isPh4Enabled","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","_isEnvironmentSpecific","uid","random","substr","parentContainer","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","buttonColor","Gold","sandbox","PayOnly","PayAndShip","shopPath","buttonOptions","tmpConfig","createCheckoutSession","_getOrThrow","region","amazonPayV2Region","amazon","ApplePaySession","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","components","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_isBuyNowFlow","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","updatePaymentDataRequest","payloadToUpdate","paymentDataRequest","_getPaymentDataRequest","transactionInfo","totalPrice","_paymentDataRequest","displayWallet","loadPaymentData","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","updateBuyNowFlowFlag","isBuyNowFlow","_getMethodId","_getCheckout","hasShippingAddress","googlePay","_getGooglePayClient","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","buyNowCartId","payment_type","tokenFormat","card_information","cart_id","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","gatewayMerchantId","merchantName","merchantInfo","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","totalPriceStatus","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","getPayPalSDK","initializesOnCheckoutPage","_paypalSdk","_getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","clientId","intent","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isInlineCheckoutEnabled","isPayPalCreditAvailable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldShowInlineCheckout","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","isVenmo","createOrder","requestBody","getOrderStatus","updateOrder","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","signOut","generateToken","trackAuthorizationEvent","forgetCheckout","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","isWithBuyNowFeatures","_amazonPayV2PaymentProcessor","_amazonPayV2ConfigRequestSender","amazonpay","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","Cart","_getCheckoutCreationRequestConfig","_createBuyNowCart","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","DefaultLabels","_remoteCheckoutActionCreator","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","_paymentMethod","_applePayButton","_createButton","_handleWalletButtonClick","classList","add","button","preventDefault","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","storeName","merchantCapabilities","supportedNetworks","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_formPoster","messagingContainerId","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","onPaymentError","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","cartRequestBody","tokenizePayment","postForm","device_data","billing_address","shipping_address","buttonContainerId","onErrorCallback","elementId","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","hasBuyNowCartOptions","_walletButton","_createSignInButton","googlePayButton","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","hasPhysicalItems","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","subdomain","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","PaypalStyleButtonLabel","PaypalStyleButtonLayout","PaypalStyleButtonColor","PaypalStyleButtonShape","PayPalCommerceIntent","getValidColor","getValidLabel","getValidLayout","getValidShape","getValidTagline","horizontal","_paypalCommerceRequestSender","paypalcommerce","_paypalCommerceSdk","_renderButton","onComplete","paypalCommerceSdk","_getPayPalCommerceSdkOrThrow","paypalCallbacks","onShippingAddressChange","_onShippingAddressChange","onShippingOptionsChange","_onShippingOptionsChange","_onHostedCheckoutApprove","orderID","buttonRenderOptions","_getButtonStyle","_handleClick","_createOrder","paypalButton","_buyNowCartId","_getOrderDetailsOrThrow","orderDetails","purchase_units","_getAddress","given_name","surname","email_address","admin_area_2","admin_area_1","_updateOrder","_submitPayment","_getShippingOptionOrThrow","device_info","method_id","paypal_account","order_id","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","paypalcommercecredit","_renderMessages","paypalMessagesOptions","paypalcommercealternativemethods","paypalcommercevenmo","VENMO","_getVenmoButtonStyle","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","query","results","registeredToken","resolverId","matches","entries","matched","toResolvableModule","resolveIds","_paymentIntegrationService","paymentIntegrationService","paypalSdk","getPayPalSdkScriptConfigOrThrow","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","paypalCommerceRequestSender","paypalCommerceScriptLoader","paypalcommerceinline","getPayPalSdkOrThrow","buttonContainerClassName","experience","CARD","createPayPalButtonContainer","getAddress","getShippingOptionOrThrow","paypalButtonContainer","innerHTML","append","createCheckoutButtonInitializer","formPoster","createFormPoster","storeProjectionFactory","checkoutActionCreator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","customerActionCreator","cartRequestSender","createPaymentIntegrationService","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","checkoutRequestSender","remoteCheckoutRequestSender","remoteCheckoutActionCreator","checkoutValidator","paymentRequestSender","paymentRequestTransformer","paymentHumanVerificationHandler","braintreeSdkCreator","paypalScriptLoader","subscriptionsRequestSender","subscriptionsActionCreator","billingAddressRequestSender","consignmentRequestSender","amazonPayV2RequestSender","createCheckoutButtonRegistry"],"sourceRoot":""}