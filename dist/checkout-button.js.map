{"version":3,"file":"checkout-button.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-worldpay-access-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"query-string\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport {\n    ErrorResponseBody,\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CustomerActionType.StripeLinkAuthenticated:\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeErrors?: { [key: string]: Error };\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Extension } from './extension';\n\nexport enum ExtensionActionType {\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\n}\n\nexport type ExtensionAction =\n    | LoadExtensionsRequestedAction\n    | LoadExtensionsSucceededAction\n    | LoadExtensionsFailedAction\n    | RenderExtensionRequestedAction\n    | RenderExtensionSucceededAction\n    | RenderExtensionFailedAction;\n\nexport interface LoadExtensionsRequestedAction extends Action {\n    type: ExtensionActionType.LoadExtensionsRequested;\n}\n\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\n    type: ExtensionActionType.LoadExtensionsSucceeded;\n}\n\nexport interface LoadExtensionsFailedAction extends Action<Error> {\n    type: ExtensionActionType.LoadExtensionsFailed;\n}\n\nexport interface RenderExtensionRequestedAction extends Action {\n    type: ExtensionActionType.RenderExtensionRequested;\n}\n\nexport interface RenderExtensionSucceededAction extends Action<Extension> {\n    type: ExtensionActionType.RenderExtensionSucceeded;\n}\n\nexport interface RenderExtensionFailedAction extends Action<Error> {\n    type: ExtensionActionType.RenderExtensionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeErrors: { ...errors.initializeErrors },\n                initializeMethodId: errors.initializeMethodId\n                    ? errors.initializeMethodId\n                    : undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeErrors: {\n                    ...errors.initializeErrors,\n                    [action.meta && action.meta.methodId]: action.payload,\n                },\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Extension } from './extension';\n\nexport interface ExtensionState {\n    data?: Extension[];\n    errors: ExtensionErrorsState;\n    statuses: ExtensionStatusesState;\n}\n\nexport interface ExtensionErrorsState {\n    loadError?: Error;\n}\n\nexport interface ExtensionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ExtensionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport { Extension } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport {\n    DEFAULT_STATE,\n    ExtensionErrorsState,\n    ExtensionState,\n    ExtensionStatusesState,\n} from './extension-state';\n\nexport function extensionReducer(\n    state: ExtensionState = DEFAULT_STATE,\n    action: Action,\n): ExtensionState {\n    const reducer = combineReducers<ExtensionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Extension[] | undefined,\n    action: ExtensionAction,\n): Extension[] | undefined {\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\n        return arrayReplace(data, action.payload);\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\n    action: ExtensionAction,\n): ExtensionErrorsState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n        case ExtensionActionType.LoadExtensionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\n    action: ExtensionAction,\n): ExtensionStatusesState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ExtensionActionType.LoadExtensionsSucceeded:\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: true,\n                    },\n                });\n            }\n\n            break;\n        }\n\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: false,\n                    },\n                });\n            }\n        }\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    braintreeach: {\n        provider: 'braintree',\n        method: 'ach',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.credit_card': {\n        provider: 'bluesnapdirect',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createExtensionSelectorFactory } from '../extension';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n    const createExtensionSelector = createExtensionSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const extensions = createExtensionSelector(state.extensions);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            extensions,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\n            if (!initializeMethodId || !initializeErrors) {\n                return;\n            }\n\n            if (methodId) {\n                return initializeErrors[methodId];\n            }\n\n            return initializeErrors[initializeMethodId];\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\ninterface InitiaizedQuery {\n    methodId: string;\n    gatewayId?: string;\n}\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(query: InitiaizedQuery): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (key?: string) => {\n            if (key && initializeMethodId !== key) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (query: InitiaizedQuery) => {\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\n\n            return !!(data[key] && data[key].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { Extension, ExtensionRegion } from './extension';\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\n\nexport interface ExtensionSelector {\n    getExtensions(): Extension[] | undefined;\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\n\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\n    const getExtensions = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => () => data,\n    );\n\n    const getExtensionByRegion = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\n    );\n\n    const getLoadError = createSelector(\n        (state: ExtensionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ExtensionState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\n        return {\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { extensionReducer } from '../extension';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        extensions: extensionReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({\n                    ...options,\n                    useCache: true,\n                    params: { ...options?.params, checkoutId: id },\n                }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() =>\n                    this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) =>\n                            createAction(CheckoutActionType.LoadCheckoutSucceeded, body),\n                        ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error)),\n        );\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig(),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\n        Response<InternalCustomerResponseBody>\n    > {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(event.origin) === -1 ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.physicalItems.categories',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n            'lineItems.digitalItems.categories',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes(include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport { ConsignmentActionCreator } from '../shipping';\nimport { SpamProtectionActionCreator } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n\n    async applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\n        const { checkout } = this._store.getState();\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n        if (shouldExecuteSpamCheck) {\n            await this._store.dispatch(\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\n            );\n        }\n\n        return this._storeProjection.getState();\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutSettings } from '../../../../src/config/config';\nimport BuyNowCartRequestBody from '../../../cart/buy-now-cart-request-body';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _buttonParentContainer?: HTMLDivElement;\n    private _amazonPayV2Button?: AmazonPayV2Button;\n    private _buyNowCartRequestBody?: BuyNowCartRequestBody;\n\n    constructor(private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n        this._buttonParentContainer =\n            this._buttonParentContainer || this._createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2Button = undefined;\n        this._buttonParentContainer?.remove();\n        this._buttonParentContainer = undefined;\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this._prepareRequestConfig(createCheckoutSessionConfig);\n\n        this._getAmazonPayV2Button().onClick(() => {\n            this._getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<{\n            createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n            estimatedOrderAmount: AmazonPayV2Price;\n            productType: AmazonPayV2PayOptions;\n        }>,\n    ) {\n        this._getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n            const requestConfig = this._prepareRequestConfig(\n                config.createCheckoutSessionConfig,\n                config.estimatedOrderAmount,\n                config.productType,\n            );\n\n            this._getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this._getButtonParentContainer());\n\n        if (options) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this._getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this._getButtonParentContainer();\n    }\n\n    setCartRequestBody(buyNowCartRequestBody: BuyNowCartRequestBody) {\n        this._buyNowCartRequestBody = buyNowCartRequestBody;\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private _prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private _createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData: {\n                checkoutLanguage,\n                checkoutSessionMethod,\n                createCheckoutSessionConfig,\n                extractAmazonCheckoutSessionId,\n                ledgerCurrency,\n                publicKeyId,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            design: AmazonPayV2ButtonDesign.C0001,\n        };\n\n        if (this._buyNowCartRequestBody) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this._isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this._getOrThrow(this._amazonPayV2SDK);\n    }\n\n    private _getButtonParentContainer(): HTMLDivElement {\n        return this._getOrThrow(this._buttonParentContainer);\n    }\n\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\n        return this._getOrThrow(this._amazonPayV2Button);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const { initializationData: { region = 'us' } = {} } = method;\n\n        const amazonPayV2Region = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { Omit } from '../../../common/types';\nimport {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayCreator,\n    GooglePaymentData,\n    TokenizePayload,\n} from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(\n        request?: GooglePayBraintreeDataRequest,\n    ): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n    internalLabel?: string;\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsFieldData extends BraintreeFormFieldState {\n    container: HTMLElement;\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n    PAYPAL_COMPONENTS,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module\n            ? module\n                  .then((mod) => mod.teardown())\n                  .catch((error) => {\n                      if (error.code !== 'METHOD_CALLED_AFTER_TEARDOWN') {\n                          throw error;\n                      }\n                  })\n            : Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window,\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(\n            `//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`,\n        );\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(public error?: Error) {\n        super(\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\n        );\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport {\n    BraintreeModuleCreator,\n    BraintreeVerifyPayload,\n    GooglePayBraintreeSDK,\n} from '../braintree';\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(\n        checkout: Checkout | void,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n        publishableKey?: string,\n    ): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): Promise<NewTransactionInfo | void>;\n    };\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus?: TotalPriceStatusType;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    callbackIntents?: CallbackIntentsType[];\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface UpdatePaymentDataRequestPayload {\n    apiVersion?: number;\n    apiVersionMinor?: number;\n    merchantInfo?: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods?: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo?: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus?: TotalPriceStatusType;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    callbackIntents?: CallbackIntentsType[];\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n}\n\nexport type GooglePayTransactionInfo = Pick<GooglePayPaymentDataRequestV2, 'transactionInfo'>;\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    GooglePayPaymentOptions,\n    GooglePaySDK,\n    TokenizePayload,\n    UpdatePaymentDataRequestPayload,\n} from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n    private _isBuyNowFlow = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(methodId: string, googlePayClientOptions?: GooglePayPaymentOptions): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet(googlePayClientOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default,\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updatePaymentDataRequest(paymentDataRequest: UpdatePaymentDataRequestPayload) {\n        const existingPaymentDataRequest = this._getPaymentDataRequest();\n\n        this._paymentDataRequest = {\n            ...existingPaymentDataRequest,\n            ...paymentDataRequest,\n            merchantInfo: {\n                ...(existingPaymentDataRequest.merchantInfo ?? {}),\n                ...(paymentDataRequest.merchantInfo ?? {}),\n            },\n            transactionInfo: {\n                ...(existingPaymentDataRequest.transactionInfo ?? {}),\n                ...(paymentDataRequest.transactionInfo ?? {}),\n            },\n            shippingAddressParameters: {\n                ...(existingPaymentDataRequest.shippingAddressParameters ?? {}),\n                ...(paymentDataRequest.shippingAddressParameters ?? {}),\n            },\n        };\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer\n            .parseResponse(paymentData)\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\n            ),\n        );\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow: boolean): void {\n        this._isBuyNowFlow = isBuyNowFlow;\n    }\n\n    private _configureWallet(\n        googlePayClientOptions?: Partial<GooglePayPaymentOptions>,\n    ): Promise<void> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options =\n            features && features['INT-5826.google_hostname_alias']\n                ? { params: { origin: window.location.hostname } }\n                : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then((state) => {\n                const checkout = this._getCheckout(state);\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(\n                        checkout,\n                        paymentMethod,\n                        hasShippingAddress,\n                    ),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(\n                        googlePay,\n                        testMode,\n                        googlePayClientOptions,\n                    );\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient\n                        .isReadyToPay({\n                            allowedPaymentMethods: [\n                                {\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                    parameters: {\n                                        allowedAuthMethods:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedAuthMethods,\n                                        allowedCardNetworks:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedCardNetworks,\n                                    },\n                                },\n                            ],\n                            apiVersion: paymentDataRequest.apiVersion,\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                        })\n                        .then((response) => {\n                            if (response.result) {\n                                return;\n                            }\n\n                            throw new PaymentMethodInvalidError();\n                        });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getCheckout(state: InternalCheckoutSelectors): Checkout | void {\n        if (this._isBuyNowFlow) {\n            return;\n        }\n\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return checkout;\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(\n        google: GooglePaySDK,\n        testMode?: boolean,\n        googlePayClientOptions?: Partial<GooglePayPaymentOptions>,\n    ): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({\n            environment,\n            ...(googlePayClientOptions ?? {}),\n        });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(\n        paymentData: GooglePaymentData,\n        id: string,\n        customerEmail?: string,\n    ): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2:\n                paymentData.paymentMethodData.info.billingAddress.address2 +\n                paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode:\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n        const buyNowCartId = this._isBuyNowFlow\n            ? this._store.getState().cart.getCartOrThrow().id\n            : undefined;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            },\n        });\n    }\n\n    private _updateBillingAddress(\n        paymentData: GooglePaymentData,\n    ): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\n            paymentData,\n            remoteBillingAddress.id,\n            remoteBillingAddress.email,\n        );\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window,\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\n            if (!this._window.google) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.google;\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(\n    store: CheckoutStore,\n    initializer: GooglePayInitializer,\n): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender),\n        ),\n        requestSender,\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizationSpecification,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(\n            paymentGatewaySpecification,\n            supportedCards,\n        );\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo: {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(\n        tokenizationSpecification: TokenizationSpecification,\n        supportedCards: string[],\n    ) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map((card) =>\n                    card === 'MC' ? 'MASTERCARD' : card,\n                ),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\nimport {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n} from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator\n            .getGooglePaymentComponent()\n            .then((googleBraintreePaymentInstance) => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress,\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token)\n            .androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout | undefined,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(\n                googlePayBraintreePaymentDataRequest,\n            ),\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n        googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks:\n                            googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'braintree',\n                            'braintree:apiVersion': 'v1',\n                            'braintree:authorizationFingerprint':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:authorizationFingerprint'],\n                            'braintree:merchantId':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:merchantId'],\n                            'braintree:sdkVersion':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:sdkVersion'],\n                        },\n                    },\n                },\n            ],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(private _requestSender: RequestSender) {}\n\n    async initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress,\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(\n        testMode: boolean,\n        checkoutcomkey: string,\n        token: CheckoutcomGooglePayToken,\n    ): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\n            testMode,\n            checkoutcomkey,\n            {\n                type: 'googlepay',\n                token_data: token,\n            },\n        );\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(\n        testMode: boolean,\n        checkoutcomKey: string,\n        data = {},\n    ): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout | undefined,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'checkoutltd',\n                            gatewayMerchantId: initializationData.checkoutcomkey,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'chase',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n        const consignments = checkout?.consignments || [];\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired:\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                    ? false\n                    : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (\n            !payload.id ||\n            !payload.type ||\n            !payload.card ||\n            !payload.card.brand ||\n            !payload.card.last4\n        ) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const decimalPlaces = checkout?.cart.currency.decimalPlaces || 2;\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, decimalPlaces).toFixed(decimalPlaces)\n            : '';\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayWorldpayAccessInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'worldpay',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { BuyNowCartRequestBody } from '../../../cart';\nimport {\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonParameters,\n} from '../../../payment/strategies/amazon-pay-v2';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n\nexport interface WithBuyNowFeature extends AmazonPayV2ButtonConfig {\n    /**\n     * The options that are required to initialize Buy Now functionality.\n     */\n    buyNowInitializeOptions?: {\n        getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n    };\n}\n\n/**\n * The required config to render the AmazonPayV2 button.\n */\nexport type AmazonPayV2ButtonInitializeOptions = AmazonPayV2ButtonParameters | WithBuyNowFeature;\n","import { StandardError } from '../../../../common/error/errors';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { CartRequestSender } from '../../../cart';\nimport BuyNowCartRequestBody from '../../../cart/buy-now-cart-request-body';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { isWithBuyNowFeatures } from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartRequestBody?: BuyNowCartRequestBody | void;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n        private _amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay?.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowCartRequestBody =\n                amazonpay.buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (this._buyNowCartRequestBody) {\n                this._amazonPayV2PaymentProcessor.setCartRequestBody(this._buyNowCartRequestBody);\n            }\n        }\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n        });\n\n        if (this._buyNowCartRequestBody) {\n            this._amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this._amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCart() {\n        if (!this._buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                this._buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this._amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCart();\n\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string | number): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: paymentMethod.initializationData?.intent,\n            isCreditEnabled: paymentMethod.initializationData?.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () =>\n                    this._setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: cart.cartAmount,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: paymentMethod.initializationData?.intent,\n            isCreditEnabled: paymentMethod.initializationData?.isCreditEnabled,\n        };\n\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n} from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            (braintreeVenmoCheckout) =>\n                this._handleInitializationVenmoSuccess(\n                    braintreeVenmoCheckout,\n                    containerId,\n                    braintreevenmo?.buyNowInitializeOptions,\n                ),\n            (error) => this._handleInitializationVenmoError(error, containerId),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        parentContainerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        return this._renderVenmoButton(\n            braintreeVenmoCheckout,\n            parentContainerId,\n            buyNowInitializeOptions,\n        );\n    }\n\n    private _handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            return this._onError(error);\n                        }\n\n                        await this._handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    EnvironmentType,\n    GooglePayPaymentOptions,\n    GooglePayPaymentProcessor,\n    IntermediatePaymentData,\n    NewTransactionInfo,\n    TotalPriceStatusType,\n} from '../../../payment/strategies/googlepay';\nimport { GooglePayBuyNowInitializeOptions } from './googlepay-button-types';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n    private _buyNowCart?: Cart;\n    private _isBuyNowFlow?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, currencyCode } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n        const { buyNowInitializeOptions } = googlePayOptions;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n        const { testMode } = paymentMethod?.config || {};\n\n        this._methodId = methodId;\n\n        this._isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (this._isBuyNowFlow) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            const { buyNowInitializeOptions } = googlePayOptions;\n            this._googlePayPaymentProcessor.updateBuyNowFlowFlag(this._isBuyNowFlow);\n\n            await this._googlePayPaymentProcessor.initialize(\n                this._getMethodId(),\n                this._getGooglePayClientOptions(currencyCode, testMode, buyNowInitializeOptions),\n            );\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n        }\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions, currencyCode);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _getGooglePayClientOptions(\n        currencyCode: string,\n        testMode?: boolean,\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): GooglePayPaymentOptions {\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return {\n            environment,\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                }: IntermediatePaymentData): Promise<NewTransactionInfo | void> => {\n                    if (callbackTrigger !== CallbackTriggerType.INITIALIZE) {\n                        return;\n                    }\n\n                    try {\n                        this._buyNowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n                        if (this._buyNowCart) {\n                            const { id, cartAmount } = this._buyNowCart;\n\n                            await this._store.dispatch(\n                                this._checkoutActionCreator.loadCheckout(id),\n                            );\n\n                            return {\n                                newTransactionInfo: {\n                                    currencyCode,\n                                    totalPrice: String(cartAmount),\n                                    totalPriceStatus: TotalPriceStatusType.FINAL,\n                                },\n                            };\n                        }\n                    } catch (error) {\n                        throw new BuyNowCartCreationError(error);\n                    }\n                },\n            },\n        };\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayButtonInitializeOptions,\n        currencyCode?: string,\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const onClick = (event: Event) => this._handleWalletButtonClick(event, currencyCode);\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(\n            onClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(\n        options: CheckoutButtonInitializeOptions,\n    ): GooglePayButtonInitializeOptions {\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 &&\n            options.googlepayadyenv2\n        ) {\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 &&\n            options.googlepayadyenv3\n        ) {\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE &&\n            options.googlepaystripe\n        ) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_WORLDPAYACCESS &&\n            options.googlepayworldpayaccess\n        ) {\n            return options.googlepayworldpayaccess;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private async _createBuyNowCart(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event, currencyCode?: string): Promise<void> {\n        event.preventDefault();\n\n        try {\n            if (this._isBuyNowFlow && currencyCode) {\n                this._googlePayPaymentProcessor.updatePaymentDataRequest({\n                    transactionInfo: {\n                        currencyCode,\n                        totalPrice: '0',\n                        totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n                    },\n                    callbackIntents: [CallbackIntentsType.OFFER],\n                });\n            }\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            const cart = this._store.getState().cart.getCartOrThrow();\n            const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        const buyNowCartId = this._buyNowCart?.id;\n\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            ...(buyNowCartId && {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                cart_id: buyNowCartId,\n            }),\n        });\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { getDefaultLogger } from '../log';\nimport { getEnvironment } from '../utility';\n\nimport Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] !== value) {\n                    result.matches = 0;\n                    break;\n                }\n\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matchedResults = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0);\n\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\n            if (getEnvironment() === 'development') {\n                getDefaultLogger().warn(\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\n                );\n            }\n        }\n\n        const matched = matchedResults[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } =\n            applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.setAttribute('class', buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"query-string\");","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { stringifyUrl } from 'query-string';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltButtonStyleOptions,\n    BoltHostWindow,\n    BoltPaymentMethod,\n    StyleButtonShape,\n    StyleButtonSize,\n} from './bolt';\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\n    ): Promise<void> {\n        const { bolt, containerId, methodId } = options;\n        const { buyNowInitializeOptions, style } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bolt) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\n            );\n        }\n\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\n\n        if (!isBuyNowFlow) {\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\n        }\n\n        if (\n            !buyNowInitializeOptions?.storefrontApiToken ||\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            config.testMode,\n            developerConfig,\n            'BigCommerce',\n            buyNowInitializeOptions.storefrontApiToken,\n        );\n\n        this.renderButton(containerId, paymentMethod, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\n            return;\n        }\n\n        this.addButtonContainer(containerId, paymentMethod, style);\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\n    }\n\n    private addButtonContainer(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            return;\n        }\n\n        const boltButtonContainer = document.createElement('div');\n        const boltButtonObject = document.createElement('object');\n\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\n        boltButtonContainer.setAttribute('style', 'display:none');\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\n\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\n\n        boltButtonContainer.append(boltButtonObject);\n        container.innerHTML = '';\n        container.append(boltButtonContainer);\n    }\n\n    private getBoltObjectData(\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): string {\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\n        const buttonHeight = this.getButtonHeight(style?.size);\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\n\n        return stringifyUrl({\n            url: `https://${domainUrl}/v1/checkout_button`,\n            query: {\n                publishable_key: publishableKey,\n                variant: 'ppc',\n                height: buttonHeight,\n                border_radius: buttonBorderRadius,\n            },\n        });\n    }\n\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\n        if (!buttonSize) {\n            return;\n        }\n\n        switch (buttonSize) {\n            case StyleButtonSize.Small:\n                return 25;\n\n            case StyleButtonSize.Large:\n                return 45;\n\n            case StyleButtonSize.Medium:\n            default:\n                return 40;\n        }\n    }\n\n    private getButtonBorderRadius(\n        buttonShape?: StyleButtonShape,\n        buttonHeight?: number,\n    ): number | undefined {\n        if (!buttonShape) {\n            return;\n        }\n\n        switch (buttonShape) {\n            case StyleButtonShape.Pill:\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\n\n            case StyleButtonShape.Rect:\n            default:\n                return 4;\n        }\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltButtonStrategy from './bolt-button-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltButtonStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface PayPalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n    paypalLoadScript?(options: PayPalCommerceScriptParams): Promise<{ paypal: PayPalSDK }>;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void>;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n *\n */\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PayPalSDK> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus();\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({ methodId, paymentData });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: shippingAddress.address_line_1,\n            city: shippingAddress.admin_area_2,\n            countryCode: shippingAddress.country_code,\n            postalCode: shippingAddress.postal_code,\n            stateOrProvinceCode: shippingAddress.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(): Promise<PayPalOrderStatusData> {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, { headers });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nconst PAYPAL_SDK_VERSION = '5.0.5';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n    private paypalSdk?: PayPalSDK;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PayPalSDK> {\n        if (!this.paypalSdk) {\n            this.paypalSdk = await this.loadPayPalSDK(\n                this.getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this.paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypalLoadScript) {\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this.window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this.window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n            ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n        this.renderMessages(messagingContainerId);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private renderMessages(messagingContainerId?: string): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        if (messagingContainerId && document.getElementById(messagingContainerId)) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n            const paypalMessagesOptions = {\n                amount: cart.cartAmount,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style } = paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        customerActionCreator,\n        cartRequestSender,\n        storeCreditActionCreator,\n        spamProtectionActionCreator,\n    );\n}\n","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CartRequestSender } from '../cart';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV3Initializer,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n    GooglePayWorldpayAccessInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport AmazonPayV2RequestSender from './strategies/amazon-pay-v2/amazon-pay-v2-request-sender';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n    BraintreeVenmoButtonStrategy,\n} from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const cartRequestSender = new CartRequestSender(requestSender);\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\n        () =>\n            new AmazonPayV2ButtonStrategy(\n                store,\n                checkoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n                cartRequestSender,\n                amazonPayV2RequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoButtonStrategy(\n                store,\n                paymentMethodActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV3,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BNZ,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ORBITAL,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_WORLDPAYACCESS,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayWorldpayAccessInitializer()),\n                cartRequestSender,\n            ),\n    );\n\n    return registry;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","OrderActionType","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","StripeLinkAuthenticated","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","ExtensionActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeErrors","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","FormFieldsActionType","extensionReducer","LoadExtensionsSucceeded","LoadExtensionsRequested","LoadExtensionsFailed","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","PaymentActionType","PaymentMethodActionType","orderBillingAddressReducer","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","gatewayId","initializeError","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","ACKNOWLEDGE","FINALIZE","provider","method","barclays","braintree","braintreepaypal","braintreeach","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","getOrderBillingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","query","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","shippingConsignments","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","createExtensionSelector","getExtensions","getExtensionByRegion","region","e","createExtensionSelectorFactory","checkoutButton","customerStrategies","extensions","form","orderBillingAddress","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","instanceMethods","set","Observable","shareReplay","store","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","window","isApplePayWindow","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","createBuyNowCart","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","isSpamProtectionExecuteSucceededAction","succeededAction","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","checkoutSettings","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","delete","_formFieldsRequestSender","loadFields","promise","cancellable","Promise","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","callbackName","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","all","otherField","submit","additionalActionData","additionalAction","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","initialize","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutFailed","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_storeProjection","createHostedForm","subscribe","subscriber","filters","initializeOffsitePaymentConfig","dispatch","updateBillingAddress","updateShippingAddress","buyNowCartRequestBody","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","selectorDecorator","resolver","memoizedMethod","cachedValue","isPrivate","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","uniqueId","setUniqueElementId","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_buttonParentContainer","_createAmazonPayButtonParentContainer","_amazonPayV2Button","remove","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","_prepareRequestConfig","_getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","decoupleCheckoutInitiation","placement","parentContainerId","_getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","setCartRequestBody","_buyNowCartRequestBody","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","_isEnvironmentSpecific","uid","random","substr","parentContainer","Gold","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","shopPath","buttonOptions","tmpConfig","createCheckoutSession","_getOrThrow","amazonPayV2Region","amazon","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","components","intent","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","CallbackTriggerType","TotalPriceStatusType","CallbackIntentsType","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_isBuyNowFlow","googlePayClientOptions","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","updatePaymentDataRequest","paymentDataRequest","existingPaymentDataRequest","_getPaymentDataRequest","_paymentDataRequest","merchantInfo","transactionInfo","shippingAddressParameters","displayWallet","loadPaymentData","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","updateBuyNowFlowFlag","isBuyNowFlow","_getMethodId","_getCheckout","hasShippingAddress","googlePay","_getGooglePayClient","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","buyNowCartId","payment_type","tokenFormat","card_information","cart_id","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","totalPrice","toFixed","gatewayMerchantId","merchantName","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","totalPriceStatus","FINAL","emailRequired","shippingAddressRequired","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","isWithBuyNowFeatures","_amazonPayV2PaymentProcessor","_amazonPayV2ConfigRequestSender","amazonpay","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","Cart","_getCheckoutCreationRequestConfig","_createBuyNowCart","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_formPoster","messagingContainerId","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","commit","createOrder","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","onPaymentError","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","cartRequestBody","tokenizePayment","postForm","device_data","billing_address","shipping_address","buttonContainerId","onErrorCallback","elementId","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_getGooglePayClientOptions","_walletButton","_createSignInButton","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","INITIALIZE","newTransactionInfo","googlePayButton","_handleWalletButtonClick","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","googlepayworldpayaccess","preventDefault","ESTIMATED","callbackIntents","OFFER","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","button","subdomain","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","_paymentMethod","clientId","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","getEnvironment","process","NODE_ENV","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","results","registeredToken","resolverId","matches","entries","matchedResults","matched","toResolvableModule","resolveIds","ApplePaySession","DefaultLabels","_paymentIntegrationService","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","requiresShipping","_requiresShipping","_buyNowInitializeOptions","_applePayButton","_createButton","classList","add","merchantCapabilities","supportedNetworks","storeName","_getRequestWithEmptyTotal","requiredShippingContactFields","applePaySession","_handleApplePayEvents","begin","_getBaseRequest","requiredBillingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onpaymentmethodselected","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","completePaymentMethodSelection","newTotal","newLineItems","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","paymentIntegrationService","BoltDeveloperMode","StyleButtonSize","StyleButtonShape","boltScriptLoader","boltHostWindow","storefrontApiToken","publishableKey","developerConfig","loadBoltClient","BoltConnect","setupProductPageCheckout","addButtonContainer","boltButtonContainer","boltButtonObject","getBoltObjectData","append","innerHTML","domainUrl","getDomainURL","buttonHeight","getButtonHeight","buttonBorderRadius","getButtonBorderRadius","stringifyUrl","publishable_key","variant","border_radius","buttonSize","Small","Large","Medium","buttonShape","Pill","Rect","developerModeParams","BoltCheckout","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","CartSource","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","NonInstantAlternativePaymentMethods","PayPalOrderStatus","formPoster","paypalCommerceRequestSender","paypalCommerceScriptLoader","loadPayPalSdk","providedCurrencyCode","initializesOnCheckoutPage","getPayPalSDK","paypalSdk","getPayPalSdkOrThrow","createBuyNowCartOrThrow","requestBody","updateOrder","getOrderStatus","order_id","BuyNow","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","getAddress","getBillingAddressFromOrderDetails","given_name","surname","email_address","admin_area_2","admin_area_1","getShippingAddressFromOrderDetails","orderDetails","removeElement","getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","createFormPoster","paypalCommerceIntegrationService","paypalcommerce","onComplete","defaultCallbacks","orderID","buyNowFlowCallbacks","handleClick","onCancel","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","paypalButton","paypalcommercecredit","renderMessages","paypalMessagesOptions","paypalcommercevenmo","VENMO","getValidVenmoButtonStyles","gold","paypalcommercealternativemethods","paypalExpressScriptLoader","loadPaypalSDK","paypalSDK","getStyle","setupPayment","getPaymentData","createCheckoutButtonInitializer","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","storeProjectionFactory","checkoutActionCreator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","paymentClient","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","customerActionCreator","storeCreditActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","cartRequestSender","createPaymentIntegrationService","checkoutRequestSender","braintreeSdkCreator","amazonPayV2RequestSender","createCheckoutButtonRegistry"],"sourceRoot":""}