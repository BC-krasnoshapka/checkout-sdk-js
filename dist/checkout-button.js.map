{"version":3,"file":"checkout-button.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,mjCCL9D,MAAM,EAA+BC,QAAQ,+BCAvC,EAA+BA,QAAQ,4BCAvC,EAA+BA,QAAQ,SCAvC,EAA+BA,QAAQ,2B,ECO7C,YAII,WAAYC,G,ICXuBC,EAAaR,E,mBDWhD,EACI,YAAMO,GAAW,sCAAoC,K,OAJzD,EAAAE,KAAO,gBACP,EAAAC,KAAO,WCT4BF,EDchB,ECd6BR,EDcvB,EAAWA,UCbhCN,OAAOiB,eACPjB,OAAOiB,eAAeH,EAAQR,GAE9BQ,EAAOI,UAAYZ,EDYoB,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAIF,MAAM,EAAKN,SAASQ,M,CAE7C,CACJ,OAfoD,oBAepD,EAfA,CAAoDF,OEHpD,IAAMG,EAAmB,CACrBC,KAAM,CAAC,EACPC,QAAS,CAAC,EACVC,OAAQ,GAOZ,cAMI,WACIC,EACA,G,IAAA,aAMI,CAAC,EAAC,EALFb,EAAO,UACPc,EAAM,SAJd,OAUU,EAA4BD,GAAYJ,EAAtCC,EAAI,OAAEC,EAAO,UAAEC,EAAM,S,OAE7B,cAAMZ,GAAW,sCAAoC,MAEhDE,KAAO,eACZ,EAAKC,KAAO,UACZ,EAAKO,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,OAASA,EACd,EAAKE,OAASA,GAAU,G,CAC5B,CACJ,OA3BuD,oBA2BvD,EA3BA,CAAuD,G,YCLvD,YACI,WAAYD,GAAZ,MACI,YAAMA,EAAU,CACZb,QAAS,yEACX,K,OAEF,EAAKE,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OATgE,oBAShE,EATA,CAAgE,G,QCDhE,YAII,WAAYH,G,ICZuBC,EAAaR,E,mBDYhD,EACI,YAAMO,GAAW,sCAAoC,K,OAJzD,EAAAE,KAAO,gBACP,EAAAC,KAAO,WCV4BF,EDehB,ECf6BR,EDevB,EAAWA,UCdhCN,OAAOiB,eACPjB,OAAOiB,eAAeH,EAAQR,GAE9BQ,EAAOI,UAAYZ,EDaoB,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAIF,MAAM,EAAKN,SAASQ,M,CAE7C,CACJ,OAfoD,oBAepD,EAfA,CAAoDF,OEJpD,IAAM,EAAmB,CACrBI,KAAM,CAAC,EACPC,QAAS,CAAC,EACVC,OAAQ,GAOZ,cAMI,WACIC,EACA,G,IAAA,aAMI,CAAC,EAAC,EALFb,EAAO,UACPc,EAAM,SAJd,OAUU,EAA4BD,GAAY,EAAtCH,EAAI,OAAEC,EAAO,UAAEC,EAAM,S,OAE7B,cAAMZ,GAAW,sCAAoC,MAEhDE,KAAO,eACZ,EAAKC,KAAO,UACZ,EAAKO,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,OAASA,EACd,EAAKE,OAASA,GAAU,G,CAC5B,CACJ,OA3BuD,oBA2BvD,EA3BA,CAAuD,G,YCNvD,YACI,WAAYD,EAAuBb,GAAnC,MACI,YAAMa,EAAU,CACZb,QACIA,GACA,yFACN,K,OAEF,EAAKE,KAAO,qBACZ,EAAKC,KAAO,gB,CAChB,CACJ,OAXyD,oBAWzD,EAXA,CAAyD,GCRnD,EAA+BJ,QAAQ,UCqB7C,SAASgB,EAAWD,GAChB,OAAOA,EACFE,QAAO,SAACC,EAAkBC,GACvB,OAAIA,GACO,oBAAID,EAAQ,CAAAC,IAGhBD,CACX,GAAG,IACFE,KAAK,IACd,CCzBe,SAASC,EACpBP,EACAb,GAEQ,IACA,EADSa,EAAQ,KACG,OAApBC,OAAM,IAAG,KAAE,EAEnB,OAAO,IAAI,EAAaD,EAAU,CAC9Bb,QAAS,EAAWc,IAAWd,EAC/Bc,OAAM,GAEd,CAEA,SAAS,EAAWA,GAChB,GAAKO,MAAMC,QAAQR,GAInB,OAAOA,EACFE,QAAO,SAACC,EAAkBC,GACvB,OAAIA,GAASA,EAAMlB,SACR,oBAAIiB,EAAQ,CAAAC,EAAMlB,UAGtBiB,CACX,GAAG,IACFE,KAAK,IACd,C,QCzBA,YACI,WAAYN,GAAZ,MACI,YAAMA,EAAU,CACZb,QAAS,2CACX,K,OAEF,EAAKE,KAAO,eACZ,EAAKC,KAAO,U,CAChB,CACJ,OATmD,oBASnD,EATA,CAAmD,GCSnD,iBAGI,aAFQ,KAAAoB,gBAAyD,CAAC,EAG9DC,KAAKC,SAAS,WAAW,SAACZ,EAAUb,GAAY,WAAI,EAAaa,EAAU,CAAEb,QAAO,GAApC,IAChDwB,KAAKC,SAAS,YAAY,SAACZ,EAAUb,GACjC,OHjBG,SACXa,EACAb,GAEQ,IAAAU,EAASG,EAAQ,KACjB,EAAgBH,EAAI,OAApBI,OAAM,IAAG,KAAE,EAEnB,OAAO,IAAI,EAAaD,EAAU,CAC9Bb,QAASe,EAAWD,IAAWJ,EAAKgB,QAAUhB,EAAKiB,OAAS3B,EAC5Dc,OAAQA,EAAOc,OACTd,EAAOe,KAAI,SAAC7B,GAAY,OAAG8B,KAAMpB,EAAKP,KAAMH,QAAO,EAA3B,IACxB,CAAC,CAAE8B,KAAMpB,EAAKP,KAAMH,QAASU,EAAKgB,QAAUhB,EAAKiB,SAE/D,CGIYI,CAA6BlB,EAAUb,EAAvC,IAEJwB,KAAKC,SAAS,cAAc,SAACZ,EAAUb,GACnC,OCpBG,SACXa,EACAb,GAEQ,IAAAU,EAASG,EAAQ,KAEzB,OAAO,IAAI,EAAaA,EAAU,CAC9Bb,QAASA,GAAWU,EAAKgB,QAAUhB,EAAKiB,MACxCb,OAAQ,CACJ,CACIgB,KAAMpB,EAAKoB,MAAQpB,EAAKP,KACxBH,QAASU,EAAKgB,QAAUhB,EAAKiB,SAI7C,CDKYK,CAA+BnB,EAAUb,EAAzC,IAEJwB,KAAKC,SAAS,WAAW,SAACZ,EAAUb,GAChC,OAAAoB,EAA4BP,EAAUb,EAAtC,IAEJwB,KAAKC,SAAS,WAAW,SAACZ,GAAa,WAAI,EAAaA,EAAjB,GAC3C,CA+DJ,OA7DI,YAAAY,SAAA,SAAStB,EAAc8B,GACnBT,KAAKD,gBAAgBpB,GAAQ8B,CACjC,EAEA,YAAAC,YAAA,SAAYrB,EAAyBb,GAIjC,OAFIwB,KAAKD,gBAAgBC,KAAKW,SAAStB,KAAcW,KAAKD,gBAAgBa,SAErDvB,EAAUb,EACnC,EAEQ,YAAAmC,SAAR,SAAiBtB,GACb,GAAwB,IAApBA,EAASD,OACT,MAAO,UAGX,GAAIY,KAAKa,+BAA+BxB,EAASH,MAC7C,MAAO,aAGX,GAAIc,KAAKc,6BAA6BzB,EAASH,MAAO,CAClD,IAAM6B,GAAe,IAAAC,MAAK3B,EAASH,KAAKP,KAAKsC,MAAM,MAEnD,OAAOF,GAAgBf,KAAKD,gBAAgBgB,GAAgBA,EAAe,U,CAG/E,IAAMrB,GAAQ,IAAAsB,MAAK3B,EAASH,MAAQG,EAASH,KAAKI,QAElD,OAAII,GAASA,EAAMY,MAAQN,KAAKD,gBAAgBL,EAAMY,MAC3CZ,EAAMY,KAGV,SACX,EAEQ,YAAAO,+BAAR,SACIK,GAEA,IAAMC,EAA0BD,EAEhC,OACKlB,KAAKc,6BAA6BI,IACM,iBAAlCC,EAAwBhB,OACS,iBAAjCgB,EAAwBxC,MACW,iBAAnCwC,EAAwB/B,QACW,iBAAnC+B,EAAwBjB,MAEvC,EAEQ,YAAAY,6BAAR,SACII,GAEA,IAAME,EAAwBF,EAE9B,MAC4C,iBAAjCE,EAAsB9B,QACU,iBAAhC8B,EAAsBjB,OACS,iBAA/BiB,EAAsBzC,MACW,iBAAjCyC,EAAsBhC,MAErC,EACJ,EA9EA,G,UEjBM,EAA+Bb,QAAQ,QCAvC,EAA+BA,QAAQ,kBCO7C,IAAY8C,ECLAC,ECEAC,ECAAC,ECFG,SAASC,EACpBhD,EACAiD,GAEA,OAAI7B,MAAMC,QAAQrB,GACPA,EAAO4B,KAAI,SAAC/B,GAAU,OAAAmD,EAASnD,EAAOoD,EAAhB,KAG7B,IAAAC,eAAclD,IACP,IAAAmD,YACH,IAAAC,QAAOpD,EAAQiD,IACf,SAACjC,EAAQnB,EAAOb,GACZgC,EAAOhC,GAAOgE,EAASnD,EAAOoD,EAClC,GACA,CAAC,GAIFjD,CACX,CCfe,SAASqD,EAGtBC,EAAeC,GACb,OAOJ,SAA4BA,GACxB,OAAOA,EAAOrD,OAAS2C,EAAgBW,UAC3C,CATQC,CAAmBF,GACZP,EAASM,GAAO,SAACzD,GAAU,OAAAA,IAAU0D,EAAOG,OAAjB,IAG/BJ,CACX,CCXe,SAASK,EAAQC,EAAcC,EAAcC,GACxD,OAAIF,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxDzC,MAAMC,QAAQuC,IAAYxC,MAAMC,QAAQwC,GAsCpD,SAAsBD,EAAgBC,EAAgBC,GAClD,GAAIF,EAAQjC,SAAWkC,EAAQlC,OAC3B,OAAO,EAGX,IAAK,IAAIoC,EAAQ,EAAG,EAASH,EAAQjC,OAAQoC,EAAQ,EAAQA,IACzD,IAAKJ,EAAQC,EAAQG,GAAQF,EAAQE,GAAQD,GACzC,OAAO,EAIf,OAAO,CACX,CAjDmBE,CAAaJ,EAASC,EAASC,IAGtC1C,MAAMC,QAAQuC,KAAYxC,MAAMC,QAAQwC,KAIxCD,aAAmBK,MAAQJ,aAAmBI,KA0B1D,SAAqBL,EAAeC,GAChC,OAAOD,EAAQM,YAAcL,EAAQK,SACzC,CA3BmBC,CAAYP,EAASC,KAG5BD,aAAmBK,MAAQJ,aAAmBI,QAI9CL,aAAmBQ,QAAUP,aAAmBO,OAc5D,SAAuBR,EAAiBC,GACpC,OAAOD,EAAQS,aAAeR,EAAQQ,UAC1C,CAfmBC,CAAcV,EAASC,KAG9BD,aAAmBQ,QAAUP,aAAmBO,SAgC5D,SACIR,EACAC,EACAC,GAEA,IAAMS,EAAST,GAAWA,EAAQU,UAC5BC,EAAQF,EAASrF,OAAOwF,KAAKd,GAASW,OAAOA,GAAUrF,OAAOwF,KAAKd,GACnEe,EAAQJ,EAASrF,OAAOwF,KAAKb,GAASU,OAAOA,GAAUrF,OAAOwF,KAAKb,GAEzE,GAAIY,EAAM9C,SAAWgD,EAAMhD,OACvB,OAAO,EAGX,IAAK,IAAIoC,EAAQ,EAAG,EAASU,EAAM9C,OAAQoC,EAAQ,EAAQA,IAAS,CAChE,IAAM/E,EAAMyF,EAAMV,GAElB,IAAK7E,OAAOM,UAAUC,eAAeC,KAAKmE,EAAS7E,GAC/C,OAAO,EAGX,IAAK2E,EAAQC,EAAQ5E,GAAM6E,EAAQ7E,GAAM8E,GACrC,OAAO,C,CAIf,OAAO,CACX,CAtDec,CAAchB,EAASC,EAASC,KAGpCF,IAAYC,EACvB,CChCe,SAASgB,EAAWC,EAAiBC,GAChD,YAAiBC,IAAbD,GAA0BpB,EAAQmB,EAAcC,GACzCD,EAGJC,CACX,CCNe,SAASE,EACpBjF,EACAhB,EACAa,G,MAEA,OACIG,GACAd,OAAOM,UAAUC,eAAeC,KAAKM,EAAQhB,IAC7C2E,EAAQ3D,EAAOhB,GAAMa,GAEdG,GAGJ,gCACCA,KAAc,MACjBhB,GAAMa,EAAK,GAEpB,ERhBA,SAAY+C,GACR,kDACA,kDACA,4CAEA,sDACA,sDACA,+CACH,CARD,CAAYA,IAAAA,EAAkB,KCL9B,SAAYC,GACR,0BACH,CAFD,CAAYA,IAAAA,EAAe,KCE3B,SAAYC,GACR,gEACA,gEACA,yDACH,CAJD,CAAYA,IAAAA,EAAuB,KCAnC,SAAYC,GACR,mEACA,mEACA,6DAEA,yDACA,yDACA,kDACH,CARD,CAAYA,IAAAA,EAAwB,KMgB7B,IAAMmC,EAAqC,CAC9CrE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCNA,SAASC,EACpB9B,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,IAGgB,IAAA+B,iBAAqC,CACjDC,KAAMC,EACN1E,QAAQ,IAAA2E,iBAAgBC,EAAepC,GACvC8B,SAAUO,GAGPC,CAAQrC,EAAOC,EAC1B,CAEA,SAASgC,EACLD,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK6C,EAAyB6C,8BAC9B,KAAK7C,EAAyB8C,yBAC9B,KAAKjD,EAAmBkD,sBACpB,OAAOjB,EAAQS,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQqC,gBAE1D,QACI,OAAOT,EAEnB,CAEA,SAASG,EACL5E,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAoCqE,EAAcrE,QAG1C0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACpB,OAAOb,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACpB,OAAOhB,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKX,EAAyBmD,8BAC9B,KAAKnD,EAAyB6C,8BAC1B,OAAOX,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKjC,EAAyBoD,2BAC1B,OAAOlB,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,KAAKZ,EAAwBsD,6BAC7B,KAAKtD,EAAwBuD,6BAC7B,KAAKtD,EAAyBuD,yBAC9B,KAAKvD,EAAyB8C,yBAC1B,OAAOZ,EAAUpE,EAAQ,4BAAwBmE,GAErD,KAAKlC,EAAwByD,0BAC7B,KAAKxD,EAAyByD,sBAC1B,OAAOvB,EAAUpE,EAAQ,uBAAwB0C,EAAOG,SAE5D,QACI,OAAO7C,EAEnB,CAEA,SAAS6E,EACLP,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAwCD,EAAcC,UAG9C5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmBkD,sBACxB,KAAKlD,EAAmBqD,mBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKpC,EAAyBmD,8BAC1B,OAAOjB,EAAUE,EAAU,cAAc,GAE7C,KAAKpC,EAAyBoD,2BAC9B,KAAKpD,EAAyB6C,8BAC1B,OAAOX,EAAUE,EAAU,cAAc,GAE7C,KAAKpC,EAAyBuD,yBAC9B,KAAKxD,EAAwBsD,6BACzB,OAAOnB,EAAUE,EAAU,uBAAuB,GAEtD,KAAKrC,EAAwBuD,6BAC7B,KAAKvD,EAAwByD,0BAC7B,KAAKxD,EAAyByD,sBAC9B,KAAKzD,EAAyB8C,yBAC1B,OAAOZ,EAAUE,EAAU,uBAAuB,GAEtD,QACI,OAAOA,EAEnB,CC3Ge,SAASjC,EAAcrD,GAClC,OAAO,mBAAoBA,EAC/B,CC2FA,QAtEA,SAAS4G,EACLC,EACAC,EACA7C,GAEQ,OAA0EA,GAAW,CAAC,GAAC,YAAvF8C,OAAW,IAAG,WAAC/H,EAAQgI,GAAW,YAAS7B,IAATnG,EAAEiI,IAAoBjI,EAAEiI,KAAOD,EAAEC,EAAjC,EAAmC,EAG7E,IAAKJ,EACD,OAAOC,EAMX,IAAKA,GAAYD,IAAiBC,EAC9B,OAAOD,EAMX,IAAIK,EAAqB,EACrBC,EAAiB,EAEfC,EAAsB,SAAIC,EAAkBpC,EAAiBC,GAI/D,OAHAgC,GAAsBG,IAAkBpC,EAAe,EAAI,EAC3DkC,GAAkBE,IAAkBnC,EAAW,EAAI,EAE5CmC,CACX,EAEMlG,EAAS2F,EAAS/E,KAAI,SAACuF,EAASpD,GAClC,IAAMqD,EAAcV,GAAgBA,EAAa3C,GAEjD,OAAIb,EAAckE,IAAgBlE,EAAciE,GACxCP,EAAYQ,EAAaD,GAClBF,EAAoB,EAAYG,EAAaD,GAAUC,EAAaD,GAGxEF,EAAoBpC,EAAQuC,EAAaD,GAAUC,EAAaD,IAGvE,IAAA9F,SAAQ+F,KAAgB,IAAA/F,SAAQ8F,GACzBF,EAAoBR,EAAaW,EAAaD,GAAUC,EAAaD,GAGzEF,EAAoBpC,EAAQuC,EAAaD,GAAUC,EAAaD,EAC3E,IAKA,OACIJ,IAAuBJ,EAAShF,QAChC+E,GACAA,EAAa/E,SAAWgF,EAAShF,OAE1B+E,EAKPM,IAAmBL,EAAShF,OACrBgF,EAGJ3F,CACX,EChDA,EAjCA,SAASqG,EACLC,EACAC,GAEA,OAAKD,EAMAC,GAAaD,IAAkBC,EAO5BrI,OAAOwF,KAAK6C,GAA8BxG,QAAO,SAACC,EAAQhC,GAC9D,IAAM8F,EAAe9D,EAAOhC,GACtB+F,EAAWwC,EAAUvI,GAE3B,OAAIkE,EAAc4B,IAAiB5B,EAAc6B,GACtCE,EAAUjE,EAAQhC,EAAKqI,EAAYvC,EAAcC,KAGxD,IAAA1D,SAAQyD,KAAiB,IAAAzD,SAAQ0D,GAC1BE,EAAUjE,EAAQhC,EAAK,EAAa8F,EAAcC,IAGtDE,EAAUjE,EAAQhC,EAAK+F,EAClC,GAAGuC,GAnBQA,EANAC,CA0Bf,ECrCA,IAAYC,ECAAC,ECDAC,GFCZ,SAAYF,GACR,gDACA,gDACA,0CAEA,kDACA,kDACA,2CACH,CARD,CAAYA,IAAAA,EAAgB,KCA5B,SAAYC,GACR,mEACA,mEACA,6DAEA,qEACA,qEACA,8DACH,CARD,CAAYA,IAAAA,EAAyB,KCDrC,SAAYC,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,0DACH,CApBD,CAAYA,IAAAA,EAAqB,KCU1B,ICVKC,EDUC,EAA2B,CACpC9G,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEDA,SAASyC,EAAYtE,EAAkCC,GAOlE,YAPgC,IAAAD,IAAAA,EAAA,IAChB,IAAA+B,iBAA2B,CACvCC,KAAM,EACNzE,QAAQ,IAAA2E,iBAAgB,EAAenC,GACvC8B,SAAU,GAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,EACL+B,EACA/B,GAOA,OAAQA,EAAOrD,MACX,KAAK6C,EAAyB6C,8BAC9B,KAAKhD,EAAmBkD,sBACxB,KAAK4B,EAAsBG,4BAC3B,KAAKH,EAAsBI,2BAC3B,KAAKJ,EAAsBK,2BAC3B,KAAKL,EAAsBM,8BAC3B,KAAKN,EAAsBO,6BAC3B,KAAKT,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKV,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC3B,OAAO,EAAY/C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ4E,MAE9D,QACI,OAAOhD,EAEnB,CAEA,SAAS,EACLH,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA8B,EAAcA,UAGpC5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmBqD,mBACxB,KAAKrD,EAAmBkD,sBACpB,OAAOb,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,CAEA,SAAS,EACLtE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA0B,EAAcA,QAGhC0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACpB,OAAOb,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACpB,OAAOhB,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,EDjFA,SAAY8G,GACR,oDACA,0DACA,0DAEA,wDACA,8DACA,6DACH,CARD,CAAYA,IAAAA,EAAwB,KEwB7B,IC1BKY,ED0BC,EAAqC,CAC9CjD,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GErBTqD,GAA8C,CAAEC,sBAAuB,CAAC,GACxEC,GAAiD,CAAC,EAClDC,GAAoD,CAAC,EAE5C,SAASC,GACpBtF,EACAC,G,UAEA,YAHA,IAAAD,IAAAA,EAAA,GAGKC,EAAOsF,MAAStF,EAAOsF,KAAKC,UAIjB,IAAAzD,iBAAqC,CACjDC,MAAM,IAAAD,kBAAe,KACjB,EAAC9B,EAAOsF,KAAKC,UAAW,G,IAE5BjI,QAAQ,IAAAwE,kBAAe,KACnB,EAAC9B,EAAOsF,KAAKC,UAAW,G,IAE5B3D,UAAU,IAAAE,kBAAe,KACrB,EAAC9B,EAAOsF,KAAKC,UAAW,G,KAIzBnD,CAAQrC,EAAOC,GAfXD,CAgBf,CAEA,SAAS,GACLgC,EACA/B,G,MAEA,YAHA,IAAA+B,IAAAA,EAAA,IAGQ/B,EAAOrD,MACX,KAAKyH,EAAyBoB,0BAC1B,OAAKxF,EAAOsF,MAAStF,EAAOsF,KAAKG,YAI1B,EAAY1D,EAAM,CACrBmD,uBAAqB,KACjB,EAAClF,EAAOsF,KAAKG,cAAc,E,KALxB1D,EASf,KAAKqC,EAAyBsB,4BAC1B,OAAOhE,EAAUK,EAAM,wBAAyB,CAAC,GAGzD,OAAOA,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAA,IAGQ0C,EAAOrD,MACX,KAAKyH,EAAyBuB,0BAC9B,KAAKvB,EAAyBoB,0BAC1B,OAAO9D,EAAUpE,EAAQ,uBAAmBmE,GAEhD,KAAK2C,EAAyBwB,uBAC1B,OAAOlE,EAAUpE,EAAQ,kBAAmB0C,EAAOG,SAEvD,KAAKiE,EAAyByB,4BAC9B,KAAKzB,EAAyBsB,4BAC1B,OAAOhE,EAAUpE,EAAQ,yBAAqBmE,GAElD,KAAK2C,EAAyB0B,yBAC1B,OAAOpE,EAAUpE,EAAQ,oBAAqB0C,EAAOG,SAEzD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAA,IAGQ5B,EAAOrD,MACX,KAAKyH,EAAyBuB,0BAC1B,OAAOjE,EAAUE,EAAU,kBAAkB,GAEjD,KAAKwC,EAAyBwB,uBAC9B,KAAKxB,EAAyBoB,0BAC1B,OAAO9D,EAAUE,EAAU,kBAAkB,GAEjD,KAAKwC,EAAyByB,4BAC1B,OAAOnE,EAAUE,EAAU,oBAAoB,GAEnD,KAAKwC,EAAyB0B,yBAC9B,KAAK1B,EAAyBsB,4BAC1B,OAAOhE,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,EAEnB,EDxGA,SAAYoD,GACR,8CACA,8CACA,uCACH,CAJD,CAAYA,IAAAA,EAAgB,KEoBrB,ICnBKe,GDmBC,GAA6B,CACtCT,KAAM,CAAC,EACPhI,OAAQ,CAAC,EACTsE,SAAU,CAAC,GElBA,SAASoE,GACpBjG,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6B,CACzCC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GAAY+B,EAA0B/B,GAC3C,OAAQA,EAAOrD,OACNqI,EAAiBiB,oBACX,EAAYlE,EAAM/B,EAAOG,SAGzB4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA4B,GAAcA,QAGlC0C,EAAOrD,MACX,KAAKqI,EAAiBiB,oBAClB,OAAOvE,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKuD,EAAiBkB,iBAClB,OAAOxE,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAgC,GAAcA,UAGtC5B,EAAOrD,MACX,KAAKqI,EAAiBmB,oBAClB,OAAOzE,EAAUE,EAAU,aAAa,GAE5C,KAAKoD,EAAiBiB,oBACtB,KAAKjB,EAAiBkB,iBAClB,OAAOxE,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,ED1DA,SAAYmE,GACR,4CACA,4CACA,sCAEA,6DACA,6DACA,uDAEA,gDACA,gDACA,0CAEA,oDACA,oDACA,6CACH,CAhBD,CAAYA,KAAAA,GAAe,KEiBpB,IAAM,GAA6B,CACtCzI,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCZA,SAASwE,GACpBrG,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6B,CACzCC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAK0B,EAAiBU,qBACtB,KAAKR,EAAsBM,8BAC3B,KAAKR,EAAiBW,sBACtB,KAAKmB,GAAgBM,mBACjB,OAAO,EAAatE,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQmG,SAE/D,QACI,OAAOvE,EAEnB,CAEA,SAAS,GAAczE,EAAgC0C,GACnD,YADmB,IAAA1C,IAAAA,EAAA,IACX0C,EAAOrD,MACX,KAAKsH,EAAiBsC,qBACtB,KAAKtC,EAAiBU,qBAClB,OAAOjD,EAAUpE,EAAQ,wBAAoBmE,GAEjD,KAAKwC,EAAiBuC,kBAClB,OAAO9E,EAAUpE,EAAQ,mBAAoB0C,EAAOG,SAExD,KAAK8D,EAAiBwC,sBACtB,KAAKxC,EAAiBW,sBAClB,OAAOlD,EAAUpE,EAAQ,yBAAqBmE,GAElD,KAAKwC,EAAiByC,mBAClB,OAAOhF,EAAUpE,EAAQ,oBAAqB0C,EAAOG,SAEzD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAA,IAGQ5B,EAAOrD,MACX,KAAKsH,EAAiBsC,qBAClB,OAAO7E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKqC,EAAiBU,qBACtB,KAAKV,EAAiBuC,kBAClB,OAAO9E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKqC,EAAiBwC,sBAClB,OAAO/E,EAAUE,EAAU,oBAAoB,GAEnD,KAAKqC,EAAiBW,sBACtB,KAAKX,EAAiByC,mBAClB,OAAOhF,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,EAEnB,CC/DO,ICdK+E,GDcC,GAAsC,CAC/CrJ,OAAQ,CAAC,EACTsE,SAAU,CAAC,GERA,SAASgF,GACpB7G,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsC,CAClDC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAK4B,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKR,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKV,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC3B,OAAO,EAAa/C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQ0G,kBAE/D,QACI,OAAO9E,EAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAqC,GAAcA,QAG3C0C,EAAOrD,MACX,KAAKuH,EAA0B4C,8BAC/B,KAAK5C,EAA0BW,8BAC3B,OAAOnD,EAAUpE,EAAQ,iCAA6BmE,GAE1D,KAAKyC,EAA0B6C,2BAC3B,OAAOrF,EAAUpE,EAAQ,4BAA6B0C,EAAOG,SAEjE,KAAK+D,EAA0B8C,+BAC/B,KAAK9C,EAA0BY,+BAC3B,OAAOpD,EAAUpE,EAAQ,kCAA8BmE,GAE3D,KAAKyC,EAA0B+C,4BAC3B,OAAOvF,EAAUpE,EAAQ,6BAA8B0C,EAAOG,SAElE,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,GAAcA,UAG/C5B,EAAOrD,MACX,KAAKuH,EAA0B4C,8BAC3B,OAAOpF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKsC,EAA0BW,8BAC/B,KAAKX,EAA0B6C,2BAC3B,OAAOrF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKsC,EAA0B8C,+BAC3B,OAAOtF,EAAUE,EAAU,6BAA6B,GAE5D,KAAKsC,EAA0BY,+BAC/B,KAAKZ,EAA0B+C,4BAC3B,OAAOvF,EAAUE,EAAU,6BAA6B,GAE5D,QACI,OAAOA,EAEnB,EDxFA,SAAY+E,GACR,uDACA,uDACA,iDAEA,yDACA,yDACA,mDAEA,sDACA,sDACA,gDAEA,qEACA,qEACA,+DAEA,qDACH,CAlBD,CAAYA,KAAAA,GAAkB,KEUvB,IChBKO,GDgBC,GAA+B,CACxC5J,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEKA,SAASuF,GACpBpH,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkD,CAC9DC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GAAY+B,EAA4B/B,GAC7C,OAAQA,EAAOrD,MACX,KAAK6C,EAAyB8C,yBAC9B,KAAKjD,EAAmBkD,sBACpB,OAAO,EAAYR,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQiH,UAE9D,KAAKT,GAAmBU,+BACpB,OAAO,EAAYtF,EAAM/B,EAAOG,SAEpC,QACI,OAAO4B,EAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA8B,GAAcA,QAGpC0C,EAAOrD,MACX,KAAKgK,GAAmBW,wBACxB,KAAKX,GAAmBY,wBACpB,OAAO7F,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKkF,GAAmBa,qBACpB,OAAO9F,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,KAAKwG,GAAmBc,+BACxB,KAAKd,GAAmBU,+BACpB,OAAO3F,EAAUpE,EAAQ,0BAAsBmE,GAEnD,KAAKkF,GAAmBe,4BACpB,OAAOhG,EAAUpE,EAAQ,qBAAsB0C,EAAOG,SAE1D,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,GAAcA,UAGxC5B,EAAOrD,MACX,KAAKgK,GAAmBW,wBACpB,OAAO5F,EAAUE,EAAU,cAAc,GAE7C,KAAK+E,GAAmBa,qBACxB,KAAKb,GAAmBY,wBACpB,OAAO7F,EAAUE,EAAU,cAAc,GAE7C,KAAK+E,GAAmBc,+BACpB,OAAO/F,EAAUE,EAAU,qBAAqB,GAEpD,KAAK+E,GAAmBe,4BACxB,KAAKf,GAAmBU,+BACpB,OAAO3F,EAAUE,EAAU,qBAAqB,GAEpD,QACI,OAAOA,EAEnB,EDhGA,SAAYsF,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,gGACA,sGACA,sGACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,uEACH,CAnBD,CAAYA,KAAAA,GAA0B,KEwC/B,ICtCKS,GDsCC,GAAuC,CAChD5F,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEhCA,SAASgG,GACpB7H,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+D,CAC3EC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAkC,GAAcA,MAGxC/B,EAAOrD,MACX,KAAKuK,GAA2BW,oBAC5B,OAAO,EAAY9F,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCuC,eAAe,G,IAI3B,KAAKZ,GAA2Ba,sBAC5B,OAAO,EAAYhG,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCuC,eAAe,G,IAK/B,OAAO/F,CACX,CAEA,SAAS,GACLzE,EACA0C,G,MAEA,YAHA,IAAA1C,IAAAA,EAAsC,GAAcA,QAG5C0C,EAAOrD,MACX,KAAKuK,GAA2Bc,oBAChC,KAAKd,GAA2BW,oBAC5B,OAAO,EAAYvK,EAAQ,CACvB2K,kBAAkB,iBAAK3K,EAAO2K,kBAC9BC,mBAAoB5K,EAAO4K,mBACrB5K,EAAO4K,wBACPzG,IAGd,KAAKyF,GAA2BiB,iBAC5B,OAAO,EAAY7K,EAAQ,CACvB2K,kBAAkB,gCACX3K,EAAO2K,mBAAgB,OACzBjI,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAWvF,EAAOG,QAAO,IAEzD+H,mBAAoBlI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAK2B,GAA2BkB,sBAChC,KAAKlB,GAA2Ba,sBAC5B,OAAO,EAAYzK,EAAQ,CACvB+K,uBAAmB5G,EACnB6G,0BAAsB7G,IAG9B,KAAKyF,GAA2BqB,mBAC5B,OAAO,EAAYjL,EAAQ,CACvB+K,kBAAmBrI,EAAOG,QAC1BmI,qBAAsBtI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK2B,GAA2BsB,gBAChC,KAAKtB,GAA2BuB,gBAC5B,OAAO,EAAYnL,EAAQ,CACvBoL,iBAAajH,EACbkH,oBAAgBlH,IAGxB,KAAKyF,GAA2B0B,aAC5B,OAAO,EAAYtL,EAAQ,CACvBoL,YAAa1I,EAAOG,QACpBwI,eAAgB3I,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGnD,KAAK2B,GAA2B2B,iBAChC,KAAK3B,GAA2B4B,iBAC5B,OAAO,EAAYxL,EAAQ,CACvByL,kBAActH,EACduH,qBAAiBvH,IAGzB,KAAKyF,GAA2B+B,cAC5B,OAAO,EAAY3L,EAAQ,CACvByL,aAAc/I,EAAOG,QACrB6I,gBAAiBhJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAK2B,GAA2BgC,sCAChC,KAAKhC,GAA2BiC,sCAC5B,OAAO,EAAY7L,EAAQ,CACvB8L,uCAAmC3H,EACnC4H,0CAAsC5H,IAG9C,KAAKyF,GAA2BoC,mCAC5B,OAAO,EAAYhM,EAAQ,CACvB8L,kCAAmCpJ,EAAOG,QAC1CkJ,qCAAsCrJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzE,KAAK2B,GAA2BqC,yBAChC,KAAKrC,GAA2BsC,0BAC5B,OAAO,EAAYlM,EAAQ,CACvBmM,4BAAwBhI,EACxBiI,+BAA2BjI,IAGnC,KAAKyF,GAA2ByC,wBAC5B,OAAO,EAAYrM,EAAQ,CACvBmM,uBAAwBzJ,EAAOG,QAC/BuJ,0BAA2B1J,EAAOsF,KAAKC,WAG/C,QACI,OAAOjI,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA0C,GAAcA,UAGhD5B,EAAOrD,MACX,KAAKuK,GAA2Bc,oBAC5B,OAAO,EAAYpG,EAAU,CACzBgI,gBAAgB,EAChB1B,mBAAoBlI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAK2B,GAA2BiB,iBAChC,KAAKjB,GAA2BW,oBAC5B,OAAO,EAAYjG,EAAU,CACzBgI,gBAAgB,EAChB1B,wBAAoBzG,IAG5B,KAAKyF,GAA2BkB,sBAC5B,OAAO,EAAYxG,EAAU,CACzBiI,kBAAkB,EAClBvB,qBAAsBtI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAK2B,GAA2BqB,mBAChC,KAAKrB,GAA2Ba,sBAC5B,OAAO,EAAYnG,EAAU,CACzBiI,kBAAkB,EAClBvB,0BAAsB7G,IAG9B,KAAKyF,GAA2BsB,gBAC5B,OAAO,EAAY5G,EAAU,CACzBkI,aAAa,EACbnB,eAAgB3I,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGnD,KAAK2B,GAA2B0B,aAChC,KAAK1B,GAA2BuB,gBAC5B,OAAO,EAAY7G,EAAU,CACzBkI,aAAa,EACbnB,oBAAgBlH,IAGxB,KAAKyF,GAA2B2B,iBAC5B,OAAO,EAAYjH,EAAU,CACzBmI,cAAc,EACdf,gBAAiBhJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAK2B,GAA2B+B,cAChC,KAAK/B,GAA2B4B,iBAC5B,OAAO,EAAYlH,EAAU,CACzBmI,cAAc,EACdf,qBAAiBvH,IAGzB,KAAKyF,GAA2BgC,sCAC5B,OAAO,EAAYtH,EAAU,CACzBoI,kCAAkC,EAClCX,qCAAsCrJ,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzE,KAAK2B,GAA2BoC,mCAChC,KAAKpC,GAA2BiC,sCAC5B,OAAO,EAAYvH,EAAU,CACzBoI,kCAAkC,EAClCX,0CAAsC5H,IAG9C,KAAKyF,GAA2BqC,yBAC5B,OAAO,EAAY3H,EAAU,CACzBqI,qBAAqB,EACrBP,0BAA2B1J,EAAOsF,KAAKC,WAG/C,KAAK2B,GAA2BsC,0BAChC,KAAKtC,GAA2ByC,wBAC5B,OAAO,EAAY/H,EAAU,CACzBqI,qBAAqB,EACrBP,+BAA2BjI,IAGnC,QACI,OAAOG,EAEnB,EDhOA,SAAY+F,GACR,sDACA,sDACA,gDACA,wDACA,wDACA,iDACH,CAPD,CAAYA,KAAAA,GAAmB,KEaxB,ICbKuC,GDaC,GAAgC,CACzC5M,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELR,SAASuI,GACZpK,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAgC,CAC5CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAIA,EAAOrD,OAASgL,GAAoByC,wBAC7B,EAAarI,EAAM/B,EAAOG,SAG9B4B,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA+B,GAAcA,QAGrC0C,EAAOrD,MACX,KAAKgL,GAAoB0C,wBACzB,KAAK1C,GAAoByC,wBACrB,OAAO1I,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKkG,GAAoB2C,yBACzB,KAAK3C,GAAoB4C,yBACrB,OAAO7I,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKkG,GAAoB6C,qBACrB,OAAO9I,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKwH,GAAoB8C,sBACrB,OAAO/I,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAmC,GAAcA,UAGzC5B,EAAOrD,MACX,KAAKgL,GAAoB0C,wBACrB,OAAO3I,EAAUE,EAAU,aAAa,GAE5C,KAAK+F,GAAoByC,wBACzB,KAAKzC,GAAoB6C,qBACrB,OAAO9I,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDzEA,SAAYsI,GACR,uDACA,uDACA,gDACH,CAJD,CAAYA,KAAAA,GAAoB,KEYzB,ICZKQ,GDYC,GAAiC,CAC1CpN,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAAS+I,GACpB5K,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiC,CAC7CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNuN,GAAqBU,wBACf,EAAY7I,EAAM/B,EAAOG,SAGzB4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA+B,GAAcA,QAGrC0C,EAAOrD,MACX,KAAKuN,GAAqBU,wBACtB,OAAOlJ,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKyI,GAAqBW,qBACtB,OAAOnJ,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAoC,GAAcA,UAG1C5B,EAAOrD,MACX,KAAKuN,GAAqBY,wBACtB,OAAOpJ,EAAUE,EAAU,aAAa,GAE5C,KAAKsI,GAAqBU,wBAC1B,KAAKV,GAAqBW,qBACtB,OAAOnJ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDlEA,SAAY8I,GACR,oDACA,oDACA,6CACH,CAJD,CAAYA,KAAAA,GAAiB,KEYtB,IAAM,GAA8B,CACvCpN,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCLA,SAASmJ,GACpBhL,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA8B,CAC1CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACN+N,GAAkBM,uBACZ,EAAajJ,EAAM/B,EAAOG,SAG1B4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA6B,GAAcA,QAGnC0C,EAAOrD,MACX,KAAK+N,GAAkBO,uBACvB,KAAKP,GAAkBM,uBACnB,OAAOtJ,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKiJ,GAAkBQ,oBACnB,OAAOxJ,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAiC,GAAcA,UAGvC5B,EAAOrD,MACX,KAAK+N,GAAkBO,uBACnB,OAAOvJ,EAAUE,EAAU,aAAa,GAE5C,KAAK8I,GAAkBM,uBACvB,KAAKN,GAAkBQ,oBACnB,OAAOxJ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,CCtCO,IAAM,GAA4B,CACrCtE,OAAQ,CAAC,EACTgI,KAAM,CAAC,EACP1D,SAAU,CAAC,GCrBA,SAASuJ,GACpBpL,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA4B,CACxCC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvCwF,KAAM8F,GACNxJ,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAKoJ,GAAgBM,mBACrB,KAAKN,GAAgBsF,2BACjB,OAAO,EACHtJ,GACA,IAAAuJ,MAAKtL,EAAOG,QAAS,CAAC,iBAAkB,aAGhD,QACI,OAAO4B,EAEnB,CAEA,SAASqJ,GACL9F,EACAtF,GAEA,OAAQA,EAAOrD,MACX,KAAKoJ,GAAgBwF,uBACrB,KAAKxF,GAAgByF,qBACjB,OAAO,EAAYlG,GAAM,gCAClBtF,EAAOsF,MAAI,CACdmG,YAAazL,EAAOG,SAAWH,EAAOG,QAAQuL,MAAMD,YACpDE,WAAY3L,EAAOG,SAAWH,EAAOG,QAAQuL,MAAME,MACnDC,QAAS7L,EAAOG,SAAWH,EAAOG,QAAQuL,OAAS1L,EAAOG,QAAQuL,MAAMG,WAGhF,QACI,OAAOvG,EAEnB,CAEA,SAAS,GACLhI,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA2B,GAAcA,QAGjC0C,EAAOrD,MACX,KAAKoJ,GAAgB+F,mBACrB,KAAK/F,GAAgBM,mBACrB,KAAKN,GAAgBsF,2BACrB,KAAKtF,GAAgBgG,2BACjB,OAAOrK,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKsE,GAAgBiG,gBACrB,KAAKjG,GAAgBkG,wBACjB,OAAOvK,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA+B,GAAcA,UAGrC5B,EAAOrD,MACX,KAAKoJ,GAAgB+F,mBACrB,KAAK/F,GAAgBgG,2BACjB,OAAOrK,EAAUE,EAAU,aAAa,GAE5C,KAAKmE,GAAgBM,mBACrB,KAAKN,GAAgBiG,gBACrB,KAAKjG,GAAgBsF,2BACrB,KAAKtF,GAAgBkG,wBACjB,OAAOvK,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,CC7FO,ICJKsK,GCDAC,GFKC,GAA0C,CAAC,EGAzC,SAASC,GACpBrM,EACAC,GAMA,YAPA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA0C,CACtDC,KAAM,IAGHK,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAKoJ,GAAgBsF,2BACrB,KAAKtF,GAAgBM,mBACjB,OAAO/E,EAAQS,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQqC,gBAE1D,QACI,OAAOT,EAEnB,CC3Be,SAASsK,GACpBtM,EACAC,GAMA,YAPA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6C,CACzDC,KAAM,IAGHK,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNuP,GAAkBI,uBACZtM,EAAOG,QAGP4B,CAEnB,EHtBA,SAAYmK,GACR,oDACA,oDACA,8CAEA,2EACA,2EACA,oEACH,CARD,CAAYA,KAAAA,GAAiB,KCD7B,SAAYC,GACR,6DACA,6DACA,uDAEA,+DACA,+DACA,wDACH,CARD,CAAYA,KAAAA,GAAuB,KGiB5B,IClBKI,GDkBC,GAAoC,CAC7CjP,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEVA,SAAS4K,GACpBzM,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAoC,CAChDC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvCwF,KAAM,GACN1D,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAKwP,GAAwBM,2BACzB,OCzBG,SAAwBC,EAAYC,EAAUjN,GACzD,IAAKiN,EACD,OAAOD,EAGX,IAAME,GAAmB,IAAAC,MAAKF,EAAM,MAC9BnM,GAAQ,IAAAsM,WACVJ,EACqB,iBAAdhN,GAAyB,IAAAqN,QAAOrN,GAAaA,GAAakN,GAE/DxJ,GAAW,oBAAIsJ,GAErB,IAAe,IAAXlM,EACA4C,EAAS4J,KAAKL,OACX,CACH,IAAMM,EAAeP,EAAMlM,GAE3B4C,EAAS5C,GACLb,EAAcsN,IAAiBtN,EAAcgN,GACvC,EAAYM,EAAcN,GAC1BA,C,CAGd,OAAOvJ,CACX,CDCmB8J,CACHnL,GAAQ,GACR/B,EAAOG,QACPH,EAAOG,SAAW,CACdoD,GAAIvD,EAAOG,QAAQoD,GACnB4J,QAASnN,EAAOG,QAAQgN,UAIpC,KAAKhB,GAAwBiB,4BACzB,OAAO,EAAarL,EAAM/B,EAAOG,QAAS,CACtCkD,YAAa,SAACgK,EAASC,GACnB,OAAAD,EAAQ9J,KAAO+J,EAAQ/J,IAAM8J,EAAQF,UAAYG,EAAQH,OAAzD,IAGZ,QACI,OAAOpL,EAEnB,CAEA,SAAS,GACLuD,EACAtF,GAEA,OAAQA,EAAOrD,OACNwP,GAAwBiB,4BAClB,EAAY9H,EAAMtF,EAAOsF,MAGzBA,CAEnB,CAEA,SAAS,GACLhI,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAmC,GAAcA,QAGzC0C,EAAOrD,MACX,KAAKwP,GAAwBoB,4BAC7B,KAAKpB,GAAwBiB,4BACzB,OAAO1L,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK0K,GAAwBqB,yBACzB,OAAO9L,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKgM,GAAwBsB,2BAC7B,KAAKtB,GAAwBM,2BACzB,OAAO,EAAYnP,EAAQ,CACvBoQ,kBAAcjM,EACdkM,qBAAiBlM,IAGzB,KAAK0K,GAAwByB,wBACzB,OAAO,EAAYtQ,EAAQ,CACvBoQ,aAAc1N,EAAOsF,KAAKC,SAC1BoI,gBAAiB3N,EAAOG,UAGhC,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAuC,GAAcA,UAG7C5B,EAAOrD,MACX,KAAKwP,GAAwBoB,4BACzB,OAAO7L,EAAUE,EAAU,aAAa,GAE5C,KAAKuK,GAAwBiB,4BAC7B,KAAKjB,GAAwBqB,yBACzB,OAAO9L,EAAUE,EAAU,aAAa,GAE5C,KAAKuK,GAAwBsB,2BACzB,OAAO,EAAY7L,EAAU,CACzBiM,iBAAiB,EACjBH,aAAc1N,EAAOsF,KAAKC,WAGlC,KAAK4G,GAAwBM,2BAC7B,KAAKN,GAAwByB,wBACzB,OAAO,EAAYhM,EAAU,CACzBiM,iBAAiB,EACjBH,kBAAcjM,IAGtB,QACI,OAAOG,EAEnB,EDzHA,SAAY2K,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,sEACH,CAhBD,CAAYA,KAAAA,GAAyB,KGkC9B,ICpCKuB,GDoCC,GAAsC,CAC/C/L,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GE5BA,SAASmM,GACpBhO,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA6D,CACzEC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAiC,GAAcA,MAGvC/B,EAAOrD,MACX,KAAK4P,GAA0B1E,oBAC3B,GAAI7H,EAAOsF,KAAM,CACP,MAA0BtF,EAAOsF,KAA/BC,EAAQ,WAAEyI,EAAS,YAG3B,OAAO,EAAYjM,IAAI,MAFIiM,EAAezI,EAAQ,IAAIyI,EAAczI,GAG1C,CAClBuC,eAAe,G,IAK3B,MAGJ,KAAKyE,GAA0BxE,sBAC3B,GAAI/H,EAAOsF,KAAM,CACP,MAA0BtF,EAAOsF,KAGvC,OAHQC,EAAQ,WAAEyI,EAAS,YAGpB,EAAYjM,IAAI,MAFIiM,EAAezI,EAAQ,IAAIyI,EAAczI,GAG1C,CAClBuC,eAAe,G,KAOnC,OAAO/F,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAqC,GAAcA,QAG3C0C,EAAOrD,MACX,KAAK4P,GAA0BvE,oBAC/B,KAAKuE,GAA0B1E,oBAC3B,OAAO,EAAYvK,EAAQ,CACvB2Q,qBAAiBxM,EACjByG,wBAAoBzG,IAG5B,KAAK8K,GAA0BpE,iBAC3B,IAAID,EAAqBlI,EAAOsF,MAAQtF,EAAOsF,KAAKC,SAEpD,GAAIvF,EAAOsF,KAAM,CACP,MAA0BtF,EAAOsF,KAA/BC,EAAQ,WAEhB2C,GAFkB8F,EAAS,aAESzI,EAAQ,IAAIyI,EAAczI,C,CAGlE,OAAO,EAAYjI,EAAQ,CACvB2Q,gBAAiBjO,EAAOG,QACxB+H,mBAAkB,IAI1B,KAAKqE,GAA0BnE,sBAC/B,KAAKmE,GAA0BxE,sBAC3B,OAAO,EAAYzK,EAAQ,CACvB+K,uBAAmB5G,EACnB6G,0BAAsB7G,IAG9B,KAAK8K,GAA0BhE,mBAC3B,IAAID,EAAuBtI,EAAOsF,MAAQtF,EAAOsF,KAAKC,SAEtD,GAAIvF,EAAOsF,KAAM,CACP,IAAY0I,EAAZ,EAA0BhO,EAAOsF,KAA/BC,EAAQ,WAEhB+C,GAFkB0F,EAAS,aAEWzI,EAAQ,IAAIyI,EAAczI,C,CAGpE,OAAO,EAAYjI,EAAQ,CACvB+K,kBAAmBrI,EAAOG,QAC1BmI,qBAAoB,IAI5B,KAAKiE,GAA0B2B,iBAC/B,KAAK3B,GAA0B4B,iBAC3B,OAAO,EAAY7Q,EAAQ,CACvB8Q,kBAAc3M,EACd4M,qBAAiB5M,IAGzB,KAAK8K,GAA0B+B,cAC3B,OAAO,EAAYhR,EAAQ,CACvB8Q,aAAcpO,EAAOG,QACrBkO,gBAAiBrO,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAKgH,GAA0BgC,kBAC/B,KAAKhC,GAA0BiC,kBAC3B,OAAO,EAAYlR,EAAQ,CACvBmR,mBAAehN,EACfiN,sBAAkBjN,IAG1B,KAAK8K,GAA0BoC,eAC3B,OAAO,EAAYrR,EAAQ,CACvBmR,cAAezO,EAAOG,QACtBuO,iBAAkB1O,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGrD,KAAKgH,GAA0BhD,yBAC/B,KAAKgD,GAA0B/C,0BAC3B,OAAO,EAAYlM,EAAQ,CACvBmM,4BAAwBhI,EACxBiI,+BAA2BjI,IAGnC,KAAK8K,GAA0B5C,wBAC3B,OAAO,EAAYrM,EAAQ,CACvBmM,uBAAwBzJ,EAAOG,QAC/BuJ,0BAA2B1J,EAAOsF,KAAKC,WAG/C,QACI,OAAOjI,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,GAAcA,UAG/C5B,EAAOrD,MACX,KAAK4P,GAA0BvE,oBAC3B,IAAIE,EAAqBlI,EAAOsF,MAAQtF,EAAOsF,KAAKC,SAEpD,GAAIvF,EAAOsF,KAAM,CACP,MAA0BtF,EAAOsF,KAA/BC,EAAQ,WAEhB2C,GAFkB8F,EAAS,aAESzI,EAAQ,IAAIyI,EAAczI,C,CAGlE,OAAO,EAAY3D,EAAU,CACzBgI,gBAAgB,EAChB1B,mBAAkB,IAI1B,KAAKqE,GAA0BpE,iBAC/B,KAAKoE,GAA0B1E,oBAC3B,OAAO,EAAYjG,EAAU,CACzBgI,gBAAgB,EAChB1B,wBAAoBzG,IAG5B,KAAK8K,GAA0BnE,sBAC3B,IAAIE,EAAuBtI,EAAOsF,MAAQtF,EAAOsF,KAAKC,SAEtD,GAAIvF,EAAOsF,KAAM,CACP,IAAY0I,EAAZ,EAA0BhO,EAAOsF,KAA/BC,EAAQ,WAEhB+C,GAFkB0F,EAAS,aAEWzI,EAAQ,IAAIyI,EAAczI,C,CAGpE,OAAO,EAAY3D,EAAU,CACzBiI,kBAAkB,EAClBvB,qBAAoB,IAI5B,KAAKiE,GAA0BhE,mBAC/B,KAAKgE,GAA0BxE,sBAC3B,OAAO,EAAYnG,EAAU,CACzBiI,kBAAkB,EAClBvB,0BAAsB7G,IAG9B,KAAK8K,GAA0B2B,iBAC3B,OAAO,EAAYtM,EAAU,CACzBgN,aAAa,EACbP,gBAAiBrO,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGpD,KAAKgH,GAA0B+B,cAC/B,KAAK/B,GAA0B4B,iBAC3B,OAAO,EAAYvM,EAAU,CACzBgN,aAAa,EACbP,qBAAiB5M,IAGzB,KAAK8K,GAA0BgC,kBAC3B,OAAO,EAAY3M,EAAU,CACzBiN,cAAc,EACdH,iBAAkB1O,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGrD,KAAKgH,GAA0BoC,eAC/B,KAAKpC,GAA0BiC,kBAC3B,OAAO,EAAY5M,EAAU,CACzBiN,cAAc,EACdH,sBAAkBjN,IAG1B,KAAK8K,GAA0BhD,yBAC3B,OAAO,EAAY3H,EAAU,CACzBqI,qBAAqB,EACrBP,0BAA2B1J,EAAOsF,KAAKC,WAG/C,KAAKgH,GAA0B/C,0BAC/B,KAAK+C,GAA0B5C,wBAC3B,OAAO,EAAY/H,EAAU,CACzBqI,qBAAqB,EACrBP,+BAA2BjI,IAGnC,QACI,OAAOG,EAEnB,EDrPA,SAAYkM,GACR,kEACH,CAFD,CAAYA,KAAAA,GAA2B,KEIhC,ICDKgB,GDCC,GAAgB,CACzB/M,KAAM,CAAC,GEMI,SAASgN,GACpBhP,EACAC,GAMA,YAPA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiE,CAC7EC,KAAM,IAGHK,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,YAHA,IAAA+B,IAAAA,EAAgC,GAAcA,MAGtC/B,EAAOrD,OACNmR,GAA4BkB,8BACtB,EAAYjN,EAAM/B,EAAOG,SAGzB4B,CAEnB,ED9BA,SAAY+M,GACR,wDACA,wDACA,kDAEA,0DACA,0DACA,mDACH,CARD,CAAYA,KAAAA,GAAoB,KEoBzB,ICrBKG,GDqBC,GAAgB,CACzBlN,KAAM,GACNzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEdA,SAASsN,GACpBnP,EACAC,GASA,YAVA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAiC,CAC7CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvCwF,KAAM,GACN1D,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,YAHA,IAAA+B,IAAAA,EAA4B,GAAcA,MAGlC/B,EAAOrD,OACNmS,GAAqBK,yBACf,EAAapN,EAAO/B,EAAOG,SAAWH,EAAOG,QAAQiP,oBAAuB,IAG5ErN,CAEnB,CAEA,SAAS,GACLuD,EACAtF,GAEA,OAAQA,EAAOrD,MACX,KAAKmS,GAAqBK,yBAC1B,KAAKL,GAAqBO,0BACtB,OAAO,EAAY/J,EAAMtF,EAAOsF,MAEpC,QACI,OAAOA,EAEnB,CAEA,SAAS,GACLhI,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA+B,GAAcA,QAGrC0C,EAAOrD,MACX,KAAKmS,GAAqBQ,yBAC1B,KAAKR,GAAqBK,yBACtB,OAAOzN,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKqN,GAAqBS,0BAC1B,KAAKT,GAAqBO,0BACtB,OAAO,EAAY/R,EAAQ,CACvBkS,iBAAa/N,EACbgO,sBAAkBhO,IAG1B,KAAKqN,GAAqBY,sBACtB,OAAOhO,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAK2O,GAAqBa,uBACtB,OAAO,EAAYrS,EAAQ,CACvBkS,YAAaxP,EAAOG,QACpBsP,iBAAkBzP,EAAOsF,KAAKsK,eAGtC,QACI,OAAOtS,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,GAAcA,UAGxC5B,EAAOrD,MACX,KAAKmS,GAAqBQ,yBACtB,OAAO5N,EAAUE,EAAU,aAAa,GAE5C,KAAKkN,GAAqBS,0BACtB,OAAO,EAAY3N,EAAU,CACzBiO,YAAY,EACZC,mBAAoB9P,EAAOsF,KAAKsK,eAGxC,KAAKd,GAAqBK,yBAC1B,KAAKL,GAAqBY,sBACtB,OAAOhO,EAAUE,EAAU,aAAa,GAE5C,KAAKkN,GAAqBO,0BAC1B,KAAKP,GAAqBa,uBACtB,OAAO,EAAY/N,EAAU,CACzBiO,YAAY,EACZC,wBAAoBrO,IAG5B,QACI,OAAOG,EAEnB,ED7GA,SAAYqN,GACR,oFACA,oFACA,8EAEA,yEACA,yEACA,mEAEA,2EACA,2EACA,qEAEA,yEACA,yEACA,mEAEA,+DACA,+DACA,yDAEA,sEACA,sEACA,gEAEA,+CACH,CA1BD,CAAYA,KAAAA,GAAwB,KEM7B,IAAM,GAAqC,CAC9ClN,KAAM,CAAC,GCAI,SAASgO,GACpBhQ,EACAC,G,MAEA,YAHA,IAAAD,IAAAA,EAAA,IAGKC,EAAOsF,MAAStF,EAAOsF,KAAKC,UAIjB,IAAAzD,iBAAqC,CACjDC,MAAM,IAAAD,kBAAe,KACjB,EAAC9B,EAAOsF,KAAKC,UAAW,G,KAIzBnD,CAAQrC,EAAOC,GATXD,CAUf,CAEA,SAAS,GAAYgC,EAAsB/B,GACvC,OAAQA,EAAOrD,MACX,KAAKsS,GAAyBe,iCAC1B,OAAOtO,EAAUK,EAAM,UAAkB/B,EAAOG,SAAWH,EAAOG,QAAQ8P,SAE9E,KAAKhB,GAAyBiB,kCAC1B,OAAOxO,EAAUK,EAAM,WAAmB/B,EAAOG,SAAWH,EAAOG,QAAQgQ,UAE/E,KAAKlB,GAAyBmB,4BAC1B,OAAO1O,EAAUK,EAAM,WAAY/B,EAAOG,SAE9C,KAAK8O,GAAyBoB,qBAC1B,OAAO,EAAYtO,EAAM/B,EAAOG,SAEpC,QACI,OAAO4B,EAEnB,CCnBO,ICtBKuO,GDsBC,GAAkC,CAC3ChT,OAAQ,CACJiT,0BAA2B,CAAC,EAC5BC,YAAa,CAAC,EACdhB,YAAa,CAAC,GAElB5N,SAAU,CACN6O,WAAY,CAAC,EACbC,yBAA0B,CAAC,EAC3Bb,WAAY,CAAC,IEnBN,SAASc,GACpB5Q,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsE,CAClFC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAK4B,EAAsBO,6BAC3B,KAAKP,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKR,EAAiBU,qBACtB,KAAKV,EAAiBW,sBAClB,OAAO,EAAa7C,EAAM/B,EAAOG,SAAWH,EAAOG,QAAQyQ,cAE/D,KAAKjK,GAAmBkK,yBACpB,OAAO,EAAa9O,EAAM,IAE9B,QACI,OAAOA,EAEnB,CAEA,SAAS,GACLzE,EACA0C,G,gBAEA,YAHA,IAAA1C,IAAAA,EAAiC,GAAcA,QAGvC0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACxB,KAAK4B,EAAsBO,6BAC3B,KAAKP,EAAsB2M,6BACvB,OAAOpP,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACxB,KAAKyB,EAAsB4M,0BACvB,OAAOrP,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKgE,EAAsB6M,4BAC3B,KAAK7M,EAAsBG,4BACvB,OAAO5C,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAK0C,EAAsB8M,yBACvB,OAAOvP,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,KAAKgE,EAAsBK,2BAC3B,KAAKL,EAAsB+M,2BACvB,OAAIlR,EAAOsF,KACA,EAAYhI,EAAQ,CACvBkT,aAAW,KACP,EAACxQ,EAAOsF,KAAK/B,SAAK9B,E,KAKvBnE,EAEX,KAAK6G,EAAsBgN,wBACvB,OAAInR,EAAOsF,KACA,EAAYhI,EAAQ,CACvBkT,aAAW,KACP,EAACxQ,EAAOsF,KAAK/B,IAAKvD,EAAOG,Q,KAK9B7C,EAEX,KAAK6G,EAAsBI,2BAC3B,KAAKJ,EAAsBiN,2BACvB,OAAIpR,EAAOsF,KACA,EAAYhI,EAAQ,CACvBkS,aAAW,KACP,EAACxP,EAAOsF,KAAK/B,SAAK9B,E,KAKvBnE,EAEX,KAAK6G,EAAsBkN,wBACvB,OAAIrR,EAAOsF,KACA,EAAYhI,EAAQ,CACvBkS,aAAW,KACP,EAACxP,EAAOsF,KAAK/B,IAAKvD,EAAOG,Q,KAK9B7C,EAEX,KAAK6G,EAAsBmN,8BAC3B,KAAKnN,EAAsBM,8BACvB,OAAIzE,EAAOsF,KACA,EAAYhI,EAAQ,CACvBiT,2BAAyB,KACrB,EAACvQ,EAAOsF,KAAK/B,SAAK9B,E,KAKvBnE,EAEX,KAAK6G,EAAsBoN,2BACvB,OAAIvR,EAAOsF,KACA,EAAYhI,EAAQ,CACvBiT,2BAAyB,KACrB,EAACvQ,EAAOsF,KAAK/B,IAAKvD,EAAOG,Q,KAK9B7C,EAEX,QACI,OAAOA,EAEnB,CAEA,SAAS,GACLsE,EACA5B,G,gBAEA,YAHA,IAAA4B,IAAAA,EAAqC,GAAcA,UAG3C5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKuC,EAAsB2M,6BACvB,OAAOpP,EAAUE,EAAU,4BAA4B,GAE3D,KAAKvC,EAAmBkD,sBACxB,KAAKlD,EAAmBqD,mBACpB,OAAOhB,EAAUE,EAAU,aAAa,GAE5C,KAAKuC,EAAsBO,6BAC3B,KAAKP,EAAsB4M,0BACvB,OAAOrP,EAAUE,EAAU,4BAA4B,GAE3D,KAAKuC,EAAsB6M,4BACvB,OAAOtP,EAAUE,EAAU,cAAc,GAE7C,KAAKuC,EAAsBG,4BAC3B,KAAKH,EAAsB8M,yBACvB,OAAOvP,EAAUE,EAAU,cAAc,GAE7C,KAAKuC,EAAsB+M,2BACvB,OAAIlR,EAAOsF,KACA,EAAY1D,EAAU,CACzB6O,YAAU,KACN,EAACzQ,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBK,2BAC3B,KAAKL,EAAsBgN,wBACvB,OAAInR,EAAOsF,KACA,EAAY1D,EAAU,CACzB6O,YAAU,KACN,EAACzQ,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBiN,2BACvB,OAAIpR,EAAOsF,KACA,EAAY1D,EAAU,CACzBiO,YAAU,KACN,EAAC7P,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBI,2BAC3B,KAAKJ,EAAsBkN,wBACvB,OAAIrR,EAAOsF,KACA,EAAY1D,EAAU,CACzBiO,YAAU,KACN,EAAC7P,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBmN,8BACvB,OAAItR,EAAOsF,KACA,EAAY1D,EAAU,CACzB8O,0BAAwB,KACpB,EAAC1Q,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,KAAKuC,EAAsBM,8BAC3B,KAAKN,EAAsBoN,2BACvB,OAAIvR,EAAOsF,KACA,EAAY1D,EAAU,CACzB8O,0BAAwB,KACpB,EAAC1Q,EAAOsF,KAAK/B,KAAK,E,KAKvB3B,EAEX,QACI,OAAOA,EAEnB,CCnPe,SAAS4P,GACpB/U,EACAgV,GAEA,IAAMC,EAAoC,CAAC,EAa3C,OAXA/V,OAAOwF,KAAK1E,GAAQkV,SAAQ,SAAClW,GACzB,IAAMa,EAAQG,EAAOhB,GACfmW,EAAYH,EAAYA,EAAM,IAAIhW,EAAQA,EAE3B,iBAAVa,EACPX,OAAOkW,OAAOH,EAAWF,GAAclV,EAAOsV,IAE9CF,EAAUE,GAAatV,CAE/B,IAEOoV,CACX,CCrBe,SAASI,GAAqBrV,GACzC,IAGMsV,EAHOpW,OAAOwF,KAAK1E,GACDuV,OAEOxU,QAC3B,SAACyU,EAAUC,G,MAAY,OAAC,gCACjBD,KAAQ,MACVC,GAAUzV,EAAOyV,GAAQ,GAFP,GAIvB,CAAC,GAGL,OAAOH,CACX,EHTA,SAAYzB,GACR,6DACA,6DACA,sDACH,CAJD,CAAYA,KAAAA,GAAsB,KIY3B,ICZK6B,GDYC,GAAmC,CAC5C7U,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAASwQ,GACpBrS,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAmC,CAC/CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,GAAQA,EAAOrD,OACN2T,GAAuB+B,2BAgBxB,OAAOtQ,EAfP,GAAI/B,EAAOsF,KAAM,CACb,IAKMgN,EAAsBR,GADNN,GAJF,CAChBe,cAAevS,EAAOsF,KAAKiN,cAC3BC,WAAYxS,EAAOsF,KAAKkN,cAM5B,OAAO9Q,EAAUK,EAFC0Q,KAAK,GAAGC,KAAKC,UAAUL,IAEPtS,EAAOG,Q,CAQzD,CAEA,SAAS,GAAc7C,EAAwD0C,GAC3E,YADmB,IAAA1C,IAAAA,EAAkC,GAAcA,QAC3D0C,EAAOrD,MACX,KAAK2T,GAAuBsC,2BAC5B,KAAKtC,GAAuB+B,2BACxB,OAAO3Q,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK6O,GAAuBuC,wBACxB,OAAOnR,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAsC,GAAcA,UAG5C5B,EAAOrD,MACX,KAAK2T,GAAuBsC,2BACxB,OAAOlR,EAAUE,EAAU,aAAa,GAE5C,KAAK0O,GAAuB+B,2BAC5B,KAAK/B,GAAuBuC,wBACxB,OAAOnR,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,ED5EA,SAAYuQ,GACR,qEACA,qEACA,8DACH,CAJD,CAAYA,KAAAA,GAAyB,KEY9B,ICdKW,GDcC,GAAsC,CAC/CxV,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAASmR,GACpBhT,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAsC,CAClDC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNwV,GAA0Ba,+BACpB,EAAajR,EAAM/B,EAAOG,SAG1B4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAqC,GAAcA,QAG3C0C,EAAOrD,MACX,KAAKwV,GAA0Bc,+BAC/B,KAAKd,GAA0Ba,+BAC3B,OAAOtR,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK0Q,GAA0Be,4BAC3B,OAAOxR,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAyC,GAAcA,UAG/C5B,EAAOrD,MACX,KAAKwV,GAA0Bc,+BAC3B,OAAOvR,EAAUE,EAAU,aAAa,GAE5C,KAAKuQ,GAA0Ba,+BAC/B,KAAKb,GAA0Be,4BAC3B,OAAOxR,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDrEA,SAAYkR,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,uEACH,CAhBD,CAAYA,KAAAA,GAA0B,KEoC/B,IClCKK,GDkCC,GAAuC,CAChDpR,KAAM,CAAC,EACPzE,OAAQ,CAAC,EACTsE,SAAU,CAAC,GE5BA,SAASwR,GACpBrT,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+D,CAC3EC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,G,QAEA,YAHA,IAAA+B,IAAAA,EAAkC,GAAcA,MAGxC/B,EAAOrD,MACX,KAAKmW,GAA2BjL,oBAC5B,OAAO,EAAY9F,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCuC,eAAe,G,IAI3B,KAAKgL,GAA2B/K,sBAC5B,OAAO,EAAYhG,IAAI,MAClB/B,EAAOsF,MAAQtF,EAAOsF,KAAKC,UAAW,CACnCuC,eAAe,G,IAK/B,OAAO/F,CACX,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAsC,GAAcA,QAG5C0C,EAAOrD,MACX,KAAKmW,GAA2B9K,oBAChC,KAAK8K,GAA2BjL,oBAC5B,OAAO,EAAYvK,EAAQ,CACvB2Q,qBAAiBxM,EACjByG,wBAAoBzG,IAG5B,KAAKqR,GAA2B3K,iBAC5B,OAAO,EAAY7K,EAAQ,CACvB2Q,gBAAiBjO,EAAOG,QACxB+H,mBAAoBlI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAKuN,GAA2B1K,sBAChC,KAAK0K,GAA2B/K,sBAC5B,OAAO,EAAYzK,EAAQ,CACvB+K,uBAAmB5G,EACnB6G,0BAAsB7G,IAG9B,KAAKqR,GAA2BvK,mBAC5B,OAAO,EAAYjL,EAAQ,CACvB+K,kBAAmBrI,EAAOG,QAC1BmI,qBAAsBtI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAKuN,GAA2BO,uBAChC,KAAKP,GAA2BQ,uBAC5B,OAAO,EAAYhW,EAAQ,CACvBiW,wBAAoB9R,EACpB+R,2BAAuB/R,IAG/B,KAAKqR,GAA2BW,oBAC5B,OAAO,EAAYnW,EAAQ,CACvBiW,mBAAoBvT,EAAOG,QAC3BqT,sBAAuBxT,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG1D,KAAKuN,GAA2BY,sBAChC,KAAKZ,GAA2Ba,sBAC5B,OAAO,EAAYrW,EAAQ,CACvBsW,uBAAmBnS,EACnBoS,0BAAsBpS,IAG9B,KAAKqR,GAA2BgB,mBAC5B,OAAO,EAAYxW,EAAQ,CACvBsW,kBAAmB5T,EAAOG,QAC1B0T,qBAAsB7T,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAKuN,GAA2BvJ,yBAChC,KAAKuJ,GAA2BtJ,0BAC5B,OAAO,EAAYlM,EAAQ,CACvBmM,4BAAwBhI,EACxBiI,+BAA2BjI,IAGnC,KAAKqR,GAA2BnJ,wBAC5B,OAAO,EAAYrM,EAAQ,CACvBmM,uBAAwBzJ,EAAOG,QAC/BuJ,0BAA2B1J,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG9D,QACI,OAAOjI,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAA0C,GAAcA,UAGhD5B,EAAOrD,MACX,KAAKmW,GAA2B9K,oBAC5B,OAAO,EAAYpG,EAAU,CACzBgI,gBAAgB,EAChB1B,mBAAoBlI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGvD,KAAKuN,GAA2B3K,iBAChC,KAAK2K,GAA2BjL,oBAC5B,OAAO,EAAYjG,EAAU,CACzBgI,gBAAgB,EAChB1B,wBAAoBzG,IAG5B,KAAKqR,GAA2B1K,sBAC5B,OAAO,EAAYxG,EAAU,CACzBiI,kBAAkB,EAClBvB,qBAAsBtI,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAKuN,GAA2BvK,mBAChC,KAAKuK,GAA2B/K,sBAC5B,OAAO,EAAYnG,EAAU,CACzBiI,kBAAkB,EAClBvB,0BAAsB7G,IAG9B,KAAKqR,GAA2BO,uBAC5B,OAAO,EAAYzR,EAAU,CACzBmS,mBAAmB,EACnBP,sBAAuBxT,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG1D,KAAKuN,GAA2BW,oBAChC,KAAKX,GAA2BQ,uBAC5B,OAAO,EAAY1R,EAAU,CACzBmS,mBAAmB,EACnBP,2BAAuB/R,IAG/B,KAAKqR,GAA2BY,sBAC5B,OAAO,EAAY9R,EAAU,CACzBoS,mBAAmB,EACnBH,qBAAsB7T,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAGzD,KAAKuN,GAA2BgB,mBAChC,KAAKhB,GAA2Ba,sBAC5B,OAAO,EAAY/R,EAAU,CACzBoS,mBAAmB,EACnBH,0BAAsBpS,IAG9B,KAAKqR,GAA2BvJ,yBAC5B,OAAO,EAAY3H,EAAU,CACzBqI,qBAAqB,EACrBP,0BAA2B1J,EAAOsF,MAAQtF,EAAOsF,KAAKC,WAG9D,KAAKuN,GAA2BtJ,0BAChC,KAAKsJ,GAA2BnJ,wBAC5B,OAAO,EAAY/H,EAAU,CACzBqI,qBAAqB,EACrBP,+BAA2BjI,IAGnC,QACI,OAAOG,EAEnB,EDjMA,SAAYuR,GACR,yDACA,yDACA,kDACH,CAJD,CAAYA,KAAAA,GAAqB,KEY1B,ICTKc,GDSC,GAAkC,CAC3C3W,OAAQ,CAAC,EACTsE,SAAU,CAAC,GELA,SAASsS,GACpBnU,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkC,CAC9CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAEA,OAAQA,EAAOrD,OACNwW,GAAsBgB,yBAChB,EAAYpS,EAAM/B,EAAOG,SAGzB4B,CAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAiC,GAAcA,QAGvC0C,EAAOrD,MACX,KAAKwW,GAAsBiB,yBAC3B,KAAKjB,GAAsBgB,yBACvB,OAAOzS,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAK0R,GAAsBkB,sBACvB,OAAO3S,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAqC,GAAcA,UAG3C5B,EAAOrD,MACX,KAAKwW,GAAsBiB,yBACvB,OAAO1S,EAAUE,EAAU,aAAa,GAE5C,KAAKuR,GAAsBkB,sBAC3B,KAAKlB,GAAsBgB,yBACvB,OAAOzS,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,EAEnB,EDhEA,SAAYqS,GACR,2DACA,2DACA,oDACH,CAJD,CAAYA,KAAAA,GAAqB,KEIjC,IAAM,GAAkC,CACpC3W,OAAQ,CAAC,EACTsE,SAAU,CAAC,GAGA,SAAS0S,GACpBvU,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAkC,CAC9CxE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL1C,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAiC,GAAcA,QAGvC0C,EAAOrD,MACX,KAAKsX,GAAsBM,0BAC3B,KAAKN,GAAsBO,0BACvB,OAAO9S,EAAUpE,EAAQ,kBAAcmE,GAE3C,KAAKwS,GAAsBQ,uBACvB,OAAO/S,EAAUpE,EAAQ,aAAc0C,EAAOG,SAElD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAqC,GAAcA,UAG3C5B,EAAOrD,MACX,KAAKsX,GAAsBM,0BACvB,OAAO7S,EAAUE,EAAU,cAAc,GAE7C,KAAKqS,GAAsBO,0BAC3B,KAAKP,GAAsBQ,uBACvB,OAAO/S,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,EAEnB,CC/CO,ICTK8S,GDSC,GAAoC,CAC7CpX,OAAQ,CAAC,EACTsE,SAAU,CAAC,GEHA,SAAS+S,GACpB5U,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAAoC,CAChDxE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL1C,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAAmC,GAAcA,QAGzC0C,EAAOrD,MACX,KAAK4C,EAAwBsD,6BAC7B,KAAKtD,EAAwBuD,6BACzB,OAAOpB,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKlC,EAAwByD,0BACzB,OAAOtB,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAuC,GAAcA,UAG7C5B,EAAOrD,MACX,KAAK4C,EAAwBsD,6BACzB,OAAOnB,EAAUE,EAAU,cAAc,GAE7C,KAAKrC,EAAwByD,0BAC7B,KAAKzD,EAAwBuD,6BACzB,OAAOpB,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,EAEnB,EDpDA,SAAY8S,GACR,uDACA,6DACA,6DACA,sEACA,sEACA,gEACA,uDACA,uDACA,gDACH,CAVD,CAAYA,KAAAA,GAAwB,KEsB7B,IAAM,GAA+B,CACxCpX,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCHA,SAASgT,GACpB7U,EACAC,GAQA,YATA,IAAAD,IAAAA,EAAA,KAGgB,IAAA+B,iBAA+B,CAC3CC,KAAM,GACNzE,QAAQ,IAAA2E,iBAAgB,GAAenC,GACvC8B,SAAU,IAGPQ,CAAQrC,EAAOC,EAC1B,CAEA,SAAS,GACL+B,EACA/B,GAUA,OAAQA,EAAOrD,MACX,KAAK0C,EAAmBkD,sBACxB,KAAKlD,EAAmBwV,wBACxB,KAAKZ,GAAsBO,0BAC3B,KAAKhV,EAAyB6C,8BAC9B,KAAK4B,EAAiBU,qBACtB,KAAKV,EAAiBW,sBACtB,KAAKT,EAAsBG,4BAC3B,KAAKH,EAAsBK,2BAC3B,KAAKL,EAAsBI,2BAC3B,KAAKJ,EAAsBM,8BAC3B,KAAKN,EAAsBO,6BAC3B,KAAKR,EAA0BW,8BAC/B,KAAKX,EAA0BY,+BAC/B,KAAK4P,GAAyBI,wBAC1B,OAAO,EACH/S,GACA,IAAAuJ,MAAKtL,EAAOG,QAAS,CACjB,iBACA,OACA,eACA,WACA,UACA,sBAIZ,KAAK4F,GAAgByF,qBACjB,OAAO9J,EAAUK,EAAM,UAAW/B,EAAOG,SAAWH,EAAOG,QAAQuL,MAAMqJ,SAE7E,QACI,OAAOhT,EAEnB,CAEA,SAAS,GACLzE,EACA0C,GAEA,YAHA,IAAA1C,IAAAA,EAA8B,GAAcA,QAGpC0C,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACxB,KAAKpD,EAAmBkD,sBACpB,OAAOb,EAAUpE,EAAQ,iBAAamE,GAE1C,KAAKpC,EAAmBqD,mBACpB,OAAOhB,EAAUpE,EAAQ,YAAa0C,EAAOG,SAEjD,KAAKd,EAAmB2V,wBACxB,KAAK3V,EAAmBwV,wBACpB,OAAOnT,EAAUpE,EAAQ,mBAAemE,GAE5C,KAAKpC,EAAmB4V,qBACpB,OAAOvT,EAAUpE,EAAQ,cAAe0C,EAAOG,SAEnD,QACI,OAAO7C,EAEnB,CAEA,SAAS,GACLsE,EACA5B,GAEA,YAHA,IAAA4B,IAAAA,EAAkC,GAAcA,UAGxC5B,EAAOrD,MACX,KAAK0C,EAAmBoD,sBACpB,OAAOf,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmBqD,mBACxB,KAAKrD,EAAmBkD,sBACpB,OAAOb,EAAUE,EAAU,aAAa,GAE5C,KAAKvC,EAAmB2V,wBACpB,OAAOtT,EAAUE,EAAU,cAAc,GAE7C,KAAKvC,EAAmB4V,qBACxB,KAAK5V,EAAmBwV,wBACpB,OAAOnT,EAAUE,EAAU,cAAc,GAE7C,KAAK8S,GAAyBxG,iBAC1B,OAAOxM,EAAUE,EAAU,wBAAwB,GAEvD,KAAK8S,GAAyBpG,cAC9B,KAAKoG,GAAyBvG,iBAC1B,OAAOzM,EAAUE,EAAU,wBAAwB,GAEvD,QACI,OAAOA,EAEnB,CC1IA,MAAM,GAA+BrF,QAAQ,wBCE7C,IAAY2Y,IAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,wEACA,8DACA,oDACA,kDACA,uDACH,CAnBD,CAAYA,KAAAA,GAAoB,K,SA0BhC,YACI,WAAmBC,GAAnB,MACI,YAOR,SAAyBxY,GACrB,OAAQA,GACJ,KAAKuY,GAAqBE,sBACtB,MAAO,iEAEX,KAAKF,GAAqBG,YACtB,MAAO,sDAEX,KAAKH,GAAqBI,oBACtB,MAAO,8DAEX,KAAKJ,GAAqBK,gBACtB,MAAO,0DAEX,KAAKL,GAAqBM,gBACtB,MAAO,0DAEX,KAAKN,GAAqBO,sBAC1B,KAAKP,GAAqBQ,mBACtB,MAAO,+DAEX,KAAKR,GAAqBS,aACtB,MAAO,uDAEX,KAAKT,GAAqBU,eACtB,MAAO,0EAEX,KAAKV,GAAqBW,eACtB,MAAO,yDAEX,KAAKX,GAAqBY,oBACtB,MAAO,+EAEX,KAAKZ,GAAqBa,qBACtB,MAAO,2FAEX,KAAKb,GAAqBc,+BACtB,MAAO,sEAEX,KAAKd,GAAqBe,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CApDcC,CAAgBf,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAKzY,KAAO,mBACZ,EAAKC,KAAO,e,CAChB,CACJ,OAP8C,oBAO9C,EAPA,CAA8C,GC5BxC,GAA+BJ,QAAQ,YCS7C,ICAI4Z,GDAgC,kBCEzB,W,IAAE,sDACL,IAAMC,EAAWC,EAAKC,MAItB,OAAQH,GAAe,kCAAIE,EAAM,Y,IAAC,sDAG9B,IAAM5Y,EAAS2Y,EAAQ,aAAIG,GAE3B,MAAsB,mBAAX9Y,GACA,KAAA+Y,SAAQ/Y,GAGZA,CACX,IACH,GAnBU,IACX0Y,GCTW,SAASM,GAASna,EAAUoa,GACvC,GAAIpa,QACA,MAAMoa,EAAeA,IAAiB,IAAI5Z,MAAM,qCAGpD,OAAOR,CACX,CCDe,SAASqa,GAAoCC,GACxD,OAkBJ,SACIA,GAGA,IAAMC,EAAQlb,OAAOmb,OAAOF,GAgB5B,OAGJ,SAA6BA,EAAgBG,GAGzC,IAFA,IAAI9a,EAAYN,OAAOqb,eAAeJ,GAE/B3a,GACH8a,EAAS9a,GAETA,EAAYN,OAAOqb,eAAe/a,EAE1C,CAzBIgb,CAAoBL,GAAQ,SAAC3a,GACzBN,OAAOub,oBAAoBjb,GAAW0V,SAAQ,SAACjV,GAE9B,gBAATA,GACuB,mBAAhBma,EAAMna,IACM,MAAnBA,EAAKya,OAAO,KAKhBN,EAAMna,GAhCV,SAACka,EAAQla,GACL,kB,UAAC,kDACG,WAAA0a,aAAW,EAAAR,EAAOla,IAAMP,KAAI,8BAACya,GAAWP,IAAxC,CADJ,CA+BcgB,CAAKT,EAAiCla,GACxD,GACJ,IAEOma,CACX,CAvCWS,CACHV,EAKR,CCZO,IAAM,GAAS,sBCATW,GAAc,cACdC,GAAW,WC4KxB,SAvKmD,CAC/C,qBAAsB,CAClBC,SAAU,SACVC,OAAQ,eAEZ,iBAAkB,CACdD,SAAU,UACVC,OAAQ,UAEZ,iBAAkB,CACdD,SAAU,UACVC,OAAQ,UAEZ,eAAgB,CACZD,SAAU,UACVC,OAAQ,QAEZ,gBAAiB,CACbD,SAAU,UACVC,OAAQ,SAEZ,0BAA2B,CACvBD,SAAU,UACVC,OAAQ,mBAEZ,yBAA0B,CACtBD,SAAU,UACVC,OAAQ,kBAEZ,kBAAmB,CACfD,SAAU,UACVC,OAAQ,WAEZC,SAAU,CACNF,SAAU,WACVC,OAAQ,eAEZE,UAAW,CACPH,SAAU,YACVC,OAAQ,eAEZG,gBAAiB,CACbJ,SAAU,YACVC,OAAQ,UAEZI,aAAc,CACVL,SAAU,YACVC,OAAQ,OAEZK,aAAc,CACVN,SAAU,eACVC,OAAQ,eAEZM,OAAQ,CACJP,SAAU,SACVC,OAAQ,eAEZO,YAAa,CACTR,SAAU,cACVC,OAAQ,eAEZ,0BAA2B,CACvBD,SAAU,cACVC,OAAQ,eAEZ,mBAAoB,CAChBD,SAAU,cACVC,OAAQ,QAEZQ,QAAS,CACLT,SAAU,UACVC,OAAQ,eAEZS,OAAQ,CACJV,SAAU,SACVC,OAAQ,eAEZ,gBAAiB,CACbD,SAAU,WACVC,OAAQ,QAEZ,iBAAkB,CACdD,SAAU,YACVC,OAAQ,QAEZU,YAAa,CACTX,SAAU,cACVC,OAAQ,eAEZW,cAAe,CACXZ,SAAU,gBACVC,OAAQ,eAEZY,IAAK,CACDb,SAAU,MACVC,OAAQ,eAEZa,SAAU,CACNd,SAAU,WACVC,OAAQ,eAEZc,WAAY,CACRf,SAAU,aACVC,OAAQ,eAEZ,6BAA8B,CAC1BD,SAAU,iBACVC,OAAQ,eAEZ,qBAAsB,CAClBD,SAAU,iBACVC,OAAQ,OAEZ,mCAAoC,CAChCD,SAAU,iBACVC,OAAQ,qBAEZe,QAAS,CACLhB,SAAU,UACVC,OAAQ,eAEZgB,UAAW,CACPjB,SAAU,YACVC,OAAQ,eAEZiB,KAAM,CACFlB,SAAU,OACVC,OAAQ,eAEZ,0BAA2B,CACvBD,SAAU,cACVC,OAAQ,eAEZkB,aAAc,CACVnB,SAAU,eACVC,OAAQ,eAEZmB,QAAS,CACLpB,SAAU,UACVC,OAAQ,eAEZoB,SAAU,CACNrB,SAAU,WACVC,OAAQ,eAEZqB,eAAgB,CACZtB,SAAU,iBACVC,OAAQ,eAEZsB,SAAU,CACNvB,SAAU,WACVC,OAAQ,eAEZuB,0BAA2B,CACvBxB,SAAU,iBACVC,OAAQ,eAEZwB,eAAgB,CACZzB,SAAU,iBACVC,OAAQ,UAEZyB,aAAc,CACV1B,SAAU,eACVC,OAAQ,gBC9JhB,SAAS0B,GAAUC,GACf,OAAO,IAAAtM,QACH,CACIuM,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBC,QAASH,EAAQG,QACjBC,SAAUJ,EAAQI,SAClBC,SAAUL,EAAQK,SAClBC,KAAMN,EAAQM,KACdC,gBAAiBP,EAAQO,gBACzBC,YAAaR,EAAQQ,YACrBC,WAAYT,EAAQS,WACpBC,MAAOV,EAAQU,MACfC,aAAcX,EAAQW,cAE1B,EAAAC,SAER,CCXO,IAAM,GAAkC,CAC3C3c,OAAQ,CAAC,EACTsE,SAAU,CAAC,GCsBR,SAASsY,KACZ,ICnBMC,EAKAC,EAUAC,EAKAC,EAKAC,EAKA9J,EAKA+J,EAKAC,EC3CAC,EAKA9Q,EAcA9B,EAqBA+B,EAcA8Q,EAYAC,ECnEAC,EAKAC,EAKAC,EAKAC,EAKAC,EClBAC,EAKAC,EAOAC,EAKAC,EAKAC,EAKAC,EC7BAC,EAKAC,ECNAC,ECCAC,EAWAC,EAUAC,EAaAC,ECnCAC,ECmBAC,EASAC,EAaAC,EAYAC,EAyBAC,EAOAC,EAmBAC,EAOAC,EASAC,EAOAC,EAMAC,EAUAC,EAUAC,EC3JAC,EAKAC,EAKAC,EVgBAC,ICnBA7C,EAAoB,IACtB,SAACpa,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRqY,EAA2B,GAC7BD,GACA,SAACA,GAAsB,kBACnB,OAAO1D,GACH0D,KACA,WAAM,WAAI,GAAiBjF,GAAqBE,sBAA1C,GAEd,CALuB,IAQrBiF,EAAiB,IACnB,SAACta,GAA+B,OAAAA,EAAMzC,OAAOkT,WAAb,IAChC,SAAC9S,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT4c,EAA0B,IAC5B,SAACva,GAA+B,OAAAA,EAAMzC,OAAO2f,oBAAb,IAChC,SAACvf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT6c,EAAe,IACjB,SAACxa,GAA+B,OAAAA,EAAMzC,OAAO4f,SAAb,IAChC,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+S,EAAa,IACf,SAAC1Q,GAA+B,QAAEA,EAAM6B,SAAS6O,UAAjB,IAChC,SAACrT,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGVod,EAAsB,IACxB,SAACza,GAA+B,QAAEA,EAAM6B,SAAS4Y,mBAAjB,IAChC,SAACpd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGVqd,EAAY,IACd,SAAC1a,GAA+B,QAAEA,EAAM6B,SAAS6Y,SAAjB,IAChC,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,GACR,CACHoa,kBAAmBA,EAAkBpa,GACrCqa,yBAA0BA,EAAyBra,GACnDsa,eAAgBA,EAAeta,GAC/Bua,wBAAyBA,EAAwBva,GACjDwa,aAAcA,EAAaxa,GAC3B0Q,WAAYA,EAAW1Q,GACvBya,oBAAqBA,EAAoBza,GACzC0a,UAAWA,EAAU1a,GAE7B,KDpCMqd,GWzBH,WACH,IAAMC,EAAU,IACZ,SAACtd,GAAqB,OAAAA,EAAMgC,IAAN,IACtB,SAACgD,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRuY,EAAiB,GAAeD,GAAS,SAACA,GAAY,kBACxD,OAAO5G,GAAM4G,KAAW,WAAM,WAAI,GAAiBnI,GAAqBG,YAA1C,GAClC,CAF4D,IAItDkF,EAAe,IACjB,SAACxa,GAAqB,OAAAA,EAAMzC,OAAO4f,SAAb,IACtB,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAAqB,QAAEA,EAAM6B,SAAS6Y,SAAjB,IACtB,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,GACR,CACHsd,QAASA,EAAQtd,GACjBud,eAAgBA,EAAevd,GAC/Bwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GACJ,CXH+Bwd,GACrBC,IExBA9C,EAAW,IACb,SAAC3a,GAA+B,OAAAA,CAAA,IAChC,SAACA,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT6J,EAAiB,IACnB,SAAC7J,GAA+B,OAAAA,EAAM6B,QAAN,IAChC,SAACA,GACG,YAAA4U,UAAQ,SAACjR,GACL,GAAIA,EAAU,CACV,IAAMmS,EAAS9V,EAAS2D,GAExB,OAA6C,KAArCmS,GAAUA,EAAO9N,e,CAG7B,OAAO,IAAA6T,MAAK7b,EAAU,CAAEgI,gBAAgB,GAC5C,GARA,IAWF9B,EAAgB,IAClB,SAAC/H,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAACA,GACG,YAAAyU,UAAQ,SAACjR,EAAoCE,GACzC,IAAMiS,EAAS3V,EAAKwD,GAEpB,QAAKmS,IAIAjS,GAOgD,IAA9CiS,EAAOxS,sBAAsBO,IANzB,IAAAgY,MACH/F,EAAOxS,uBACP,SAAC4C,GAAkB,OAAkB,IAAlBA,CAAA,IAK/B,GAfA,IAkBF+B,EAAmB,IACrB,SAAC9J,GAA+B,OAAAA,EAAM6B,QAAN,IAChC,SAACA,GACG,YAAA4U,UAAQ,SAACjR,GACL,GAAIA,EAAU,CACV,IAAMmS,EAAS9V,EAAS2D,GAExB,OAA+C,KAAvCmS,GAAUA,EAAO7N,iB,CAG7B,OAAO,IAAA4T,MAAK7b,EAAU,CAAEiI,kBAAkB,GAC9C,GARA,IAWF8Q,EAAqB,IACvB,SAAC5a,GAA+B,OAAAA,EAAMzC,MAAN,IAChC,SAACA,GACG,YAAAkZ,UAAQ,SAACjR,GACL,IAAMmS,EAASnS,EACTjI,EAAOiI,IACP,IAAAmY,OAAK,IAAAC,QAAOrgB,IAAS,SAACoa,GAAW,SAAGA,IAAUA,EAAOzJ,gBAApB,IAEvC,OAAOyJ,GAAUA,EAAOzJ,eAC5B,GANA,IASF2M,EAAuB,IACzB,SAAC7a,GAA+B,OAAAA,EAAMzC,MAAN,IAChC,SAACA,GACG,YAAAkZ,UAAQ,SAACjR,GACL,IAAMmS,EAASnS,EACTjI,EAAOiI,IACP,IAAAmY,OAAK,IAAAC,QAAOrgB,IAAS,SAACoa,GAAW,SAAGA,IAAUA,EAAOrP,kBAApB,IAEvC,OAAOqP,GAAUA,EAAOrP,iBAC5B,GANA,KASD,KAAA8U,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,GACR,CACH2a,SAAUA,EAAS3a,GACnB6J,eAAgBA,EAAe7J,GAC/B+H,cAAeA,EAAc/H,GAC7B8J,iBAAkBA,EAAiB9J,GACnC4a,mBAAoBA,EAAmB5a,GACvC6a,qBAAsBA,EAAqB7a,GAEnD,KF9DM6d,GYZH,WACH,IAAMC,EAAY,IACd,SAAC9d,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR+b,EAAmB,IACrB,SAAC/d,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACA,GAAS,gBAACgc,GACP,GAAKhc,EAAL,CAIQ,IAAAic,EAAkBjc,EAAKkc,QAAO,cAEtC,GAAKD,EAIL,YAAsBvc,IAAfsc,EACDC,EAAchd,QAAO,SAAC,G,IAAErE,EAAI,OAAO,OAAAohB,IAAephB,CAAf,IACnCqhB,C,CACV,CAdU,IAiBRE,EAAiB,IACnB,SAACne,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACoc,EAAgB,G,IAAEC,EAAS,YAAmC,OAAAA,GAAaA,EAAUrc,IAAvB,IAC/D,SAACA,EAAMsc,GAAe,kBAClB,OAAAtc,GAAQsc,GACF,gCACOtc,EAAKuc,aAAW,CACnBD,WAAU,SAEd5c,CALN,CADkB,IASpB8c,EAAwB,GAAeL,GAAgB,SAACA,GAAmB,kBAC7E,OAAOzH,GACHyH,KACA,WAAM,WAAI,GAAiBhJ,GAAqBO,sBAA1C,GAEd,CALiF,IAO3E+I,EAAmB,IACrB,SAACze,GAAuB,OAAAA,EAAMgC,MAAQhC,EAAMgC,KAAKkc,OAAzB,IACxB,SAAClc,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR0c,EAAoB,IACtB,SAAC1e,GAAuB,OAAAA,EAAMuF,MAAQvF,EAAMuF,KAAKoZ,cAAzB,IACxB,SAAC3c,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR4c,EAAU,IACZ,SAAC5e,GAAkB,aAAe,QAAf,EAAKA,EAAMuF,YAAI,eAAEsZ,IAAI,IACxC,SAAC7c,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR8c,EAAY,IACd,SAAC9e,GAAkB,aAAe,QAAf,EAAKA,EAAMuF,YAAI,eAAEwZ,MAAM,IAC1C,SAAC/c,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRgd,EAAgC,IAClC,SAAChf,GAAuB,OAAAA,EAAMuF,MAAQvF,EAAMuF,KAAK0Z,0BAAzB,IACxB,SAACjd,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRwY,EAAe,IACjB,SAACxa,GAAuB,OAAAA,EAAMzC,OAAO4f,SAAb,IACxB,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAAuB,QAAEA,EAAM6B,SAAS6Y,SAAjB,IACxB,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aACH,SAACpd,EAAoCqe,GACjC,YADH,IAAAre,IAAAA,EAAA,IACU,CACH8d,UAAWA,EAAU9d,GACrB+d,iBAAkBA,EAAiB/d,GACnCme,eAAgBA,EAAene,EAAO,CAAEqe,UAAS,IACjDG,sBAAuBA,EAAsBxe,EAAO,CAAEqe,UAAS,IAC/DI,iBAAkBA,EAAiBze,GACnC0e,kBAAmBA,EAAkB1e,GACrC4e,QAASA,EAAQ5e,GACjB8e,UAAWA,EAAU9e,GACrBgf,8BAA+BA,EAA8Bhf,GAC7Dwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GAER,CZpFiCkf,GACvBC,Ga/BH,WACH,IAAMC,EAAe,IACjB,SAACpf,GAAwB,OAAAA,EAAMgC,IAAN,IACzB,SAACqd,GAAc,kBAAM,OAAAA,CAAA,CAAN,IAGb7E,EAAe,IACjB,SAACxa,GAAwB,OAAAA,EAAMzC,OAAO4f,SAAb,IACzB,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAAwB,QAAEA,EAAM6B,SAAS6Y,SAAjB,IACzB,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHof,aAAcA,EAAapf,GAC3Bwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GACJ,CbQkCsf,GACxBC,IG5BAzE,EAAa,IACf,SAAC9a,GAAuB,OAAAA,EAAMgC,IAAN,IACxB,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR+Y,EAAiB,IACnB,SAAC/a,GAAuB,OAAAA,EAAMzC,OAAOiiB,iBAAb,IACxB,SAAC7hB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTqd,EAAgB,IAClB,SAAChb,GAAuB,OAAAA,EAAMzC,OAAOkiB,gBAAb,IACxB,SAAC9hB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTsd,EAAa,IACf,SAACjb,GAAuB,QAAEA,EAAM6B,SAAS6d,gBAAjB,IACxB,SAACriB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGV6d,EAAa,IACf,SAAClb,GAAuB,QAAEA,EAAM6B,SAAS8d,gBAAjB,IACxB,SAACtiB,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH8a,WAAYA,EAAW9a,GACvB+a,eAAgBA,EAAe/a,GAC/Bgb,cAAeA,EAAchb,GAC7Bib,WAAYA,EAAWjb,GACvBkb,WAAYA,EAAWlb,GAE/B,KHJM4f,II3BAzE,EAAc,IAChB,SAACnb,GAAyB,OAAAA,EAAMgC,IAAN,IAC1B,SAACqF,GAAa,kBAAM,OAAAA,CAAA,CAAN,IAGZ+T,EAAqB,GAAeD,GAAa,SAACA,GAAgB,kBACpE,OAAOzE,GACHyE,KACA,WAAM,WAAI,GAAiBhG,GAAqBM,gBAA1C,GAEd,CALwE,IAOlE4F,EAAwB,IAC1B,SAACrb,GAAyB,OAAAA,EAAMzC,OAAOoB,WAAb,IAC1B,SAAChB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT2d,EAA4B,IAC9B,SAACtb,GAAyB,QAAEA,EAAM6B,SAASge,UAAjB,IAC1B,SAACxiB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGVke,EAAwB,IAC1B,SAACvb,GAAyB,OAAAA,EAAMzC,OAAOuiB,kBAAb,IAC1B,SAACniB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT6d,EAA4B,IAC9B,SAACxb,GAAyB,QAAEA,EAAM6B,SAASke,iBAAjB,IAC1B,SAAC1iB,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHmb,YAAaA,EAAYnb,GACzBob,mBAAoBA,EAAmBpb,GACvCqb,sBAAuBA,EAAsBrb,GAC7Csb,0BAA2BA,EAA0Btb,GACrDub,sBAAuBA,EAAsBvb,GAC7Cwb,0BAA2BA,EAA0Bxb,GAE7D,KJbMggB,GczBH,WACH,IAAMC,EAAiB,IACnB,SAACjgB,GAAiC,OAAAA,EAAMzC,OAAOqL,cAAb,IAClC,SAAC5I,GAAiC,OAAAA,EAAMzC,OAAOoL,WAAb,IAClC,SAACC,EAAgBD,GAAgB,gBAACnD,GAC9B,IAAIA,GAAYoD,IAAmBpD,EAInC,OAAOmD,CACX,CANiC,IAS/BuX,EAAkB,IACpB,SAAClgB,GAAiC,OAAAA,EAAMzC,OAAO0L,eAAb,IAClC,SAACjJ,GAAiC,OAAAA,EAAMzC,OAAOyL,YAAb,IAClC,SAACC,EAAiBD,GAAiB,gBAACxD,GAChC,IAAIA,GAAYyD,IAAoBzD,EAIpC,OAAOwD,CACX,CANmC,IASjCmX,EAAuC,IACzC,SAACngB,GAAiC,OAAAA,EAAMzC,OAAO+L,oCAAb,IAClC,SAACtJ,GAAiC,OAAAA,EAAMzC,OAAO8L,iCAAb,IAClC,SAACC,EAAsCD,GACnC,gBAAC7D,GACG,IAAIA,GAAY8D,IAAyC9D,EAIzD,OAAO6D,CACX,CANA,IASFuR,EAAqB,IACvB,SAAC5a,GAAiC,OAAAA,EAAMzC,OAAO4K,kBAAb,IAClC,SAACnI,GAAiC,OAAAA,EAAMzC,OAAO2K,gBAAb,IAClC,SAACC,EAAoBD,GAAqB,gBAAC1C,GACvC,GAAK2C,GAAuBD,EAI5B,OAAI1C,EACO0C,EAAiB1C,GAGrB0C,EAAiBC,EAC5B,CAV0C,IAaxCiY,EAA4B,IAC9B,SAACpgB,GAAiC,OAAAA,EAAMzC,OAAOoM,yBAAb,IAClC,SAAC3J,GAAiC,OAAAA,EAAMzC,OAAOmM,sBAAb,IAClC,SAACC,EAA2BD,GAA2B,gBAAClE,GACpD,IAAIA,GAAYmE,IAA8BnE,EAI9C,OAAOkE,CACX,CANuD,IASrDK,EAAc,IAChB,SAAC/J,GAAiC,OAAAA,EAAM6B,SAAS+G,cAAf,IAClC,SAAC5I,GAAiC,OAAAA,EAAM6B,SAASkI,WAAf,IAClC,SAACnB,EAAgBmB,GAAgB,gBAACvE,GAC9B,QAAIA,GAAYoD,IAAmBpD,IAI1BuE,EACb,CANiC,IAS/BC,EAAe,IACjB,SAAChK,GAAiC,OAAAA,EAAM6B,SAASoH,eAAf,IAClC,SAACjJ,GAAiC,OAAAA,EAAM6B,SAASmI,YAAf,IAClC,SAACf,EAAiBe,GAAiB,gBAACxE,GAChC,QAAIA,GAAYyD,IAAoBzD,IAI3BwE,EACb,CANmC,IASjCC,EAAmC,IACrC,SAACjK,GAAiC,OAAAA,EAAM6B,SAASyH,oCAAf,IAClC,SAACtJ,GAAiC,OAAAA,EAAM6B,SAASoI,gCAAf,IAClC,SAACX,EAAsCW,GACnC,gBAACzE,GACG,QAAIA,GAAY8D,IAAyC9D,IAIhDyE,EACb,CANA,IASFJ,EAAiB,IACnB,SAAC7J,GAAiC,OAAAA,EAAM6B,SAASsG,kBAAf,IAClC,SAACnI,GAAiC,OAAAA,EAAM6B,SAASgI,cAAf,IAClC,SAAC1B,EAAoB0B,GAAmB,gBAACrE,GACrC,QAAIA,GAAY2C,IAAuB3C,IAI9BqE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAC/H,GAAiC,OAAAA,EAAMgC,IAAN,IAClC,SAACA,GAAS,gBAACwD,GACP,SAAUxD,EAAKwD,KAAaxD,EAAKwD,GAAUuC,cAC/C,CAFU,IAKRmC,EAAsB,IACxB,SAAClK,GAAiC,OAAAA,EAAM6B,SAAS8H,yBAAf,IAClC,SAAC3J,GAAiC,OAAAA,EAAM6B,SAASqI,mBAAf,IAClC,SAACP,EAA2BO,GAAwB,gBAAC1E,GACjD,QAAIA,GAAYmE,IAA8BnE,IAIrC0E,EACb,CANoD,IASxD,OAAO,KAAAkT,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHigB,eAAgBA,EAAejgB,GAC/BkgB,gBAAiBA,EAAgBlgB,GACjCmgB,qCAAsCA,EAAqCngB,GAC3E4a,mBAAoBA,EAAmB5a,GACvCogB,0BAA2BA,EAA0BpgB,GACrD+J,YAAaA,EAAY/J,GACzBgK,aAAcA,EAAahK,GAC3BiK,iCAAkCA,EAAiCjK,GACnE6J,eAAgBA,EAAe7J,GAC/B+H,cAAeA,EAAc/H,GAC7BkK,oBAAqBA,EAAoBlK,GAEjD,GACJ,Cd5H2CqgB,GACjCC,Ge5BH,WACH,IAAMC,EAAsB,IACxB,SAACvgB,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR+Y,EAAiB,IACnB,SAAC/a,GAAgC,OAAAA,EAAMzC,OAAOijB,0BAAb,IACjC,SAAC7iB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTqd,EAAgB,IAClB,SAAChb,GAAgC,OAAAA,EAAMzC,OAAOkjB,yBAAb,IACjC,SAAC9iB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTsd,EAAa,IACf,SAACjb,GAAgC,QAAEA,EAAM6B,SAAS6e,yBAAjB,IACjC,SAACrjB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGV6d,EAAa,IACf,SAAClb,GAAgC,QAAEA,EAAM6B,SAAS8e,yBAAjB,IACjC,SAACtjB,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHugB,oBAAqBA,EAAoBvgB,GACzC+a,eAAgBA,EAAe/a,GAC/Bgb,cAAeA,EAAchb,GAC7Bib,WAAYA,EAAWjb,GACvBkb,WAAYA,EAAWlb,GAE/B,GACJ,CfP0C4gB,GAChCC,GgBzBH,WACH,IAAMC,EAAgC,IAClC,SAAC9gB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAC+e,GAAgB,gBAACC,GACd,GAAKD,EAAL,CAIA,IAAME,EAAmBD,EAAc5T,QAC9B4T,EAAc5T,QAAO,IAAI4T,EAAcxd,GAC1Cwd,EAAcxd,GAEd0d,EAAgB,GAAqBD,GAE3C,OAAKC,GAIE,IAAAjgB,QAA0B8f,EAAaG,GAHnC,E,CAIf,CAhBiB,IAmBfC,EAAoB,IACtB,SAACnhB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAC+e,GACG,YADH,IAAAA,IAAAA,EAAA,IACG,SAAClR,GACG,IAAMuR,GAAQ,IAAAxD,QAAO,IAErB,OAAOmD,EAAYpD,MACf,SAAC0D,GACG,OAAAA,EAAWC,cAAgBzR,GACP,SAApBwR,EAAWzkB,MACXwkB,EAAM1D,MAAK,SAAC6D,GAAS,WAAAC,SAAQH,EAAYE,EAApB,GAFrB,GAIZ,CATA,IAYFE,EAA2B,GAC7BN,GACA,SAACA,GAAsB,gBAACtR,GACpB,OAAO6G,GACHyK,EAAkBtR,IAClB,WAAM,WAAI,GAAiBsF,GAAqBuM,yBAA1C,GAEd,CALuB,IAQrBC,EAAiB,IACnB,SAAC3hB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAAC+e,GAAgB,kBACb,GAAKA,EAaL,OATgC,IAAAa,SAAQ,IAAsB,SAACC,GAC3D,WAAA5gB,QACI8f,GACA,SAACM,GACG,OAAO,IAAAG,SAAQH,EAAYQ,EAC/B,GAJJ,GASR,CAfiB,IAkBfC,EAAqB,IACvB,SAAC9hB,GAA2B,OAAAA,EAAMuF,IAAN,IAC5B,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRiV,EAAe,IACjB,SAACxa,GAA2B,OAAAA,EAAMzC,OAAO4f,SAAb,IAC5B,SAACA,GAAc,kBAAM,OAAAA,CAAA,CAAN,IAGb4E,EAAiB,IACnB,SAAC/hB,GAA2B,OAAAA,EAAMzC,OAAOmS,gBAAb,IAC5B,SAAC1P,GAA2B,OAAAA,EAAMzC,OAAOkS,WAAb,IAC5B,SAACC,EAAkBD,GAAgB,gBAACI,GAChC,IAAIA,GAAgBH,IAAqBG,EAIzC,OAAOJ,CACX,CANmC,IASjCiL,EAAY,IACd,SAAC1a,GAA2B,OAAAA,EAAM6B,SAAS6Y,SAAf,IAC5B,SAACA,GAAc,kBAAM,QAAEA,CAAF,CAAN,IAGb5K,EAAa,IACf,SAAC9P,GAA2B,OAAAA,EAAM6B,SAASkO,kBAAf,IAC5B,SAAC/P,GAA2B,OAAAA,EAAM6B,SAASiO,UAAf,IAC5B,SAACC,EAAoBD,GAAe,gBAACD,GACjC,QAAIA,GAAgBE,IAAuBF,IAIlCC,EACb,CANoC,IASxC,OAAO,KAAAsN,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHmhB,kBAAmBA,EAAkBnhB,GACrCyhB,yBAA0BA,EAAyBzhB,GACnD2hB,eAAgBA,EAAe3hB,GAC/B8gB,8BAA+BA,EAA8B9gB,GAC7D8hB,mBAAoBA,EAAmB9hB,GACvCwa,aAAcA,EAAaxa,GAC3B+hB,eAAgBA,EAAe/hB,GAC/B0a,UAAWA,EAAU1a,GACrB8P,WAAYA,EAAW9P,GAE/B,GACJ,ChB9FqCgiB,GAC3BC,GiBjCH,WACH,IAAMC,EAA2B,IAC7B,SAACliB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACsc,GACG,gBAACe,EAA2BvF,QAA3B,IAAAuF,IAAAA,EAAA,IACG,IAAM8C,GAAkB,IAAAxE,MAAK0B,EAAW,CAAE9gB,KAAMub,IAGhD,OAFewE,EAAaA,EAAW8D,gBAAkB,IAE3C9jB,KAAI,SAAC+jB,GAAe,OAAAC,EAAaD,EAAOhD,EAAW8C,EAA/B,GACtC,CALA,IAQFI,EAA0B,IAC5B,SAACviB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACsc,GACG,gBAACe,EAA2BvF,QAA3B,IAAAuF,IAAAA,EAAA,IACG,IAAM8C,GAAkB,IAAAxE,MAAK0B,EAAW,CAAE9gB,KAAMub,IAGhD,OAFewE,EAAaA,EAAW7b,eAAiB,IAE1CnE,KAAI,SAAC+jB,GAAe,OAAAC,EAAaD,EAAOhD,EAAW8C,EAA/B,GACtC,CALA,IAQFK,EAA2B,IAC7B,SAACxiB,GAA2B,OAAAA,EAAMgC,IAAN,IAC5B,SAACsc,GAAe,kBAAM,OAAAA,EAAaA,EAAWmE,gBAAkB,EAA1C,CAAN,IAGdjI,EAAe,IACjB,SAACxa,GAA2B,OAAAA,EAAMzC,OAAO4f,SAAb,IAC5B,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAA2B,QAAEA,EAAM6B,SAAS6Y,SAAjB,IAC5B,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,SAASilB,EACLD,EACAhD,EACA8C,GAEA,MAAmB,gBAAfE,EAAM1lB,KAed,SACI0lB,EACAhD,EACAqD,GAEA,QAHA,IAAArD,IAAAA,EAAA,KAGKA,EAAUhhB,OACX,OAAOgkB,EAGH,OAAcK,GAAW,CAAC,GAAC,KAA3BnkB,OAAI,IAAG,KAAE,EACXokB,EAAQtD,EAAU/gB,KAAI,SAAC,GAAwB,OACjD/B,MAD+B,OAE/BqmB,MAFqC,OAAY,IAKrD,OAAO,gCACAP,GAAK,CACR7hB,QAAS,CAAEmiB,MAAK,GAChB9jB,QAASN,EACT3B,KAAM,QACNimB,UAAW,WACXC,SAAU,UAElB,CArCeC,CAAeV,EAAOhD,EAAW8C,GAGzB,oBAAfE,EAAM1lB,KAoCd,SAAyB0lB,EAAkBK,GACjC,MAAuCA,GAAW,CAAC,EAAjD,IAAAM,aAAAA,OAAY,IAAG,KAAE,EAAEC,EAAa,gBAExC,IAAKD,EAAa3kB,OACd,OAAO,gCACAgkB,GAAK,CACRa,SAA2B,MAAjBD,GAAgCA,IAIlD,IAAMN,EAAQK,EAAa1kB,KAAI,SAAC,GAAwB,OACpD/B,MADkC,OAElCqmB,MAFwC,OAAY,IAKxD,OAAO,gCACAP,GAAK,CACR1lB,KAAM,sBACN6D,QAAS,CAAEmiB,MAAK,GAChBO,SAA2B,MAAjBD,GAA+BA,EACzCrmB,KAAM,QACNimB,UAAW,WACXC,SAAU,UAElB,CA3DeK,CAAgBd,EAAOF,GAGf,eAAfE,EAAM1lB,KA0Dd,SAA0B0lB,EAAkBK,GAChC,OAAwBA,GAAW,CAAC,GAAC,eAArCU,OAAc,IAAG,KAAE,EAE3B,YAAuB1hB,IAAnB0hB,EACOf,GAGJ,gCAAKA,GAAK,CAAEa,SAAUG,QAAQD,IACzC,CAjEeE,CAAiBjB,EAAOF,GAG5BE,CACX,CA+DA,OAAO,KAAAjF,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHkiB,yBAA0BA,EAAyBliB,GACnDuiB,wBAAyBA,EAAwBviB,GACjDwiB,yBAA0BA,EAAyBxiB,GACnDwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GACJ,CjB/F+BujB,GACrBC,GkB7BH,WACH,IAAMC,EAAoB,IACtB,SAACzjB,GAA8B,OAAAA,EAAMgC,IAAN,IAC/B,SAAC0hB,GAAmB,kBAAM,OAAAA,CAAA,CAAN,IAGlBC,EAAwB,IAC1B,SAAC3jB,GAA8B,OAAAA,EAAMuF,IAAN,IAC/B,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRqe,EAAmB,IACrB,SAAC5jB,GAA8B,OAAAA,EAAMgC,IAAN,IAC/B,SAAC0hB,GAAmB,gBAACle,EAAkByI,GACnC,OAAOA,GACD,IAAA0P,MAAK+F,EAAgB,CAAElgB,GAAIgC,EAAU4H,QAASa,KAC9C,IAAA0P,MAAK+F,EAAgB,CAAElgB,GAAIgC,GACrC,CAJoB,IAOlBqe,EAA0B,GAC5BD,GACA,SAACA,GAAqB,gBAACpe,EAAkByI,GACrC,OAAOyI,GACHkN,EAAiBpe,EAAUyI,IAC3B,WAAM,WAAI,GAAiBkH,GAAqBa,qBAA1C,GAEd,CALsB,IAQpBwE,EAAe,IACjB,SAACxa,GAA8B,OAAAA,EAAMzC,OAAO4f,SAAb,IAC/B,SAACA,GAAc,kBAAM,OAAAA,CAAA,CAAN,IAGb2G,EAAqB,IACvB,SAAC9jB,GAA8B,OAAAA,EAAMzC,OAAOoQ,YAAb,IAC/B,SAAC3N,GAA8B,OAAAA,EAAMzC,OAAOqQ,eAAb,IAC/B,SAACD,EAAcC,GAAoB,gBAACpI,GAChC,IAAIA,GAAYmI,IAAiBnI,EAIjC,OAAOoI,CACX,CANmC,IASjC8M,EAAY,IACd,SAAC1a,GAA8B,OAAAA,EAAM6B,SAAS6Y,SAAf,IAC/B,SAACA,GAAc,kBAAM,QAAEA,CAAF,CAAN,IAGb5M,EAAkB,IACpB,SAAC9N,GAA8B,OAAAA,EAAM6B,SAAS8L,YAAf,IAC/B,SAAC3N,GAA8B,OAAAA,EAAM6B,SAASiM,eAAf,IAC/B,SAACH,EAAcG,GAAoB,gBAACtI,GAChC,QAAIA,GAAYmI,IAAiBnI,IAIxBsI,EACb,CANmC,IASvC,OAAO,KAAAsP,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHyjB,kBAAmBA,EAAkBzjB,GACrC2jB,sBAAuBA,EAAsB3jB,GAC7C4jB,iBAAkBA,EAAiB5jB,GACnC6jB,wBAAyBA,EAAwB7jB,GACjDwa,aAAcA,EAAaxa,GAC3B8jB,mBAAoBA,EAAmB9jB,GACvC0a,UAAWA,EAAU1a,GACrB8N,gBAAiBA,EAAgB9N,GAEzC,GACJ,ClB/CwC+jB,GAC9BC,GmB3BH,WACH,IAAMpJ,EAAqB,IACvB,SAAC5a,GAAgC,OAAAA,EAAMzC,OAAO4K,kBAAb,IACjC,SAACnI,GAAgC,OAAAA,EAAMzC,OAAO2Q,eAAb,IACjC,SAAC/F,EAAoB+F,GAAoB,gBAAC1I,GACtC,IAAIA,GAAY2C,IAAuB3C,EAIvC,OAAO0I,CACX,CANyC,IASvC+V,EAAkB,IACpB,SAACjkB,GAAgC,OAAAA,EAAMzC,OAAO+Q,eAAb,IACjC,SAACtO,GAAgC,OAAAA,EAAMzC,OAAO8Q,YAAb,IACjC,SAACC,EAAiBD,GAAiB,gBAAC7I,GAChC,IAAIA,GAAY8I,IAAoB9I,EAIpC,OAAO6I,CACX,CANmC,IASjC6V,EAAmB,IACrB,SAAClkB,GAAgC,OAAAA,EAAMzC,OAAOoR,gBAAb,IACjC,SAAC3O,GAAgC,OAAAA,EAAMzC,OAAOmR,aAAb,IACjC,SAACC,EAAkBD,GAAkB,gBAAClJ,GAClC,IAAIA,GAAYmJ,IAAqBnJ,EAIrC,OAAOkJ,CACX,CANqC,IASnCyV,EAA4B,IAC9B,SAACnkB,GAAgC,OAAAA,EAAMzC,OAAOoM,yBAAb,IACjC,SAAC3J,GAAgC,OAAAA,EAAMzC,OAAOmM,sBAAb,IACjC,SAACC,EAA2BD,GAA2B,gBAAClE,GACpD,IAAIA,GAAYmE,IAA8BnE,EAI9C,OAAOkE,CACX,CANuD,IASrDG,EAAiB,IACnB,SAAC7J,GAAgC,OAAAA,EAAM6B,SAASsG,kBAAf,IACjC,SAACnI,GAAgC,OAAAA,EAAM6B,SAASgI,cAAf,IACjC,SAAC1B,EAAoB0B,GAAmB,gBAACnO,GACrC,QAAIA,GAAOyM,IAAuBzM,IAIzBmO,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAC/H,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAACA,GAAS,gBAACoiB,GACP,IAAM1oB,EAAM0oB,EAAMnW,UAAemW,EAAM5e,SAAQ,IAAI4e,EAAMnW,UAAcmW,EAAM5e,SAE7E,SAAUxD,EAAKtG,KAAQsG,EAAKtG,GAAKqM,cACrC,CAJU,IAOR8G,EAAc,IAChB,SAAC7O,GAAgC,OAAAA,EAAM6B,SAASyM,eAAf,IACjC,SAACtO,GAAgC,OAAAA,EAAM6B,SAASgN,WAAf,IACjC,SAACP,EAAiBO,GAAgB,gBAACrJ,GAC/B,QAAIA,GAAY8I,IAAoB9I,IAI3BqJ,EACb,CANkC,IAShCC,EAAe,IACjB,SAAC9O,GAAgC,OAAAA,EAAM6B,SAAS8M,gBAAf,IACjC,SAAC3O,GAAgC,OAAAA,EAAM6B,SAASiN,YAAf,IACjC,SAACH,EAAkBG,GAAiB,gBAACtJ,GACjC,QAAIA,GAAYmJ,IAAqBnJ,IAI5BsJ,EACb,CANoC,IASlC5E,EAAsB,IACxB,SAAClK,GAAgC,OAAAA,EAAM6B,SAAS8H,yBAAf,IACjC,SAAC3J,GAAgC,OAAAA,EAAM6B,SAASqI,mBAAf,IACjC,SAACP,EAA2BO,GAAwB,gBAAC1E,GACjD,QAAIA,GAAYmE,IAA8BnE,IAIrC0E,EACb,CANoD,IASxD,OAAO,KAAAkT,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH4a,mBAAoBA,EAAmB5a,GACvCikB,gBAAiBA,EAAgBjkB,GACjCkkB,iBAAkBA,EAAiBlkB,GACnCmkB,0BAA2BA,EAA0BnkB,GACrD6J,eAAgBA,EAAe7J,GAC/B+H,cAAeA,EAAc/H,GAC7B6O,YAAaA,EAAY7O,GACzB8O,aAAcA,EAAa9O,GAC3BkK,oBAAqBA,EAAoBlK,GAEjD,GACJ,CnB5F0CqkB,GAChCC,GoBpCH,WACH,IAAMC,EAAmB,IACrB,SAACvkB,GAA6B,OAAAA,EAAMgC,IAAN,IAC9B,SAACwiB,GAAkB,gBAAChS,EAAuBC,GACvC,GAAK+R,EAAL,CAIA,IACMC,EAAwB1S,GADNN,GAAc,CAAEe,cAAa,EAAEC,WAAU,KAE3DZ,EAAYa,KAAK,GAAGC,KAAKC,UAAU6R,IAEzC,OAAOD,EAAc3S,E,CACzB,CAVmB,IAajB2I,EAAe,IACjB,SAACxa,GAA6B,OAAAA,EAAMzC,OAAO4f,SAAb,IAC9B,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAA6B,QAAEA,EAAM6B,SAAS6Y,SAAjB,IAC9B,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHukB,iBAAkBA,EAAiBvkB,GACnCwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GACJ,CpBGuC0kB,GAC7BC,IKrCAlJ,EAA6B,IAC/B,SAACzb,GAAwC,OAAAA,EAAMgC,IAAN,IACzC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR0Z,EAAoC,GACtCD,GACA,SAACA,GAA+B,kBAC5B,OAAO/E,GACH+E,KACA,WAAM,WAAI,GAAiBtG,GAAqBc,+BAA1C,GAEd,CALgC,KAQ7B,KAAAmH,aACH,SAACpd,GACG,YADH,IAAAA,IAAAA,EAAA,IACU,CACHyb,2BAA4BA,EAA2Bzb,GACvD0b,kCAAmCA,EAAkC1b,GAE7E,KLiBE4kB,IMvCAjJ,EAAc,IAChB,SAAC3b,GAA+B,OAAAA,EAAMgC,IAAN,IAChC,SAACA,GACG,gBAAkDwD,GAC9C,OAAOxD,EAAKwD,EAChB,CAFA,KAKD,KAAA4X,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH2b,YAAaA,EAAY3b,GAEjC,KN4BM6kB,IOvCAjJ,EAAqB,IACvB,SAAC5b,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC6O,GAAiB,kBACd,IAAMiU,EAAsBjU,aAAY,EAAZA,EAAc8M,MACtC,SAACoH,GAAgB,OAACA,EAAYC,oBAAb,IAGrB,OAAOF,aAAmB,EAAnBA,EAAqB1C,eAChC,CANkB,IAShBvG,EAA4B,GAC9BD,GACA,SAACA,GAAuB,kBACpB,OAAOlF,GACHkF,KACA,WAAM,WAAI,GAAiBzG,GAAqBe,uBAA1C,GAEd,CALwB,IAQtB4F,EAAuB,IACzB,SAAC9b,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC6O,GAAiB,kBACd,IAAMoU,EAAuBpU,aAAY,EAAZA,EAAc5P,QACvC,SAAC8jB,GAAgB,OAACA,EAAYC,oBAAb,IAGrB,OAAOC,EACDA,EAAqB3mB,KAAI,SAACymB,GAAgB,OAAAA,EAAY3C,eAAZ,IAC1C,EACV,CARkB,IAWhBrG,EAA8B,GAChCD,GACA,SAACA,GAAyB,kBACtB,OAAOpF,GACHoF,KACA,WAAM,WAAI,GAAiB3G,GAAqBe,uBAA1C,GAEd,CAL0B,KAQvB,KAAAkH,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH4b,mBAAoBA,EAAmB5b,GACvC6b,0BAA2BA,EAA0B7b,GACrD8b,qBAAsBA,EAAqB9b,GAC3C+b,4BAA6BA,EAA4B/b,GAEjE,KPXMklB,GqB1CH,WACH,IAAMC,EAAuB,IACzB,SAACnlB,GAAgC,OAAAA,EAAMgC,IAAN,IACjC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRwY,EAAe,IACjB,SAACxa,GAAgC,OAAAA,EAAMzC,OAAO4f,SAAb,IACjC,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAAgC,OAAAA,EAAM6B,SAAS6Y,SAAf,IACjC,SAACrd,GAAW,kBAAM,QAAEA,CAAF,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHmlB,qBAAsBA,EAAqBnlB,GAC3Cwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GACJ,CrBmB0ColB,GAChCC,GsBtCH,WACH,IAAMC,EAAwB,IAC1B,SAACtlB,GAAiC,OAAAA,EAAMzC,OAAOkW,qBAAb,IAClC,SAACzT,GAAiC,OAAAA,EAAMzC,OAAOiW,kBAAb,IAClC,SAACC,EAAuBD,GAAuB,gBAAChO,GAC5C,IAAIA,GAAYiO,IAA0BjO,EAI1C,OAAOgO,CACX,CAN+C,IAS7C+R,EAAuB,IACzB,SAACvlB,GAAiC,OAAAA,EAAMzC,OAAOuW,oBAAb,IAClC,SAAC9T,GAAiC,OAAAA,EAAMzC,OAAOsW,iBAAb,IAClC,SAACC,EAAsBD,GAAsB,gBAACrO,GAC1C,IAAIA,GAAYsO,IAAyBtO,EAIzC,OAAOqO,CACX,CAN6C,IAS3C+G,EAAqB,IACvB,SAAC5a,GAAiC,OAAAA,EAAMzC,OAAO4K,kBAAb,IAClC,SAACnI,GAAiC,OAAAA,EAAMzC,OAAO2Q,eAAb,IAClC,SAAC/F,EAAoB+F,GAAoB,gBAAC1I,GACtC,IAAIA,GAAY2C,IAAuB3C,EAIvC,OAAO0I,CACX,CANyC,IASvCkS,EAA4B,IAC9B,SAACpgB,GAAiC,OAAAA,EAAMzC,OAAOoM,yBAAb,IAClC,SAAC3J,GAAiC,OAAAA,EAAMzC,OAAOmM,sBAAb,IAClC,SAACC,EAA2BD,GAA2B,gBAAClE,GACpD,IAAIA,GAAYmE,IAA8BnE,EAI9C,OAAOkE,CACX,CANuD,IASrDsK,EAAoB,IACtB,SAAChU,GAAiC,OAAAA,EAAM6B,SAAS4R,qBAAf,IAClC,SAACzT,GAAiC,OAAAA,EAAM6B,SAASmS,iBAAf,IAClC,SAACP,EAAuBO,GAAsB,gBAACxO,GAC3C,QAAIA,GAAYiO,IAA0BjO,IAIjCwO,EACb,CAN8C,IAS5CC,EAAoB,IACtB,SAACjU,GAAiC,OAAAA,EAAM6B,SAASiS,oBAAf,IAClC,SAAC9T,GAAiC,OAAAA,EAAM6B,SAASoS,iBAAf,IAClC,SAACH,EAAsBG,GAAsB,gBAACzO,GAC1C,QAAIA,GAAYsO,IAAyBtO,IAIhCyO,EACb,CAN6C,IAS3CpK,EAAiB,IACnB,SAAC7J,GAAiC,OAAAA,EAAM6B,SAASsG,kBAAf,IAClC,SAACnI,GAAiC,OAAAA,EAAM6B,SAASgI,cAAf,IAClC,SAAC1B,EAAoB0B,GAAmB,gBAACrE,GACrC,QAAIA,GAAY2C,IAAuB3C,IAI9BqE,EACb,CANwC,IAStC9B,EAAgB,IAClB,SAAC/H,GAAiC,OAAAA,EAAMgC,IAAN,IAClC,SAACA,GAAS,gBAACwD,GACP,SAAUxD,EAAKwD,KAAaxD,EAAKwD,GAAUuC,cAC/C,CAFU,IAKRmC,EAAsB,IACxB,SAAClK,GAAiC,OAAAA,EAAM6B,SAAS8H,yBAAf,IAClC,SAAC3J,GAAiC,OAAAA,EAAM6B,SAASqI,mBAAf,IAClC,SAACP,EAA2BO,GAAwB,gBAAC1E,GACjD,QAAIA,GAAYmE,IAA8BnE,IAIrC0E,EACb,CANoD,IASxD,OAAO,KAAAkT,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHslB,sBAAuBA,EAAsBtlB,GAC7CulB,qBAAsBA,EAAqBvlB,GAC3C4a,mBAAoBA,EAAmB5a,GACvCogB,0BAA2BA,EAA0BpgB,GACrDgU,kBAAmBA,EAAkBhU,GACrCiU,kBAAmBA,EAAkBjU,GACrC6J,eAAgBA,EAAe7J,GAC/B+H,cAAeA,EAAc/H,GAC7BkK,oBAAqBA,EAAoBlK,GAEjD,GACJ,CtB/E2CwlB,GACjCC,GuBhBH,WACH,IAAMC,EAAkB,IACpB,SAAC1lB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC6O,GAAiB,kBAAM,OAAAA,CAAA,CAAN,IAGhB8U,EAAyB,GAAeD,GAAiB,SAACA,GAAoB,kBAChF,OAAOhP,GACHgP,KACA,WAAM,WAAI,GAAiBvQ,GAAqBI,oBAA1C,GAEd,CALoF,IAO9EqQ,EAAqB,IACvB,SAAC5lB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC6O,GAAiB,gBAACrN,GACf,GAAKqN,GAAiBA,EAAaxS,OAInC,OAAO,IAAAsf,MAAK9M,EAAc,CAAErN,GAAE,GAClC,CANkB,IAShBqiB,EAA0B,IAC5B,SAAC7lB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC6O,GAAiB,gBAACyI,GACf,GAAKzI,GAAiBA,EAAaxS,OAInC,OAAO,IAAAsf,MAAK9M,GAAc,SAACkU,GACvB,OzBxEZe,EyBwE2Bf,EAAY3C,gBzBvEvC2D,EyBuEwDzM,GzBrEjD,IAAAjZ,SAAQgZ,GAAUyM,GAAWzM,GAAU0M,IAJnC,IACXD,EACAC,CyBuEY,GAER,CARkB,IAWhBC,EAAoB,IACtB,SAAChmB,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAAC6O,GAAiB,kBACd,GAAIA,GAAgBA,EAAaxS,OAC7B,OAAOwS,EAAa,GAAGoV,sBAE/B,CAJkB,IAOhBzL,EAAe,IACjB,SAACxa,GAA4B,OAAAA,EAAMzC,OAAO4f,SAAb,IAC7B,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTuoB,EAAiB,IACnB,SAAClmB,GAA4B,OAAAA,EAAMzC,OAAOoB,WAAb,IAC7B,SAAChB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTwoB,EAA8B,IAChC,SAACnmB,GAA4B,OAAAA,EAAMzC,OAAO6oB,wBAAb,IAC7B,SAACzoB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT0oB,EAAqB,GACvBX,GACA,SAACtH,EAAqB,GAA8C,OAAxC,OAA6Cd,OAAL,IACpE,SAACoI,EAAiBpI,GAAY,kBAC1B,IAAMtY,EAAOsY,IAEb,IAAKtY,EACD,MAAO,GAGX,IAAMshB,GAAuBZ,KAAqB,IAAIjoB,QAClD,SAAC8oB,EAASxB,GAAgB,OAAAwB,EAAQC,OAAOzB,EAAY0B,YAA3B,GAC1B,IAGJ,OAAQzhB,EAAK0hB,UAAUC,eAAiB,IAAI1lB,QACxC,SAAC2L,GAAS,OAAA0Z,EAAoBM,QAAQha,EAAKpJ,IAAgB,CAAjD,GAElB,CAf8B,IAkB5B8W,EAAiB,IACnB,SAACta,GAA4B,OAAAA,EAAMzC,OAAOkT,WAAb,IAC7B,SAACA,GAAgB,gBAAC+B,GACd,OAAIA,EACO/B,EAAY+B,IAGhB,IAAAmL,MAAKlN,EAChB,CANiB,IASfsR,EAAiB,IACnB,SAAC/hB,GAA4B,OAAAA,EAAMzC,OAAOkS,WAAb,IAC7B,SAACA,GAAgB,gBAAC+C,GACd,OAAIA,EACO/C,EAAY+C,IAGhB,IAAAmL,MAAKlO,EAChB,CANiB,IASfoX,EAAyB,GAC3BhB,EACAvL,EACA4L,GACA,SAACL,EAAyBvL,EAAgB4L,GACtC,gBAAC5M,GACG,IAAMyL,EAAcc,EAAwBvM,GAE5C,OAAOyL,EAAczK,EAAeyK,EAAYvhB,IAAM0iB,GAC1D,CAJA,IAOFY,EAA+B,IACjC,SAAC9mB,GAA4B,OAAAA,EAAMzC,OAAOiT,yBAAb,IAC7B,SAACA,GAA8B,gBAACgC,GAC5B,OAAIA,EACOhC,EAA0BgC,IAG9B,IAAAmL,MAAKnN,EAChB,CAN+B,IAS7BkK,EAAY,IACd,SAAC1a,GAA4B,OAAAA,EAAM6B,SAAS6Y,SAAf,IAC7B,SAACA,GAAc,kBAAM,OAAc,IAAdA,CAAA,CAAN,IAGbqM,EAA2B,IAC7B,SAAC/mB,GAA4B,OAAAA,EAAM6B,SAASklB,wBAAf,IAC7B,SAACA,GAA6B,kBAAM,OAA6B,IAA7BA,CAAA,CAAN,IAG5BlH,EAAa,IACf,SAAC7f,GAA4B,OAAAA,EAAM6B,SAASge,UAAf,IAC7B,SAACA,GAAe,kBAAM,OAAe,IAAfA,CAAA,CAAN,IAGdnP,EAAa,IACf,SAAC1Q,GAA4B,OAAAA,EAAM6B,SAAS6O,UAAf,IAC7B,SAACA,GAAe,gBAAC8B,GACb,OAAIA,GACqC,IAA9B9B,EAAW8B,IAGM,KAArB,IAAAmL,MAAKjN,EAChB,CANgB,IASdZ,EAAa,IACf,SAAC9P,GAA4B,OAAAA,EAAM6B,SAASiO,UAAf,IAC7B,SAACA,GAAe,gBAAC0C,GACb,OAAIA,GACqC,IAA9B1C,EAAW0C,IAGM,KAArB,IAAAmL,MAAK7N,EAChB,CANgB,IASdkX,EAAmB,GACrBnB,EACAnV,EACAmP,GACA,SAACgG,EAAyBnV,EAAYmP,GAAe,gBAACvG,GAClD,IAAMyL,EAAcc,EAAwBvM,GAE5C,OAAOyL,EAAcrU,EAAWqU,EAAYvhB,IAAMqc,GACtD,CAJqD,IAOnDlP,EAA2B,IAC7B,SAAC3Q,GAA4B,OAAAA,EAAM6B,SAAS8O,wBAAf,IAC7B,SAACA,GAA6B,gBAAC6B,GAC3B,OAAIA,GACmD,IAA5C7B,EAAyB6B,IAGM,KAAnC,IAAAmL,MAAKhN,EAChB,CAN8B,IASlC,OAAO,KAAAyM,aACH,SAACpd,EAAyCgF,GACtC,YADH,IAAAhF,IAAAA,EAAA,IACU,CACH0lB,gBAAiBA,EAAgB1lB,GACjC2lB,uBAAwBA,EAAuB3lB,GAC/C4lB,mBAAoBA,EAAmB5lB,GACvC6lB,wBAAyBA,EAAwB7lB,GACjDgmB,kBAAmBA,EAAkBhmB,GACrCwa,aAAcA,EAAaxa,GAC3BkmB,eAAgBA,EAAelmB,GAC/BmmB,4BAA6BA,EAA4BnmB,GACzDqmB,mBAAoBA,EAAmBrmB,EAAO,CAAEgF,KAAI,IACpDsV,eAAgBA,EAAeta,GAC/B+hB,eAAgBA,EAAe/hB,GAC/B6mB,uBAAwBA,EAAuB7mB,GAC/C8mB,6BAA8BA,EAA6B9mB,GAC3D0a,UAAWA,EAAU1a,GACrB+mB,yBAA0BA,EAAyB/mB,GACnD6f,WAAYA,EAAW7f,GACvB0Q,WAAYA,EAAW1Q,GACvB8P,WAAYA,EAAW9P,GACvBgnB,iBAAkBA,EAAiBhnB,GACnC2Q,yBAA0BA,EAAyB3Q,GAE3D,GAER,CvBpMsCinB,GAC5BC,GwBlBH,WACH,IAAMvL,EAAc,IAChB,SAAC3b,GAAyB,OAAAA,EAAMgC,IAAN,IAC1B,SAACoc,EAAkB,GACf,OAD+B,iBAChBhE,iBAAf,IACJ,SAACgE,EAAkB,GAA2C,OAArC,OAA0Cd,OAAL,IAC9D,SAACc,EAAkB,GAA+C,OAArC,WAA8CjD,WAAT,IAClE,SAACiD,EAAkB,GACf,OAD6B,eAChBsH,eAAb,IACJ,SAACtH,EAAkB,GAA8C,OAArC,UAA6CtD,UAAR,IACjE,SAACsD,EAAkB,GACf,OADiC,mBAChBmC,mBAAjB,IACJ,SACQve,EACAoY,EACAkD,EACAnC,EACAuK,EACA5K,EACAyF,GAEJ,kBACI,IAAM9d,EAAiB2X,IACjBpV,EAAOsY,IACPjW,EAAW8T,IACXtK,EAAe6U,KAAqB,GACpCnf,EAAUuU,KAAgB,GAC1BhU,EAAmByZ,KAAyB,GAElD,GAAKve,GAASgD,GAASqC,EAIvB,OAAO,gCACArF,GAAI,CACPS,eAAc,EACduC,KAAI,EACJqC,SAAQ,EACRwJ,aAAY,EACZtK,QAAO,EACPO,iBAAgB,GAExB,CArBA,IAwBFqgB,EAAqB,GAAexL,GAAa,SAACA,GAAgB,kBACpE,OAAOjF,GACHiF,KACA,WAAM,WAAI,GAAiBxG,GAAqBK,gBAA1C,GAEd,CALwE,IAOlE4R,EAAwB,GAC1BzL,GACA,SAACA,GAAgB,gBAAC0L,GACd,IAAMC,EAAW3L,IAEjB,GAAK2L,EAAL,CAIA,IAAMC,EAAaD,EAASC,YAAc,EACpCC,EAAcF,EAASjgB,SAASmgB,aAAe,EAErD,OAAOH,EACDI,KAAKC,IAAIH,EAAaC,EAAa,GACnCF,EAASK,kB,CACnB,CAbiB,IAgBfnN,EAAe,IACjB,SAACxa,GAAyB,OAAAA,EAAMzC,OAAO4f,SAAb,IAC1B,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT2c,EAAiB,IACnB,SAACta,GAAyB,OAAAA,EAAMzC,OAAOkT,WAAb,IAC1B,SAAC9S,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTiqB,EAAuB,IACzB,SAAC5nB,GAAyB,OAAAA,EAAM6B,SAAS+lB,oBAAf,IAC1B,SAACA,GAAyB,kBAAM,OAAyB,IAAzBA,CAAA,CAAN,IAGxBlN,EAAY,IACd,SAAC1a,GAAyB,OAAAA,EAAM6B,SAAS6Y,SAAf,IAC1B,SAACA,GAAc,kBAAM,OAAc,IAAdA,CAAA,CAAN,IAGbhK,EAAa,IACf,SAAC1Q,GAAyB,OAAAA,EAAM6B,SAAS6O,UAAf,IAC1B,SAACA,GAAe,kBAAM,OAAe,IAAfA,CAAA,CAAN,IAGpB,OAAO,KAAA0M,aACH,SACIpd,EACAyC,EACAuC,EACA6L,EACAtK,EACAc,EACAP,GAEA,YARA,IAAA9G,IAAAA,EAAA,IAQO,CACH2b,YAAaA,EAAY3b,EAAO,CAC5ByC,eAAc,EACduC,KAAI,EACJ6L,aAAY,EACZtK,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpBqgB,mBAAoBA,EAAmBnnB,EAAO,CAC1CyC,eAAc,EACduC,KAAI,EACJ6L,aAAY,EACZtK,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpBsgB,sBAAuBA,EAAsBpnB,EAAO,CAChDyC,eAAc,EACduC,KAAI,EACJ6L,aAAY,EACZtK,QAAO,EACPc,SAAQ,EACRP,iBAAgB,IAEpB0T,aAAcA,EAAaxa,GAC3Bsa,eAAgBA,EAAeta,GAC/B4nB,qBAAsBA,EAAqB5nB,GAC3C0a,UAAWA,EAAU1a,GACrB0Q,WAAYA,EAAW1Q,GAE/B,GAER,CxBxHmC6nB,GACzBC,GyBhCH,WACH,IAAMC,EAAW,IACb,SAAC/nB,GAAsB,OAAAA,EAAMgC,IAAN,IACvB,SAACoc,EAAe,GACZ,OAD4B,iBACbpC,wBAAf,IACJ,SAACoC,EAAe,GAA2C,OAAlC,UAA0CtD,YAAR,IAC3D,SAAC9Y,EAAMS,EAAgB8D,GACnB,YADmB,IAAAA,IAAAA,EAAA,IACnB,WACI,GAAKvE,GAASS,EAId,OAAO,gCACAT,GAAI,CACPS,eAAc,EACd8D,QAAO,GAEf,CAVA,IAaFyhB,EAAkB,GAAeD,GAAU,SAACA,GAAa,kBAC3D,OAAOrR,GAAMqR,KAAY,WAAM,WAAI,GAAiB5S,GAAqBS,aAA1C,GACnC,CAF+D,IAIzDqS,EAAe,IACjB,SAACjoB,GAAsB,OAAAA,EAAMuF,IAAN,IACvB,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGRiV,EAAe,IACjB,SAACxa,GAAsB,OAAAA,EAAMzC,OAAO4f,SAAb,IACvB,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTye,EAAe,IACjB,SAACpc,GAAiB,aAAe,QAAf,EAAKA,EAAMgC,YAAI,eAAEkmB,QAAQ,IAC3C,SAACA,GACG,YADH,IAAAA,IAAAA,EAAA,IACG,SAAC1iB,GACG,IAAM2iB,EAAiBD,EAASvK,MAAK,SAAC,GAAmB,OAAP,eAAsBnY,CAAf,IAEzD,OAAO2iB,aAAc,EAAdA,EAAgBC,SAC3B,CAJA,IAOF1N,EAAY,IACd,SAAC1a,GAAsB,QAAEA,EAAM6B,SAAS6Y,SAAjB,IACvB,SAACrd,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aACH,SACIpd,EACAyC,EACA8D,GAEA,YAJA,IAAAvG,IAAAA,EAAA,IAIO,CACH+nB,SAAUA,EAAS/nB,EAAO,CAAEyC,eAAc,EAAE8D,QAAO,IACnDyhB,gBAAiBA,EAAgBhoB,EAAO,CAAEyC,eAAc,EAAE8D,QAAO,IACjE0hB,aAAcA,EAAajoB,GAC3Bwa,aAAcA,EAAaxa,GAC3Boc,aAAcA,EAAapc,GAC3B0a,UAAWA,EAAU1a,GAE7B,GAER,CzBjCgCqoB,GACtBC,IQ9CAtM,EAAyB,IAC3B,SAAChc,GAAoC,OAAAA,EAAMgC,IAAN,IACrC,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,KAGP,KAAAob,aACH,SAACpd,GACG,YADH,IAAAA,IAAAA,EAAA,IACU,CACHgc,uBAAwBA,EAAuBhc,GAEvD,KRqCEuoB,IS5BAtM,EAAqB,IACvB,SAAC,GAA2C,OAApC,QAA0CgM,YAAN,IAC5C,SAACA,GAAiB,kBACd,IAAM1iB,EAAO0iB,IAEb,OAAO1iB,GAAQA,EAAKuG,OACxB,CAJkB,IAOhBoQ,EAAoB,IACtB,SAAC,GAA2C,OAApC,QAA0C6L,QAAN,IAC5C,SAACA,GAAa,kBACV,IAAMpc,EAAQoc,IAEd,OAAO,IAAApK,MACHhS,GAASA,EAAMuc,UACf,SAAC,G,IAAEM,EAAU,aACT,MAAe,oBAAfA,GAAmD,gBAAfA,CAApC,GAEZ,CARc,IAWZrM,EAAmB,IACrB,SAAC,GAA8C,OAApC,WAA6CR,WAAT,IAC/C,SAACA,GAAgB,kBACb,IAAM2L,EAAW3L,IAEjB,OAAO,IAAAgC,MACH2J,GAAYA,EAASY,UACrB,SAAC,GAAqB,OAAP,iBAAwB,EAAjB,GAE9B,CAPiB,IAUf9L,EAAe,GACjBH,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMuM,EAAkBxM,IAExB,GAAIwM,GAAmBA,EAAgBjlB,GACnC,MAAO,CACHglB,WAAYC,EAAgBjlB,GAC5ByK,UAAWwa,EAAgBrb,SAInC,IAAMtB,EAAUqQ,KAAsBD,IAEtC,OAAIpQ,GAAWA,EAAQ0c,WACZ,CACHA,WAAY1c,EAAQ0c,WACpBva,UAAWnC,EAAQmC,gBAH3B,CAMJ,CAlB6D,IAqB3DoO,EAAsB,GAAeD,GAAc,SAACA,GAAiB,kBACvE,OAAO1F,GACH0F,KACA,WAAM,WAAI,GAAiBjH,GAAqBuT,iBAA1C,GAEd,CAL2E,IAOrEpM,EAAmB,GACrBL,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMuM,EAAkBxM,IAExB,GAAIwM,GAAmBA,EAAgBprB,OACnC,OAAOorB,EAAgBprB,OAAOkE,QAAQ,kBAAmB,IAG7D,IAAMuK,EAAUqQ,KAAsBD,IAEtC,OAAIpQ,EACOA,EAAQ3N,OAAOwqB,UAD1B,CAGJ,CAZ6D,IAe3DpM,EAA0B,GAAeD,GAAkB,SAACA,GAAqB,kBACnF,OAAO5F,GACH4F,KACA,WAAM,WAAI,GAAiBnH,GAAqByT,qBAA1C,GAEd,CALuF,IAOjFpM,EAAkB,IACpB,SAAC,GAA2C,OAApC,QAA0CyL,YAAN,IAC5C,SAACA,GAAiB,kBACd,IAAM1iB,EAAO0iB,IAEb,OAAO1iB,GAAQA,EAAKsG,KACxB,CAJkB,IAOhB4Q,EAAyB,GAAeD,GAAiB,SAACA,GAAoB,kBAChF,OAAO9F,GACH8F,KACA,WAAM,WAAI,GAAiBrH,GAAqBY,oBAA1C,GAEd,CALoF,IAO9E2G,EAAwB,GAAeT,GAAoB,SAACA,GAAuB,kBACrF,IAAMnQ,EAAUmQ,IAEhB,OAAOnQ,GAAWA,EAAQ+c,WAC9B,CAJyF,IAMnFlM,EAA+B,GACjCD,GACA,SAACA,GAA0B,kBACvB,OAAOhG,GACHgG,KACA,WAAM,WAAI,GAAiBvH,GAAqB2T,0BAA1C,GAEd,CAL2B,IAQzBlM,EAAwB,IAC1B,SAAC,GAA8C,OAApC,WAA6CwK,qBAAT,IAC/C,SAACA,GACG,gBAACC,QAAA,IAAAA,IAAAA,GAAA,GACG,IAAME,EAAaH,EAAsBC,GAEzC,QAAOE,GAAaA,EAAa,CACrC,CAJA,IAOF1K,EAAyB,GAC3BP,GACA,SAACA,GAAqB,gBAAC0E,GACnB,SAAIA,IAAiBA,EAAc+H,QAI5BzM,MAAuB9E,IAAe8E,MAAuB7E,EACxE,CANsB,KASnB,KAAA2F,aAAW,SAACkK,EAA4B3b,GAC3C,MAAO,CACHyQ,aAAcA,EAAa,CAAEkL,SAAQ,EAAE3b,MAAK,IAC5C0Q,oBAAqBA,EAAoB,CAAEiL,SAAQ,EAAE3b,MAAK,IAC1D2Q,iBAAkBA,EAAiB,CAAEgL,SAAQ,EAAE3b,MAAK,IACpD4Q,wBAAyBA,EAAwB,CAAE+K,SAAQ,EAAE3b,MAAK,IAClE6Q,gBAAiBA,EAAgB,CAAE8K,SAAQ,EAAE3b,MAAK,IAClD8Q,uBAAwBA,EAAuB,CAAE6K,SAAQ,EAAE3b,MAAK,IAChE+Q,sBAAuBA,EAAsB,CAAE4K,SAAQ,EAAE3b,MAAK,IAC9DgR,6BAA8BA,EAA6B,CAAE2K,SAAQ,EAAE3b,MAAK,IAC5EiR,sBAAuBA,EAAsB,CAAE0K,SAAQ,EAAE3b,MAAK,IAC9DkR,uBAAwBA,EAAuB,CAAEyK,SAAQ,EAAE3b,MAAK,IAExE,KTjIMqd,G0BpDH,WACH,IAAMhO,EAAgB,IAClB,SAAChb,GAA4B,OAAAA,EAAMzC,OAAO0rB,UAAb,IAC7B,SAACtrB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTsd,EAAa,IACf,SAACjb,GAA4B,QAAEA,EAAM6B,SAASoZ,UAAjB,IAC7B,SAAC5d,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHgb,cAAeA,EAAchb,GAC7Bib,WAAYA,EAAWjb,GAE/B,GACJ,C1BmCsCkpB,GAC5BC,G2BtDH,WACH,IAAM7O,EAAiB,IACnB,SAACta,GAA8B,OAAAA,EAAMzC,OAAOkT,WAAb,IAC/B,SAAC9S,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+S,EAAa,IACf,SAAC1Q,GAA8B,QAAEA,EAAM6B,SAAS6O,UAAjB,IAC/B,SAACrT,GAAW,kBAAM,OAAAA,CAAA,CAAN,IAGhB,OAAO,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHsa,eAAgBA,EAAeta,GAC/B0Q,WAAYA,EAAW1Q,GAE/B,GACJ,C3BqCwCopB,GAC9BC,IUpDAvM,EAAW,IACb,SAAC9c,GAA4B,OAAAA,EAAMgC,IAAN,IAC7B,SAACsnB,GAAgB,kBAAM,OAAAA,CAAA,CAAN,IAGfvM,EAAe,IACjB,SAAC/c,GAA4B,OAAAA,EAAMzC,OAAOgsB,SAAb,IAC7B,SAAC5rB,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGTqf,EAAY,IACd,SAAChd,GAA4B,QAAEA,EAAM6B,SAASmb,SAAjB,IAC7B,SAAC3f,GAAW,kBAAM,OAAAA,CAAA,CAAN,KAGT,KAAA+f,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACH8c,SAAUA,EAAS9c,GACnB+c,aAAcA,EAAa/c,GAC3Bgd,UAAWA,EAAUhd,GAE7B,KVgCMwpB,G4BrDH,WACH,IAAMC,EAAgB,IAClB,SAACzpB,GAA0B,OAAAA,EAAMgC,IAAN,IAC3B,SAACA,GAAS,kBAAM,OAAAA,CAAA,CAAN,IAGR0nB,EAAuB,IACzB,SAAC1pB,GAA0B,OAAAA,EAAMgC,IAAN,IAC3B,SAACA,GAAS,gBAAC2nB,GAAuB,OAAK3nB,aAAI,EAAJA,EAAM2b,MAAK,SAACiM,GAAM,OAAAA,EAAED,SAAWA,CAAb,GAAmB,CAAlE,IAGRnP,EAAe,IACjB,SAACxa,GAA0B,OAAAA,EAAMzC,OAAO4f,SAAb,IAC3B,SAACxf,GAAU,kBAAM,OAAAA,CAAA,CAAN,IAGT+c,EAAY,IACd,SAAC1a,GAA0B,OAAAA,EAAM6B,SAAS6Y,SAAf,IAC3B,SAACA,GAAc,kBAAM,QAAEA,CAAF,CAAN,IAGnB,OAAO,KAAA0C,aAAW,SAACpd,GACf,YADe,IAAAA,IAAAA,EAAA,IACR,CACHypB,cAAeA,EAAczpB,GAC7B0pB,qBAAsBA,EAAqB1pB,GAC3Cwa,aAAcA,EAAaxa,GAC3B0a,UAAWA,EAAU1a,GAE7B,GACJ,C5BwBoC6pB,GAEhC,OAAO,SAAC7pB,EAAOQ,QAAA,IAAAA,IAAAA,EAAA,IACX,INzDJlC,EMyDUmE,EAAiBwa,GAA6Bjd,EAAMyC,gBACpDuC,EAAOqY,GAAmBrd,EAAMgF,MAChC8kB,EAAiBrM,GAA6Bzd,EAAM8pB,gBACpDzK,EAAYF,GAAsBnf,EAAMqf,WACxC9Y,EAAUgZ,GAAqBvf,EAAMuG,SACrCc,EAAWuY,GAAuB5f,EAAMqH,UACxC0iB,EAAqB/J,GAA+BhgB,EAAM+pB,oBAC1DC,EAAaR,GAAwBxpB,EAAMgqB,YAC3CC,EAAOhI,GAAmBjiB,EAAMse,YAChCxX,EAAmBwZ,GAA8BtgB,EAAM8G,kBACvDia,EAAcF,GAAyB7gB,EAAM+gB,aAC7CmJ,EAAsB5B,GAAkCtoB,EAAMkqB,qBAC9DxG,EAAiBF,GAA4BxjB,EAAM0jB,gBACnDyG,EAA0BxF,GAC5B3kB,EAAMmqB,yBAEJC,EAAoBpG,GAA8BhkB,EAAMoqB,mBACxD5F,EAAgBF,GAA2BtkB,EAAMwkB,eACjD6F,EAAiBzF,GAA6B5kB,EAAMqqB,gBACpDjI,EAAkByC,GAA8B7kB,EAAM6Q,cACtDyZ,EAAoBpF,GAA8BllB,EAAMsqB,mBACxDC,EAAqBlF,GAA+BrlB,EAAMuqB,oBAC1DC,EAAgBrB,GAA4BnpB,EAAMwqB,eAClDhD,EAAcwB,GAA0BhpB,EAAMwnB,aAC9C8B,EAAcD,GAA0BrpB,EAAMspB,aAG9CzY,EAAe4U,GAA0BzlB,EAAM6Q,aAAc7L,GAC7DsiB,EAAWJ,GACblnB,EAAMsnB,SACN7kB,EACAuC,EACA6L,EACAtK,EACAc,EACAP,GAEE6E,EAAQmc,GAAoB9nB,EAAM2L,MAAOue,EAAqB3jB,GAC9DuF,EAAUyc,GAAsBjB,EAAU3b,GAG1C8e,EAAY,CACdhoB,eAAc,EACduC,KAAI,EACJsiB,SAAQ,EACRwC,eAAc,EACdY,OAPW7M,GAAqB7d,EAAM0qB,OAAQ1qB,EAAMse,YAQpDzN,aAAY,EACZwO,UAAS,EACT9Y,QAAO,EACPc,SAAQ,EACR0iB,mBAAkB,EAClBC,WAAU,EACVC,KAAI,EACJnjB,iBAAgB,EAChBia,YAAW,EACXpV,MAAK,EACLue,oBAAmB,EACnBpe,QAAO,EACP4X,eAAc,EACdyG,wBAAuB,EACvBC,kBAAiB,EACjB5F,cAAa,EACb6F,eAAc,EACdjI,gBAAe,EACfkI,kBAAiB,EACjBC,mBAAkB,EAClBjB,YAAW,EACXkB,cAAa,EACbhD,YAAW,GAGf,OAAOhnB,EAAQmqB,oBNjInBrsB,EMiI4DmsB,EN/HrD7uB,OAAOwF,KAAK9C,GAAKb,QAAO,SAACC,EAAQhC,GAGpC,OAFAgC,EAAOhC,GAAOkb,GAAkBtY,EAAI5C,IAE7BgC,CACX,GAAG,CAAC,IM2HqE+sB,CACzE,CACJ,C6BxIe,SAASG,GACpBC,EACArqB,QADA,IAAAqqB,IAAAA,EAAA,IAGA,ICRMC,ECCNC,EFOMC,GCRAF,EAAU,IAAI,EAEY,CAC5B,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoBlZ,SAAQ,SAAChV,GAC7BkuB,EAAQ5sB,SAAStB,GAAM,SAACU,EAAUb,GAAY,WAAI,EAAmBa,EAAUb,EAAjC,GAClD,IAEAquB,EAAQ5sB,SACJ,4BACA,SAACZ,GAAa,WAAI,EAA0BA,EAA9B,IAElBwtB,EAAQ5sB,SACJ,4BACA,SAACZ,GAAa,WAAI,EAA0BA,EAA9B,IC3BlBytB,ED8BOD,EC5BA,SAACG,GACJ,WAAAC,MAAKD,GAASE,MACV,IAAAC,aAA0B,SAACnrB,GACvB,GAAIA,aAAkBlD,OAASkD,EAAOG,mBAAmBrD,MACrD,MAAMkD,EAGV,IAcIvD,EAdWuD,EAAOG,UAeD,iBAAX1D,GAIf,CAAC,OAAQ,UAAW,SAAU,cAAc2uB,OAAM,SAAC3vB,GACtD,OAAAE,OAAOM,UAAUC,eAAeC,KAAKM,EAAQhB,EAA7C,IApBwC,CAC5B,IAAMe,EAAUwD,EAAOG,QAAQjD,MAAQ8C,EAAOG,QAAQjD,KAAKgB,OAE3D,MAAM,gCACC8B,GAAM,CACTG,QAAS2qB,EAAoBpsB,YAAYsB,EAAOG,QAAS3D,I,CASjF,IAAoBC,EALJ,MAAMuD,CACV,IAhBJ,GFKEqrB,EAAkCnR,KAGxC,OAAO,IAAAoR,kBGaA,IAAAxpB,iBAAgB,CACnBU,eAAgBX,EAChBkD,KAAMV,EACNgjB,SAAUzS,GACViV,eAAgBxkB,GAChBolB,OAAQzkB,GACR4K,aAAcD,GACdyO,UAAWrU,GACXzE,QAASF,GACTgB,SAAUD,GACV2iB,mBAAoBliB,GACpBmiB,WAAY5f,GACZkU,WAAY1T,GACZ9D,iBAAkBD,GAClBka,YAAa5R,GACb+a,oBAAqB7d,GACrBV,MAAOP,GACPU,QAASQ,GACToX,eAAgBjX,GAChB2d,kBAAmBpc,GACnBwW,cAAenS,GACf8X,wBAAyBnb,GACzBqb,eAAgBra,GAChBsa,kBAAmBtX,GACnBuX,mBAAoBlX,GACpBiW,YAAanV,GACbqW,cAAe5V,GACf4S,YAAajT,KHxCoCsW,GAAc,eAC/DG,kBAAiB,EACjBQ,iBAJqB,SAACxrB,GAA8B,OAAAsrB,EAAgCtrB,EAAhC,GAKjDQ,GAEX,CIpBe,SAASirB,GACpBrN,EACA1iB,EACAgwB,GAEA,IAAMC,EAAkB,IAAIC,QAE5B,SAASC,EAA6BlU,GAAtC,WACI,OAAO,W,UAAE,kDACL,ICV4BmU,EDUtBC,EAAUzV,EAAKA,EAAKjY,OAAS,GAGnC,KCb4BytB,EDWSC,ECVtCD,GAAmC,kBAAnBA,EAAME,SDU2BD,EAAU,CAAEC,UAAU,IAAO,SAGzE,OAAOrU,EAAOvb,KAAI,MAAXub,GAAM,qBAAM,GAASrB,IAGhC,IEb0D2V,EFapDC,EAAkBP,EAAgB5vB,IAAI,IAAS,CAAC,EAUtD,OARK4vB,EAAgB5vB,IAAI,IACrB4vB,EAAgBQ,IAAI,EAAMD,GAGzBA,EAAgBxwB,KACjBwwB,EAAgBxwB,IEpBsCuwB,EFoBnBtU,GELxC,KAAAlB,UAdP,W,IAAgC,sDAC5B,IAAMxW,EAASgsB,EAAG7vB,KAAI,MAAP6vB,GAAE,qBAAMhuB,MAASqY,IAEhC,OAAIrW,aAAkB,EAAAmsB,YACX,IAAAlB,MAAKjrB,GAAQkrB,MAAK,IAAAkB,gBAGP,mBAAXpsB,GACA,KAAAwW,UAAQ,SAAC6V,GAAU,WAAApB,MAAKjrB,EAAOqsB,IAAQnB,MAAK,IAAAkB,eAAzB,GAAyC,CAAEhsB,QAAO,YAGzEJ,CACX,GAEyC,CAAEI,QAAO,eFQnC,EAAA6rB,EAAgBxwB,IAAKU,KAAI,8BAAC,GAASka,GAC7C,CACL,CAEA,MAAO,CACHva,IAAG,WACC,GAAgC,mBAArB2vB,EAAWnvB,MAClB,MAAM,IAAIQ,MAAM,yCAGpB,IAAMR,EAAQsvB,EAAezvB,KAAK6B,KAAMytB,EAAWnvB,OAInD,OAFAX,OAAOC,eAAeoC,KAAMvC,GAAK,gCAAKgwB,GAAU,CAAEnvB,MAAK,KAEhDA,CACX,EAER,CG5BA,IAEMgwB,GAAkB,SAAChwB,GACrB,QAASA,CACb,EAEA,cACI,WAAoBiwB,GAAA,KAAAA,eAAAA,CAA6C,CAkJrE,OAhJI,YAAAC,uBAAA,SACIC,EACAlsB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,WAAI,EAAAF,YAAW,SAACO,G,MAENC,EAA6B,QAAvB,EADEN,EAAM3R,WACC3V,KAAKsY,iBAAS,eAAE9Z,GAC/BqpB,EAASD,GAAS,gCAAKpsB,aAAO,EAAPA,EAASqsB,QAAM,CAAED,OAAM,KAAK,iBAAKpsB,aAAO,EAAPA,EAASqsB,QAEvEF,EAASG,MAAK,IAAAC,cAAa3gB,GAAwBoB,8BACnDwf,QAAQC,IACJP,EAAUpuB,KAAI,SAAOkF,GAAE,kD,iEAEE,O,sBAAA,GAAMvF,KAAKuuB,eAAeU,kBAAkB1pB,GAAI,gCAC1DhD,GAAO,CACVqsB,OAAM,M,OAGV,MAAO,CAAP,EALiB,SAKD1vB,M,OAEhB,O,SAAO,CAAP,OAAOuE,G,4BAIdyrB,MAAK,SAAC7vB,GACH,IAAMomB,EAAiBpmB,EAAS2D,OAAOsrB,IAEvCI,EAASG,MACL,IAAAC,cACI3gB,GAAwBiB,4BACxBqW,IAIRiJ,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAASG,MACL,IAAAC,cACI3gB,GAAwBqB,yBACxBnQ,IAGRqvB,EAASS,UACb,GACR,GAzCA,CA0CR,EAEA,YAAAE,mBAAA,SACI9sB,GADJ,WAGI,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IACM3nB,EADQsnB,EAAM3R,WACD3V,KAAKuY,iBAExBoP,EAASG,MAAK,IAAAC,cAAa3gB,GAAwBoB,8BAEnD,EAAKgf,eACAc,oBAAmB,gCACb9sB,GAAO,CACVqsB,QAAQ,gCAAKrsB,aAAO,EAAPA,EAASqsB,QAAM,CAAED,OAAQ5nB,EAAKxB,QAE9C2pB,MAAK,SAAC7vB,GACH,IAAMiI,EAAO,CACTgoB,gBAAiBjwB,EAASF,QAAQ,uBAClCowB,YAAalwB,EAASF,QAAQ,mBAE5BqwB,EAAUnwB,EAASH,KACnBuwB,EAAkB5vB,MAAMC,QAAQ0vB,GAChC,EAAKE,gBAAgBF,GACrBA,EAENd,EAASG,MACL,IAAAC,cACI3gB,GAAwBiB,4BACxBqgB,EACAnoB,IAGRonB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxhB,GAAwBqB,yBACxBnQ,GAGZ,GACR,GAtCA,CAuCR,EAGA,YAAA4vB,kBAAA,SACI1nB,EACAhF,GAHJ,WAKI,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,G,MAETC,EAA6B,QAAvB,EADEN,EAAM3R,WACC3V,KAAKsY,iBAAS,eAAE9Z,GAC/BqpB,EAASD,GAAS,gCAAKpsB,aAAO,EAAPA,EAASqsB,QAAM,CAAED,OAAM,KAAK,iBAAKpsB,aAAO,EAAPA,EAASqsB,QAEvEF,EAASG,MACL,IAAAC,cAAa3gB,GAAwBsB,gCAA4BhM,EAAW,CACxE8D,SAAQ,KAIhB,EAAKgnB,eACAU,kBAAkB1nB,GAAU,gCAAKhF,GAAO,CAAEqsB,OAAM,KAChDM,MAAK,SAAC7vB,GACHqvB,EAASG,MACL,IAAAC,cACI3gB,GAAwBM,2BACxBpP,EAASH,KACT,CAAEqI,SAAQ,KAGlBmnB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxhB,GAAwByB,wBACxBvQ,EACA,CAAEkI,SAAQ,IAGtB,GACR,GAhCA,CAiCR,EAEQ,YAAAmoB,gBAAR,SAAwBF,GACpB,OAAO,IAAAxsB,QAAOwsB,GAAS,SAAC9V,GACpB,QAlJO,aAkJHA,EAAOnU,KChKR,SAA0BqqB,GACrC,MAAO,oBAAqBA,CAChC,CD8J6CC,CAAiBD,QAKtD,GACJ,GAhDA,iBADC,I,sCAkDL,C,CAnJA,G,YExBA,IAAKE,IAAL,SAAKA,GACD,0BACA,qCACH,CAHD,CAAKA,KAAAA,GAAW,KAKhB,YCLO,IAAMC,GACT,0ECDSC,GAAsB,CAAE,yBAA0B,WCW/D,cACI,WAAoBzB,GAAA,KAAAA,eAAAA,CAAgC,CAkCxD,OAhCI,YAAAc,mBAAA,SAAmB,G,IAAA,aAAsC,CAAC,EAAC,EAAtCY,EAAO,UAAErB,EAAM,SAKhC,OAAO5uB,KAAKuuB,eAAezwB,IAFf,2BAEwB,CAChCmyB,QAAO,EACP9wB,SAAS,eACL+wB,OAAQ,GAAYC,OACpB,iBAAkBJ,IACfC,IAEPpB,OAAM,GAEd,EAEA,YAAAK,kBAAA,SACI1nB,EACA,G,IAAA,aAAsC,CAAC,EAAC,EAAtC0oB,EAAO,UAAErB,EAAM,SAEXwB,EAAM,4BAA4B7oB,EAExC,OAAOvH,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAChCH,QAAO,EACP9wB,SAAS,eACL+wB,OAAQ,GAAYC,OACpB,iBAAkBJ,IACfC,IAEPpB,OAAM,GAEd,EACJ,EAnCA,G,YCXM,GAA+BrwB,QAAQ,8BCG9B,SAAS8xB,GACpB1xB,EACAe,EACA4H,GAEA,OAOmBtF,EAPDtC,IAQDsC,EAAOrD,MAAQqD,EAAOtC,OAP5B,IAAA6oB,SAAO,IAAA+H,IAAG5wB,IAAQ,IAAA6wB,aAAW,IAAAZ,mBAAkBhxB,EAAMe,EAAMyC,QAASmF,MAGxE,IAAAipB,aAAW,IAAAZ,mBAAkBhxB,EAAMe,EAAO4H,IAGrD,IAAuBtF,CAFvB,C,SCPA,YACI,WAAYxD,GAAZ,MACI,YACIA,GAAW,6EACd,K,OAED,EAAKE,KAAO,+BACZ,EAAKC,KAAO,8B,CAChB,CACJ,OAT0D,oBAS1D,EATA,CAA0D,GCiB1D,kBACI,WACY4vB,EACAiC,GADA,KAAAjC,eAAAA,EACA,KAAAiC,2BAAAA,CACT,CAiLP,OA/KI,YAAAC,gBAAA,SACIC,EACAnuB,GAFJ,WAII,OAAO,SAAC8rB,G,QACEtsB,EAAQssB,EAAM3R,WACd2M,EAAWtnB,EAAMsnB,SAAS3L,cAC1BiT,EAEkD,QAFrB,EACP,QADO,EAC/B5uB,EAAM0qB,OAAO5M,mBAAW,eAAES,YAAYsQ,iBAAiBC,SACnD,yDAAgD,SAGxD,IAAKxH,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,IAAMnO,EAAWrH,EAAMqH,SAAS8T,cAEhC,GAAI9T,IAAaA,EAAS0nB,QACtB,MAAM,IAAI,GAGd,IAEIC,EAFEvsB,EAAiBzC,EAAMyC,eAAe2X,oBAI5C,GAAK3X,EAEE,CACuDA,EAAc,QAAhE,IAAYwsB,GAAiC,YAAKxsB,EAApD,aAENusB,GAA4B,gCACrBC,GACAN,E,MANPK,EAA4BL,EAUhC,IAAMO,IAAqB,IAAAC,SAAQ1sB,GAEnC,OAAO,IAAA2sB,QACH,IAAA5I,SACI,IAAA+H,KAAG,IAAAxB,cAAattB,EAAyBuD,4BACzC,IAAAqsB,QAAM,6D,uEACe,SAAMpxB,KAAKqxB,8BACxBhI,EAAS9jB,GACTwrB,EACAJ,EACAM,EACA1uB,I,OAGJ,OARQrD,EAAS,SAMhB,KAEM,CAAP,GAAO,IAAA4vB,cACHttB,EAAyB8C,yBACzBpF,I,WAGVguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB7uB,EAAyByD,sBAAuBvF,EAAjE,KAGR,EAAK4xB,uBAAuBZ,EAAanuB,GAEjD,CACJ,EAEA,YAAAgvB,cAAA,SACIlW,EACA9Y,GAFJ,WAII,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,G,QACT3sB,EAAQssB,EAAM3R,WACd2M,EAAWtnB,EAAMsnB,SAAS3L,cAC1BiT,EAEkD,QAFrB,EACP,QADO,EAC/B5uB,EAAM0qB,OAAO5M,mBAAW,eAAES,YAAYsQ,iBAAiBC,SACnD,yDAAgD,SAGxD,IAAKxH,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpDmX,EAASG,MAAK,IAAAC,cAAattB,EAAyBmD,gCAEpD,IAAMH,EAAiBzC,EAAMyC,eAAe2X,oBAEtC8U,IAAqB,IAAAC,SAAQ1sB,GAO7BusB,GAA4B,gCAC3B1V,GAAO,CACVmW,WAC6B,IAAlBnW,EAAQmW,OAAyBhtB,EAClCA,EAAegtB,MACfnW,EAAQmW,QAGlBhtB,GAAkBA,EAAee,KACjCwrB,EAA0BxrB,GAAKf,EAAee,IAGlD,EAAK8rB,8BACDhI,EAAS9jB,GACTwrB,EACAJ,EACAM,EACA1uB,GAEC2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cACIttB,EAAyB6C,8BACzBnF,IAGRwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACInuB,EAAyBoD,2BACzBvF,GAGZ,GACR,GA3DA,CA4DR,EAEQ,YAAAiyB,uBAAR,SACI,EACA/uB,G,IADEivB,EAAK,QAAEC,EAA0B,6BAAEC,EAA0B,6BAG/D,OACI,MAACD,GACD,MAACC,GAEM,IAAAC,SAGJ3xB,KAAKwwB,2BAA2BoB,oBACnC,CACIJ,MAAK,EACLE,2BAA4BA,IAA8B,EAC1DD,2BAA4BA,IAA8B,GAE9DlvB,EAER,EAEQ,YAAA8uB,8BAAR,SACIQ,EACAxW,EACAsV,EACAM,EACA1uB,GAEA,OAAIouB,EACKM,EAIEjxB,KAAKuuB,eAAegD,cAAcM,EAAYxW,EAAS9Y,GAHnDvC,KAAKuuB,eAAeuD,cAAcD,EAAYxW,EAAS9Y,GAMjE8Y,EAAQ9V,GAINvF,KAAKuuB,eAAegD,cAAcM,EAAYxW,EAAS9Y,GAHnDvC,KAAKuuB,eAAeuD,cAAcD,EAAYxW,EAAS9Y,EAItE,EACJ,EArLA,G,YCfA,IAAMwvB,GAAiB,CACnBC,QAAS,CACL,uCACA,sCACA,WACA,sBACFryB,KAAK,MAGX,cACI,WAAoB4uB,GAAA,KAAAA,eAAAA,CAAgC,CAmCxD,OAjCI,YAAAuD,cAAA,SACID,EACAxW,EACA,G,IAAE4U,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,6BAA6ByB,EAAU,mBAC7C1yB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe0D,KAAK7B,EAAK,CACjClxB,KAAMmc,EACNuT,OAAQmD,GACR5yB,QAAO,EACP8wB,QAAO,GAEf,EAEA,YAAAsB,cAAA,SACIM,EACAxW,EACA,G,IAAE4U,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAED1qB,EAAgB8V,EAAO,GAAhBnc,GAAI,YAAKmc,EAAlB,QACA+U,EAAM,6BAA6ByB,EAAU,oBAAoBtsB,EACjEpG,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe2D,IAAI9B,EAAK,CAAExB,OAAQmD,GAAgB7yB,KAAI,EAAEC,QAAO,EAAE8wB,QAAO,GACxF,EACJ,EApCA,G,YCXA,kBACI,WAAoB1B,GAAA,KAAAA,eAAAA,CAAgC,CAcxD,OAZI,YAAA4D,iBAAA,SACIjzB,EACA,G,IAAE+wB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGH9wB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe0D,KANf,wBAMyB,CAAE/yB,KAAI,EAAEC,QAAO,EAAE8wB,QAAO,GACjE,EACJ,EAfA,G,YCSA,kBACI,WACYmC,EACAC,EACAC,GAFA,KAAAF,uBAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,yBAAAA,CACT,CAuJP,OArJI,YAAAC,aAAA,SACIhtB,EACAhD,GAFJ,WAII,OAAO,SAAC8rB,GACJ,OAAO,IAAA9F,SACH,IAAA+H,KAAG,IAAAxB,cAAaztB,EAAmBoD,yBACnC,IAAA0sB,OACI,EAAKkB,qBAAqBG,WAAW,CACjCzE,UAAU,EACVkC,QAAS1tB,aAAO,EAAPA,EAAS0tB,QAClBrB,OAAQ,CAAEiD,WAAYtsB,KAE1B,EAAK+sB,yBAAyBG,eAAe,CACzC1E,UAAU,EACVkC,QAAS1tB,aAAO,EAAPA,EAAS0tB,YAG1B,IAAAmB,QAAM,WACF,OAAO,EAAKgB,uBACPG,aAAahtB,EAAIhD,GACjB2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACT,OAAO,IAAA4vB,cACHztB,EAAmBkD,sBACnB,EAAKmuB,gCACDrE,EAAM3R,WAAW+P,OAAOlM,yBAEtB,EAAKoS,4BAA4BzzB,GACjCA,EAEd,GACR,KACFguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBhvB,EAAmBqD,mBAAoBhF,EAAxD,IAGZ,CACJ,EAEA,YAAAkzB,oBAAA,SACIrwB,GADJ,WAGI,OAAO,SAAC8rB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAaztB,EAAmBoD,yBACnC,IAAA0sB,OACI,EAAKkB,qBAAqBG,WAAW,CACjCzE,UAAU,EACVkC,QAAS1tB,aAAO,EAAPA,EAAS0tB,UAEtB,EAAKqC,yBAAyBG,eAAe,CACzC1E,UAAU,EACVkC,QAAS1tB,aAAO,EAAPA,EAAS0tB,YAG1B,IAAAmB,QAAM,6D,2EAIF,GAHMrvB,EAAQssB,EAAM3R,aACduD,EAAUle,EAAM0qB,OAAOjM,sBAEZP,EAAQ4R,WACrB,MAAM,IAAI,GAAiB3a,GAAqBO,uBAGnC,SAAMzX,KAAKoyB,uBAAuBG,aAC/CtS,EAAQ4R,WACRtvB,I,OAGJ,OALQrD,EAAS,SAGhB,KAEM,CAAP,GAAO,IAAA4vB,cACHztB,EAAmBkD,sBACnBvE,KAAK0yB,gCAAgC3wB,EAAM0qB,OAAOlM,yBAC5CvgB,KAAK2yB,4BAA4BzzB,GACjCA,I,WAGhBguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBhvB,EAAmBqD,mBAAoBhF,EAAxD,IAlCR,CAqCR,EAEA,YAAAmzB,eAAA,SACI3zB,EACAqD,GAFJ,WAII,OAAO,SAAC8rB,GACJ,WAAI,EAAAF,YAAW,SAACO,GACZ,IACMrF,EADQgF,EAAM3R,WACG2M,SAAS3L,cAEhC,IAAK2L,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpDmX,EAASG,MAAK,IAAAC,cAAaztB,EAAmB2V,0BAE9C,EAAKob,uBACAS,eAAexJ,EAAS9jB,GAAIrG,EAAMqD,GAClC2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cAAaztB,EAAmBwV,wBAAyB3X,IAE7DwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBAAkBtuB,EAAmB4V,qBAAsB5X,GAEnE,GACR,GAvBA,CAwBR,EAEA,YAAAyzB,oBAAA,SACIvwB,GADJ,WAGI,OAAO,SAAC8rB,GACJ,IACMhF,EADQgF,EAAM3R,WACG2M,SAAS3L,cAEhC,IAAK2L,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,OAAO,EAAKgb,aAAalJ,EAAS9jB,GAAIhD,EAA/B,CAAwC8rB,EACnD,CACJ,EAEQ,YAAAqE,gCAAR,SAAwCpS,G,MACpC,OAGK,QAHE,EACHA,EAAYsQ,iBAAiBC,SACzB,yEACH,QAET,EAEQ,YAAA8B,4BAAR,SAAoCzzB,GAChC,OAAO,gCACAA,GAAI,CACPkK,UAAU,gCACHlK,EAAKkK,UAAQ,CAChB2pB,UAAW7zB,EAAKkK,SAAS2pB,UAAU1yB,KAAI,SAACgb,GAAY,OAAC,gCAC9CA,GAAO,CACV2X,mBAAmB,GAF6B,OAMhE,EACJ,EA5JA,G,YCbe,SAASC,GAAgBC,GACpC,OAAO,IAAAC,MAAKD,GAAUvzB,KAAK,IAC/B,CCEe,SAASyzB,GACpBC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOzzB,MAAMC,QAAQwzB,GACfL,IAAa,oBAAII,EAAiBC,ICH7B,SACXD,EACAE,GAEA,IAAMC,GAAY,IAAArwB,OAAK,IAAA4L,QAAOwkB,GAAoB,SAACE,GAAO,OAACA,CAAD,KACpDC,GAAY,IAAAvwB,OAAK,IAAAH,QAAOuwB,IAE9B,OAAON,IAAa,qBAAI,IAAAU,YAAWN,EAAcG,GAAeE,GACpE,CDJUE,CAAcP,EAAcC,EACtC,CEJA,SATkC,CAC9B,uCACA,sCACA,WACA,yBACA,WACA,sB,GCKJ,YACI,WAAYj0B,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAASa,EAASH,KAAKiB,SAAQ,K,OAEjD,EAAKzB,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPuD,oBAOvD,EAPA,CAAuD,GCGvD,kBACI,WAAoB4vB,GAAA,KAAAA,eAAAA,CAAgC,CAiDxD,OA/CI,YAAAgE,aAAA,SACIhtB,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE,IAAAqpB,OAAUoD,QAAV,MAAsB,CAAC,EAAC,GAAP,QAAS/B,EAAO,UAE7BG,EAAM,4BAA4B7qB,EAClCpG,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eACPzwB,IAAcsyB,EAAK,CAChBxB,OAAQ,CACJoD,QAASoB,GAAoB,GAA2BpB,IAE5D7yB,QAAO,EACP8wB,QAAO,IAEVb,OAAM,SAAC1vB,GACJ,GAAIA,EAAMN,QAAU,KAAOM,EAAMN,OAAS,IACtC,MAAM,IAAI,GAA0BM,GAGxC,MAAMA,CACV,GACR,EAEA,YAAAmzB,eAAA,SACIttB,EACArG,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxE,IAAA0vB,OAAUoD,QAAV,MAAsB,CAAC,EAAC,GAAP,QAAS/B,EAAO,UAE7BG,EAAM,4BAA4B7qB,EAClCpG,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe2D,IAAI9B,EAAK,CAChCxB,OAAQ,CACJoD,QAASoB,GAAoB,GAA2BpB,IAE5D9yB,KAAI,EACJC,QAAO,EACP8wB,QAAO,GAEf,EACJ,EAlDA,G,eCRA,wBAgDA,QA/CI,YAAA7tB,QAAA,SAAQyxB,EAAaC,GACjB,OAAO,IAAA1xB,SAAQpC,KAAK+zB,WAAWF,GAAQ7zB,KAAK+zB,WAAWD,GAC3D,EAEQ,YAAAC,WAAR,SAAmBhtB,GACf,MAAO,CACHitB,WAAYjtB,EAAKitB,WACjBC,SAAUltB,EAAKktB,SACf1uB,GAAIwB,EAAKxB,GACTkjB,UAAW,CACPyL,aAAcntB,EAAK0hB,UAAUyL,aACxBC,QACAngB,MAAK,SAACogB,EAAOC,GACV,UAAGD,EAAME,UAAYF,EAAMG,WAAYC,cACnC,GAAGH,EAAMC,UAAYD,EAAME,UAD/B,IAIHl0B,KAAI,SAACsO,GAAS,OACX8lB,kBAAmB9lB,EAAK8lB,kBACxBH,UAAW3lB,EAAK2lB,UAChBI,SAAU/lB,EAAK+lB,SACfH,UAAW5lB,EAAK4lB,UAJL,IAMnB1rB,iBAAkB9B,EAAK0hB,UAAU5f,iBAC5BsrB,QACAngB,MAAK,SAACogB,EAAOC,GAAU,UAAGD,EAAM7uB,IAAKivB,cAAc,GAAGH,EAAM9uB,GAArC,IACvBlF,KAAI,SAACsO,GAAS,OACXgmB,OAAQhmB,EAAKgmB,OACbC,UAAWjmB,EAAKimB,UAFL,IAInBlM,cAAe3hB,EAAK0hB,UAAUC,cACzByL,QACAngB,MAAK,SAACogB,EAAOC,GACV,UAAGD,EAAME,UAAYF,EAAMG,WAAYC,cACnC,GAAGH,EAAMC,UAAYD,EAAME,UAD/B,IAIHl0B,KAAI,SAACsO,GAAS,OACX8lB,kBAAmB9lB,EAAK8lB,kBACxBH,UAAW3lB,EAAK2lB,UAChBI,SAAU/lB,EAAK+lB,SACfH,UAAW5lB,EAAK4lB,UAChBM,aAAclmB,EAAKkmB,aALR,KAS/B,EACJ,EAhDA,G,GCHA,YASI,WAAY5gB,EAA8B6gB,GAA1C,MACI,YACI,2GACH,K,OAED,EAAKp2B,KAAO,mBACZ,EAAKC,KAAO,eACZ,EAAKoF,KAAO,CACRkQ,SAAQ,EACR6gB,QAAO,G,CAEf,CACJ,OArB8C,oBAqB9C,EArBA,CAA8C,G,GCe9C,WACI,WAAoB1C,GAAA,KAAAA,uBAAAA,CAAgD,CAsDxE,OApDI,YAAA2C,SAAA,SAAS1L,EAAqB9mB,GAA9B,WACI,IAAK8mB,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,OAAOvX,KAAKoyB,uBAAuBG,aAAalJ,EAAS9jB,GAAIhD,GAAS2sB,MAAK,SAAC7vB,GACxE,IAAM21B,EAAa,IAAI,GAEvB,KACI3L,EAASK,qBAAuBrqB,EAASH,KAAKwqB,oBAC9C,EAAKuL,gBAAgB5L,EAAS/gB,QAASjJ,EAASH,KAAKoJ,UACrD,EAAK4sB,yBACD7L,EAASxgB,iBACTxJ,EAASH,KAAK2J,mBAElBmsB,EAAW5yB,QAAQinB,EAAStiB,KAAM1H,EAASH,KAAK6H,OAKpD,MAAM,IAAI,GACN,EAAKouB,uBAAuB9L,GAC5B,EAAK8L,uBAAuB91B,EAASH,MAE7C,GACJ,EAEQ,YAAA+1B,gBAAR,SAAwBG,EAAoBC,GACxC,OAAO,IAAAjzB,UAAQ,IAAA/B,KAAI+0B,EAAU,SAAS,IAAA/0B,KAAIg1B,EAAU,QACxD,EAEQ,YAAAH,yBAAR,SACII,EACAC,GAEA,OAAO,IAAAnzB,UAAQ,IAAA/B,KAAIi1B,EAAmB,SAAS,IAAAj1B,KAAIk1B,EAAmB,QAC1E,EAEQ,YAAAJ,uBAAR,SAA+B9L,GACnB,IAAAtiB,EAAwDsiB,EAAQ,KAA1D/gB,EAAkD+gB,EAAQ,QAAjDxgB,EAAyCwgB,EAAQ,iBAA/BK,EAAuBL,EAAQ,mBAExE,MAAO,CACHtiB,KAAM,CACFitB,WAAYjtB,EAAKitB,WACjBC,SAAUltB,EAAKktB,SACfxL,UAAW1hB,EAAK0hB,WAEpBngB,QAAO,EACPO,iBAAgB,EAChB6gB,mBAAkB,EAE1B,EACJ,EAvDA,G,GCRA,WACI,WAAoB8L,GAAA,KAAAA,qBAAAA,CAA4C,CAoBpE,OAjBI,YAAAhD,WAAA,SAAWjwB,GADX,WAEI,OAAO,EAAA4rB,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MAAK,IAAAC,cAAa9nB,EAAiBmB,sBAE5C,EAAKqtB,qBACAhD,WAAWjwB,GACX2sB,MAAK,SAAC7vB,GACHqvB,EAASG,MACL,IAAAC,cAAa9nB,EAAiBiB,oBAAqB5I,EAASH,OAEhEwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OAAM,IAAAiwB,mBAAkB3oB,EAAiBkB,iBAAkB7I,GACxE,GACR,GACJ,GAhBA,iBADC,I,+BAkBL,C,CArBA,GCEA,kBACI,WAAoBkvB,GAAA,KAAAA,eAAAA,CAAgC,CAuBxD,OArBI,YAAAiE,WAAA,SAAW,G,IAAA,aAAsC,CAAC,EAAC,EAAtCvC,EAAO,UAAErB,EAAM,SAGxB,OAAO5uB,KAAKuuB,eACPzwB,IAHO,oCAGU,CACdmyB,QAAO,EACP9wB,SAAS,eACL+wB,OAAQ,GAAYC,OACpB,iBAAkBJ,IACfC,IAEPpB,OAAM,IAETQ,OAAM,SAAC1vB,GACJ,GAAIA,EAAMN,QAAU,KAAOM,EAAMN,OAAS,IACtC,MAAM,IAAI,GAA0BM,GAGxC,MAAMA,CACV,GACR,EACJ,EAxBA,G,YCVe,SAAS+1B,GACpBzzB,GAEA,IAAM0zB,EAAkB1zB,EAExB,MAC+B,iBAApB0zB,GAC4B,iBAA5BA,EAAgBvzB,SACkB,iBAAlCuzB,EAAgBvzB,QAAQyL,KAEvC,CCWA,kBACI,WACY+nB,EACAC,EACAC,GAFA,KAAAF,uBAAAA,EACA,KAAAC,uBAAAA,EACA,KAAAC,6BAAAA,CACT,CAiHP,OA/GI,YAAAC,eAAA,SACItR,EACAjiB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,IAEQ0H,EAFM1H,EAAM3R,WACC+P,OAAOlM,wBACyBqQ,iBAAgB,kCAE/DkF,EAAiB,SAACloB,GACpB,WAAAqf,MACI,EAAK0I,uBAAuBK,eAAc,gCACjCxR,GAAe,CAAE5W,MAAK,IAC3BrL,IAEN2qB,MACE,IAAA+I,YAAU,WACN,WAAA1N,QACI,EAAKqN,uBAAuB9C,oBAAoBvwB,EAAhD,CAAyD8rB,IACzD,IAAAiC,KAAG,IAAAxB,cAAanmB,GAAmBY,0BAFvC,IAPR,EAcJ,OAAO,IAAAgf,SACH,IAAA+H,KAAG,IAAAxB,cAAanmB,GAAmBW,0BACnCysB,GACM,IAAA9I,MAAK,EAAK4I,6BAA6BK,SAAlC,CAA4C7H,IAAQnB,MACrD,IAAA+I,YAAU,SAACj0B,G,MACP,OAAAyzB,GAAuCzzB,IACjC,IAAAumB,SAAO,IAAA+H,IAAGtuB,GAAS8zB,EAA6B,QAAf,EAAC9zB,EAAOG,eAAO,eAAEyL,SAClD,IAAA0iB,IAAGtuB,E,KAGjB8zB,KACR5I,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB1nB,GAAmBa,qBAAsB9J,EAA1D,IAGZ,CACJ,EAEA,YAAAoyB,cAAA,SACIqE,EACA5zB,GAFJ,WAII,OAAO,IAAAgmB,SACH,IAAA+H,KAAG,IAAAxB,cAAanmB,GAAmBc,kCACnC,IAAA2nB,QAAM,6D,uEACe,SAAMpxB,KAAK21B,uBAAuB7D,cAC/CqE,EACA5zB,I,OAGJ,OALQrD,EAAS,SAGhB,KAEM,CAAP,GAAO,IAAA4vB,cAAanmB,GAAmBU,+BAAgCnK,I,WAE7EguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB1nB,GAAmBe,4BAA6BhK,EAAjE,IAGZ,EAEA,YAAA02B,eAAA,SACI1F,EACAnuB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAanmB,GAAmB0tB,2BACnC,IAAApJ,MAAK,EAAK0I,uBAAuBS,eAAe1F,EAAanuB,IAAU2qB,MACnE,IAAA+I,YAAU,SAAC,G,IAAE/2B,EAAI,OACb,WAAAqpB,QACI,EAAKqN,uBAAuB9C,oBAAoBvwB,EAAhD,CAAyD8rB,IACzD,IAAAiC,KAAG,IAAAxB,cAAanmB,GAAmB2tB,wBAAyBp3B,EAAK6E,OAFrE,MAMVmpB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB1nB,GAAmB4tB,qBAAsB72B,EAA1D,IAZR,CAeR,EAEA,YAAA82B,gBAAA,SACIj0B,GADJ,WAGI,OAAO,SAAC8rB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAanmB,GAAmB8tB,4BACnC,IAAAxJ,MAAK,EAAK0I,uBAAuBa,gBAAgBj0B,IAAU2qB,MACvD,IAAA+I,YAAU,SAAC,G,IAAE/2B,EAAI,OACb,WAAAqpB,QACI,EAAKqN,uBAAuB9C,oBAAoBvwB,EAAhD,CAAyD8rB,IACzD,IAAAiC,KACI,IAAAxB,cACInmB,GAAmBkK,yBACnB3T,EAAK6E,OALjB,MAWVmpB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB1nB,GAAmB+tB,sBAAuBh3B,EAA3D,IAjBR,CAoBR,EACJ,EAtHA,G,YCdA,kBACI,WAAoB6uB,GAAA,KAAAA,eAAAA,CAAgC,CAgDxD,OA9CI,YAAAyH,cAAA,SACIxR,EACA,G,IAAEyL,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAIT,OAAOjwB,KAAKuuB,eAAe0D,KAFf,2BAEyB,CACjChC,QAAO,EACP9wB,QAAS6wB,GACT9wB,KAAMslB,GAEd,EAEA,YAAAsN,cAAA,SACIqE,EACA,G,IAAElG,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAIT,OAAOjwB,KAAKuuB,eAAe0D,KAFf,mCAEmC,CAC3ChC,QAAO,EACP9wB,QAAS6wB,GACT9wB,KAAMi3B,GAEd,EAEA,YAAAC,eAAA,SACI1F,EACA,G,IAAET,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAIT,OAAOjwB,KAAKuuB,eAAe0D,KAFf,oCAEyB,CACjChC,QAAO,EACP9wB,QAAS6wB,GACT9wB,KAAMwxB,GAEd,EAEA,YAAA8F,gBAAA,SAAgB,G,IAAEvG,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAKrB,OAAOjwB,KAAKuuB,eAAeoI,OAFf,oCAE2B,CAAE1G,QAAO,EAAE9wB,QAAS6wB,IAC/D,EACJ,EAjDA,G,YCEA,kBACI,WAAoB4G,GAAA,KAAAA,yBAAAA,CAAoD,CAiB5E,OAdI,YAAAnE,eAAA,SAAelwB,GADf,WAEI,OAAO,IAAAgmB,SACH,IAAA+H,KAAG,IAAAxB,cAAa5iB,GAAqBY,2BACrC,IAAAskB,QAAM,6D,uEACe,SAAMpxB,KAAK42B,yBAAyBC,WAAWt0B,I,OAEhE,OAFQrD,EAAS,SAAuD,KAEjE,CAAP,GAAO,IAAA4vB,cAAa5iB,GAAqBU,wBAAyB1N,I,WAExEguB,MACE,IAAAC,aAAW,SAAC9tB,GACR,OAAAgxB,GAAiBnkB,GAAqBW,qBAAsBxN,EAA5D,IAGZ,GAbA,iBADC,I,mCAeL,C,CAlBA,G,YCAA,kBACI,WAAoBkvB,GAAA,KAAAA,eAAAA,CAAgC,CAcxD,OAZI,YAAAsI,WAAA,SAAW,G,IAAE5G,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGhB,OAAOjwB,KAAKuuB,eAAezwB,IAFf,8BAEwB,CAChCmyB,QAAO,EACP9wB,SAAS,eACL+wB,OAAQ,GAAYC,OACpB,iBAAkBJ,IACfC,KAGf,EACJ,EAfA,G,eCPI,SAAY8G,GAAZ,WACUC,EAAc,IAAIhI,SAAW,SAAC5O,EAAG6W,GACnC,EAAKC,OAASD,CAClB,IAEAh3B,KAAK82B,QAAU/H,QAAQmI,KAAK,CAACJ,EAASC,GAC1C,E,GCRJ,YACI,WAAYv4B,GAAZ,MACI,YACIA,GACI,2FACP,K,OAED,EAAKE,KAAO,4BACZ,EAAKC,KAAO,wB,CAChB,CACJ,OAVuD,oBAUvD,EAVA,CAAuD,GCGvD,kBACI,WAAoBw4B,GAAA,KAAAA,kBAAAA,CAA6C,CAiCrE,OA/BU,YAAAC,eAAN,SAAwBC,EAAiBP,G,kIAC/BC,EAAc,IAAI,GAAmBD,IAErCpI,EAAW1uB,KAAKm3B,kBAAkBre,QAAO,SAACwe,GAC5CA,EAAc3jB,SAAQ,SAAC4jB,GAKW,IAJP13B,MAAMotB,KAAKsK,EAASC,cAAcx0B,QAAO,SAACy0B,GAC7D,OAAAJ,EAAQ5X,MAAK,SAAC7G,GAAW,OAAA6e,IAAS7e,GAAU6e,EAAKC,SAAS9e,EAAjC,GAAzB,IAGexY,QAInB22B,EAAYE,OAAO,IAAI,GAC3B,GACJ,KAESU,QAAQC,SAAS14B,KAAM,CAAE24B,WAAW,EAAMC,SAAS,I,iBAGzC,O,sBAAA,GAAMf,EAAYD,S,OAIjC,OAJMiB,EAAS,SAEfrJ,EAASsJ,aAEF,CAAP,EAAOD,G,OAIP,M,WAFArJ,EAASsJ,aAEH,E,yBAGlB,EAlCA,G,YCIA,kBACI,WAAoBC,QAAA,IAAAA,IAAAA,EAAkCrI,QAAlC,KAAAqI,QAAAA,CAAqE,CAK7F,OAHI,YAAAnf,OAAA,SAAOof,GACH,OAAO,IAAIl4B,KAAKi4B,QAAQE,iBAAiBD,EAC7C,EACJ,EANA,G,SCFA,YACI,WAAY15B,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAPkD,oBAOlD,EAPA,CAAkD,GCHnC,SAASy5B,GAAShI,GAC7B,IAAK,kBAAkBiI,KAAKjI,GACxB,MAAM,IAAI,GAAqB,sCAInC,IAAMkI,EAASV,SAASW,cAAc,KAEtCD,EAAOE,KAAOpI,EAId,IAAMqI,EACFH,EAAOG,OAA8D,IAAtDrI,EAAIzH,QAAW2P,EAAOI,SAAQ,IAAIJ,EAAOG,MAAiBH,EAAOG,KAAO,GAE3F,MAAO,CACHE,KAAML,EAAOK,KACbD,SAAUJ,EAAOI,SACjBF,KAAMF,EAAOE,KACbI,OAAWN,EAAOO,SAAQ,KAAKP,EAAOI,UAAWD,EAAO,IAAIA,EAAS,IACrEK,SAAUR,EAAOQ,SACjBL,KAAI,EACJI,SAAUP,EAAOO,SACjBE,OAAQT,EAAOS,OAEvB,CC3Be,SAASC,GACpBv6B,EACAE,GAEA,OAAOF,EAAOE,OAASA,CAC3B,C,SCSA,WAGI,WAAYs6B,EAA8BC,EAAgCC,GAAhC,KAAAD,cAAAA,EAAgC,KAAAC,SAAAA,EACtEn5B,KAAKo5B,cAAiC,MAAjBH,EAAuB,IAAMb,GAASa,GAAcL,MAC7E,CA6DJ,OAnDI,YAAA3G,KAAA,SAIIoH,EACA92B,GALJ,WAOU+2B,EAAet5B,KAAKk5B,cAE1B,GAAItJ,SAAW0J,EAAf,CAIA,IAAKA,EACD,MAAM,IAAIx6B,MAAM,4DAGpB,IAAMW,EACF8C,IACA,IAAAg3B,WAAwB3J,OAAQ,WAC3B1C,MACG,IAAAlqB,SACI,SAACq2B,GACG,OAAAA,EAAMT,SAAW,EAAKQ,eACtBJ,GAAcK,EAAMt1B,KAAMs1B,EAAMt1B,KAAKpF,QAEhC,IADL,CAAC4D,EAAQi3B,YAAaj3B,EAAQk3B,WAAW9Q,QAAQ0Q,EAAMt1B,KAAKpF,KAF5D,KAKR,IAAA0B,MAAI,SAACg5B,GACD,GAAI92B,EAAQk3B,YAAcJ,EAAMt1B,KAAKpF,KACjC,MAAM06B,EAAMt1B,KAGhB,OAAOs1B,EAAMt1B,IACjB,KACA,IAAA21B,MAAK,IAERC,YAIT,OAFAL,EAAaM,aAAY,gCAAKP,GAAK,CAAEpZ,QAASjgB,KAAKm5B,WAAYn5B,KAAKo5B,eAE7D35B,C,CACX,EAEA,YAAAo6B,UAAA,SAAUjK,GACN5vB,KAAKk5B,cAAgBtJ,CACzB,EAEA,YAAAkK,WAAA,SAAW7Z,GACPjgB,KAAKm5B,SAAWlZ,CACpB,EACJ,EAlEA,GCGA,GARA,SAAuBrH,EAAanb,EAAWgwB,GAC3C,OAAKhwB,GAAQgwB,EAINsM,GAAoBnhB,EAAQnb,EAAKgwB,GASrC,SAA2D7U,GAC9D,IAAMohB,EAAe,YAAG,a,8CAAsB,QAAR,oBAAQ,EAAzB,CAAiBphB,GAgBtC,OAdAjb,OAAOub,oBAAoBN,EAAO3a,WAAW0V,SAAQ,SAAClW,GAClD,IAAMgwB,EAAa9vB,OAAOs8B,yBAAyBrhB,EAAO3a,UAAWR,GAEhEgwB,GAAsB,gBAARhwB,GAInBE,OAAOC,eACHo8B,EAAgB/7B,UAChBR,EACAs8B,GAAoBnhB,EAAO3a,UAAWR,EAAKgwB,GAEnD,IAEOuM,CACX,CA9BeE,CAAmBthB,EAIlC,EA+BO,SAASmhB,GACZ5Z,EACA1iB,EACAgwB,GAEA,GAAgC,mBAArBA,EAAWnvB,MAClB,OAAOmvB,EAGX,IAAI/T,EAAY+T,EAAWnvB,MAE3B,MAAO,CACHR,IAAA,WAEI,IAAMq8B,EAAczgB,EAAO0gB,KAAKp6B,MAOhC,OALArC,OAAOC,eAAeoC,KAAMvC,GAAK,gCAC1BgwB,GAAU,CACbnvB,MAAO67B,KAGJA,CACX,EACAjM,IAAG,SAAC5vB,GACAob,EAASpb,CACb,EAER,CCpEA,kBAQI,WAAY+7B,GCZD,IAAmBjK,EDa1BpwB,KAAKs6B,eAAiB,CAClBlC,GAASiC,GAAczB,QCdDxI,EDeZgI,GAASiC,GCdpBjC,GAC6B,IAAhChI,EAAIsI,SAAS/P,QAAQ,OACfyH,EAAIoI,KACJpI,EAAIoI,KAAKl1B,QAAQ8sB,EAAIsI,SAAU,OAAOtI,EAAIsI,YDWVE,QAEtC54B,KAAKu6B,cAAe,EACpBv6B,KAAKw6B,WAAa,CAAC,CACvB,CA6EJ,OA3EI,YAAAC,OAAA,WACQz6B,KAAKu6B,eAITv6B,KAAKu6B,cAAe,EAEpB3K,OAAO8K,iBAAiB,UAAW16B,KAAK26B,gBAC5C,EAEA,YAAAC,WAAA,WACS56B,KAAKu6B,eAIVv6B,KAAKu6B,cAAe,EAEpB3K,OAAOiL,oBAAoB,UAAW76B,KAAK26B,gBAC/C,EAEA,YAAAG,YAAA,SACIn8B,EACAo8B,GAEA,IAAIC,EAAYh7B,KAAKw6B,WAAW77B,GAE3Bq8B,IACDh7B,KAAKw6B,WAAW77B,GAAQq8B,EAAY,KAGH,IAAjCA,EAAUrS,QAAQoS,IAClBC,EAAUhsB,KAAK+rB,EAEvB,EAEA,YAAAE,eAAA,SACIt8B,EACAo8B,GAEA,IAAMC,EAAYh7B,KAAKw6B,WAAW77B,GAElC,GAAKq8B,EAAL,CAIA,IAAMx4B,EAAQw4B,EAAUrS,QAAQoS,GAE5Bv4B,GAAS,GACTw4B,EAAUE,OAAO14B,EAAO,E,CAEhC,EAEA,YAAA24B,QAAA,SAAuC9B,EAAyBpZ,GAC5D,IAAM+a,EAAYh7B,KAAKw6B,WAAWnB,EAAM16B,MAEnCq8B,GAILA,EAAUrnB,SAAQ,SAAConB,GAAa,OAAC9a,EAAU8a,EAAS1B,EAAOpZ,GAAW8a,EAAS1B,EAA/C,GACpC,EAGQ,YAAAsB,eAAR,SAAuBS,GACnB,IAC0D,IAAtDp7B,KAAKs6B,eAAe3R,QAAQyS,EAAaxC,SACxCI,GAAcoC,EAAar3B,KAAoCq3B,EAAar3B,KAAKpF,MAFtF,CAOA,IAAM,EAAwBy8B,EAAar3B,KAAnCkc,EAAO,UAAKoZ,GAAK,cAAnB,aAENr5B,KAAKm7B,QAAQ9B,EAAOpZ,E,CACxB,GAXA,iBADC,I,mCAaL,C,CA5FA,G,eEDA,YACI,mBACI,YAAM,0EAAwE,K,OAE9E,EAAKvhB,KAAO,2CACZ,EAAKC,KAAO,0C,CAChB,CACJ,OAPsE,oBAOtE,EAPA,CAAsE,G,GCAtE,YACI,mBACI,YAAM,oEAAkE,K,OAExE,EAAKD,KAAO,8CACZ,EAAKC,KAAO,6C,CAChB,CACJ,OAPyE,oBAOzE,EAPA,CAAyE,G,GCAzE,YACI,mBACI,YAAM,2EAAyE,K,OAE/E,EAAKD,KAAO,+BACZ,EAAKC,KAAO,4B,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,GCM1D,kBACI,WAAoB08B,GAAA,KAAAA,iBAAAA,CAAoC,CA2F5D,OAvFU,YAAAC,OAAN,SAAaC,EAA2B99B,G,+FACpC,MAAyB,iBAAd89B,EACA,CAAP,EAAOv7B,KAAKw7B,2BAA2BD,EAAW99B,IAG/C,CAAP,EAAOuC,KAAKy7B,+CAA+CF,G,QAGjD,YAAAE,+CAAd,SACI/7B,G,sHAEA,IAAKM,KAAK07B,mCAAmCh8B,GACzC,MAAMA,EAGV,SAAMM,KAAK27B,YAAYj8B,EAAMR,KAAK08B,2BAA2B73B,KAAKtG,M,OAElE,OAFA,SAEO,CAAP,EAAOuC,KAAK67B,qB,QAGF,YAAAL,2BAAd,SACIj2B,EACA9H,G,sHAEA,GAAW,iBAAP8H,EACA,MAAMzG,MAAM,+CAGhB,IAAKrB,EACD,MAAMqB,MAAM,kCAGhB,SAAMkB,KAAK27B,YAAYl+B,I,OAEvB,OAFA,SAEO,CAAP,EAAOuC,KAAK67B,qB,QAGR,YAAAA,kBAAR,sBACI,OAAO77B,KAAKq7B,iBACPnF,UACAhJ,MAAK,IAAAwM,MAAK,IACVxM,MACG,IAAA+I,YAAU,SAAO,G,IAAEv2B,EAAK,QAAEkO,EAAK,Q,4FAC3B,GAAIlO,aAAiB,GACjB,MAAM,IAAI,GAGd,GAAIA,IAAUkO,EACV,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO,CACHjP,KAAM,4BACNoF,KAAM,CACF+3B,yBAA0BluB,I,WAKzC+rB,WACT,EAEQ,YAAAgC,YAAR,SAAoBI,GAChB,IAAMC,EAA6B,6BAE/BC,EAA2BrE,SAASsE,eAAeF,GAUvD,OARIC,GAA4BA,EAAyBE,YACrDF,EAAyBE,WAAWC,YAAYH,IAGpDA,EAA2BrE,SAASW,cAAc,QACzB8D,aAAa,KAAML,GAC5CpE,SAAS14B,KAAKo9B,YAAYL,GAEnBj8B,KAAKq7B,iBAAiBkB,KAAKP,EAA4BD,EAClE,EAEQ,YAAAL,mCAAR,SAA2Ch8B,GACjC,MAA0CA,EAAuBR,MAAQ,CAAC,EAAxE08B,EAA0B,6BAElC,MACe,+BAH2B,UAItCA,GACoC,8BAApCA,EAA2Bj9B,IAEnC,EACJ,EA5FA,G,YCVA,IAAY69B,IAAZ,SAAYA,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAYA,KAAAA,GAAuB,K,SAanC,YACI,WAAmBrlB,GAAnB,MACI,YAOR,SAAyBxY,GACrB,OAAQA,GACJ,KAAK69B,GAAwBC,uBACzB,MAAO,oFAEX,KAAKD,GAAwBE,sBACzB,MAAO,mFAEX,KAAKF,GAAwBG,uBACzB,MAAO,oFAEX,KAAKH,GAAwBI,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBc,CAAgBzlB,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAKzY,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OAPiD,oBAOjD,EAPA,CAAiD,G,GCTjD,YACI,mBACI,YAAM,sFAAoF,K,OAE1F,EAAKD,KAAO,4BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAPuD,oBAOvD,EAPA,CAAuD,G,GCAvD,YACI,mBACI,YAAM,qDAAmD,K,OAEzD,EAAKD,KAAO,+BACZ,EAAKC,KAAO,yB,CAChB,CACJ,OAP0D,oBAO1D,EAPA,CAA0D,G,GCiB1D,WAUI,WACYk+B,EACAC,GAFZ,WACY,KAAAD,4BAAAA,EACA,KAAAC,wBAAAA,EAER98B,KAAK+8B,WAAY,KAAAvkB,UACb,SAACwkB,EAAkCC,EAAiBC,GAChD,IAAMC,EAAS,IAAI,EAAAC,QAEnB,IAAKF,EACD,MAAM,IAAIp+B,MAmBd,OAhBA,EAAKu+B,UAAYL,EAAUM,OAAOJ,EAAU33B,GAAI,CAC5C03B,QAAO,EACPM,KAAM,YACNrF,SAAU,WACNiF,EAAOtO,KAAK,CACRjhB,MAAOovB,EAAUQ,YAAY,EAAKH,aAEtCL,EAAUS,MAAM,EAAKJ,UACzB,EACA,iBAAkB,WACdF,EAAOtO,KAAK,CACRnvB,MAAO,IAAI,IAEnB,IAGGy9B,CACX,GACA,CAAE/6B,QAAS,SAAC9E,EAAGgI,GAAM,OAAAhI,IAAMgI,CAAN,GAE7B,CAwEJ,OAtEI,YAAAi3B,KAAA,SAAK90B,EAAqBw1B,GAA1B,WACI,OAAOj9B,KAAK68B,4BAA4BN,OAAOrN,MAAK,SAAC8N,GAC7CA,IACA,EAAKU,QAAU,EAAKX,UAChBC,EACAC,EACArF,SAASsE,eAAez0B,IAE5B,EAAKk2B,WAAaX,EAE1B,GACJ,EAEA,YAAA9G,QAAA,sBACI,OAAO,IAAA9E,QAAM,WACT,IAAM+L,EAAS,EAAKO,QACdV,EAAY,EAAKW,WAEvB,IAAKR,IAAWH,EACZ,MAAM,IAAI,GAAoBR,GAAwBI,8BAG1D,OAAO,IAAAxL,QAAM,WACT,IAAMwM,EAAUhG,SAASiG,cAAc,yBAEvC,OAAOD,GAAU,IAAAtN,IAAGsN,IAAW,IAAArN,YAAW,IAAI,GAClD,IAAGrD,MACC,IAAA4Q,YAAU,SAACx+B,GACP,OAAAA,EAAO4tB,MACH,IAAA6Q,OAjFD,MAkFC,IAAA9H,YAAU,SAACv2B,EAAO8C,GACd,OAAAA,EAlFRw7B,IAkF8B,IAAA1N,IAAG5wB,IAAS,IAAA6wB,YAAW7wB,EAA7C,IAHR,KAOJ,IAAAu2B,YAAU,SAAC2H,GAIP,OAHA,EAAKK,+BAA+Bd,EAAQS,GAC5CZ,EAAU9G,QAAQ,EAAKmH,WAEhBF,CACX,KACA,IAAAhQ,aAAW,SAACztB,GAAU,WAAA4wB,IAAG,CAAE5wB,MAAK,GAAV,IAE9B,GACJ,EAEQ,YAAAu+B,+BAAR,SAAuC5E,EAAiCuE,GACpE,IAAMM,EAAkBN,EAAQO,cAEhC,IAAKD,EACD,MAAM,IAAI,GAGd,IAAMhB,EAAYgB,EAAgBC,cAElC,IAAKjB,EACD,MAAM,IAAI,GAGdl9B,KAAK88B,wBACAhkB,QAAO,WAE+B,WAA/BokB,EAAUkB,MAAMC,YAChBhF,EAAMxK,KAAK,CACPnvB,MAAO,IAAI,IAGvB,IACCi4B,QAAQuF,EAAW,CAAEoB,YAAY,EAAMC,gBAAiB,CAAC,UAClE,EACJ,EAlHA,G,GCrBA,WAGI,WACYC,EACAvG,QAAA,IAAAA,IAAAA,EAAA,QADA,KAAAuG,cAAAA,EACA,KAAAvG,QAAAA,CACT,CAyBP,OAvBI,YAAAsE,KAAA,WAKI,OAJKv8B,KAAKy+B,eACNz+B,KAAKy+B,aAAez+B,KAAK0+B,eAGtB1+B,KAAKy+B,YAChB,EAEQ,YAAAC,YAAR,sBACUC,EAAe,gBACf/P,EAAS,CAAC,UAAU+P,EAAgB,mBAAmBh/B,KAAK,KAElE,OAAO,IAAIovB,SAAQ,SAAC6P,EAAS5H,GACzB,EAAKiB,QAAQ0G,GAAgB,WAAM,OAAAC,EAAQ,EAAK3G,QAAQ4G,WAArB,EAEnC,EAAKL,cACAM,WAAW,qCAAqClQ,GAChDQ,OAAM,SAAC1vB,GACJ,EAAK++B,kBAAeh7B,EACpBuzB,EAAOt3B,EACX,GACR,GACJ,EACJ,EA/BA,GCKe,SAASq/B,GAAqBC,GACzC,OAAO,IAAI,GACP,IAAI,GAA4BA,GAChC,IAAIC,GAEZ,C,SCVA,YACI,WAAYzgC,GAAZ,MACI,YACIA,GACI,yFACP,K,OAED,EAAKE,KAAO,+BACZ,EAAKC,KAAO,6B,CAChB,CACJ,OAV0D,oBAU1D,EAVA,CAA0D,G,GCA1D,YACI,WAAYH,GAAZ,MACI,YAAMA,GAAW,4EAA0E,K,OAE3F,EAAKE,KAAO,yBACZ,EAAKC,KAAO,sB,CAChB,CACJ,OAPoD,oBAOpD,EAPA,CAAoD,GCGpD,mBACI,WAAmBW,GAAnB,MACI,aACI,qBACI,uDACG,IAAAqkB,UAAQ,IAAAhE,QAAOrgB,IAAS,SAAC4/B,GACxB,WAAA7+B,KAAI6+B,GAAa,SAAC,GAAgB,OAAP,SAAO,GAAlC,KAENv/B,KAAK,QACV,K,OARc,EAAAL,OAAAA,EAUf,EAAKZ,KAAO,8BACZ,EAAKC,KAAO,4B,CAChB,CACJ,OAdyD,oBAczD,EAdA,CAAyD,G,YCKzD,IAAYwgC,GCIAC,IDJZ,SAAYD,GACR,kDACA,qDACA,sDACA,0DACH,CALD,CAAYA,KAAAA,GAAoB,KCIhC,SAAYC,GACR,kDACA,4CACA,wCACA,iCACA,iCACA,mDACA,iCACA,iCACA,kDACA,4CACA,qCACA,2DACA,oDACH,CAdD,CAAYA,KAAAA,GAAoB,KCkBzB,IAGP,cAGI,WACYC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GARA,KAAAR,MAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,eAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,gBAAAA,EAER7/B,KAAK8/B,QAAUlI,SAASW,cAAc,UAEtCv4B,KAAK8/B,QAAQC,IAAM,iDACnB//B,KAAK8/B,QAAQ1B,MAAM4B,OAAS,OAC5BhgC,KAAK8/B,QAAQ1B,MAAM6B,OAAS,OAC5BjgC,KAAK8/B,QAAQ1B,MAAM8B,SAAW,SAC9BlgC,KAAK8/B,QAAQ1B,MAAM+B,MAAQ,MAC/B,CA4JJ,OA1JI,YAAAC,QAAA,WACI,OAAOpgC,KAAKq/B,KAChB,EAEM,YAAAgB,OAAN,W,qIAGI,KAFMnD,EAAYtF,SAASsE,eAAel8B,KAAKs/B,eAG3C,MAAM,IAAI,GACN,qEAyCR,OArCApC,EAAUZ,YAAYt8B,KAAK8/B,SAC3B9/B,KAAK2/B,eAAelF,SAEd3D,GAAU,IAAAyC,WAAUv5B,KAAK8/B,QAAS,QACnC5S,MACG,IAAA+I,YAAU,SAAO,G,IAAErd,EAAM,S,yHAGrB,KAFM0nB,EAAgB1nB,GAAWA,EAA6B0nB,eAG1D,MAAM,IAAIxhC,MAAM,wDAKpB,OAFAkB,KAAK0/B,aAAa7F,UAAUyG,GAE5B,GAAMtgC,KAAK0/B,aAAazN,KACpB,CACItzB,KAAMwgC,GAAqBoB,gBAC3Bp+B,QAAS,CACLq+B,mBAAoBxgC,KAAKw/B,oBACzBiB,eAAgBzgC,KAAK6/B,gBACrBa,SAAU1gC,KAAK2gC,eACfC,YAAa5gC,KAAKu/B,aAClBsB,OAAQ7gC,KAAKy/B,QACb7G,OAAQhB,SAASkJ,SAASlI,OAC1Bj6B,KAAMqB,KAAKq/B,QAGnB,CACI7F,YAAa4F,GAAqB2B,gBAClCtH,UAAW2F,GAAqB4B,gB,cAfxC,S,eAmBJ,IAAAtH,MAAK,IAERC,YAEL,GAAM35B,KAAK4/B,oBAAoBxI,eAAe,CAACp3B,KAAK8/B,SAAUhJ,I,cAA9D,S,YAGJ,YAAAmK,OAAA,WACSjhC,KAAK8/B,QAAQ3B,gBAIlBn+B,KAAK8/B,QAAQ3B,cAAc/B,YAAYp8B,KAAK8/B,SAC5C9/B,KAAK2/B,eAAe/E,aACxB,EAEM,YAAAsG,WAAN,SACIC,EACAp9B,G,8HAcW,O,sBAXD+yB,EAAU92B,KAAK0/B,aAAazN,KAC9B,CACItzB,KAAMwgC,GAAqBiC,gBAC3Bj/B,QAAS,CAAEg/B,OAAM,EAAEp9B,KAAI,IAE3B,CACIy1B,YAAa4F,GAAqBiC,gBAClC5H,UAAW2F,GAAqBkC,eAIjC,GAAMthC,KAAK4/B,oBAAoBxI,eAAe,CAACp3B,KAAK8/B,SAAUhJ,I,OAArE,MAAO,CAAP,EAAO,U,OAEP,G,WAAI92B,KAAKuhC,oBAAoB,GAAQ,CACjC,GAAiC,sBAA7B,EAAMp/B,QAAQzC,MAAMY,KACpB,MAAM,IAAI,GAAuB,EAAM6B,QAAQzC,MAAMlB,SAGzD,GAAI,EAAM2D,QAAQ9C,SACd,MAAMO,EAA4B,EAAMuC,QAAQ9C,UAGpD,MAAM,IAAIP,MAAM,EAAMqD,QAAQzC,MAAMlB,Q,CAGxC,MAAM,E,yBAIR,YAAAgjC,qBAAN,SACIL,EACAp9B,G,qGAaA,OAXM+yB,EAAU92B,KAAK0/B,aAAazN,KAC9B,CACItzB,KAAMwgC,GAAqBsC,oBAC3Bt/B,QAAS,CAAEg/B,OAAM,EAAEp9B,KAAI,IAE3B,CACIy1B,YAAa4F,GAAqBsC,oBAClCjI,UAAW2F,GAAqBuC,mBAIjC,CAAP,EAAO3hC,KAAK4/B,oBAAoBxI,eAAe,CAACp3B,KAAK8/B,SAAUhJ,G,QAG7D,YAAA8K,aAAN,W,8HAUwB,OATd9K,EAAU92B,KAAK0/B,aAAazN,KAC9B,CACItzB,KAAMwgC,GAAqB0C,mBAE/B,CACIrI,YAAa4F,GAAqB0C,YAItB,GAAM9hC,KAAK4/B,oBAAoBxI,eAAe,CAACp3B,KAAK8/B,SAAUhJ,I,OAElF,KAFQ30B,EAAY,SAAsE,SAE7E4/B,QACT,MAAM,IAAI,GAA4B5/B,EAAQ7C,Q,kBAI9C,YAAAqhC,aAAR,sBACUjI,EAAW,uBACXsJ,EAAQpK,SAASqK,iBAAiB,eAAevJ,EAAQ,wBAE/D,OAAO74B,MAAM5B,UAAUk2B,MAClBh2B,KAAK6jC,GACLh/B,QAAO,SAACk/B,GAAS,OAAA9J,GAAS8J,EAAK1J,MAAME,WAAaA,CAAjC,IACjB11B,QAAO,SAACk/B,GACL,WAAAviB,QAAO,EAAK8f,SACPp/B,KAAI,SAAC+9B,GAAU,OAAAA,GAASA,EAAM+D,UAAf,IACfn/B,QAAO,SAACo/B,GAA6B,MAAkB,iBAAXA,CAAP,IACrC3iB,MAAK,SAAC2iB,GACH,OAAAA,EACKnhC,MAAM,OACNwe,MAAK,SAAC/gB,GAAS,OAA+C,IAA/CwjC,EAAK1J,KAAK7P,QAAQjqB,EAAK4E,QAAQ,IAAK,KAApC,GAFpB,GAJR,IASHjD,KAAI,SAAC6hC,GAAS,OAAAA,EAAK1J,IAAL,GACvB,EAEQ,YAAA+I,oBAAR,SAA4BlI,GACxB,OAAOA,EAAM16B,OAASygC,GAAqBkC,YAC/C,EACJ,EAjLA,G,YCLA,kBAII,WACYe,EACA1C,EACA2C,EACAC,EACAC,GALZ,WACY,KAAAH,QAAAA,EACA,KAAA1C,eAAAA,EACA,KAAA2C,oBAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,iCAAAA,EAqGJ,KAAAC,aAAgE,SAAO,G,IAAEtgC,EAAO,U,2HAEhF,O,sBAAA,GAAMnC,KAAK+0B,Y,cAAX,S,aAIA,GAAmB,iC,YAATr2B,KACN,MAAM,E,+BAIC,KAAP,EAAmBsB,KAAKuiC,gBAAe,SAA7B,EAAAG,KAAI,GAEdvgC,G,YAhHF,MAKFnC,KAAKuiC,gBAJL,IAAAI,OAAAA,OAAM,IAAG,IAAAD,KAAI,EACb,IAAAE,iBAAAA,OAAgB,IAAG,IAAAF,KAAI,EACvB,IAAAG,QAAAA,OAAO,IAAG,IAAAH,KAAI,EACd,IAAAI,WAAAA,OAAU,IAAG,IAAAJ,KAAI,EAGrB1iC,KAAK2/B,eAAe7E,YAAYsE,GAAqB2D,SAAS,SAAC,G,IAAE5gC,EAAO,UACpE,OAAAwgC,EAAOxgC,EAAP,IAEJnC,KAAK2/B,eAAe7E,YAAYsE,GAAqB4D,iBAAiB,SAAC,G,IAAE7gC,EAAO,UAC5E,OAAAygC,EAAiBzgC,EAAjB,IAEJnC,KAAK2/B,eAAe7E,YAAYsE,GAAqB6D,SAAS,SAAC,G,IAAE9gC,EAAO,UACpE,OAAA0gC,EAAQ1gC,EAAR,IAEJnC,KAAK2/B,eAAe7E,YAAYsE,GAAqB0C,WAAW,SAAC,G,IAAE3/B,EAAO,UACtE,OAAA2gC,EAAW3gC,EAAX,IAEJnC,KAAK2/B,eAAe7E,YAAYsE,GAAqB8D,QAASljC,KAAKyiC,cAEnEziC,KAAK2/B,eAAe7E,YAChBsE,GAAqB4D,iBACrB,SAAC,G,IAAE7gC,EAAO,UAAO,OAAC,EAAKghC,UAAYhhC,EAAQihC,QAA1B,IAErBpjC,KAAK2/B,eAAe7E,YAChBsE,GAAqBiE,YACrB,SAAC,G,IAAElhC,EAAO,UAAO,OAAC,EAAKmhC,KAAOnhC,EAAQohC,GAArB,GAEzB,CAqFJ,OAnFI,YAAAC,OAAA,WACI,OAAOxjC,KAAKsjC,IAChB,EAEA,YAAAG,YAAA,WACI,OAAOzjC,KAAKmjC,SAChB,EAEM,YAAA9C,OAAN,W,8HAMI,OALArgC,KAAK2/B,eAAelF,SAEdrW,EAAQpkB,KAAK0jC,iBACbC,GAAc,IAAAC,SAAQ5jC,KAAKqiC,QAASje,GAE1C,GAAMA,EAAMic,U,OACZ,OADA,SACA,GAAMtR,QAAQC,IAAI2U,EAAYtjC,KAAI,SAACwjC,GAAe,OAAAA,EAAWxD,QAAX,M,cAAlD,S,YAGJ,YAAAY,OAAA,WACIjhC,KAAK2/B,eAAe/E,aAEpB56B,KAAKqiC,QAAQ1uB,SAAQ,SAACyQ,GAClBA,EAAM6c,QACV,GACJ,EAEM,YAAA6C,OAAN,SACI3hC,EACA4hC,G,8HAGW,O,sBAAA,GAAM/jC,KAAK0jC,iBAAiBxC,WAC/BlhC,KAAKqiC,QAAQhiC,KAAI,SAAC+jB,GAAU,OAAAA,EAAMgc,SAAN,IAC5BpgC,KAAKsiC,oBAAoB1gC,UAAUO,EAAS4hC,K,cAKhD,MAAO,CAAP,EAAO,U,OAFkB,O,WAAA,GAAM/jC,KAAKwiC,iCAAiClH,OAAO,I,OAErE,OAFD0I,EAAmB,SAElB,GAAMhkC,KAAK0jC,iBAAiBxC,WAC/BlhC,KAAKqiC,QAAQhiC,KAAI,SAAC+jB,GAAU,OAAAA,EAAMgc,SAAN,IAC5BpgC,KAAKsiC,oBAAoB1gC,UAAUO,EAAS6hC,K,yBAKlD,YAAAC,iBAAN,SAAuB9hC,G,+FAInB,MAAO,CAAP,EAAOnC,KAAK0jC,iBAAiBlC,qBAAqBr/B,EAAQg/B,OAAQh/B,EAAQ4B,M,QAGxE,YAAAgxB,SAAN,W,+FACI,MAAO,CAAP,EAAO/0B,KAAK0jC,iBAAiB9B,e,QAGzB,YAAA8B,eAAR,WACI,IAAMtf,EAAQpkB,KAAKqiC,QAAQ,GAE3B,IAAKje,EACD,MAAM,IAAI,GACN,oEAIR,OAAOA,CACX,EAiBJ,EA7HA,G,YCtBe,SAAS8f,GACpB9gB,GAEA,OAAOgC,QAAShC,EAAiCxR,aACrD,C,SCCA,WACI,WAAoBuyB,GAAA,KAAAA,OAAAA,CAAgC,CA6CxD,OA3CI,YAAAviC,UAAA,SACIO,EACA6hC,GAEA,IAAMjiC,EAAQ/B,KAAKmkC,OAAOznB,WACpB2M,EAAWtnB,EAAMsnB,SAAS3L,cAC1B+O,EAAS1qB,EAAM0qB,OAAO5M,YACtBukB,EAAiBriC,EAAM+gB,YAAYe,qBACnCnW,EAAQ3L,EAAM2L,MAAMoc,WACpBua,EAAYtiC,EAAM2L,MAAMsc,eACxBnc,GAAU,IAAAP,MACZnL,EAAQmiC,YACR,WACA,SACA,WACA,SAEEvhB,EAAgBhhB,EAAM0jB,eAAeE,iBACvCxjB,EAAQoF,SACRpF,EAAQ6N,WAENu0B,EAAoBxiC,EAAM0jB,eAAeC,wBACzC8e,EACFJ,GAAkBv2B,GAAWq2B,GAAoBr2B,GACxC9L,EAAM8L,QAAQ0Q,kBAAiB,KAAK6lB,EAAeK,iBACtD1iC,EAAM8L,QAAQ0Q,kBAExB,IAAKimB,EACD,MAAM,IAAI,GAAiBttB,GAAqBY,qBAGpD,MAAO,CACHksB,iBAAgB,EAChBQ,UAAS,EACTnb,SAAQ,EACRoD,OAAM,EACN/e,MAAK,EACL22B,UAAS,EACTx2B,QAAO,EACPkV,cAAa,EACbwhB,kBAAiB,EAEzB,EACJ,EA9CA,G,GCMA,WACI,WAAoBJ,GAAA,KAAAA,OAAAA,CAAgC,CAoDxD,OAlDI,YAAArrB,OAAA,SAAO8H,EAAcre,GAArB,WAEU4+B,EADaxjC,OAAOwF,KAAKZ,EAAQ4+B,QACb3hC,QAAsB,SAACC,EAAQd,GACrD,IAEM+lC,EAFSniC,EAAQ4+B,OAEKxiC,GAE5B,OAAK+lC,GAIE,oBACAjlC,EAAM,CACT,IAAI,GACAd,EACA+lC,EAAaj9B,YACbi9B,EAAa9D,aAAe,GAC5B8D,EAAalE,oBAAsB,GACnCj+B,EAAQs+B,QAAU,CAAC,EACnB,IAAI,GAAkBjgB,GACtB,IAAI,GAAoBA,GACxB,IAAI,GAAmB,IAAIqe,IAC3B,iBAAkByF,EACZ,EAAKC,mBAAmBD,EAAa9yB,mBACrCnO,KAhBHhE,CAmBf,GAAG,IAEH,OAAO,IAAI,GACP0hC,EACA,IAAI,GAAoBvgB,GACxB,IAAI,GAA+B5gB,KAAKmkC,SACxC,IAAAt1B,MAAKtM,EAAS,SAAU,UAAW,UAAW,mBAAoB,cAClE,IAAI,GAAgCw8B,IAAqB,KAAA6F,wBAEjE,EAEQ,YAAAD,mBAAR,SAA2B/yB,GAEJ,IAEbwR,GAAaF,EADfljB,KAAKmkC,OAAOznB,WAAU,+BACW9K,GAErC,IAAKwR,EACD,MAAM,IAAI,GAAiBlM,GAAqBuM,0BAGpD,OAAOL,CACX,EACJ,EArDA,G,GCdA,YACI,mBACI,YAAM,2DAAyD,K,OAE/D,EAAK1kB,KAAO,kCACZ,EAAKC,KAAO,gC,CAChB,CACJ,OAP6D,oBAO7D,EAPA,CAA6D,G,GCgB7D,WACI,WACYkmC,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,mBAAAA,CACT,CAgLP,OA9KI,YAAAC,UAAA,SAAUhuB,EAAiBxU,GAA3B,WACI,OAAO,IAAI,EAAA4rB,YAAW,SAACO,GACnBA,EAASG,MAAK,IAAAC,cAAa/mB,GAAgB+F,qBAE3C,EAAK+2B,oBACAE,UAAUhuB,EAASxU,GACnB2sB,MAAK,SAAC7vB,GACHqvB,EAASG,MAAK,IAAAC,cAAa/mB,GAAgBM,mBAAoBhJ,EAASH,OACxEwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OAAM,IAAAiwB,mBAAkB5nB,GAAgBiG,gBAAiB3O,GACtE,GACR,GACJ,EAGA,YAAA2lC,kBAAA,SACIjuB,EACAxU,GAFJ,WAII,OAAO,IAAI,EAAA4rB,YAAW,SAACO,GACnBA,EAASG,MAAK,IAAAC,cAAa/mB,GAAgBgG,6BAE3C,EAAK82B,oBACAE,UAAUhuB,EAASxU,GACnB2sB,MAAK,SAAC7vB,GACHqvB,EAASG,MACL,IAAAC,cAAa/mB,GAAgBsF,2BAA4BhO,EAASH,OAEtEwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBAAkB5nB,GAAgBkG,wBAAyB5O,GAEnE,GACR,GACJ,EAEA,YAAA4lC,iBAAA,SACI1iC,GADJ,WAGI,OAAO,SAAC8rB,GACJ,WAAA+C,QAAM,WACF,IAAMra,EAAU,EAAKmuB,mBAAmB7W,EAAM3R,YAE9C,IAAK3F,EACD,MAAM,IAAI,GAAiBG,GAAqBU,gBAGpD,OAAO,EAAKmtB,UAAUhuB,EAASxU,EACnC,GARA,CASR,EAEA,YAAA4iC,YAAA,SACIhjC,EACAI,GAFJ,WAII,OAAO,SAAC8rB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAa/mB,GAAgBq9B,wBAChC,IAAAhU,QAAM,WACF,IAAMrvB,EAAQssB,EAAM3R,WACdgE,EAAiB3e,EAAM0qB,OAAOhM,oBAC9BO,EAA6Bjf,EAAM0qB,OAAO1L,gCAC1CsI,EAAWtnB,EAAMsnB,SAAS3L,cAEhC,IAAK2L,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,GAAI8R,EAASgc,uBACT,MAAM,IAAI,GAGd,OAAO,IAAApY,MACH,EAAK6X,mBAAmB/P,SAAS1L,EAAU9mB,GAAS2sB,MAAK,WACrD,SAAK2V,oBAAoBM,YACrB,EAAKG,uBACDnjC,QAAAA,EAAW,CAAC,EACZknB,EAAS9jB,GACT8jB,EAASkc,gBACT7kB,IACH,gCAEMne,GAAO,CACVpD,QAAS,CACLqmC,gBAAiBxkB,KAV7B,KAeNkM,MACE,IAAA+I,YAAU,SAAC52B,GACP,WAAAkpB,QAEI,EAAKwc,UAAU1lC,EAASH,KAAK6E,KAAK2J,MAAMqJ,QAASxU,IACjD,IAAA+tB,KACI,IAAAxB,cACI/mB,GAAgByF,qBAChBnO,EAASH,KAAK6E,MAAI,gCACb1E,EAASH,KAAKoI,MAAI,CAAEsG,MAAOvO,EAASF,QAAQyO,UAP7D,IAaZ,IAAGsf,MACC,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBtoB,GAAgB09B,kBAAmB/lC,EAApD,KAlDZ,CAsDR,EAEA,YAAAgmC,cAAA,SACI3uB,EACAxU,GAFJ,WAII,OAAO,IAAAgmB,SACH,IAAA+H,KAAG,IAAAxB,cAAa/mB,GAAgB49B,0BAChC,IAAA1Y,MAAKjtB,KAAK6kC,oBAAoBa,cAAc3uB,EAASxU,IAAU2qB,MAC3D,IAAA+I,YAAU,SAAC52B,GACP,WAAAkpB,QACI,EAAKwc,UAAUhuB,EAASxU,IACxB,IAAA+tB,KACI,IAAAxB,cACI/mB,GAAgBwF,uBAChBlO,EAASH,KAAK6E,OAL1B,MAWVmpB,MAAK,IAAAC,aAAW,SAACztB,GAAU,OAAA2wB,GAAiBtoB,GAAgB69B,oBAAqBlmC,EAAtD,IACjC,EAEQ,YAAAwlC,mBAAR,SAA2BnjC,GACvB,IAAM2L,EAAQ3L,EAAM2L,MAAMoc,WACpBT,EAAWtnB,EAAMsnB,SAAS3L,cAEhC,OAAQhQ,GAASA,EAAMqJ,SAAasS,GAAYA,EAAStS,OAC7D,EAEQ,YAAAuuB,uBAAR,SACInjC,EACAwsB,EACA4W,EACA7kB,GAEQ,IAAA7S,EAAsB1L,EAAO,QAAjBuL,GAAK,YAAKvL,EAAxB,aAEN,OAAK0L,GASE,gCACAH,GAAK,CACRihB,OAAM,EACN4W,gBAAe,EACf7kB,eAAc,EACd7S,QAAS,CACLy2B,YAAaz2B,EAAQy2B,YACrB5lC,KAAMmP,EAAQtG,SACd4H,QAAStB,EAAQmC,cAhBd,gCACAtC,GAAK,CACRihB,OAAM,EACN4W,gBAAe,EACf7kB,eAAc,GAe1B,EACJ,EApLA,G,GCfA,YACI,WAAYliB,GAAZ,MACI,YACIA,GACI,oHACP,K,OAED,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAVkD,oBAUlD,EAVA,CAAkD,G,GCAlD,YACI,WAAYH,GAAZ,MACI,YAAMA,GAAW,qCAAmC,K,OAEpD,EAAKE,KAAO,mCACZ,EAAKC,KAAO,2B,CAChB,CACJ,OAP8D,oBAO9D,EAPA,CAA8D,GCgB9D,kBACI,WAAoB4vB,GAAA,KAAAA,eAAAA,CAAgC,CAkExD,OAhEI,YAAAwW,UAAA,SAAUhuB,EAAiB,G,IAAEkZ,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAC1BG,EAAM,0BAA0BrZ,EAChC5X,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAYP,OAAOhwB,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAChCxB,OAAQ,CACJoD,QAASiB,GAZD,CACZ,WACA,sCACA,kCACA,qCACA,qCACA,iCACA,uCAOA9zB,QAAO,EACP8wB,QAAO,GAEf,EAEA,YAAAkV,YAAA,SACIjmC,EACA,G,IAAA,aAAkD,CAAC,EAAC,EAAlDC,EAAO,UAAE8wB,EAAO,UAIlB,OAAOjwB,KAAKuuB,eACP0D,KAHO,iCAG8B,CAClC/yB,KAAI,EACJC,SAAS,IAAA0C,SAAO,eAER,qBAAsB1C,GAAWA,EAAQqmC,iBACtCxV,IAEP,EAAA6V,OAEJ5V,QAAO,IAEVb,OAAM,SAAC1vB,GACJ,GAAwB,6BAApBA,EAAMR,KAAKP,KACX,MAAM,IAAI,GAGd,GAAwB,qBAApBe,EAAMR,KAAKP,KACX,MAAM,IAAI,GAGd,MAAMe,CACV,GACR,EAEA,YAAAgmC,cAAA,SACI3uB,EACA,G,IAAEkZ,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,kCAAkCrZ,EAE9C,OAAO/W,KAAKuuB,eAAe0D,KAAK7B,EAAK,CAAEH,QAAO,EAAE9wB,QAAS6wB,IAC7D,EACJ,EAnEA,G,YCcA,kBACI,WACY8V,EACAC,EACAC,EACAxD,GAJZ,WACY,KAAAsD,sBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,2BAAAA,EACA,KAAAxD,iCAAAA,EAuCZ,KAAAyD,yBAAqD,SAAC,G,IAClD1+B,EAAQ,WACRyI,EAAS,YACT4B,EAAY,eACZgH,EAAM,SACNke,EAAO,UACPoP,EAAoB,uBACpBC,EAA4B,+BAE5B,OAAO,SAAC9X,GACJ,IAAIiW,EAIA1yB,EACA0yB,EAAc,CAAE8B,iBAAkB,CAAEC,aAAcz0B,IAC3Cs0B,IACP5B,EAAc,CACV8B,iBAAkB,CACdE,yBAA0BJ,EAC1BK,iCAAkCJ,GAAgC,QAK9E,IAAMhkC,EAAU,EAAK6jC,2BAA2BpkC,UAC5C,CAAEoO,UAAS,EAAEzI,SAAQ,EAAE+8B,YAAW,GAClCjW,EAAM3R,YAGV,OAAO,IAAA6L,SACH,IAAA+H,KAAG,IAAAxB,cAAa5gB,GAAkBs4B,oCAClCzX,QAAQmI,KACJ,CACI,EAAK4O,sBAAsBG,yBAAyB9jC,EAASyW,GAC7Dke,GACF9zB,OAAOoiB,UACX8J,MAAK,WAAM,WAAAJ,cAAa5gB,GAAkBu4B,kCAA/B,KACfvZ,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBniB,GAAkBw4B,+BAAgChnC,EAAnE,IAGZ,CACJ,CAlFG,CAmFP,OAjFI,YAAAinC,cAAA,SAAc94B,GAAd,WACI,OAAO,SAACwgB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAa5gB,GAAkB04B,0BAClC,IAAAxV,QAAM,6D,yEAES,O,sBAAA,GAAMpxB,KAAK8lC,sBAAsBa,cACpC3mC,KAAKgmC,2BAA2BpkC,UAAUiM,EAASwgB,EAAM3R,c,cAO7D,MAAO,CAAP,EAAO,U,OAJkB,O,WAAA,GAAM1c,KAAKwiC,iCAAiClH,OACjE,I,OAGG,OAJD0I,EAAmB,SAIlB,GAAMhkC,KAAK8lC,sBAAsBa,cACpC3mC,KAAKgmC,2BAA2BpkC,WAAU,gCACjCiM,GAAO,CAAEm2B,iBAAgB,IAC9B3V,EAAM3R,c,2BAInBwQ,MACC,IAAA+I,YAAU,SAAC,G,IAAE/2B,EAAI,OACb,WAAAqpB,QACI,EAAKwd,oBAAoBd,kBAAzB,CAA4C5W,IAC5C,IAAAiC,KAAG,IAAAxB,cAAa5gB,GAAkBI,uBAAwBpP,IAF9D,MAMVguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBniB,GAAkB24B,oBAAqBnnC,EAAxD,IA7BR,CAgCR,EA+CJ,EAzFA,G,eC7BA,WAKI,WAAoBonC,GAAA,KAAAA,QAAAA,CAAe,CA4BvC,OA1BI,YAAAH,cAAA,SAAcxkC,GAAd,WACI,OAAO,IAAI4sB,SAAQ,SAAC6P,EAAS5H,GACzB,EAAK8P,QAAQH,cAAcxkC,GAAS,SAACzC,EAAYL,GACzCK,EACAs3B,EAAO,EAAK+P,mBAAmBrnC,IAE/Bk/B,EAAQ,EAAKmI,mBAAmB1nC,GAExC,GACJ,GACJ,EAEA,YAAA4mC,yBAAA,SAAyB9jC,EAA6ByW,GAAtD,WACI,OAAO,IAAImW,SAAQ,WACf,EAAK+X,QAAQb,yBAAyB9jC,EAAS,KAAMyW,EACzD,GACJ,EAEQ,YAAAmuB,mBAAR,SAA2B1nC,GACvB,MAAO,CACHF,QAASE,EAASF,QAClBD,KAAMG,EAAS0E,KACf3E,OAAQC,EAASD,OACjB4nC,WAAY3nC,EAAS2nC,WAE7B,EACJ,EAjCA,GCPM,GAA+BzoC,QAAQ,8BCW9B,SAAS0oC,GACpB5rB,EACAzI,GAEA,IAAIs0B,EAQJ,OCnBW,SAA8B7rB,GAGzC,YAAoC,IAFbA,EAEM9V,EACjC,CDSQ4hC,CAAqB9rB,GACrB6rB,EAAY7rB,EAAQ9V,GACbqN,GAAgBA,EAAaxS,SACpC8mC,EAAYt0B,EAAa,GAAGrN,IAGzB,CACHA,GAAI2hC,EACJ5rB,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBC,QAASH,EAAQG,QACjB4rB,aAAc/rB,EAAQI,SACtB4rB,aAAchsB,EAAQK,SACtBC,KAAMN,EAAQM,KACd2rB,SAAUjsB,EAAQO,gBAClB2rB,aAAclsB,EAAQmsB,oBACtBC,SAAUpsB,EAAQS,WAClB2I,QAASpJ,EAAQoJ,QACjB5I,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQU,MACfC,aAAcX,EAAQW,aAE9B,C,SEvCA,WACI,WAAoB0rB,GAAA,KAAAA,eAAAA,CAAyB,CAKjD,OAHI,YAAAC,UAAA,SAAUhT,GACN,OAAOnL,KAAKoe,MAAMjT,EAAS,YAAM30B,KAAK0nC,gBAC1C,EACJ,EANA,GCGA,ICHKG,GDGCC,GAAc,CAChB,oBACA,sBACA,qBACA,oBACA,iBAQW,SAASC,GAAoBC,GACxC,MAAO,CACH1nC,KAAM0nC,EAAO1nC,KACb2nC,SAAUD,EAAOE,YACjBC,aAAcL,GAAYnf,QAAQqf,EAAOI,YAEjD,CEde,SAASC,GACpBC,GAEA,MAAO,CACHhoC,KAAMgoC,EAAgBhoC,KACtBioC,iBAAkBD,EAAgBE,KAClCC,iBAAkBH,EAAgBI,UAClCJ,gBAAiB,CACbK,QAASL,EAAgBK,QACzBroC,KAAMgoC,EAAgBhoC,KACtBsoC,aAAcN,EAAgBM,cAG1C,CCVe,SAASC,GACpBC,EACAC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,MAEQrrC,OAAOwF,KAAK2lC,GAAsCtpC,QACtD,SAACC,EAAQhC,GAAQ,2BACVgC,EACCqpC,EAAQrrC,GAAoB4C,KAAI,SAACsO,GACjC,MAAY,qBAARlR,ECfL,SACXkR,EACAo6B,GAEA,IAAME,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACHxjC,GAAIoJ,EAAKpJ,GACT2jC,SAAU,GACVxqC,KAAMiQ,EAAKjQ,KACXi2B,OAAQhmB,EAAKgmB,OACbwU,oBAAqBx6B,EAAKgmB,OAC1BsT,SAAU,EACVmB,cAAeH,EAAkBtB,UAAUh5B,EAAKgmB,QAChD0U,2BAA4BJ,EAAkBtB,UAAUh5B,EAAKgmB,QAC7D2U,iBAAkBL,EAAkBtB,UAAUh5B,EAAKgmB,QACnD4U,8BAA+BN,EAAkBtB,UAAUh5B,EAAKgmB,QAChE6U,gBAAiB,EACjB9U,SAAU,EACV+U,OAAQ96B,EAAK86B,OACb7U,UAAWjmB,EAAKimB,UAChBj2B,KAAM,4BACN2/B,WAAY,GACZ/J,UAAW,KAEnB,CDT2BmV,CAAqC/6B,EAAMo6B,GEXvD,SACXp6B,EACAhQ,EACAoqC,EACAC,QAAA,IAAAA,IAAAA,EAAA,MAEA,IAAMC,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACHxjC,GAAIoJ,EAAKq6B,GACTE,SAAUv6B,EAAKu6B,SACfvU,OAAQhmB,EAAKg7B,kBACbR,oBAAqBx6B,EAAK8lB,kBAC1BwT,SAAUt5B,EAAKi7B,eACfR,cAAeH,EAAkBtB,UAAUh5B,EAAKg7B,mBAChDN,2BAA4BJ,EAAkBtB,UAAUh5B,EAAK8lB,mBAC7D+U,gBAAiBP,EAAkBtB,UAAUh5B,EAAKi7B,gBAClDN,iBAAkBL,EAAkBtB,UAAUh5B,EAAKk7B,WACnDN,8BAA+BN,EAAkBtB,UAAUh5B,EAAKm7B,WAChEC,iBAAmBp7B,EAAqBq7B,gBACxCtrC,KAAMiQ,EAAKjQ,KACXg2B,SAAU/lB,EAAK+lB,SACfuV,MAAOt7B,EAAKs7B,MACZC,IAAKv7B,EAAKu7B,IACVC,cAAex7B,EAAKw7B,cACpB5V,UAAW5lB,EAAK4lB,UAChBD,UAAW3lB,EAAK2lB,UAChBgK,YAAa3vB,EAAKpM,SAAW,IAAIlC,KAAI,SAAC+pC,GAAW,OAC7C1rC,KAAM0rC,EAAO1rC,KACbJ,MAAO8rC,EAAO9rC,MAF+B,IAIjD+rC,iBAAkB17B,EAAK07B,iBACvB1rC,KAAI,EAEZ,CFpBuB2rC,CACH37B,EAWpB,SAAmChQ,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,GAEnB,CAxBoB4rC,CAA0B9sC,GAC1BsrC,EACAC,EAER,IAba,GAejB,GAER,CGlBe,SAASwB,GAAkBnhB,GACtC,ICZAohB,EAEMC,EDUA3B,EAAgB1f,EAAStiB,KAAKktB,SAAS8U,cACvCE,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACHxjC,GAAI8jB,EAAStiB,KAAKxB,GAClBmf,MAAOmkB,GAAuBxf,EAAStiB,KAAK0hB,UAAWsgB,GACvD9U,SAAU5K,EAAStiB,KAAKktB,SAAS3zB,KACjC0nC,OAAQ,CACJO,kBAAkB,IAAA/oC,QACd6pB,EAAStiB,KAAKuB,SACd,SAACqiC,EAAK3C,GACF,OAAO2C,EAAM3C,EAAOO,gBACxB,GACA,GAEJjgC,QAAS+gB,EAAStiB,KAAKuB,QAAQjI,IAAI0nC,KAEvCE,SAAU,CACNtT,OAAQtL,EAAStiB,KAAK6iC,eACtBR,cAAeH,EAAkBtB,UAAUte,EAAStiB,KAAK6iC,iBAE7DgB,uBCjCJH,EDiCsDphB,EAASohB,WC/BzDC,EAAwC,IAE7CD,GAAc,IAAI92B,SAAQ,SAACk3B,IACvBA,EAAUC,SAAW,IAAIn3B,SAAQ,SAACo3B,GAC/BL,EAAc17B,KAAK,CACfg8B,aAAc,GACd7C,aAAc,KACd3pC,QAAS,GACTysC,YAAaF,EAAOG,MAE5B,GACJ,IAEOR,GDmBHpC,gBAAiB,CACb6C,uBAAuB,IAAA3rC,QACnB6pB,EAASxgB,kBACT,SAAC8hC,EAAKS,GACF,OAAOT,EAAMS,EAAY5C,IAC7B,GACA,GAEJ6C,yBAAyB,IAAAC,OACrBjiB,EAASxgB,iBAAiBxI,IAAIgoC,IAC9B,SAGRl2B,SAAU,CACNwiB,OAAQtL,EAASkiB,kBACjBnC,cAAeH,EAAkBtB,UAAUte,EAASkiB,mBACpDC,qBAAsBniB,EAASoiB,2BAC/BC,4BAA6BzC,EAAkBtB,UAC3Cte,EAASoiB,4BAEbxmB,UAAU,IAAAxF,MACN4J,EAAStiB,KAAK0hB,UAAUC,eACxB,SAACijB,GAAa,OAAAA,EAASC,kBAAT,KAGtBC,SAAU,CACNlX,OAAQtL,EAASwiB,SACjBzC,cAAeH,EAAkBtB,UAAUte,EAASwiB,WAExDtiB,YAAa,CACToL,OAAQtL,EAASjgB,SAAWigB,EAASjgB,SAASmgB,YAAc,GAEhEuiB,YAAa,CACTnX,OAAQtL,EAAS0iB,SACjB3C,cAAeH,EAAkBtB,UAAUte,EAAS0iB,WAExDC,MAAO3iB,EAAS2iB,MAChBD,SAAU,CACNpX,OAAQtL,EAAS0iB,SACjB3C,cAAeH,EAAkBtB,UAAUte,EAAS0iB,WAExDE,SAAU,CACNtX,OAAQtL,EAAS6iB,kBACjB9C,cAAeH,EAAkBtB,UAAUte,EAAS6iB,oBAExD5iB,WAAY,CACRqL,OAAQtL,EAASC,WACjB8f,cAAeH,EAAkBtB,UAAUte,EAASC,aAGhE,ELzFA,SAAKue,GACD,sBACA,4BACA,qCACA,mCACA,kDACA,uCACA,uCACA,iDACA,+BACA,2CACA,+CACA,mDACA,uCACA,qCACA,2CACA,qDACA,0BACA,+BACH,CAnBD,CAAKA,KAAAA,GAAwB,KAoB7B,YORe,SAASsE,GACpB/iC,EACA5E,GAEA,IAAM8W,EAAYlS,EAASkS,WAAa9W,EAAe8W,WAAa,GAC9DC,EAAWnS,EAASmS,UAAY/W,EAAe+W,UAAY,GAEjE,MAAO,CACHwX,WAAY3pB,EAAS2pB,WAAa,IAAI1yB,KAAI,SAACgb,GAAY,OAAA4rB,GAAqB5rB,EAArB,IACvD+wB,WAAYhjC,EAAS7D,GACrBurB,QAAS1nB,EAAS0nB,QAClBvH,YAAangB,EAASmgB,YACtBiI,MAAOpoB,EAASooB,OAAShtB,EAAegtB,OAAS,GACjDlW,UAAS,EACTC,SAAQ,EACR7c,KAAM0K,EAASijC,UAAY,CAAC/wB,EAAWC,GAAU5b,KAAK,KACtD2sC,kBAAmBljC,EAASmjC,eAAiBnjC,EAASmjC,cAAc7tC,KAE5E,CC5BA,IAEA,2BAgCA,QA/BI,YAAA8tC,OAAA,SAAOluC,GACG,MAA0BA,EAAM2C,MAAM,IAAI4B,OAAO,cAAhD,OAAA4pC,OAAK,IAAG,KAAE,EAAE,OAAAC,OAAI,IAAG,KAAE,EACtBC,EAAeF,EAAMtY,MAAM,EAAG,GAC9ByY,EACc,IAAhBF,EAAKtsC,OAAessC,EAAKvY,OAAO,GAAKuY,EAAOA,EAAKvY,MAAM,EAAG,GAAKsY,EAAMtY,MAAM,GAG/E,OAAI71B,EAAM8B,OAAS,EACRqsC,EAIPnuC,EAAM8B,OAAS,IAAMwsC,EACdD,EAGDA,QAAoCC,CAClD,EAEA,YAAAC,SAAA,SAASvuC,GACC,MAA0BA,EAAM2C,MAAM,IAAI4B,OAAO,cAAhD,OAAA4pC,OAAK,IAAG,KAAE,EAAE,OAAAC,OAAI,IAAG,KAAE,EAE5B,MAAK,QAAQrU,KAAKoU,IAAW,QAAQpU,KAAKqU,GAInC,CACHD,MAAwB,IAAjBA,EAAMrsC,OAAe,IAAIqsC,EAAUA,EAAMtY,MAAM,EAAG,GACzDuY,KAAsB,IAAhBA,EAAKtsC,OAAe,KAAKssC,EAASA,EAAKvY,MAAM,EAAG,IAL/C,CAAEsY,MAAO,GAAIC,KAAM,GAOlC,EACJ,EAhCA,G,YCJM,GAA+BnuC,QAAQ,kB,GCK7C,wBA+BA,QA9BI,YAAAiuC,OAAA,SAAOluC,GACK,IAAAglB,GAAS,KAAAwpB,QAAOxuC,GAAM,KAE9B,IAAKglB,EACD,OAAOhlB,EAGX,IAAMyuC,GAAY,IAAAtjB,MAAI,KAAAujB,gBAAe1uC,GAAO+B,KAAI,SAAC4sC,GAAS,WAAAxjB,KAAIwjB,EAAKC,QAAT,KACpDC,EAAmBntC,KAAKotC,SAAS9uC,GAAO61B,MAAM,EAAG4Y,GAEvD,OAAOzpB,EAAK+pB,KACPrqC,QAAO,SAACsqC,GAAa,OAAAH,EAAiB/sC,OAASktC,CAA1B,IACrB9tC,QACG,SAACu4B,EAAQuV,EAAU9qC,GACf,OAACu1B,EAAO5D,MAAM,EAAGmZ,EAAW9qC,GAAQu1B,EAAO5D,MAAMmZ,EAAW9qC,IAAQ7C,KAjB/D,IAiBL,GAGJwtC,EAEZ,EAEA,YAAAC,SAAA,SAAS9uC,GAGL,OAFiB,KAAAwuC,QAAOxuC,GAAM,KAMvBA,EAAMgF,QAAQ,IAAIT,OA/BR,IA+BiC,KAAM,IAH7CvE,CAIf,EACJ,EA/BA,GCuBe,SAASivC,GACpB7/B,EACA22B,QAAA,IAAAA,IAAAA,EAAA,IAEA,IA0F2Bpa,EACrBvF,EA3FAqkB,EAAgBr7B,EAAMumB,SAAS8U,cAC/BE,EAAoB,IAAI,GAAkBF,GAEhD,MAAO,CACHxjC,GAAImI,EAAMqJ,QACV2N,MAAOmkB,GAAuBn7B,EAAM+a,UAAW/a,EAAMumB,SAAS8U,cAAe,aAC7EhyB,QAASrJ,EAAMqJ,QACfkd,SAAUvmB,EAAMumB,SAAS3zB,KACzBktC,qBAAsB9/B,EAAM8/B,qBAC5B3/B,QAAS4/B,GAA0B//B,EAAMuc,SAAUoa,EAAUx2B,SAC7Dg+B,SAAU,CACNlX,OAAQjnB,EAAMggC,WACdtE,cAAeH,EAAkBtB,UAAUj6B,EAAMggC,aAErD1F,OAAQ,CACJO,kBAAkB,IAAA/oC,QACdkO,EAAMpF,SACN,SAACqiC,EAAK3C,GACF,OAAO2C,EAAM3C,EAAOO,gBACxB,GACA,GAEJjgC,QAASoF,EAAMpF,QAAQjI,IAAI0nC,KAE/BE,SAAU,CACNtT,OAAQjnB,EAAMk8B,eACdR,cAAeH,EAAkBtB,UAAUj6B,EAAMk8B,iBAErDh8B,MAAOy2B,EAAU12B,WACjBF,YAAa42B,EAAU52B,YACvBm9B,sBAAuB,GACvBtC,iBA2DuBre,EA3DgBvc,EAAMuc,SA4D3CvF,GAAQ,IAAA1hB,QAAOinB,EAAU,CAC3BM,WAAY,oBAGT,CACH4gB,uBAAuB,IAAA3rC,QAAOklB,GAAO,SAACimB,EAAKh8B,GAAS,OAAAA,EAAKgmB,OAASgW,CAAd,GAAmB,GACvEU,yBAAyB,IAAAC,OACrB5mB,EAAMrkB,KAAI,SAACsO,GAAS,OAChBrO,KAAMqO,EAAKzO,OAAOI,KAClBioC,iBAAkB55B,EAAKgmB,OACvB8T,iBAAkB95B,EAAKzO,OAAOwoC,UAC9BJ,gBAAiB,CACbK,QAASh6B,EAAKgmB,OAAShmB,EAAKzO,OAAOwoC,UACnCpoC,KAAMqO,EAAKzO,OAAOI,KAClBsoC,aAAc,IAPF,IAUpB,UA5EJ+E,WAAYC,GAA4BlgC,GACxCtO,OAAQsO,EAAMtO,OACdyuC,gBAAiBngC,EAAMmgC,gBACvBC,eAAgBpgC,EAAMogC,eACtBC,WAAYrgC,EAAMqgC,WAClB57B,SAAU,CACNwiB,OAAQjnB,EAAM69B,kBACdnC,cAAeH,EAAkBtB,UAAUj6B,EAAM69B,mBACjDC,qBAAsB99B,EAAM+9B,2BAC5BC,4BAA6BzC,EAAkBtB,UAC3Cj6B,EAAM+9B,6BAGdliB,YAAa,CACToL,OAAQqZ,GAAiBtgC,EAAMuc,WAEnC+hB,MAAOt+B,EAAMs+B,MACbD,SAAU,CACNpX,OAAQjnB,EAAMq+B,SACd3C,cAAeH,EAAkBtB,UAAUj6B,EAAMq+B,WAErDE,SAAU,CACNtX,OAAQjnB,EAAMw+B,kBACd9C,cAAeH,EAAkBtB,UAAUj6B,EAAMw+B,oBAErD5iB,WAAY,CACRqL,OAAQjnB,EAAMugC,YACd7E,cAAe17B,EAAMwgC,sBAGjC,CAsBA,SAASF,GAAiB/jB,GACtB,IAAMtb,GAAO,IAAA+Q,MAAKuK,EAAU,CAAEM,WAAY,gBAE1C,OAAO5b,EAAOA,EAAKgmB,OAAS,CAChC,CAyBA,SAAS8Y,GACLxjB,EACApc,QAAA,IAAAA,IAAAA,EAAA,IAEA,IArCgCzO,EAqC1BuP,GAAO,IAAA+Q,MAAKuK,EAAUkkB,IAE5B,OAAKx/B,EAIE,CACHpJ,GAAIoJ,EAAK4b,WACTnrB,QA7C4BA,EA6COuP,EAAKzO,OAAOwqB,KA5C5C,kBAAkBtrB,GA6CrBgvC,SAAUz/B,EAAKzO,OAAOmuC,aACtBC,UAAWzgC,EAAQygC,WAPZ,CAAC,CAShB,CAEA,SAASH,GAAsBtgC,GAC3B,MAA8B,oBAAvBA,EAAQ0c,YAA2D,gBAAvB1c,EAAQ0c,UAC/D,CAEA,SAASqjB,GACLlgC,GAEA,IAAM6gC,EAAiE,CAAC,EAOxE,OANc,oBAAI7gC,EAAM+a,UAAUC,cAAkBhb,EAAM+a,UAAUyL,cAE9DvgB,SAAQ,SAAChF,GAOnB,IAAiCg9B,EANzB4C,EAAiB5/B,EAAKpJ,KAMGomC,EAN2Bh9B,EAO1C,CAAC,KAAM,KAAM,MAEdnP,QAAO,SAACmuC,EAAYrtC,GAC7B,IAAMqO,EACFg9B,EAAS6C,cAAe,IAAA9uB,MAAKisB,EAAS6C,aAAa,SAAC7/B,GAAS,OAAAA,EAAKrO,OAASA,CAAd,IAEjE,OAAKqO,GAILg/B,EAAWrtC,GAAQ,CACf5B,KAAMitC,EAASjtC,KACf+vC,YAAa9C,EAASjtC,KACtBgwC,MAAO/C,EAASzC,SAChB9Y,IAAKzhB,EAAKuzB,KACVyM,UAAWhgC,EAAKu8B,KAChB0D,YAAajgC,EAAKuzB,KAClB2M,YAAalgC,EAAKmgC,QAClBC,YAAapgC,EAAKrO,MAGfqtC,GAdIA,CAef,GAAG,CAAC,GA5BJ,IAEOY,CACX,CC1Ke,SAASS,GACpB5E,EACA6E,GAEA,MAAO,CACHR,YAAarE,EAAOqE,YACpBvxC,OAAQktC,EAAOzrC,KACfuwC,MAAO9E,EAAO+E,KACd5pC,GAAI6kC,EAAO7kC,GACX6pC,SAAUH,EACVI,cAAejF,EAAOiF,cACtBnG,SAAUkB,EAAOlB,SACjBoG,YAAalF,EAAOkF,YAE5B,CCIA,+BACY,KAAAC,qBAAuB,IAAI,GAC3B,KAAAC,qBAAuB,IAAI,EAiLvC,QA/KI,YAAA5tC,UAAA,SAAUiM,EAAkB4hC,GACxB,I5BJEC,E4BIIlrC,EAAiBirC,EAAcjrC,eAAe2X,oBAC9CkN,EAAWomB,EAAcpmB,SAAS3L,cAClCtU,EAAWqmC,EAAcrmC,SAAS8T,cAClCxP,EAAQ+hC,EAAc/hC,MAAMoc,WAC5B/G,EAAgB0sB,EAAchqB,eAAeE,iBAC/C9X,EAAQtG,SACRsG,EAAQmC,WAENmU,EAAkBnkB,KAAK2vC,oBAAoBF,EAAe1sB,GAC1DnQ,EAAe68B,EAAc78B,aAAa6U,kBAC1CmoB,EAAiBH,EAAc78B,aAAamV,oBAC5CzH,EAAcmvB,EAAchjB,OAAOvM,iBACnC2vB,EAAgBJ,EAAchjB,OAAOjM,mBACrC4jB,EAAiBqL,EAAc3sB,YAAYe,qBAC3CisB,EAAcL,EAAchqB,eAAeC,wBAC3C2e,EAAYoL,EAAc/hC,MAAMsc,eAChC+lB,EACF3mC,GAAY5E,GAAkB2nC,GAAsB/iC,EAAU5E,GAE5DggC,EACFJ,GACAv2B,EAAQy2B,cACPJ,GAAoBr2B,EAAQy2B,e5B1B/BoL,E4B2BmC7hC,EAAQy2B,Y5B1B5C8B,oBAO2C,iBAArCsJ,EAAoBrJ,cAC3BjhB,QAAQsqB,EAAoBrJ,cAAgBqJ,EAAoBrJ,aAAaz4B,S4BmBhE6hC,EAAc5hC,QAAQ0Q,kBAAiB,KAAK6lB,EAAeK,iBAC9DgL,EAAc5hC,QAAQ0Q,kBAEhC,IAAKimB,EACD,MAAM,IAAI,GAAiBttB,GAAqBY,qBAGpD,MAAO,CACHksB,iBAAkBn2B,EAAQm2B,iBAC1BQ,UAAS,EACTp7B,SAAU2mC,EACVvrC,eAAgBA,GAAkByiC,GAAqBziC,GACvD2f,gBAAiBA,GAAmB8iB,GAAqB9iB,EAAiBvR,GAC1Eg9B,eAAgBA,GAAkBZ,GAA4BY,GAAgB,GAC9E7oC,KAAMsiB,GAAYmhB,GAAkBnhB,GACpC3b,MAAOA,GAAS6/B,GAAmB7/B,EAAO22B,GAC1CA,UAAS,EACTx2B,QAASA,EAAQy2B,YACjBvhB,cAAeA,GAAiB/iB,KAAKgwC,wBAAwBjtB,GAC7DktB,UAAW,CACPC,SAAS,gCACFJ,GAAW,CACdK,eAAgBN,GAAiBA,EAAcM,kBAGvDC,OAAQ,8BACR/hB,OAAO,IAAAxf,MAAKyR,GAAeA,EAAY+vB,aAAc,CACjD,YACA,UACA,gBACA,cAGZ,EAEA,YAAAC,4BAAA,SACI3wB,EACA5b,EACA+mB,GAGI,IAAAkZ,EASAjgC,EAAI,iBARJygC,EAQAzgC,EAAI,UAPJslB,EAOAtlB,EAAI,SANJ0oB,EAMA1oB,EAAI,OALJ2J,EAKA3J,EAAI,MAJJsgC,EAIAtgC,EAAI,UAHJ,EAGAA,EAAI,QAHJ8J,OAAO,IAAG,GAAC,EAAC,EACZkV,EAEAhf,EAAI,cADJwgC,EACAxgC,EAAI,kBACF+iB,EAAcuC,GAAYA,EAASzW,aAAa,GAChDuR,EAAkB2C,GAAeA,EAAY3C,gBAC7CyrB,EAAiB9oB,GAAeA,EAAYkB,uBAElD,MAAO,CACHgc,iBAAgB,EAChBQ,UAAS,EACTzhB,cAAeA,GAAiB/iB,KAAKgwC,wBAAwBjtB,GAC7D3Z,SACIsE,GACAA,EAAMlJ,gBACN6kB,GACA8iB,GAAsB9iB,EAASjgB,SAAUsE,EAAMlJ,gBACnDA,eACIkJ,GAASA,EAAMlJ,gBAAkByiC,GAAqBv5B,EAAMlJ,gBAChE2f,gBACIA,GACAkF,GACA4d,GAAqB9iB,EAAiBkF,EAASzW,cACnDg9B,eAAgBA,GAAkBZ,GAA4BY,GAAgB,GAC9E7oC,KAAMsiB,GAAYmhB,GAAkBnhB,GACpC3b,MAAOA,GAAS6/B,GAAmB7/B,EAAO22B,GAC1CA,UAAS,EACTx2B,QAAS7N,KAAKuwC,4BAA4B5wB,EAAQ9R,EAASid,GAC3DmlB,UAAW,CACPC,SAAS,gCACF3L,GAAiB,CACpB4L,eAAgB1jB,GAAUA,EAAOxM,QAAQkwB,kBAGjDC,OAAQ,8BACR/hB,MACI5B,IACA,IAAA5d,MAAK4d,EAAOnM,YAAY+vB,aAAc,CAClC,YACA,UACA,gBACA,cAGhB,EAEQ,YAAAL,wBAAR,SAAgCjtB,GAC5B,MAA6B,iBAAzBA,EAAcrJ,QAA8BqJ,EAAc5T,QAI1D4T,EAAcytB,oBAAsBztB,EAAcytB,mBAAmBrhC,SAC9D,gCAAK4T,GAAa,CAAExd,GAAIwd,EAAcytB,mBAAmBrhC,UAGhE4T,EAAcxd,KAAO,GAAyBkrC,iBACvC,gCAAK1tB,GAAa,CAAExd,GAAI,GAAyBmrC,mBAGrD3tB,GAXI,gCAAKA,GAAa,CAAE5T,QAAS4T,EAAcxd,IAY1D,EAEQ,YAAAgrC,4BAAR,SACI5wB,EACA9R,EACAid,GAEA,MAAO,iBAAkBjd,GACnB,gCACOA,GAAO,CACV8iC,MAAOhxB,EAAOixB,qBACdC,SACIlxB,EAAOmxB,wBACP9wC,KAAKwvC,qBAAqBpC,SAASztB,EAAOmxB,wBAC9CC,gBAAiBjmB,KAErB,gCACOjd,GAAO,CACV8iC,MAAOhxB,EAAOqxB,SACdC,SAAUjxC,KAAKuvC,qBAAqB1C,SAASltB,EAAOuxB,YAAc,IAClEC,OAAQxxB,EAAOyxB,UAAY,GAC3BP,SAAU7wC,KAAKwvC,qBAAqBpC,SAASztB,EAAO0xB,YAAc,IAClEN,gBAAiBjmB,GAE/B,EAEQ,YAAA6kB,oBAAR,SACIF,EACA1sB,G,YAEA,GAAIA,EAAe,CACf,IAAMuuB,EAAwD,QAA1C,EAAmC,QAAnC,EAAGvuB,EAAcytB,0BAAkB,eAAEe,aAAK,eAAEC,QAC1DC,EAAyD,QAA1C,EAAmC,QAAnC,EAAG1uB,EAAcytB,0BAAkB,eAAEe,aAAK,eAAEE,gBAC3D7+B,EAAe68B,EAAc78B,aAAa6U,kBAC1CiqB,EAAW9+B,aAAY,EAAZA,EAAcwa,OAAM,SAACtG,GAAgB,OAAAA,EAAYC,oBAAZ,IAEtD,GAAIuqB,GAAkBI,GAAgC,SAApBD,EAC9B,M,CAIR,OAAOhC,EAActrB,gBAAgBxG,oBACzC,EACJ,EAnLA,G,eCjBA,wBAWA,QAVI,YAAAg0B,8BAAA,SACIC,GAEA,OAAO,IAAAthB,KACH,IAAAxB,cACIhf,GAA4BkB,8BAC5B4gC,GAGZ,EACJ,EAXA,G,GCAA,wBAyBA,QAxBI,YAAAC,kBAAA,SACIn4B,EACAnX,GAEA,IACM+E,EAAO,CAAEC,SADEhF,GAAWA,EAAQgF,UAGpC,OAAO,IAAAghB,SACH,IAAA+H,KAAG,IAAAxB,cAAavgB,GAA0BhD,8BAA0B9H,EAAW6D,KAC/E,IAAA8pB,QAAM,WACF,OAAA1X,IAASwV,MAAK,WACV,WAAAJ,cACIvgB,GAA0B/C,+BAC1B/H,EACA6D,EAHJ,GADJ,KAQN4lB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB9hB,GAA0B5C,wBAAyBjM,EAAO4H,EAA3E,IAGZ,EACJ,EAzBA,GCSA,kBACI,WACYwqC,EACAlc,GADA,KAAAkc,6BAAAA,EACA,KAAAlc,uBAAAA,CACT,CAkNP,OAhNI,YAAAmc,kBAAA,SACIxqC,EACAqnB,EACArsB,GAHJ,WAKI,OAAO,EAAA4rB,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MACL,IAAAC,cAAa7d,GAAyB+gC,sCAAkCvuC,EAAW,CAC/E8D,SAAQ,KAIhB,EAAKuqC,6BACAC,kBAAkBxqC,EAAUqnB,EAAQrsB,GACpC2sB,MAAK,SAAC,G,IAAE,IAAAhwB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdwvB,EAASG,MACL,IAAAC,cACI7d,GAAyBe,iCACzB9S,EACA,CAAEqI,SAAQ,KAGlBmnB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACI1e,GAAyBghC,8BACzB5yC,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAA2qC,mBAAA,SACI3qC,EACAqnB,EACArsB,GAHJ,WAKI,OAAO,EAAA4rB,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MACL,IAAAC,cACI7d,GAAyBkhC,uCACzB1uC,EACA,CAAE8D,SAAQ,KAIlB,EAAKuqC,6BACAI,mBAAmB3qC,EAAUqnB,EAAQrsB,GACrC2sB,MAAK,SAAC,G,IAAE,IAAAhwB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdwvB,EAASG,MACL,IAAAC,cACI7d,GAAyBiB,kCACzBhT,EACA,CAAEqI,SAAQ,KAGlBmnB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACI1e,GAAyBmhC,+BACzB/yC,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAA8qC,kBAAA,SACI9qC,EACAqnB,EACArsB,GAHJ,WAKI,OAAO,EAAA4rB,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MACL,IAAAC,cAAa7d,GAAyBqhC,sCAAkC7uC,EAAW,CAC/E8D,SAAQ,KAIhB,EAAKuqC,6BACAO,kBAAkB9qC,EAAUqnB,EAAQrsB,GACpC2sB,MAAK,SAAC,G,IAAE,IAAAhwB,KAAAA,OAAI,IAAG,GAAC,EAAC,EACdwvB,EAASG,MACL,IAAAC,cACI7d,GAAyBshC,iCACzBrzC,EACA,CAAEqI,SAAQ,KAGlBmnB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACI1e,GAAyBuhC,8BACzBnzC,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAkrC,aAAA,SAAalrC,EAAkBhF,GAA/B,WACI,OAAO,EAAA4rB,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MACL,IAAAC,cAAa7d,GAAyByhC,iCAA6BjvC,EAAW,CAC1E8D,SAAQ,KAIhB,EAAKuqC,6BACAW,aAAalrC,EAAUhF,GACvB2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cAAa7d,GAAyBmB,4BAA6BlT,EAAM,CACrEqI,SAAQ,KAGhBmnB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACI1e,GAAyB0hC,yBACzBtzC,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAqrC,QAAA,SAAQrrC,EAAkBhF,GAA1B,WACI,OAAO,EAAA4rB,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MACL,IAAAC,cAAa7d,GAAyB4hC,oCAAgCpvC,EAAW,CAC7E8D,SAAQ,KAIhB,EAAKuqC,6BACAc,QAAQrrC,EAAUhF,GAClB2sB,MAAK,WACFR,EAASG,MACL,IAAAC,cACI7d,GAAyB6hC,oCACzBrvC,EACA,CAAE8D,SAAQ,KAGlBmnB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACI1e,GAAyB8hC,4BACzB1zC,EACA,CAAEkI,SAAQ,IAGtB,GACR,GACJ,EAEA,YAAAyrC,eAAA,SAAezrC,EAAkBhF,GAAjC,WACI,OAAO,IAAAgmB,SACH,IAAA+H,KACI,IAAAxB,cACI7d,GAAyBgiC,2CACzBxvC,EACA,CAAE8D,SAAQ,MAGlB,IAAA6pB,QAAM,6D,iEACF,SAAMpxB,KAAK8xC,6BAA6BkB,eAAezwC,I,OACvD,OADA,SACA,GAAMvC,KAAK41B,uBAAuB9C,uB,OAElC,OAFA,SAEO,CAAP,GAAO,IAAAhE,cACH7d,GAAyBiiC,2CACzBzvC,EACA,CAAE8D,SAAQ,K,WAGpB2lB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GACIpf,GAAyBkiC,mCACzBzzC,EACA,CAAE6H,SAAQ,GAHd,IAOZ,EAEA,YAAAsrB,eAAA,SACItrB,EACAxD,GAEA,OAAO,IAAA+qB,cAAa7d,GAAyBoB,qBAAsBtO,EAAM,CAAEwD,SAAQ,GACvF,EACJ,EAtNA,G,YCXA,kBACI,WAAoBgnB,GAAA,KAAAA,eAAAA,CAAgC,CA8DxD,OA5DI,YAAAwjB,kBAAA,SACIqB,EACAxkB,EACA,G,IAAEqB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,oBAAoBgjB,EAAU,WAE1C,OAAOpzC,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAAExB,OAAM,EAAEqB,QAAO,EAAE9wB,QAAS6wB,IACpE,EAEA,YAAAkiB,mBAAA,SACIkB,EACAxkB,EACA,G,IAAEqB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,oBAAoBgjB,EAAU,YAE1C,OAAOpzC,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAAExB,OAAM,EAAEqB,QAAO,EAAE9wB,QAAS6wB,IACpE,EAEA,YAAAqiB,kBAAA,SACIe,EACAxkB,EACA,G,IAAEqB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,oBAAoBgjB,EAAU,WAE1C,OAAOpzC,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAAExB,OAAM,EAAEqB,QAAO,EAAE9wB,QAAS6wB,IACpE,EAEA,YAAAyiB,aAAA,SAAaW,EAAoB,G,IAAEnjB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAChCG,EAAM,oBAAoBgjB,EAAU,YAE1C,OAAOpzC,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAAEH,QAAO,EAAE9wB,QAAS6wB,IAC5D,EAEA,YAAA4iB,QAAA,SAAQQ,EAAoB,G,IAAEnjB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAC3BG,EAAM,oBAAoBgjB,EAAU,WAE1C,OAAOpzC,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAAEH,QAAO,EAAE9wB,QAAS6wB,IAC5D,EAEA,YAAAqjB,cAAA,SAAc,G,IAAEpjB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGnB,OAAOjwB,KAAKuuB,eAAezwB,IAFf,yBAEwB,CAAEmyB,QAAO,EAAE9wB,QAAS6wB,IAC5D,EAEA,YAAAsjB,wBAAA,SAAwB,G,IAAErjB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAI7B,OAAOjwB,KAAKuuB,eAAe0D,KAFvB,oFAEiC,CAAEhC,QAAO,EAAE9wB,QAAS6wB,IAC7D,EAEA,YAAAgjB,eAAA,SAAe,G,IAAE/iB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGpB,OAAOjwB,KAAKuuB,eAAe0D,KAFf,mCAEyB,CAAEhC,QAAO,EAAE9wB,QAAS6wB,IAC7D,EACJ,EA/DA,G,YCPA,IAAYujB,IAAZ,SAAYA,GACR,mEACA,0EACA,uEACH,CAJD,CAAYA,KAAAA,GAAgB,KCyC5B,kBACI,WACYC,EACAphB,GADA,KAAAohB,0BAAAA,EACA,KAAAphB,uBAAAA,CACT,CAidP,OA/cI,YAAAqhB,uBAAA,SACI3sB,EACAvkB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,IAAMtsB,EAAQssB,EAAM3R,WAGpB,IAFiB3a,EAAMsnB,SAAS3L,cAG5B,MAAM,IAAI,GAAiBxG,GAAqBK,iBAGpD,IAAM8D,EAAU,EAAKq4B,uBAAuB5sB,GACtCA,EAAYzL,QACZyL,EAAY3C,gBAEZwvB,EAAsB5xC,EAAM6Q,aAAagV,wBAAwBvM,GAEvE,IAAKs4B,EACD,MAAM,IAAI,GAAqB,kDAGnC,IAAMlrB,EAAY,EAAKmrB,iBACnB9sB,EAAY2B,UACZkrB,EACA5xC,EAAMgF,KAAKsY,WAGf,OAAKoJ,EAAUroB,OAIR,EAAKyzC,kBACR,CACItuC,GAAIouC,EAAoBpuC,GACxB8V,QAAO,EACPoN,UAAS,GAEblmB,EANG,CAOL8rB,GAVS,EAAKylB,kBAAkBH,EAAoBpuC,GAAIhD,EAA/C,CAAwD8rB,EAWvE,CACJ,EAEA,YAAA0lB,qBAAA,SACIjtB,EACAvkB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,IAAMtsB,EAAQssB,EAAM3R,WACdrB,EAAU,EAAKq4B,uBAAuB5sB,GACtCA,EAAYzL,QACZyL,EAAY3C,gBACZwvB,EAAsB5xC,EAAM6Q,aAAagV,wBAAwBvM,GAEvE,OAAO,EAAK24B,2BACR,CACIzuC,GAAIouC,GAAuBA,EAAoBpuC,GAC/C8V,QAAO,EACPoN,UAAW,EAAKwrB,cACZntB,EAAY2B,UACZkrB,EACA5xC,EAAMgF,KAAKsY,YAGnB9c,EAVG,CAWL8rB,EACN,CACJ,EAEA,YAAA6lB,qBAAA,SACI3uC,EACAhD,GAFJ,WAII,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IAAM3sB,EAAQssB,EAAM3R,WACd2M,EAAWtnB,EAAMsnB,SAAS3L,cAC1B9K,EAAe7Q,EAAM6Q,aAAa6U,kBAExC,IAAK4B,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,IAAK3E,IAAiBA,EAAaxS,OAC/B,MAAM,IAAI,GAAiB8W,GAAqBI,qBAGpD,IAAM68B,EAAwB,CAC1B5uC,GAAIqN,EAAa,GAAGrN,GACpB6uC,iBAAkB7uC,GAGhB8uC,EAAkB,CACpB9uC,GAAIqN,EAAa,GAAGrN,IAGxBmpB,EAASG,MACL,IAAAC,cACI3oB,EAAsBmN,mCACtB7P,EACA4wC,IAIR,EAAKb,0BACAK,kBAAkBxqB,EAAS9jB,GAAI4uC,EAAuB5xC,GACtD2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cACI3oB,EAAsBM,8BACtBvH,EACAm1C,IAIR3lB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxpB,EAAsBoN,2BACtBlU,EACAg1C,GAGZ,GACR,GApDA,CAqDR,EAEA,YAAAC,oBAAA,SACI/xC,GADJ,WAGI,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IAAMrF,EAAWgF,EAAM3R,WAAW2M,SAAS3L,cAE3C,IAAK2L,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpDmX,EAASG,MAAK,IAAAC,cAAa3oB,EAAsB2M,+BAEjD,EAAKsf,uBACAG,aAAalJ,EAAS9jB,IAAI,gCACpBhD,GAAO,CACVqsB,OAAQ,CACJoD,QAAS,CAACuhB,GAAiBgB,8BAGlCrlB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cAAa3oB,EAAsBO,6BAA8BxH,IAErEwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxpB,EAAsB4M,0BACtB1T,GAGZ,GACR,GA9BA,CA+BR,EAEA,YAAAkyB,cAAA,SACIlW,EACA9Y,GAFJ,WAII,OAAO,SAAC8rB,GACJ,IAAMvH,EAAc,EAAK0tB,6BAA6Bn5B,EAASgT,GACzDzb,EAAeyb,EAAM3R,WAAW9J,aAAa6U,kBAMnD,OAJI7U,GAAgBA,EAAaxS,SAC5B0mB,EAA6CvhB,GAAKqN,EAAa,GAAGrN,IAGhE,EAAKyuC,2BAA2BltB,EAAavkB,EAA7C,CAAsD8rB,EACjE,CACJ,EAEA,YAAAomB,mBAAA,SACI7hC,EACArQ,GAFJ,WAII,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IAAMrF,EAAWgF,EAAM3R,WAAW2M,SAAS3L,cAE3C,IAAK2L,IAAaA,EAAS9jB,GACvB,MAAM,IAAI,GAAiB2R,GAAqBK,iBAGpDmX,EAASG,MAAK,IAAAC,cAAa3oB,EAAsB6M,8BAEjD,EAAKwgC,0BACAiB,mBAAmBprB,EAAS9jB,GAAIqN,EAAcrQ,GAC9C2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cAAa3oB,EAAsBG,4BAA6BpH,IAEpEwvB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxpB,EAAsB8M,yBACtB5T,GAGZ,GACR,GAzBA,CA0BR,EAEA,YAAAw0C,kBAAA,SACI/sB,EACAvkB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IAAMrF,EAAWgF,EAAM3R,WAAW2M,SAAS3L,cAE3C,IAAK2L,IAAaA,EAAS9jB,GACvB,MAAM,IAAI,GAAiB2R,GAAqBK,iBAGpD,IAAM88B,EAAkB,CAAE9uC,GAAIuhB,EAAYvhB,IAE1CmpB,EAASG,MACL,IAAAC,cACI3oB,EAAsB+M,gCACtBzP,EACA4wC,IAIR,EAAKb,0BACAK,kBAAkBxqB,EAAS9jB,GAAIuhB,EAAavkB,GAC5C2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cACI3oB,EAAsBK,2BACtBtH,EACAm1C,IAGR3lB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxpB,EAAsBgN,wBACtB9T,EACAg1C,GAGZ,GACR,GAtCA,CAuCR,EAEA,YAAAP,kBAAA,SACIv/B,EACAhS,GAFJ,WAII,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IAAMrF,EAAWgF,EAAM3R,WAAW2M,SAAS3L,cACrC22B,EAAkB,CAAE9uC,GAAIgP,GAE9B,IAAK8U,IAAaA,EAAS9jB,GACvB,MAAM,IAAI,GAAiB2R,GAAqBK,iBAGpDmX,EAASG,MACL,IAAAC,cACI3oB,EAAsBiN,gCACtB3P,EACA4wC,IAIR,EAAKb,0BACAM,kBAAkBzqB,EAAS9jB,GAAIgP,EAAehS,GAC9C2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cACI3oB,EAAsBI,2BACtBrH,EACAm1C,IAGR3lB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxpB,EAAsBkN,wBACtBhU,EACAg1C,GAGZ,GACR,GArCA,CAsCR,EAEA,YAAAK,qBAAA,SACI5tB,EACAvkB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,SAAAF,WAAWrV,QAAO,SAAC4V,GACf,IAAMrF,EAAWgF,EAAM3R,WAAW2M,SAAS3L,cAE3C,IAAK2L,IAAaA,EAAS9jB,GACvB,MAAM,IAAI,GAAiB2R,GAAqBK,iBAGpD,IAAM88B,EAAkB,CAAE9uC,GAAIuhB,EAAYvhB,IAE1CmpB,EAASG,MACL,IAAAC,cACI3oB,EAAsBmN,mCACtB7P,EACA4wC,IAIR,EAAKb,0BACAK,kBAAkBxqB,EAAS9jB,GAAIuhB,EAAavkB,GAC5C2sB,MAAK,SAAC,G,IAAEhwB,EAAI,OACTwvB,EAASG,MACL,IAAAC,cACI3oB,EAAsBM,8BACtBvH,EACAm1C,IAGR3lB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxpB,EAAsBoN,2BACtBlU,EACAg1C,GAGZ,GACR,GAtCA,CAuCR,EAEQ,YAAAL,2BAAR,SACIltB,EACAvkB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,IAAMhF,EAAWgF,EAAM3R,WAAW2M,SAAS3L,cAE3C,IAAK2L,IAAaA,EAAS9jB,GACvB,MAAM,IAAI,GAAiB2R,GAAqBK,iBAGpD,OAAI,EAAKo9B,4BAA4B7tB,GAC1B,EAAK+sB,kBAAkB/sB,EAAavkB,EAApC,CAA6C8rB,GAGjD,EAAKomB,mBAAmB,CAAC3tB,GAAcvkB,EAAvC,CAAgD8rB,EAC3D,CACJ,EAEQ,YAAAmmB,6BAAR,SACIn5B,EACAgT,GAEA,IACMtnB,EADQsnB,EAAM3R,WACD3V,KAAKsY,UAExB,IAAKtY,EACD,MAAM,IAAI,GAAiBmQ,GAAqBG,aAG9C,MAAsCtQ,EAAK0hB,UAAzCC,EAAa,gBAAE,IAAAksB,YAAAA,OAAW,IAAG,KAAE,EAEvC,MAAO,CACHv5B,QAAO,EACPoN,WAAW,oBAAIC,EAAkBksB,GAAav0C,KAAI,SAACsO,GAAS,OACxDkmC,OAAQlmC,EAAKpJ,GACbmvB,SAAU/lB,EAAK+lB,SAFyC,IAKpE,EAEQ,YAAAkf,iBAAR,SACInrB,EACA3B,EACA/f,GAEA,IAAKA,EACD,MAAM,IAAI,GAAiBmQ,GAAqBG,aAGpD,OAAOrX,KAAK80C,kBAAkBhuB,EAAY0B,YAAazhB,GAClD1G,KAAI,SAAC4O,GACF,IAAM8lC,GAAa,IAAAr1B,MACf+I,GACA,SAACkjB,GAAa,OAAAA,EAASkJ,SAAW5lC,EAAa4lC,MAAjC,IAGlB,OAAO,gCACA5lC,GAAY,CACfylB,SAAUqgB,EACJ9lC,EAAaylB,SAAWqgB,EAAWrgB,SACnCzlB,EAAaylB,UAE3B,IACC1xB,QAAO,SAAC2oC,GAAa,OAAAA,EAASjX,SAAW,CAApB,GAC9B,EAEQ,YAAAuf,cAAR,SACIxrB,EACA3B,EACA/f,GAEA,IAAK+f,EACD,OAAO2B,EAGX,IAAK1hB,EACD,MAAM,IAAI,GAAiBmQ,GAAqBG,aAGpD,OAAOoR,EACFF,OAAOvoB,KAAK80C,kBAAkBhuB,EAAY0B,YAAazhB,IACvD/D,QAAO,SAAC2oC,GAAa,OAAAA,EAASjX,SAAW,CAApB,GAC9B,EAEQ,YAAAogB,kBAAR,SAA0BtsB,EAAuBzhB,GAC7C,OAAOyhB,EAAYnoB,KAAI,SAACw0C,GACpB,IAAMlmC,GAAO,IAAA+Q,MAAK3Y,EAAK0hB,UAAUC,eAAe,SAACijB,GAAa,OAAAA,EAASpmC,KAAOsvC,CAAhB,IAE9D,MAAO,CACHA,OAAM,EACNngB,SAAU/lB,EAAOA,EAAK+lB,SAAW,EAEzC,GACJ,EAEQ,YAAAigB,4BAAR,SACIzE,GAIA,QAFsBA,EAEC3qC,EAC3B,EAEQ,YAAAmuC,uBAAR,SACI5sB,GAIA,MAA8B,iBAAhBA,GAA4B,YAAaA,CAC3D,EACJ,EArdA,G,YC5BA,IAAMkuB,GAAmB,CACrB,wCACA,uCACA,sCACA,WACA,sBAGJ,cACI,WAAoBzmB,GAAA,KAAAA,eAAAA,CAAgC,CA2DxD,OAzDI,YAAAkmB,mBAAA,SACI5iB,EACAjf,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxEqd,EAAO,UAAE,IAAArB,OAAUoD,QAAV,MAAsB,CAAC,EAAC,GAAP,QAEtB5B,EAAM,6BAA6ByB,EAAU,gBAC7C1yB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe0D,KAAK7B,EAAK,CACjClxB,KAAM0T,EACNgc,OAAQ,CACJoD,QAASoB,GAAoB4hB,GAAkBhjB,IAEnD7yB,QAAO,EACP8wB,QAAO,GAEf,EAEA,YAAA4jB,kBAAA,SACIhiB,EACA/K,EACA,G,IAAA,aAAwE,CAAC,EAAC,EAAxEmJ,EAAO,UAAE,IAAArB,OAAUoD,QAAV,MAAsB,CAAC,EAAC,GAAP,QAEpBzsB,EAAgBuhB,EAAW,GAApB5nB,GAAI,YAAK4nB,EAAlB,QACAsJ,EAAM,6BAA6ByB,EAAU,iBAAiBtsB,EAC9DpG,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe2D,IAAI9B,EAAK,CAChClxB,KAAI,EACJ0vB,OAAQ,CACJoD,QAASoB,GAAoB4hB,GAAkBhjB,IAEnD7yB,QAAO,EACP8wB,QAAO,GAEf,EAEA,YAAA6jB,kBAAA,SACIjiB,EACAtd,EACA,G,IAAE0b,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,6BAA6ByB,EAAU,iBAAiBtd,EAC9DpV,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAEDgC,EAAUiB,GAAa+hB,IAE7B,OAAOh1C,KAAKuuB,eAAeoI,OAAOvG,EAAK,CAAExB,OAAQ,CAAEoD,QAAO,GAAI7yB,QAAO,EAAE8wB,QAAO,GAClF,EACJ,EA5DA,G,eCZA,WACI,WACYglB,EACA9Q,GADA,KAAA8Q,8BAAAA,EACA,KAAA9Q,OAAAA,CACT,CA8BP,OA5BI,YAAA+Q,cAAA,SAAc3yC,GAAd,WAEY4yC,EADan1C,KAAKmkC,OAAOznB,WAAU,SACZwM,qBAAoB,UAEnD,OAAO,EAAAiF,WAAWrV,QAAO,SAAC4V,GACtBA,EAASG,MAAK,IAAAC,cAAa3a,GAA0Bc,iCAErD,EAAKggC,8BACAC,cAAcC,EAAW5yC,GACzB2sB,MAAK,SAAC7vB,GACHqvB,EAASG,MACL,IAAAC,cACI3a,GAA0Ba,+BAC1B3V,EAASH,KAAK6E,OAGtB2qB,EAASS,UACb,IACCC,OAAM,SAAC/vB,GACJqvB,EAAShvB,OACL,IAAAiwB,mBACIxb,GAA0Be,4BAC1B7V,GAGZ,GACR,GACJ,EACJ,EAlCA,GCJA,kBACI,WAAoBkvB,EAAuC6mB,GAAvC,KAAA7mB,eAAAA,EAAuC,KAAA6mB,QAAAA,CAA+B,CAe9F,OAbI,YAAAF,cAAA,SACIC,EACA,G,IAAEllB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,iDAAiD+kB,EAEvDh2C,GAAU,eACZ,kBAAmBa,KAAKo1C,QAAQt0B,QAC7BkP,IAGP,OAAOhwB,KAAKuuB,eAAezwB,IAAIsyB,EAAK,CAAEjxB,QAAO,EAAE8wB,QAAO,GAC1D,EACJ,EAhBA,G,YCUA,kBACI,WACYoL,EACA9M,GADA,KAAA8M,iBAAAA,EACA,KAAA9M,eAAAA,CACT,CA8GP,OA5GI,YAAA8mB,WAAA,SACI9yC,GADJ,WAGI,OAAO,SAAC8rB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAapY,GAAyB1M,yBAAqBvG,KAC9D,IAAA2tB,QAAM,6D,+EAgBF,OAfMkkB,EAA0B/yC,EAC1BA,EAAQkF,YACR,0BAEDlF,GAAYq1B,SAASsE,eAAeoZ,MAC/BC,EAAwB3d,SAASW,cAAc,QAE/B8D,aAAa,KAAMiZ,GACzC1d,SAAS14B,KAAKo9B,YAAYiZ,IAGxBxzC,EAAQssB,EAAM3R,WACd4D,EAAcve,EAAM0qB,OAAOlM,wBAC3Bwb,EAAmBzb,EAAYsQ,iBAAiB4kB,uBAEtD,GAAMx1C,KAAKq7B,iBAAiBkB,KAAK+Y,EAAyBvZ,I,OAE1D,OAFA,SAEO,CAAP,GAAO,IAAAjN,cAAapY,GAAyB7M,sB,WAEnDqjB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB3Z,GAAyBvM,iBAAkBzK,EAA5D,IAxBR,CA2BR,EAEA,YAAA+1C,6BAAA,sBACI,OAAO,SAACpnB,GACJ,WAAA+C,QAAM,WACF,IACM/H,EADQgF,EAAM3R,WACG2M,SAAS3L,cAEhC,IAAK2L,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,OAAO,IAAAgR,SACH,IAAA+H,KAAG,IAAAxB,cAAapY,GAAyBg/B,2BACzC,IAAAzoB,MAAK,EAAKiJ,SAAL,CAAe7H,IAAQnB,MACxB,IAAA+I,YAAU,SAACj0B,GACP,OACKyzB,GAAuCzzB,IACvCA,EAAOG,SAKL,IAAA8qB,MACH,EAAKsB,eAAewG,SAAS1L,EAAS9jB,GAAIvD,EAAOG,QAAQyL,QAC3Dsf,MACE,IAAA+I,YAAU,SAAC,G,IAAE/2B,EAAI,OACb,WAAAqpB,SACI,IAAA+H,IAAGtuB,IACH,IAAAsuB,KACI,IAAAxB,cACIpY,GAAyBI,wBACzB5X,IALZ,MAPG,IAAAoxB,IAAGtuB,EAkBlB,MAENkrB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB3Z,GAAyBi/B,qBAAsBj2C,EAAhE,IAGZ,GAzCA,CA0CR,EAEA,YAAAw2B,QAAA,sBACI,OAAO,SAAC7H,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAapY,GAAyBxG,mBACzC,EAAKmlC,YAAL,CAAkBhnB,GAClB,EAAKgN,iBACAnF,UACAhJ,MAAK,IAAAwM,MAAK,IACVxM,MACG,IAAA+I,YAAU,SAAO,G,IAAEv2B,EAAK,QAAEkO,EAAK,Q,4FAC3B,GAAIlO,aAAiB,GACjB,MAAMA,EAGV,GAAIA,IAAUkO,EACV,MAAM,IAAI,GAGd,MAAO,CAAP,GAAO,IAAAkhB,cAAapY,GAAyBvG,iBAAkB,CAC3DvC,MAAK,I,YAIvBsf,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiB3Z,GAAyBpG,cAAe5Q,EAAzD,IAvBR,CA0BR,EACJ,EAlHA,G,YCVA,kBACI,WAAoB6uB,GAAA,KAAAA,eAAAA,CAAgC,CAexD,OAbI,YAAAwG,SAAA,SACIlD,EACAjkB,EACA,G,IAAEqiB,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,6BAA6ByB,EAAU,mBAC7C1yB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe0D,KAAK7B,EAAK,CAAElxB,KAAM,CAAE0O,MAAK,GAAIzO,QAAO,EAAE8wB,QAAO,GAC5E,EACJ,EAhBA,G,YCOA,kBACI,WAAoB2lB,GAAA,KAAAA,0BAAAA,CAAsD,CA6B9E,OA3BI,YAAAC,iBAAA,SACIzsB,EACA7mB,GAFJ,WAII,OAAO,SAAC8rB,GACJ,WAAA9F,SACI,IAAA+H,KAAG,IAAAxB,cAAa7Y,GAAsBM,6BACtC,IAAA6a,QAAM,6D,2EAIF,GAHMrvB,EAAQssB,EAAM3R,aACd2M,EAAWtnB,EAAMsnB,SAAS3L,eAG5B,MAAM,IAAI,GAAiBxG,GAAqBK,iBAGnC,SAAO6R,EAClBppB,KAAK41C,0BAA0BC,iBAAiBxsB,EAAS9jB,GAAIhD,GAC7DvC,KAAK41C,0BAA0BE,kBAAkBzsB,EAAS9jB,GAAIhD,I,OAEpE,OAJQrD,EAAS,SAE4D,KAEtE,CAAP,GAAO,IAAA4vB,cAAa7Y,GAAsBO,0BAA2BtX,I,WAE3EguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBpa,GAAsBQ,uBAAwB/W,EAA/D,IAlBR,CAqBR,EACJ,EA9BA,G,YCFA,kBACI,WAAoB6uB,GAAA,KAAAA,eAAAA,CAAgC,CAuCxD,OArCI,YAAAsnB,iBAAA,SACIhkB,EACA,G,IAAE5B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,6BAA6ByB,EAAU,gBAC7C1yB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe0D,KAAK7B,EAAK,CACjCjxB,QAAO,EACP8wB,QAAO,EACPrB,OAAQ,CACJoD,QAASiB,GAAa,MAGlC,EAEA,YAAA6iB,kBAAA,SACIjkB,EACA,G,IAAE5B,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAEHG,EAAM,6BAA6ByB,EAAU,gBAC7C1yB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAeoI,OAAOvG,EAAK,CACnCjxB,QAAO,EACP8wB,QAAO,EACPrB,OAAQ,CACJoD,QAASiB,GAAa,MAGlC,EACJ,EAxCA,G,eCLA,YACI,WAAY5zB,GAAZ,MACI,YAAMA,IAAS,K,OAEf,EAAKX,KAAO,2BACZ,EAAKC,KAAO,uB,CAChB,CACJ,OAPsD,oBAOtD,EAPA,CAAsD,GCUtD,kBACI,WAAoBo3C,GAAA,KAAAA,4BAAAA,CAA0D,CAyBlF,OAvBI,YAAAnkB,oBAAA,SACIrF,EACAhqB,GAFJ,WAII,OAAO,IAAAgmB,SACH,IAAA+H,KAAG,IAAAxB,cAAavtB,EAAwBsD,gCACxC,IAAAusB,QAAM,6D,uEACe,SAAMpxB,KAAK+1C,4BAA4BnkB,oBACpDrF,EACAhqB,I,OAGJ,OALQrD,EAAS,SAGhB,KAEM,CAAP,GAAO,IAAA4vB,cAAavtB,EAAwBuD,6BAA8B5F,I,WAEhFguB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GACI9uB,EAAwByD,0BACxB,IAAI,GAAyBtF,GAFjC,IAMZ,EACJ,EA1BA,G,YCTA,kBACI,WAAoB6uB,GAAA,KAAAA,eAAAA,CAAgC,CAcxD,OAZI,YAAAqD,oBAAA,SACIrF,EACA,G,IAAE0D,QAAF,MAA8B,CAAC,EAAC,GAAvB,QAGH9wB,GAAU,eACZ+wB,OAAQ,GAAYC,QACjBH,IAGP,OAAOhwB,KAAKuuB,eAAe0D,KANf,gCAMyB,CAAE/yB,KAAMqtB,EAAeptB,QAAO,EAAE8wB,QAAO,GAChF,EACJ,EAfA,G,YCFA,IAAM+lB,IAAY,IAAAx9B,UAAQ,SAAIy9B,GAC1B,OAAIp2C,MAAMC,QAAQm2C,GAENA,EAAgB51C,KAAI,SAAC/B,GAAsB,OAAA43C,GAAc53C,EAAd,IAGnDqD,EAAcs0C,GACNt4C,OAAOwF,KAAK8yC,GAA0Bz2C,QAC1C,SAACC,EAAQhC,G,MAAQ,OAAC,gCACXgC,KAAM,MACRhC,GAAMy4C,GAAcD,EAAMx4C,IAAK,GAFnB,GAIjB,CAAC,GAIFw4C,CACX,IAKAD,GAAUG,MAAQ,IAAIxoB,QAQtB,IAAMuoB,GAAgB,SAAID,GACtB,MAAwB,iBAAVA,GAAgC,OAAVA,EAAiBD,GAAUC,GAASA,CAC5E,EAMe,SAASG,GAA4BpoB,GAChD,OAAO,W,IAAE,sDAAmB,OAAAkoB,GAAcloB,EAAE,aAAI3V,GAAM,CAC1D,CCvCe,SAASg+B,GAAkC,G,IACtD,IAAA7xC,eAAkB2X,EAAiB,oBAAEC,EAAwB,2BAC7D,IAAArV,KAAQsY,EAAO,UAAEC,EAAc,iBAC/B,IAAA+J,SAAY3L,EAAW,cAAEwL,EAAkB,qBAAEC,EAAqB,wBAClE,IAAAsD,OACIjM,EAAgB,mBAChBG,EAAO,UACPE,EAAS,YACTX,EAAc,iBACdK,EAAqB,wBACrBV,EAAS,YAEb,IAAAjN,aAAgB6U,EAAe,kBAAEC,EAAsB,yBAC1CvG,EAAY,yBACzB,IAAA/X,SAAY8T,EAAW,cAAEC,EAAkB,qBAC3C,IAAA2F,YACII,EAAiB,oBACjBM,EAAwB,2BACxBE,EAAc,iBACdG,EAAkB,qBAEtB,IAAAnW,MAASoc,EAAQ,WAAEC,EAAe,kBAAEC,EAAY,eAChD,IAAAnc,QACI0Q,EAAe,kBACfC,EAAsB,yBACtBL,EAAY,eACZC,EAAmB,sBACnBC,EAAgB,mBAChBC,EAAuB,0BACvBG,EAAqB,wBACrBC,EAA4B,+BAC5BC,EAAqB,wBAEzB,IAAA8G,eAAkBE,EAAgB,mBAAEC,EAAuB,0BAAEF,EAAqB,wBAClF,IAAAwG,wBAA2B1O,EAA0B,6BAAEC,EAAiC,oCACpD64B,EAA0B,kCAC9D,IAAAnyB,gBACIxG,EAAkB,qBAClBC,GAAyB,4BACzBC,GAAoB,uBACpBC,GAA2B,8BAEVoJ,GAAoB,yCAEzC,MAAO,CACHvG,QAAS,GAAMA,GACfE,UAAW,GAAMA,GACjB1E,kBAAmB,GAAMA,GACzBC,yBAA0B,GAAMA,GAChCiD,QAAS,GAAMA,GACfC,eAAgB,GAAMA,GACtB5B,YAAa,GAAMA,GACnBwL,mBAAoB,GAAMA,GAC1B/H,aAAc,GAAMA,GACpBjB,eAAgB,GAAMA,GACtBK,sBAAuB,GAAMA,GAC7BV,UAAW,GAAMA,GACjB4H,gBAAiB,GAAMA,GACvBC,uBAAwB,GAAMA,GAC9BlH,iBAAkB,GAAMA,GACxBtD,YAAa,GAAMA,GACnBC,mBAAoB,GAAMA,GAC1B+F,kBAAmB,GAAMA,GACzBQ,eAAgB,GAAMA,GACtBF,yBAA0B,GAAMA,GAChCsG,SAAU,GAAMA,GAChBC,gBAAiB,GAAMA,GACvBC,aAAc,GAAMA,GACpBnG,mBAAoB,GAAMA,GAC1BtF,gBAAe,EACfC,uBAAsB,EACtBL,aAAY,EACZC,oBAAmB,EACnBC,iBAAgB,EAChBC,wBAAuB,EACvBG,sBAAqB,EACrBC,6BAA4B,EAC5BiH,iBAAkB,GAAMA,GACxBC,wBAAyB,GAAMA,GAC/BF,sBAAuB,GAAMA,GAC7BlI,2BAA4B,GAAMA,GAClCC,kCAAmC,GAAMA,GACzCE,mBAAoB,GAAMA,GAC1BC,0BAA2B,GAAMA,IACjCC,qBAAsB,GAAMA,IAC5BC,4BAA6B,GAAMA,IACnCoJ,qBAAsB,GAAMA,IAC5BiC,sBAAuB,GAAMA,GAC7BxK,sBAAqB,EACrB23B,2BAA0B,EAElC,CC1DA,kBAGI,WACYnS,EACAoS,EACA3gB,EACAkP,EACA0R,EACAzQ,EACA0Q,EACAC,EACAC,EACAC,EACApU,EACAqU,EACAC,EACAC,EACAlhB,EACAmhB,EACAC,EACAC,EACAC,GAlBA,KAAAhT,OAAAA,EACA,KAAAoS,wBAAAA,EACA,KAAA3gB,uBAAAA,EACA,KAAAkP,mBAAAA,EACA,KAAA0R,mBAAAA,EACA,KAAAzQ,oBAAAA,EACA,KAAA0Q,6BAAAA,EACA,KAAAC,0BAAAA,EACA,KAAAC,4BAAAA,EACA,KAAAC,sBAAAA,EACA,KAAApU,iCAAAA,EACA,KAAAqU,uBAAAA,EACA,KAAAC,mBAAAA,EACA,KAAAC,0BAAAA,EACA,KAAAlhB,6BAAAA,EACA,KAAAmhB,sCAAAA,EACA,KAAAC,8BAAAA,EACA,KAAAC,6BAAAA,EACA,KAAAC,oCAAAA,EAERn3C,KAAKo3C,iBAAmBp3C,KAAKu2C,wBAAwBz9B,OAAO9Y,KAAKmkC,OACrE,CAmQJ,OAjQI,YAAAkT,iBAAA,SAAiBz2B,EAAcre,GAC3B,OAAOvC,KAAKw2C,mBAAmB19B,OAAO8H,EAAMre,EAChD,EAEA,YAAA+0C,UAAA,SACIC,G,UACA,oDAEA,OAAO,EAAAv3C,KAAKo3C,kBAAiBE,UAAS,8BAACC,GAAeC,GAC1D,EAEA,YAAA96B,SAAA,WACI,OAAO1c,KAAKo3C,iBAAiB16B,UACjC,EAEM,YAAAupB,yBAAN,SACIwR,G,sHAEA,SAAMz3C,KAAKmkC,OAAOuT,SACd13C,KAAK42C,sBAAsB3Q,yBAAyBwR,K,OAGxD,OAJA,SAIO,CAAP,EAAOz3C,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAA6V,aAAN,SAAmBhtB,G,6HACXA,EACA,GAAMvF,KAAKmkC,OAAOuT,SAAS13C,KAAK41B,uBAAuBrD,aAAahtB,KADpE,M,cACA,S,aAEA,SAAMvF,KAAKmkC,OAAOuT,SAAS13C,KAAK41B,uBAAuB9C,wB,OAAvD,S,iBAGJ,MAAO,CAAP,EAAO9yB,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAkW,oBAAN,W,sHACI,SAAM5yB,KAAKmkC,OAAOuT,SAAS13C,KAAK41B,uBAAuBhD,wB,OAEvD,OAFA,SAEO,CAAP,EAAO5yB,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAuS,kBAAN,SACI1nB,EACAhF,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAK22C,4BAA4B1nB,kBAAkB1nB,EAAUhF,K,OAGjE,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAA2S,mBAAN,SAAyB9sB,G,sHACrB,SAAMvC,KAAKmkC,OAAOuT,SAAS13C,KAAK22C,4BAA4BtnB,mBAAmB9sB,K,OAE/E,OAFA,SAEO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAyoB,YAAN,SACIhjC,EACAI,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SAAS13C,KAAK+lC,oBAAoBZ,YAAYhjC,EAASI,K,OAEzE,OAFA,SAEO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAiqB,cAAN,SAAoB94B,G,sHAChB,SAAM7N,KAAKmkC,OAAOuT,SAAS13C,KAAK42C,sBAAsBjQ,cAAc94B,K,OAEpE,OAFA,SAEO,CAAP,EAAO7N,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAgpB,cAAN,SAAoBnjC,G,4HAKhB,OAHawnB,EACT/pB,KAAKmkC,OAAOznB,WAAU,sBAE1B,GAAM1c,KAAKmkC,OAAOuT,SACd13C,KAAK+lC,oBAAoBL,cAAc3b,IAAkBhT,QAASxU,K,OAGtE,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAi7B,qBAAN,SACIx1C,G,sHAEA,SAAMnC,KAAKmkC,OAAOuT,SAAS13C,KAAKy2C,6BAA6BllB,cAAcpvB,K,OAE3E,OAFA,SAEO,CAAP,EAAOnC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAk7B,sBAAN,SACIz1C,G,sHAEA,SAAMnC,KAAKmkC,OAAOuT,SAAS13C,KAAK02C,0BAA0BnlB,cAAcpvB,K,OAExE,OAFA,SAEO,CAAP,EAAOnC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAw3B,qBAAN,SACI3uC,EACAhD,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAK02C,0BAA0BxC,qBAAqB3uC,EAAIhD,K,OAG5D,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAA0Z,eAAN,SACI1F,EACAnuB,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAK62C,uBAAuBzgB,eAAe1F,EAAanuB,K,OAG5D,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAA8Z,gBAAN,SAAsBj0B,G,sHAClB,SAAMvC,KAAKmkC,OAAOuT,SAAS13C,KAAK62C,uBAAuBrgB,gBAAgBj0B,K,OAEvE,OAFA,SAEO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAyV,iBAAN,SACI0lB,EACAt1C,G,sHAE6B,SAAMvC,KAAK82C,mBAAmB3kB,iBACvD0lB,EACAt1C,I,OAGJ,MAAO,CAAP,EAL6B,SAG5B,M,QAKC,YAAAszC,iBAAN,SACIzsB,EACA7mB,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAK+2C,0BAA0BlB,iBAAiBzsB,EAAgB7mB,K,OAGpE,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAA+4B,6BAAN,W,6HACyBz1C,KAAKmkC,OAAOznB,WAAU,SACCwM,qBAAoB,uBAG5D,GAAMlpB,KAAKmkC,OAAOuT,SACd13C,KAAK61B,6BAA6B4f,iCAFtC,M,OACA,S,iBAKJ,MAAO,CAAP,EAAOz1C,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAuoB,iBAAN,SAAuB1iC,G,sHACnB,SAAMvC,KAAKmkC,OAAOuT,SAAS13C,KAAK+lC,oBAAoBd,iBAAiB1iC,K,OAErE,OAFA,SAEO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAi1B,8BAAN,SACIzlB,G,sHAEA,SAAMlsB,KAAKmkC,OAAOuT,SACd13C,KAAKg3C,sCAAsCrF,8BACvCzlB,K,OAIR,OANA,SAMO,CAAP,EAAOlsB,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAo7B,sBAAN,SAA4Bv1C,G,sHACxB,SAAMvC,KAAKmkC,OAAOuT,SAAS13C,KAAKi3C,8BAA8B/B,cAAc3yC,K,OAE5E,OAFA,SAEO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAo3B,kBAAN,SACIv/B,EACAhS,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAK02C,0BAA0B5C,kBAAkBv/B,EAAehS,K,OAGpE,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAA21B,kBAAN,SACI9qC,EACAqnB,EACArsB,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAKk3C,6BAA6B7E,kBAAkB9qC,EAAUqnB,EAAQrsB,K,OAG1E,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAs2B,eAAN,SACIzrC,EACAhF,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SACd13C,KAAKk3C,6BAA6BlE,eAAezrC,EAAUhF,K,OAG/D,OAJA,SAIO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAq7B,sBAAN,SACIxwC,EACAhF,G,sHAEA,SAAMvC,KAAKmkC,OAAOuT,SAAS13C,KAAKk3C,6BAA6BtE,QAAQrrC,EAAUhF,K,OAE/E,OAFA,SAEO,CAAP,EAAOvC,KAAKo3C,iBAAiB16B,Y,QAG3B,YAAAs7B,iBAAN,SAAuB3uB,EAAqB9mB,G,sHACxC,SAAMvC,KAAK8kC,mBAAmB/P,SAAS1L,EAAU9mB,I,cAAjD,S,YAGE,YAAA01C,+BAAN,SACI1c,EACA99B,G,+FAEA,MAAyB,iBAAd89B,EACA,CAAP,EAAOv7B,KAAKwiC,iCAAiClH,OAAOC,EAAW99B,QAAAA,EAAO,KAGnE,CAAP,EAAOuC,KAAKwiC,iCAAiClH,OAAOC,G,QAGlD,YAAAsW,kBAAN,SACI3Z,G,sHAEA,SAAMl4B,KAAKmkC,OAAOuT,SACd13C,KAAKm3C,oCAAoCtF,kBAAkB3Z,GAC3D,CAAEggB,QAAS,uB,OAGf,OALA,SAKO,CAAP,EAAOl4C,KAAKo3C,iBAAiB16B,Y,QAErC,EA5RA,G,YCpCA,IAAKy7B,IAAL,SAAKA,GACD,2BACH,CAFD,CAAKA,KAAAA,GAAoB,K,SCGzB,WACI,WACYC,GAAA,KAAAA,oBAAAA,CAGT,CAKP,OAHI,YAAAt/B,OAAA,SAAOuV,GACH,ODGO,SACXA,EACAd,GAEA,IAAM8qB,GAAa,IAAA/qB,kBAKf,SAACvrB,EAAOC,GACJ,OAAAA,EAAOrD,OAASw5C,GAAqBG,YAAct2C,EAAOG,QAAUJ,CAApE,GACJssB,EAAM3R,WACN,CAAE6Q,iBAAgB,IAYtB,OATAc,EAAMipB,WACF,SAACv1C,GACGs2C,EAAWX,UACP,IAAA5oB,cAAaqpB,GAAqBG,YAAav2C,GAEvD,GACA,CAAEw2C,SAAS,IAGRF,CACX,CC5BeG,CAA0BnqB,EAAOruB,KAAKo4C,oBACjD,EACJ,EAVA,GCLA,MAAM,GAA+B75C,QAAQ,gB,eCiBtC,SAASk6C,GAAsBp4C,GAClC,OAAO1C,OAAOM,UAAUC,eAAeC,KAAKkC,EAAK,WACrD,CCKA,kBAMI,WAAYkC,GALJ,KAAAm2C,QAAU,EACV,KAAAC,KAAwB,CAAEC,KAAM,IAChC,KAAAC,UAAmC,GAIvC74C,KAAK84C,UAAW,eACZC,QAAS,EACT32C,QAAS,KACT42C,SAAU,EAAAtW,MACPngC,EAEX,CA4IJ,OA1II,YAAA02C,OAAA,W,IAAO,sDACH,IAAMx5C,EAASO,KAAKk5C,YAAW,MAAhBl5C,KAAoBqY,GAC3B7V,EAAqB/C,EAAM,MAApB05C,EAAc15C,EAAM,UAC7BY,EAAQZ,EAAM,IAYpB,OAVIY,GAAOA,EAAI+4C,SACX/4C,EAAIg5C,YAEJh5C,EAAML,KAAKs5C,aAAaH,EAAW9gC,EAAK8b,MAAM3xB,IAKlDxC,KAAKu5C,oBAAoBl5C,GAElBA,EAAI+4C,QACf,EAEA,YAAAI,aAAA,W,IAAa,sDACD,IAAAn5C,EAAQL,KAAKk5C,YAAW,MAAhBl5C,KAAoBqY,GAAI,IAExC,OAAOhY,EAAMA,EAAIg5C,UAAY,CACjC,EAEQ,YAAAH,YAAR,W,UAAoB,kDAUhB,IATA,IAAI12C,EAAQ,EACR22C,EAAYn5C,KAAK24C,KAQdQ,EAAUP,KAAKx4C,QAAQ,CAG1B,IAFA,IAAIq5C,GAAY,EAEPC,EAAW,EAAGA,EAAWP,EAAUP,KAAKx4C,OAAQs5C,IAAY,CACjE,IAAMr5C,EAAM84C,EAAUP,KAAKc,GAE3B,GAAK15C,KAAK84C,SAAS12C,QAAQ/B,EAAI/B,MAAO+Z,EAAK7V,IAA3C,CAQA,IAFA,EAAA22C,EAAUP,MAAKe,QAAO,QAAIR,EAAUP,KAAK1d,OAAOwe,EAAU,KAGrC,IAAhBrhC,EAAKjY,QAAgBoC,IAAU6V,EAAKjY,OAAS,IAC9Cq4C,GAAsBp4C,GAEtB,MAAO,CAAEmC,MAAK,EAAEnC,IAAG,EAAE84C,UAAS,GAGlCM,GAAY,EACZN,EAAY94C,EACZmC,IAEA,K,EAGJ,IAAKi3C,EACD,K,CAIR,MAAO,CAAEj3C,MAAK,EAAE22C,UAAS,EAC7B,EAEQ,YAAAG,aAAR,SACI7lC,EACA4E,GAEA,IAEIhY,EAFAmC,EAAQ,EACR22C,EAAY1lC,EAGhB,GACIpT,EAAM,CACFu4C,KAAM,GACNO,UAAS,EACTE,UAAW,EACX/6C,MAAO+Z,EAAK7V,IAMhB22C,EAAUP,KAAKe,QAAQt5C,GAEvB84C,EAAY94C,EACZmC,UACKA,EAAQ6V,EAAKjY,QAEtB,IAAMw5C,EAAcv5C,EAIpB,OAFAu5C,EAAYR,SAAW,MAAKp5C,KAAK04C,QAE1BkB,CACX,EAEQ,YAAAL,oBAAR,SAA4BM,GACxB,GAAK75C,KAAK84C,SAASC,QAAnB,CAIA,IAAMv2C,EAAQxC,KAAK64C,UAAUlwB,QAAQkxB,GAIrC,GAFA75C,KAAK64C,UAAU3d,QAAkB,IAAX14B,EAAe,EAAIA,GAAkB,IAAXA,EAAe,EAAI,EAAGq3C,KAElE75C,KAAK64C,UAAUz4C,QAAUJ,KAAK84C,SAASC,SAA3C,CAIA,IAAM14C,EAAML,KAAK64C,UAAUvgC,MAEtBjY,IAILL,KAAK85C,WAAWz5C,GAChBL,KAAK84C,SAASE,SAAS34C,EAAI+4C,U,EAC/B,EAEQ,YAAAU,WAAR,SAAmBz5C,GACVA,EAAI84C,YAIT94C,EAAI84C,UAAUP,KAAK1d,OAAO76B,EAAI84C,UAAUP,KAAKjwB,QAAQtoB,GAAM,GDpJ5D,SAA2BA,GAC9B,OAAO1C,OAAOM,UAAUC,eAAeC,KAAKkC,EAAK,YACrD,CCoJY05C,CAAkB15C,EAAI84C,YAI1Bn5C,KAAK85C,WAAWz5C,EAAI84C,WACxB,EACJ,EAzJA,G,YCZe,SAASa,GAAiDphC,GACrE,IAAMohB,EAAe,YAAG,a,8CAAsB,QAAR,oBAAQ,EAAzB,CAAiBphB,GAgBtC,OAdAjb,OAAOub,oBAAoBN,EAAO3a,WAAW0V,SAAQ,SAAClW,GAClD,IAAMgwB,EAAa9vB,OAAOs8B,yBAAyBrhB,EAAO3a,UAAWR,GAEhEgwB,GAAsB,gBAARhwB,GAInBE,OAAOC,eACHo8B,EAAgB/7B,UAChBR,EAQZ,SACImb,EACAnb,EACAgwB,GAEA,GAAgC,mBAArBA,EAAWnvB,MAClB,OAAOmvB,EAGX,IAAIwsB,EAAW,IAAI,GACfvgC,EAAS+T,EAAWnvB,MACpB47C,GAAiB,KAAA1hC,SAAQkB,GAE7B,OAAO,GAAcd,EAAQnb,EAAK,CAC9BK,IAAA,sBACUQ,EAAQ,W,IAAE,sDACZ,IAAM67C,EAAcD,EAAe/7C,KAAI,MAAnB+7C,GAAc,qBAAM,GAAS7hC,IAEjD,GAAuC,IAAnC4hC,EAAST,aAAY,MAArBS,EAAyB5hC,GACzB,OAAO8hC,EAGX,IAAM32C,EAAWkW,EAAOvb,KAAI,MAAXub,GAAM,qBAAM,GAASrB,IAEtC,OAAIjW,EAAQoB,EAAU22C,EAAa,CAAEl3C,UAAW,SAACxF,GAAQ,OCxD1D,SAAmBA,GAC9B,OAAkC,KAA3B,GAAGA,GAAMkrB,QAAQ,OAAyC,KAA1B,GAAGlrB,GAAMkrB,QAAQ,IAC5D,CDsD0EyxB,CAAU38C,EAAX,IAC9C08C,GAGXD,EAAe/D,MAAMjoB,IAAI+rB,EAAShB,OAAM,MAAfgB,EAAmB5hC,GAAO7U,GAE5CA,EACV,EAID,OAFA7F,OAAOC,eAAeoC,KAAMvC,GAAK,gCAAKgwB,GAAU,CAAEnvB,MAAK,KAEhDA,CACX,EACA4vB,IAAG,SAAC5vB,GACA27C,EAAW,IAAI,GACfvgC,EAASpb,EACT47C,GAAiB,KAAA1hC,SAAQkB,EAC7B,GAER,CAlDY2gC,CAAwBzhC,EAAO3a,UAAWR,EAAKgwB,GAEvD,IAEOuM,CACX,C,SEvBA,WAMI,WAAYxN,GACRxsB,KAAKs6C,gBAAkB9tB,EAAUX,cACrC,CASJ,OAPI,YAAA0uB,yBAAA,SAAyBhzC,GACrB,OAAOvH,KAAKs6C,gBAAgB39B,mBAAmBpV,EACnD,EAEA,YAAAizC,2BAAA,SAA2BjzC,GACvB,OAAOvH,KAAKs6C,gBAAgB19B,qBAAqBrV,EACrD,GAhB4C,iBAD/C,IACoBkzC,E,CAArB,G,GCAA,WAMI,WAAYjuB,GACRxsB,KAAKs6C,gBAAkB9tB,EAAUX,cACrC,CASJ,OAPI,YAAA6uB,qBAAA,SAAqBnzC,GACjB,OAAOvH,KAAKs6C,gBAAgB1uC,eAAerE,EAC/C,EAEA,YAAAozC,uBAAA,SAAuBpzC,GACnB,OAAOvH,KAAKs6C,gBAAgBzuC,iBAAiBtE,EACjD,GAhB6C,iBADhD,IACoBqzC,E,CAArB,GCDe,SAASC,GACpBruB,GAKA,MAAO,CACHltB,OAJW,IAAI,GAA4BktB,GAK3C5oB,SAJa,IAAI,GAA6B4oB,GAMtD,CCLA,kBAMI,WACY2X,EACA2W,GAFZ,WACY,KAAA3W,OAAAA,EACA,KAAA2W,6BAAAA,EAER96C,KAAK+6C,OAASF,GAA8B76C,KAAKmkC,OAAOznB,YAExD1c,KAAKmkC,OAAOmT,WAAU,SAACv1C,GACnB,EAAKg5C,OAASF,GAA8B94C,EAChD,GACJ,CAuHJ,OAtGI,YAAA2a,SAAA,WACI,OAAO1c,KAAK+6C,MAChB,EAgCA,YAAAzD,UAAA,SACIC,G,UADJ,OAEI,oDAEA,OAAO,EAAAv3C,KAAKmkC,QAAOmT,UAAS,8BACxB,WAAM,OAAAC,EAAW,EAAK76B,WAAhB,EACN,SAAC3a,GAAU,OAAAA,EAAM8pB,eAAenP,UAArB,GACR86B,EAAQn3C,KACP,SAAC2C,GAAW,gBAACjB,GACT,OAAAiB,EAAO63C,GAA8B94C,GAArC,CADQ,KAIxB,EAoBA,YAAAi5C,iBAAA,SAAiBz4C,GAAjB,IC5GgCgD,ED4GhC,OACU01C,GC7GsB11C,ED6GKhD,EAAQkF,YC5GtC,kBAAkB4wB,KAAK9yB,GD6GpB,CAAChD,EAAQkF,aE3GR,SAA4ByzC,EAAkBC,GACzD,IAAMC,EAAaxjB,SAASqK,iBAAiBiZ,GAE7C,IAAKE,EAAWh7C,OACZ,MAAM,IAAI,GACN,2DAA2D86C,GAInE,OAAOr7C,MAAM5B,UAAUk2B,MAAMh2B,KAAKi9C,GAAY/6C,KAAI,SAAC68B,GAK/C,OAJKA,EAAU33B,KACX23B,EAAU33B,IAAK,IAAA81C,UAASF,IAGrBje,EAAU33B,EACrB,GACJ,CF4Fc+1C,CAAmB/4C,EAAQkF,YAAgBlF,EAAQgF,SAAQ,eAEjE,OAAOwnB,QAAQC,IACXisB,EAAa56C,KAAI,SAACoH,GACd,IAAMzF,EAAS,EAAK84C,6BAA6BzF,YAAW,gCACrD9yC,GAAO,CACVkF,YAAW,KAETywC,EAAU,0BAA0B31C,EAAQgF,SAAQ,IAAIE,EAE9D,OAAO,EAAK08B,OAAOuT,SAAS11C,EAAQ,CAAEk2C,QAAO,GACjD,KACFhpB,MAAK,WAAM,SAAKxS,UAAL,GACjB,EAcA,YAAA6+B,mBAAA,SAAmBh5C,GAAnB,WACUP,EAAShC,KAAK86C,6BAA6BU,aAAaj5C,GACxD21C,EAAU,0BAA0B31C,EAAQgF,SAElD,OAAOvH,KAAKmkC,OAAOuT,SAAS11C,EAAQ,CAAEk2C,QAAO,IAAIhpB,MAAK,WAAM,SAAKxS,UAAL,GAChE,GArI0C,iBAD7C,IACoB++B,E,CAArB,G,eGSA,WACI,WACYC,EACAC,EACAhF,GAFA,KAAA+E,UAAAA,EACA,KAAAC,YAAAA,EACA,KAAAhF,4BAAAA,CACT,CAgHP,OA9GI,YAAAtB,WAAA,SACI9yC,GADJ,WAGI,OAAO,SAAC8rB,GACJ,IAAM/mB,EAAO,CACTC,SAAUhF,EAAQgF,SAClBE,YAAalF,EAAQkF,aAGzB,GACI4mB,EAAM3R,WAAWmP,eAAe/hB,cAAcvH,EAAQgF,SAAUhF,EAAQkF,aAExE,OAAO,IAAAkqB,SAGX,IAAMiqB,EAA6Br5C,EAAQs5C,aACrC,CAAEjtB,OAAQ,CAAEitB,aAAct5C,EAAQs5C,eAClC,CAAC,EAEDC,GAA8B,gCAC7BF,GAA0B,CAC7B3rB,QAAS1tB,EAAQ0tB,QACjBlC,UAAU,IAGd,OAAO,IAAAxF,SACH,IAAA+H,KACI,IAAAxB,cACI1oB,EAAyBuB,+BACzBlE,EACA6D,IAGR,EAAKqvC,4BAA4B1nB,kBAC7B1sB,EAAQgF,SACRu0C,EAFJ,CAGEztB,IACF,IAAA+C,QAAM,WACF,SAAK2qB,aAAax5C,EAAQgF,UACrB8tC,WAAW9yC,GACX2sB,MAAK,WACF,WAAAJ,cACI1oB,EAAyBoB,+BACzB/D,EACA6D,EAHJ,GAHR,KAUN4lB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GAAiBjqB,EAAyBwB,uBAAwBlI,EAAO4H,EAAzE,IAGZ,CACJ,EAEA,YAAAk0C,aAAA,SACIj5C,GADJ,WAGI,OAAO,SAAC8rB,GACJ,IAAM/mB,EAAO,CAAEC,SAAUhF,EAAQgF,UAEjC,OAAK8mB,EAAM3R,WAAWmP,eAAe/hB,cAAcvH,EAAQgF,WAIpD,IAAAghB,SACH,IAAA+H,KACI,IAAAxB,cACI1oB,EAAyByB,iCACzBpE,EACA6D,KAGR,IAAA8pB,QAAM,WACF,SAAK2qB,aAAax5C,EAAQgF,UACrBi0C,eACAtsB,MAAK,WACF,WAAAJ,cACI1oB,EAAyBsB,iCACzBjE,EACA6D,EAHJ,GAHR,KAUN4lB,MACE,IAAAC,aAAW,SAACztB,GACR,OAAA2wB,GACIjqB,EAAyB0B,yBACzBpI,EACA4H,EAHJ,MAxBG,IAAAqqB,QA+Bf,CACJ,EAEQ,YAAAoqB,aAAR,SACIx0C,GAEA,IAAIy0C,EAEJ,IACIA,EAAWh8C,KAAK27C,YAAY79C,IAAI,CAAEyH,GAAIgC,G,CACxC,SACEy0C,EAAWh8C,KAAK07C,UAAU59C,IAAIyJ,E,CAGlC,OAAOy0C,CACX,EACJ,EArHA,G,GCdA,YACI,WAAYx9C,GAAZ,MACI,YACIA,GACI,wGACP,K,OAED,EAAKE,KAAO,sCACZ,EAAKC,KAAO,oC,CAChB,CACJ,OAViE,oBAUjE,EAVA,CAAiE,GC+BjE,IAAYs9C,GAUAC,GAmTAC,G,IA7TZ,SAAYF,GACR,oBACA,yBACH,CAHD,CAAYA,KAAAA,GAAY,KAUxB,SAAYC,GACR,kBACA,gCACA,sBACA,gCACA,8BACA,8BACA,kBACA,kCACA,8BACA,gCACA,gBACA,6BACH,CAbD,CAAYA,KAAAA,GAAmB,KAmT/B,SAAYC,GACR,sBACA,8CACA,0BACA,sBACA,0BACA,iDACH,CAPD,CAAYA,KAAAA,GAAsB,KChW3B,IAAMC,KAA+B,OACvCF,GAAoBG,QACjB,0EACJ,GAACH,GAAoBI,gBACjB,0EACJ,GAACJ,GAAoBK,QACjB,0EACJ,GAACL,GAAoBM,cACjB,0EACJ,GAACN,GAAoBO,eACjB,0EACJ,GAACP,GAAoBQ,eACjB,0EACJ,GAACR,GAAoBS,eACjB,0EACJ,GAACT,GAAoBU,cACjB,0EACJ,GAACV,GAAoBW,cACjB,0EACJ,GAACX,GAAoBY,OACjB,0EACJ,GAACZ,GAAoBa,cACjB,0EACJ,GAACb,GAAoBc,UACjB,0E,ICDR,cAGI,WACYhe,EACAie,GADA,KAAAje,aAAAA,EACA,KAAAie,oBAAAA,EAJJ,KAAAC,oBC1BgC,SD+BrC,CA0KP,OAxKU,YAAAC,WAAN,W,+FACI,MAAO,CAAP,EAAOn9C,KAAKo9C,2BACRlB,GAAoBG,OACpB,iB,QAIF,YAAAgB,aAAN,W,+FACI,MAAO,CAAP,EAAOr9C,KAAKo9C,2BACRlB,GAAoBc,SACpB,mB,QAIF,YAAAM,mBAAN,W,+FACI,MAAO,CAAP,EAAOt9C,KAAKo9C,2BACRlB,GAAoBI,eACpB,0B,QAIF,YAAAiB,WAAN,W,+FACI,MAAO,CAAP,EAAOv9C,KAAKo9C,2BACRlB,GAAoBK,OACpB,iB,QAIF,YAAAiB,0BAAN,W,+FACI,MAAO,CAAP,EAAOx9C,KAAKo9C,2BACRlB,GAAoBM,aACpB,wB,QAIF,YAAAiB,kBAAN,W,+FACI,MAAO,CAAP,EAAOz9C,KAAKo9C,2BACRlB,GAAoBO,cACpB,yB,QAIF,YAAAiB,kBAAN,W,+FACI,MAAO,CAAP,EAAO19C,KAAKo9C,2BACRlB,GAAoBQ,cACpB,0B,QAIF,YAAAiB,kBAAN,W,+FACI,MAAO,CAAP,EAAO39C,KAAKo9C,2BACRlB,GAAoBS,cACpB,yB,QAIF,YAAAiB,QAAN,W,+FACI,MAAO,CAAP,EAAO59C,KAAKo9C,2BACRlB,GAAoBU,aACpB,yB,QAIR,YAAAiB,iBAAA,WACI,OAAO79C,KAAKo9C,2BACRlB,GAAoBW,aACpB,uBAER,EAEA,YAAAiB,kBAAA,WACI,OAAO99C,KAAKo9C,2BACRlB,GAAoBY,MACpB,eAER,EAEM,YAAAiB,iBAAN,W,+FACI,MAAO,CAAP,EAAO/9C,KAAKo9C,2BACRlB,GAAoBa,aACpB,wB,QAIF,YAAAiB,oBAAN,SAA0BC,G,4GACtB,OAAIj+C,KAAKi9C,oBAAoBiB,EAClB,CAAP,EAAOl+C,KAAKi9C,oBAAoBiB,IAG9BvlB,EAAOslB,EACP,0EACA,0EAEC,CAAP,EAAOj+C,KAAKg/B,aACPF,WACG,MACImf,EAAW,WAAa,IAAE,qFAE9B,CACIE,OAAO,EACP7f,WAAY,CACR8f,UAAWzlB,EACX0lB,YAAa,eAIxBnvB,MAAK,WACF,IAAK,EAAK+tB,oBAAoBiB,EAC1B,MAAM,IAAI,GAGd,OAAO,EAAKjB,oBAAoBiB,CACpC,K,QAGM,YAAAd,2BAAd,SACIkB,EACAC,G,gIAIA,OAFIrhD,EAAS8C,KAAKw+C,mBAAmBF,IAI1B,CAAP,EAAOphD,IAGLuhD,EAAa,iCAAiCz+C,KAAKk9C,oBAAmB,OAAOqB,EAE7EH,EAAYp+C,KAAK0+C,+BAA+BJ,GAEtD,GAAMt+C,KAAKg/B,aAAaF,WACpB2f,EACAL,EACM,CACID,OAAO,EACP7f,WAAY,CACR8f,UAAS,EACTC,YAAa,mBAGrB56C,K,OAKV,GAfA,WAaAvG,EAAS8C,KAAKw+C,mBAAmBF,IAG7B,MAAM,IAAI,GAId,MAAO,CAAP,EAAOphD,G,QAGH,YAAAshD,mBAAR,SACIF,G,MAEA,OAAyC,QAAzC,EAAOt+C,KAAKi9C,oBAAoBrjC,iBAAS,eAAG0kC,EAChD,EAEQ,YAAAI,+BAAR,SAAuCC,GACnC,IAAMP,EAAYhC,GAAgCuC,GAElD,IAAKP,EACD,MAAM,IAAIt/C,MAAM,6BAGpB,OAAOs/C,CACX,EACJ,EAhLA,G,YErBA,kBAOI,WAAY77C,G,UACRvC,KAAK4+C,WAAa,CAAC,EACnB5+C,KAAK6+C,WAAa,CAAC,EACnB7+C,KAAK8+C,cAAqC,QAAxB,EAAGv8C,aAAO,EAAPA,EAASw8C,oBAAY,QAAI,UAC9C/+C,KAAKg/C,aAAmC,QAAvB,EAAGz8C,aAAO,EAAPA,EAAS08C,mBAAW,SACxCj/C,KAAKk/C,eAAuC,QAAzB,EAAG38C,aAAO,EAAPA,EAAS48C,qBAAa,QAAI,SAAEvxC,GAAU,OAAAA,CAAK,CACrE,CA+CJ,OA7CI,YAAA9P,IAAA,SAAI8P,EAAWwxC,GACX,IACI,OAAOp/C,KAAKq/C,aACRzxC,GAAS5N,KAAK8+C,cACdM,GAAcxxC,GAAS5N,KAAK8+C,c,CAElC,MAAOp/C,GACL,IAAKM,KAAKg/C,aACN,MAAMt/C,EAGV,OAAOM,KAAKq/C,aAAar/C,KAAK8+C,cAAeM,GAAcp/C,KAAK8+C,c,CAExE,EAEA,YAAA7+C,SAAA,SAAS2N,EAAUif,GACf,GAAI7sB,KAAKs/C,YAAY1xC,GACjB,MAAM,IAAI,GAAqB,IAAIA,EAAK,4BAG5C5N,KAAK4+C,WAAWhxC,GAASif,CAC7B,EAEU,YAAAyyB,YAAV,SAAsB1xC,GAClB,QAAS5N,KAAK4+C,WAAWhxC,EAC7B,EAEQ,YAAA2xC,aAAR,SAAqB3xC,GACjB,QAAS5N,KAAK6+C,WAAWjxC,EAC7B,EAEQ,YAAAyxC,aAAR,SAAqBzxC,EAAewxC,GAChC,IAAKp/C,KAAKu/C,aAAaH,GAAa,CAChC,IAAMI,EAAgBx/C,KAAKk/C,eAAetxC,EAAOjQ,OAAOwF,KAAKnD,KAAK4+C,aAC5D/xB,EAAU2yB,GAAiBx/C,KAAK4+C,WAAWY,GAEjD,IAAK3yB,EACD,MAAM,IAAI,GAAqB,IAAIjf,EAAK,wBAG5C5N,KAAK6+C,WAAWO,GAAcvyB,G,CAGlC,OAAO7sB,KAAK6+C,WAAWO,EAC3B,EACJ,EA5DA,G,YCGO,IAEKK,GAKAC,GAOAC,GAQAC,GAQAC,GA9BCC,GAAoB,CAAC,UAAW,aAE7C,SAAYL,GACR,0BACA,qBACH,CAHD,CAAYA,KAAAA,GAA6B,KAKzC,SAAYC,GACR,gBACA,kBACA,gBACA,yBACH,CALD,CAAYA,KAAAA,GAA2B,KAOvC,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAYA,KAAAA,GAA4B,KAQxC,SAAYC,GACR,sBACA,YACA,kBACA,kBACA,iBACH,CAND,CAAYA,KAAAA,GAA4B,KAQxC,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAA4B,K,SC/BxC,YACI,WAAYrhD,GAAZ,MACI,YAAMA,GAAW,8BAA4B,K,OAE7C,EAAKE,KAAO,0BACZ,EAAKC,KAAO,sB,CAChB,CACJ,OAPqD,oBAOrD,EAPA,CAAqD,GCiBrD,kBAaI,WAAoBohD,GAAA,KAAAA,uBAAAA,EANZ,KAAAC,gBAGJ,CAAC,EAIDhgD,KAAKi4B,QAAUrI,MACnB,CA0LJ,OAxLI,YAAAylB,WAAA,SAAW4K,GACPjgD,KAAKkgD,aAAeD,CACxB,EAEA,YAAAE,UAAA,sBACI,IAAKngD,KAAKkgD,aACN,MAAM,IAAI,GAAoB1jB,GAAwBE,uBAS1D,OANK18B,KAAK8mC,UACN9mC,KAAK8mC,QAAU9mC,KAAK+/C,uBACf5C,aACAjuB,MAAK,SAACkxB,GAAW,OAAAA,EAAOtnC,OAAO,CAAEunC,cAAe,EAAKH,cAApC,KAGnBlgD,KAAK8mC,OAChB,EAEM,YAAAwZ,kBAAN,SACI7zB,EACA8zB,EACAC,G,yIAEe,SAAMxgD,KAAKmgD,a,OACH,OADjBC,EAAS,SACQ,GAAMpgD,KAAK+/C,uBAAuBzC,sB,OAyBzD,OAzBMmD,EAAiB,SAEjBC,EAAuB,CAAEN,OAAM,GAC/BO,EAAyB,SAC3BjhD,EACAkhD,GAEA,GAAIlhD,EACA,OAAO8gD,EAAQ9gD,GAKd,EAAKu4B,QAAQ4oB,OAMdN,EAAUK,GALVA,EAAwBE,cACpB,EAAKC,oBAAoBt0B,IAJH,WAAM,OAAA8zB,EAAUK,EAAV,GAUxC,EAEA5gD,KAAKghD,gBAAkBP,EAAe3nC,OAAO4nC,EAAsBC,GAE5D,CAAP,EAAO3gD,KAAKghD,iB,QAGV,YAAAC,iBAAN,SACIV,EACAC,G,yIAEKxgD,KAAKkhD,eAAN,MACe,GAAMlhD,KAAKmgD,a,OAEJ,OAFhBC,EAAS,SAEO,GAAMpgD,KAAK+/C,uBAAuBjC,qB,OAAlDqD,EAAgB,SAEhBC,EAAsB,CACxBhB,OAAM,EACNiB,cAAc,EACdC,mBAAoB,aAGlBC,EAAwB,SAC1B7hD,EACA8hD,GAEA,OAAI9hD,EACO8gD,EAAQ9gD,GAGd8hD,EAAuBC,0BAI5BlB,EAAUiB,GAHChB,EAAQ,IAAI,GAI3B,EAEAxgD,KAAKkhD,eAAiBC,EAAcroC,OAAOsoC,EAAqBG,G,iBAGpE,MAAO,CAAP,EAAOvhD,KAAKkhD,gB,QAGhB,YAAAQ,OAAA,WAOI,OANK1hD,KAAK2hD,OACN3hD,KAAK2hD,KAAO5yB,QAAQC,IAAI,CAAChvB,KAAKmgD,YAAangD,KAAK+/C,uBAAuBnC,YAAY1uB,MAC/E,SAAC,G,IAACkxB,EAAM,KAAoB,OAAN,KAAmBtnC,OAAO,CAAEsnC,OAAM,EAAEwB,QAAS,GAAvC,KAI7B5hD,KAAK2hD,IAChB,EAEA,YAAAE,iBAAA,SAAiBt/C,GACb,IAAM62C,EAAW72C,GAAWA,EAAQs+C,OAAS,SAAW,UACpDiB,EAAS9hD,KAAKggD,gBAAgB5G,GAqBlC,OAnBK0I,IACDA,EAAS/yB,QAAQC,IAAI,CACjBhvB,KAAKmgD,YACLngD,KAAK+/C,uBAAuBtC,sBAE3BvuB,MAAK,SAAC,G,IAACkxB,EAAM,KACV,OADyB,KACXtnC,QAAO,eAAEsnC,OAAM,EAAE2B,OAAO,GAASx/C,GAA/C,IAEH6sB,OAAM,SAAC1vB,GACJ,GAAIA,GAAwB,qCAAfA,EAAMY,KACf,MAAO,CAAE0hD,gBAAYv+C,EAAWw+C,SAAU,WAAM,OAAAlzB,QAAQ6P,SAAR,GAGpD,MAAMl/B,CACV,IAEJM,KAAKggD,gBAAgB5G,GAAY0I,GAG9BA,CACX,EAEA,YAAAI,gBAAA,WAQI,OAPKliD,KAAKmiD,gBACNniD,KAAKmiD,cAAgBpzB,QAAQC,IAAI,CAC7BhvB,KAAKmgD,YACLngD,KAAK+/C,uBAAuBlC,qBAC7B3uB,MAAK,SAAC,G,IAACkxB,EAAM,KAAoB,OAAN,KAAmBtnC,OAAO,CAAEsnC,OAAM,GAA5B,KAGjCpgD,KAAKmiD,aAChB,EAEM,YAAAC,mBAAN,SACI7/C,G,8HAE+B,SAAMwsB,QAAQC,IAAI,CAC7ChvB,KAAKmgD,YACLngD,KAAK+/C,uBAAuBhC,sB,OAGhC,OALM,EAAyB,SAAxBqC,EAAM,KAKN,CAAP,EAL2B,KAKPtnC,QAAO,gCAAKvW,GAAO,CAAE69C,OAAM,M,QAGnD,YAAA6B,SAAA,sBACI,OAAOlzB,QAAQC,IAAI,CACfhvB,KAAKqiD,UAAUriD,KAAK2hD,MACpB3hD,KAAKqiD,UAAUriD,KAAKggD,gBAAgBp/C,SACpCZ,KAAKqiD,UAAUriD,KAAKggD,gBAAgBa,QACpC7gD,KAAKqiD,UAAUriD,KAAKghD,iBACpBhhD,KAAKqiD,UAAUriD,KAAKkhD,gBACpBlhD,KAAKqiD,UAAUriD,KAAKmiD,iBACrBjzB,MAAK,WACJ,EAAKyyB,UAAOl+C,EACZ,EAAKu8C,gBAAkB,CAAC,EACxB,EAAKgB,qBAAkBv9C,EACvB,EAAKy9C,oBAAiBz9C,EACtB,EAAK0+C,mBAAgB1+C,CACzB,GACJ,EAEQ,YAAA4+C,UAAR,SAAkBnlD,GACd,OAAOA,EACDA,EACKgyB,MAAK,SAACozB,GAAQ,OAAAA,EAAIL,UAAJ,IACd7yB,OAAM,SAAC1vB,GACJ,GAAmB,iCAAfA,EAAMY,KACN,MAAMZ,CAEd,IACJqvB,QAAQ6P,SAClB,EAEQ,YAAAmiB,oBAAR,SAA4Bt0B,GACxB,OAAO,8BACHwH,SAAUxH,EAAOwH,UACbxH,EAAO81B,iBAAmB,CAAE,iBAAkB,aAAa,CAC/DC,WAAY1C,GAAkBh9C,WAC9B2/C,OAAQh2B,EAAOg2B,OACfC,QAAQ,GAEhB,EACJ,EAzMA,G,qBCjBA,YACI,WAAYlkD,GAAZ,MACI,YACIA,GACI,wGACP,K,OAED,EAAKE,KAAO,sCACZ,EAAKC,KAAO,oC,CAChB,CACJ,OAViE,oBAUjE,EAVA,CAAiE,GCOjE,kBACI,WACY6/B,EACDvG,QAAA,IAAAA,IAAAA,EAAA,QADC,KAAAuG,cAAAA,EACD,KAAAvG,QAAAA,CACR,CAoCP,OAlCU,YAAAsE,KAAN,SAAW,G,IACPomB,EAAgB,mBAChBC,EAAQ,WACR3E,EAAQ,WACRpsB,EAAU,a,mIAEN8wB,GAIME,EAAY,CACd,YAJc5E,EAAW,WAAa,IAIlB,kDAHT,CAAC,UAAU2E,EAAY,cAAc/wB,GAIzClyB,KAAK,MACdA,KAAK,KAEP,GAAMK,KAAKw+B,cAAcM,WAAW+jB,KATpC,M,cAsBJ,GAJA,UAIK7iD,KAAKi4B,QAAQ6qB,WACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO9iD,KAAKi4B,QAAQ6qB,Y,OARpB,SAAM9iD,KAAKw+B,cAAcM,WACrB,MAAKmf,EAAW,WAAa,IAAE,2C,QAS3C,EAxCA,G,eCPA,WAGI,WAAoBzf,GAAA,KAAAA,cAAAA,EAChBx+B,KAAKi4B,QAAUrI,MACnB,CAmBJ,OAjBU,YAAA2tB,WAAN,SAAiBwF,G,YAAA,IAAAA,IAAAA,EAAA,K,8HACPC,EAAY,8CACZzgD,EAA6B,CAC/B47C,OAAO,EACP7f,WAAY,CAAE,mBAAoBykB,IAGtCA,EACM,GAAM/iD,KAAKw+B,cAAcM,WAAWkkB,EAAWzgD,IADrD,M,cACM,S,aACA,SAAMvC,KAAKw+B,cAAcM,WAAWkkB,I,OAApC,S,iBAEN,IAAKhjD,KAAKi4B,QAAQ4oB,OACd,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO7gD,KAAKi4B,QAAQ4oB,Q,QAE5B,EAxBA,G,GCAA,YACI,WAAYriD,GAAZ,MACI,YACIA,GACI,mGACP,K,OAED,EAAKE,KAAO,0BACZ,EAAKC,KAAO,8B,CAChB,CACJ,OAVqD,oBAUrD,EAVA,CAAqD,GCFtC,SAASskD,GACpB5nC,GAEA,MAAO,CACH6nC,cAAkB7nC,EAAQC,UAAS,IAAID,EAAQE,SAC/C4nC,MAAO9nC,EAAQI,SACf2nC,MAAO/nC,EAAQK,SACfC,KAAMN,EAAQM,KACd5Z,MAAOsZ,EAAQmsB,oBACf1rB,WAAYT,EAAQS,WACpBD,YAAaR,EAAQQ,YACrBE,MAAOV,EAAQU,MAEvB,CCbe,SAASsnC,GAAoBjlB,GAChC,IAAAklB,EAA8DllB,EAAK,MAA5DmlB,EAAuDnlB,EAAK,aAA9C6B,EAAyC7B,EAAK,OAAtColB,EAAiCplB,EAAK,OAA9BqlB,EAAyBrlB,EAAK,MAAvBb,EAAkBa,EAAK,KAAjBslB,EAAYtlB,EAAK,QAErEulB,EAAc,CAChBL,MAAK,EACLC,aAAY,EACZtjB,OAAQ2jB,GAAe3jB,GACvBujB,OAAM,EACNC,MAAOA,GAAS,OAChBlmB,KAAI,EACJmmB,QAAO,GAGX,OAAO,IAAA7hD,QAAO8hD,EAAa,EAAA9d,MAC/B,CAEA,SAAS+d,GAAe3jB,GAIpB,MAAsB,iBAAXA,GAAuBA,EAFhB,MAMdA,EAPc,MAWXA,CACX,CC7Be,SAAS4jB,GACpBC,GAEQ,IAAAt/C,EAAuEs/C,EAAO,eAA9DtyB,EAAuDsyB,EAAO,MAAvDxoC,EAAgDwoC,EAAO,UAA5CvoC,EAAqCuoC,EAAO,SAAlC/nC,EAA2B+nC,EAAO,MAA3B3/B,EAAoB2/B,EAAO,gBAEhFzoC,EAAU7W,GAAkB2f,EAElC,MAAO,CACHqN,MAAK,EACLuyB,WAAYzoC,EACZ0oC,UAAWzoC,EACX0oC,aAAcloC,EACdmoC,eAAgB7oC,aAAO,EAAPA,EAAS8nC,MACzBgB,eAAgB9oC,aAAO,EAAPA,EAAS+nC,MACzBznC,KAAMN,aAAO,EAAPA,EAASM,KACf5Z,MAAOsZ,aAAO,EAAPA,EAAStZ,MAChBqiD,aAAc/oC,aAAO,EAAPA,EAASQ,YACvBwoC,YAAahpC,aAAO,EAAPA,EAASS,WAE9B,CCnBe,SAASwoC,GACpBR,GAEQ,IAAAtyB,EAAkCsyB,EAAO,MAAlC/nC,EAA2B+nC,EAAO,MAA3B3/B,EAAoB2/B,EAAO,gBAG3C,IADgB3/B,aAAe,EAAfA,EAAiB++B,gBAAiB,IACZjiD,MAAM,KAElD,MAAO,CACHuwB,MAAK,EACLuyB,WAJY,MAIa,GACzBC,UALsB,MAKC,GACvBC,aAAcloC,EACdmoC,eAAgB//B,aAAe,EAAfA,EAAiBg/B,MACjCgB,eAAgBhgC,aAAe,EAAfA,EAAiBi/B,MACjCznC,KAAMwI,aAAe,EAAfA,EAAiBxI,KACvB5Z,MAAOoiB,aAAe,EAAfA,EAAiBpiB,MACxBqiD,aAAcjgC,aAAe,EAAfA,EAAiBtI,YAC/BwoC,YAAalgC,aAAe,EAAfA,EAAiBrI,WAEtC,CCUA,kBAGI,WACYqoB,EACAvO,EACAkhB,EACAyN,EACAC,EACAvsB,GALA,KAAAkM,OAAAA,EACA,KAAAvO,uBAAAA,EACA,KAAAkhB,mBAAAA,EACA,KAAAyN,qBAAAA,EACA,KAAAC,YAAAA,EACA,KAAAvsB,QAAAA,CACT,CAoSP,OAlSU,YAAAod,WAAN,SAAiB9yC,G,6JAIb,GAHQsX,EAA2CtX,EAAO,gBAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAClDkiD,GAAF,EAAoC5qC,GAAmB,CAAC,GAAlC,qBAAE2mC,EAAO,WAEhCj5C,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAKoS,EACD,MAAM,IAAI,GACN,4F,IAQJA,EAAgB6qC,wBAAhB,YAIA,GAHA3iD,EAAQ/B,KAAKmkC,OAAOznB,WACpBqG,EAAgBhhB,EAAM0jB,eAAeG,wBAAwBre,IAExDsS,EAAgBgiC,aACjB,MAAM,IAAI,GACN,yG,OAIRA,EAAehiC,EAAgBgiC,a,aAEvB,SAAM77C,KAAKmkC,OAAOuT,SAAS13C,KAAK41B,uBAAuBhD,wB,OAA/D7wB,EAAQ,SACRghB,EAAgBhhB,EAAM0jB,eAAeG,wBAAwBre,GAC7Ds0C,EAAe95C,EAAMgF,KAAKuY,iBAAiB2U,SAAS3zB,K,iBAKxD,GAFQ2/C,EAAoCl9B,EAAa,YAApCytB,EAAuBztB,EAAa,oBAEpDk9B,IAAgBzP,EACjB,MAAM,IAAI,GAAiBt5B,GAAqBa,sBAwBpD,OArBM4sC,EAAkE,CACpE1wB,SAAU4nB,EACV4G,OAAQjS,EAAmBiS,OAC3BF,gBAAiB/R,EAAmB+R,iBAGlCqC,EAAgC,SAClChE,GAEA,EAAKiE,wBACDjE,EACA/mC,EACApS,EACAF,EACA6d,QAAQrC,EAAc0J,OAAOwxB,UAErC,EACM6G,EAA8B,SAACplD,GACjC,SAAKqlD,aAAarlD,EAAO+H,EAAag9C,EAAsBjE,EAA5D,EAEJxgD,KAAKukD,qBAAqBlP,WAAW4K,GACrC,GAAMjgD,KAAKukD,qBAAqBjE,kBAC5BqE,EACAC,EACAE,I,cAHJ,S,YAOJ,YAAAtJ,aAAA,WAGI,OAFAx7C,KAAKukD,qBAAqBtC,WAEnBlzB,QAAQ6P,SACnB,EAEQ,YAAAimB,wBAAR,SACIjE,EACA/mC,EACApS,EACAF,EACA02C,GAEQ,IAAAwG,EAAyB5qC,EAAe,qBAEhD7Z,KAAKglD,sBAAsBP,GAC3BzkD,KAAKilD,oBACDrE,EACA/mC,EACApS,EACAF,EACA02C,EAER,EAEQ,YAAAgH,oBAAR,SACIrE,EACA/mC,EACApS,EACAF,EACA02C,GALJ,WAOY7f,EAAkDvkB,EAAe,MAA1DqrC,EAA2CrrC,EAAe,qBAApCsrC,EAAqBtrC,EAAe,iBAEjEgnC,EAAW7gD,KAAKi4B,QAAO,OACzBmtB,EAAgBvE,aAAM,EAANA,EAAQwE,QAAQC,OAEtC,GAAIzE,GAAUuE,EAAe,CACzB,IAAMG,EAAmBnnB,EAAQilB,GAAoBjlB,GAAS,CAAC,EAEzDonB,EAAqB3E,EAAO4E,QAAQ,CACtCC,IAAKzH,EAAW,UAAY,aAC5BmH,cAAa,EACbhnB,MAAOmnB,EACPI,YAAa,WACT,SAAKC,cAAchF,EAAyB/mC,EAAiBtS,EAA7D,EACJs+C,UAAW,SAACC,GACR,SAAKC,iBACDD,EACAlF,EACAr5C,EACA29C,EACAC,EALJ,IASJK,EAAmBQ,cACnBR,EAAmBloB,OAAO,IAAI71B,E,MAGlCzH,KAAKimD,eAAex+C,EAE5B,EAEQ,YAAAu9C,sBAAR,SAA8BP,GAC1B,IAAMyB,EACFzB,GAAwBr/B,QAAQwS,SAASsE,eAAeuoB,IACpD5D,EAAW7gD,KAAKi4B,QAAO,OAE/B,GAAI4oB,GAAUqF,EAA6B,CAC/B,IACF58B,EADetpB,KAAKmkC,OAAOznB,WAAU,SACfwM,qBAAqBQ,mBAEpBm3B,EAAOsF,SAAS,CACzCxxB,OAAQrL,EACR88B,UAAW,SAGM9oB,OAAO,IAAImnB,E,MAEhCzkD,KAAKimD,eAAexB,EAE5B,EAEc,YAAAmB,cAAd,SACIhF,EACA/mC,EACAtS,G,0JAEQm9C,EAA6D7qC,EAAe,wBAAnDsK,EAAoCtK,EAAe,gBAAlCwsC,EAAmBxsC,EAAe,e,iBAI7D,O,sBAAnB,EAAA7Z,KAAmB,GAAMA,KAAKsmD,kBAAkB,CAAE5B,wBAAuB,K,cAAzE,EAAK6B,YAAc,SAEfvmD,KAAKumD,aACLxkD,EAAQ/B,KAAKmkC,OAAOznB,W,OADpB,M,OAGQ,SAAM1c,KAAKmkC,OAAOuT,SACtB13C,KAAK41B,uBAAuBhD,wB,OADhC7wB,EAAQ,S,iBAmBL,OAdDqH,EAAWrH,EAAMqH,SAAS8T,cAC1B6F,EAAgBhhB,EAAM0jB,eAAeG,wBAAwBre,GAE7DotB,EAAS30B,KAAKumD,YACdvmD,KAAKumD,YAAYvyB,WACjBjyB,EAAMsnB,SAASH,qBAAqBQ,mBACpCmyB,EAC0B,QADd,EACdhiC,EAAgBgiC,oBAAY,QAAI95C,EAAM0qB,OAAOlM,wBAAwB0T,SAAS3zB,KAE5E+a,EAAU8I,IAAmB/a,aAAQ,EAARA,EAAU2pB,UAAU,IACjDyzB,EAA0BnrC,EAC1B4nC,GAAsC5nC,QACtC5X,EAEC,GAAMm9C,EAAwB6F,cAAc,CAC/CC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBJ,wBAAuB,EACvB7xB,OAAM,EACNV,SAAU4nB,EACVgL,aAAa,EACbpE,OAAwC,QAAlC,EAAE1/B,EAAcytB,0BAAkB,eAAEiS,U,OAR9C,MAAO,CAAP,EAAO,U,OAeP,M,WAJI4D,GACAA,EAAe,GAGb,E,yBAIA,YAAAC,kBAAd,SAAgC,G,IAAE5B,EAAuB,0B,+HACY,mBAAtDA,aAAuB,EAAvBA,EAAyBoC,0BAAhC,YAGA,KAFMC,EAAkBrC,EAAwBoC,4BAG5C,MAAM,IAAI,GAAiB5vC,GAAqBG,a,iBAIzB,O,sBAAA,GAAMrX,KAAK82C,mBAAmB3kB,iBACjD40B,I,OAGJ,MAAO,CAAP,EAJuB,SAEtB,M,OAID,M,SAAM,IAAI,G,yBAKR,YAAAhB,iBAAd,SACID,EACAlF,EACAr5C,EACA29C,EACA1E,G,4IAG2B,O,sBAAA,GAAMxgD,KAAKukD,qBAAqB1C,iBAAiB,CACpEhB,QAAQ,K,OAEY,OAHhBmB,EAAe,SAErB,WACsB,GAAMpB,EAAwBoG,gBAAgBlB,I,OAetE,OAfMmB,EAAkB,SAChBnD,EAAmBmD,EAAe,QAAzBn8B,EAAUm8B,EAAe,MACpCC,EAA+B,QAAnB,EAAGlnD,KAAKumD,mBAAW,eAAEhhD,GAEvCvF,KAAKwkD,YAAY2C,SAAS,iBAAiB,eACvCC,aAAc,SACd3tC,SAAUlS,EACVvF,OAAQkjD,EAAuB,kBAAoB,wBACnDp6B,MAAK,EACLu8B,YAAarF,EACbsF,gBAAiB5yC,KAAKC,UAAUkvC,GAA0BC,IAC1DyD,iBAAkB7yC,KAAKC,UAAU2vC,GAA2BR,KACxDoD,GAAgB,CAAEM,QAASN,KAG5B,CAAP,EAAOD,G,OAMP,M,WAJIzG,GACAA,EAAQ,GAGN,E,yBAIN,YAAAuE,aAAR,SACIrlD,EACA+nD,EACAhD,EACAiD,GAEA1nD,KAAKimD,eAAewB,GACpBznD,KAAKimD,eAAexB,GAEhBiD,GACAA,EAAgBhoD,EAExB,EAEQ,YAAAumD,eAAR,SAAuB0B,GACnB,IAAM/pB,EAAU+pB,GAAa/vB,SAASsE,eAAeyrB,GAEjD/pB,GACAA,EAAQgqB,QAEhB,EACJ,EA9SA,G,YC+BA,IAAY,GAKA,GAOA,GAQA,GAQA,IA5BZ,SAAYnI,GACR,0BACA,qBACH,CAHD,CAAY,QAA6B,KAKzC,SAAYC,GACR,gBACA,kBACA,gBACA,yBACH,CALD,CAAY,QAA2B,KAOvC,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAY,QAA4B,KAQxC,SAAYC,GACR,sBACA,YACA,kBACA,kBACA,iBACH,CAND,CAAY,QAA4B,KAQxC,SAAYC,GACR,cACA,aACH,CAHD,CAAY,QAA4B,KCvDxC,kBAGI,WACY1b,EACAvO,EACAkhB,EACAyN,EACAC,EACAvsB,GALA,KAAAkM,OAAAA,EACA,KAAAvO,uBAAAA,EACA,KAAAkhB,mBAAAA,EACA,KAAAyN,qBAAAA,EACA,KAAAC,YAAAA,EACA,KAAAvsB,QAAAA,CACT,CAyQP,OAvQU,YAAAod,WAAN,SAAiB9yC,G,uJAGb,GAFQslD,EAAiDtlD,EAAO,sBAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAG5D,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,IAAKogD,EACD,MAAM,IAAI,GACN,kG,IAQJA,EAAsBnD,wBAAtB,YAIA,GAHA3iD,EAAQ/B,KAAKmkC,OAAOznB,WACpBqG,EAAgBhhB,EAAM0jB,eAAeG,wBAAwBre,IAExDsgD,EAAsBhM,aACvB,MAAM,IAAI,GACN,+G,OAIRA,EAAegM,EAAsBhM,a,aAE7B,SAAM77C,KAAKmkC,OAAOuT,SAAS13C,KAAK41B,uBAAuBhD,wB,OAA/D7wB,EAAQ,SACRghB,EAAgBhhB,EAAM0jB,eAAeG,wBAAwBre,GAC7Ds0C,EAAe95C,EAAMgF,KAAKuY,iBAAiB2U,SAAS3zB,K,iBAKxD,GAFQ2/C,EAAoCl9B,EAAa,YAApCytB,EAAuBztB,EAAa,oBAEpDk9B,IAAgBzP,EACjB,MAAM,IAAI,GAAiBt5B,GAAqBa,sBAqBpD,OAlBM4sC,EAAkE,CACpE1wB,SAAU4nB,EACV4G,OAAQjS,EAAmBiS,OAC3BF,gBAAiB/R,EAAmB+R,iBAGlC5B,EAAyB,SAACC,GAC5B,SAAKqE,oBACDrE,EACAiH,EACApgD,EACAF,EACA6d,QAAQrC,EAAc0J,OAAOwxB,UALjC,EAOE6G,EAA8B,SAACplD,GACjC,SAAKqlD,aAAarlD,EAAO+H,EAAaogD,EAAsBrH,QAA5D,EAEJxgD,KAAKukD,qBAAqBlP,WAAW4K,GACrC,GAAMjgD,KAAKukD,qBAAqBjE,kBAC5BqE,EACAhE,EACAmE,I,cAHJ,S,YAOJ,YAAAtJ,aAAA,WAGI,OAFAx7C,KAAKukD,qBAAqBtC,WAEnBlzB,QAAQ6P,SACnB,EAEQ,YAAAqmB,oBAAR,SACIrE,EACAiH,EACApgD,EACAF,EACA02C,GALJ,WAOY7f,EAAkDypB,EAAqB,MAAhE3C,EAA2C2C,EAAqB,qBAA1C1C,EAAqB0C,EAAqB,iBACvEhH,EAAW7gD,KAAKi4B,QAAO,OAE3B6vB,GAAyB,EAE7B,GAAIjH,EAAQ,CACR,IAAMkH,EAAiB,CAAClH,EAAOwE,QAAQ2C,SAAUnH,EAAOwE,QAAQ4C,QAC1D,EAAoB7pB,EAAQilB,GAAoBjlB,GAAS,CAAC,EAEhE2pB,EAAep0C,SAAQ,SAACyxC,GACpB,IAAM8C,EACF9C,IAAkBvE,EAAOwE,QAAQ4C,QAC3B,eAAEtjC,MAAO,GAA6BsjC,QAAW,GACjD,EAEV,IAAKH,EAAwB,CACzB,IAAMtC,EAAqB3E,EAAO4E,QAAQ,CACtCC,IAAKzH,EAAW,UAAY,aAC5BmH,cAAa,EACbhnB,MAAO8pB,EACPvC,YAAa,WACT,SAAKC,cACDhF,EACAiH,EACAtgD,EAHJ,EAKJs+C,UAAW,SAACC,GACR,SAAKC,iBACDD,EACAlF,EACAr5C,EACA29C,EACAC,EALJ,IASJK,EAAmBQ,eACnBR,EAAmBloB,OAAO,IAAI71B,GAC9BqgD,GAAyB,E,CAGrC,G,CAGCjH,GAAWiH,GACZ9nD,KAAKimD,eAAex+C,EAE5B,EAEc,YAAAm+C,cAAd,SACIhF,EACAiH,EACAtgD,G,0JAEQ8+C,EAA6DwB,EAAqB,eAAlE1jC,EAA6C0jC,EAAqB,gBAAjDnD,EAA4BmD,EAAqB,wB,iBAInE,O,sBAAnB,EAAA7nD,KAAmB,GAAMA,KAAKsmD,kBAAkB,CAAE5B,wBAAuB,K,cAAzE,EAAK6B,YAAc,SAEfvmD,KAAKumD,aACLxkD,EAAQ/B,KAAKmkC,OAAOznB,W,OADpB,M,OAGQ,SAAM1c,KAAKmkC,OAAOuT,SACtB13C,KAAK41B,uBAAuBhD,wB,OADhC7wB,EAAQ,S,iBAoBL,OAfDqH,EAAWrH,EAAMqH,SAAS8T,cAC1B6F,EAAgBhhB,EAAM0jB,eAAeG,wBAAwBre,GAE7DotB,EAAS30B,KAAKumD,YACdvmD,KAAKumD,YAAYvyB,WACjBjyB,EAAMsnB,SAASH,qBAAqBQ,mBACpCmyB,EACgC,QADpB,EACdgM,EAAsBhM,oBAAY,QAClC95C,EAAM0qB,OAAOlM,wBAAwB0T,SAAS3zB,KAE5C+a,EAAU8I,IAAmB/a,aAAQ,EAARA,EAAU2pB,UAAU,IACjDyzB,EAA0BnrC,EAC1B4nC,GAAsC5nC,QACtC5X,EAEC,GAAMm9C,EAAwB6F,cAAc,CAC/CC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBJ,wBAAuB,EACvB7xB,OAAM,EACNV,SAAU4nB,EACVgL,aAAa,EACbpE,OAAwC,QAAlC,EAAE1/B,EAAcytB,0BAAkB,eAAEiS,U,OAR9C,MAAO,CAAP,EAAO,U,OAeP,M,WAJI4D,GACAA,EAAe,GAGb,E,yBAIA,YAAAC,kBAAd,SAAgC,G,IAAE5B,EAAuB,0B,+HACY,mBAAtDA,aAAuB,EAAvBA,EAAyBoC,0BAAhC,YAGA,KAFMC,EAAkBrC,EAAwBoC,4BAG5C,MAAM,IAAI,GAAiB5vC,GAAqBG,a,iBAInB,O,sBAAA,GAAMrX,KAAK82C,mBAAmB3kB,iBACvD40B,I,OAGJ,MAAO,CAAP,EAJ6B,SAE5B,M,OAID,M,SAAM,IAAI,G,yBAKR,YAAAhB,iBAAd,SACID,EACAlF,EACAr5C,EACA29C,EACA1E,G,4IAG2B,O,sBAAA,GAAMxgD,KAAKukD,qBAAqB1C,iBAAiB,CACpEhB,QAAQ,K,OAEY,OAHhBmB,EAAe,SAErB,WACsB,GAAMpB,EAAwBoG,gBAAgBlB,I,OAetE,OAfMmB,EAAkB,SAChBnD,EAAmBmD,EAAe,QAAzBn8B,EAAUm8B,EAAe,MACpCC,EAA+B,QAAnB,EAAGlnD,KAAKumD,mBAAW,eAAEhhD,GAEvCvF,KAAKwkD,YAAY2C,SAAS,iBAAiB,eACvCC,aAAc,SACd3tC,SAAUlS,EACVvF,OAAQkjD,EAAuB,kBAAoB,wBACnDp6B,MAAK,EACLu8B,YAAarF,EACbsF,gBAAiB5yC,KAAKC,UAAUkvC,GAA0BC,IAC1DyD,iBAAkB7yC,KAAKC,UAAU2vC,GAA2BR,KACxDoD,GAAgB,CAAEM,QAASN,KAG5B,CAAP,EAAOD,G,OAMP,M,WAJIzG,GACAA,EAAQ,GAGN,E,yBAIN,YAAAuE,aAAR,SACIrlD,EACA+H,EACAigD,GAEA1nD,KAAKimD,eAAex+C,GAEhBigD,GACAA,EAAgBhoD,EAExB,EAEQ,YAAAumD,eAAR,SAAuB0B,GACnB,IAAM/pB,EAAU+pB,GAAa/vB,SAASsE,eAAeyrB,GAEjD/pB,GACAA,EAAQgqB,QAEhB,EACJ,EAnRA,G,YCtCO,IAAMO,GAAqD,CAC9DC,GAAI,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,SAClDC,GAAI,CACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEJC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,QAAS,QAAS,QAAS,SAChCC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,QAAS,UC/BH,SAASC,GAAaC,GAC3B,MAAsBA,EAAe9lD,QAAQ,IAAK,KAAK+lD,cAAcpoD,MAAM,KAA1E2hD,EAAQ,KACT0G,EAAqB1G,EAAQ,IADX,KAElB2G,EAAiBpB,GAAiBvF,GAExC,OAAK2G,EAIEA,EAAe5gC,QAAQ2gC,IAAoB,EAAIA,EAAkBC,EAAe,GAH5E,OAIf,C,SCQA,WAKI,WACYplB,EACAvO,EACA4zB,EACAC,GAHA,KAAAtlB,OAAAA,EACA,KAAAvO,uBAAAA,EACA,KAAA4zB,wBAAAA,EACA,KAAAC,QAAAA,CACT,CAkIP,OAhII,YAAApU,WAAA,SAAW9yC,GAAX,WACYkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAEzC,IAAKkF,IAAgBF,EACjB,MAAM,IAAI,GACN,qEAMR,OAFAvH,KAAK0pD,UAAYniD,EAEVvH,KAAKmkC,OACPuT,SAAS13C,KAAK41B,uBAAuBhD,uBACrC1D,MAAK,SAACntB,GACH,IAAMghB,EAAgBhhB,EAAM0jB,eAAeE,iBAAiBpe,GAE5D,IAAKwb,IAAkBA,EAAcytB,mBAAmB3e,WACpD,MAAM,IAAI,GAAiB3a,GAAqBa,sBAGpD,IAAM4xC,EAA+B,CACjChH,iBAAkB5/B,EAAcytB,mBAAmBoZ,uBACnDhH,SAAUuG,GAAa,EAAKM,SAC5BxL,SAAUl7B,EAAc0J,OAAOwxB,SAC/BpsB,WAAY9O,EAAcytB,mBAAmB3e,YAGjD,OAAO,EAAK23B,wBAAwBjtB,KAAKotB,EAC7C,IACCz6B,MAAK,SAAC4zB,GACH,EAAK+G,kBAAoB/G,EACzB,EAAKgH,cAAgB,EAAKC,oBAAoBtiD,EAClD,GACR,EAEA,YAAA+zC,aAAA,WAOI,OANIx7C,KAAK8pD,eAAiB9pD,KAAK8pD,cAAc3tB,aACzCn8B,KAAK8pD,cAAcjvB,oBAAoB,QAAS76B,KAAKgqD,0BACrDhqD,KAAK8pD,cAAc3tB,WAAWC,YAAYp8B,KAAK8pD,eAC/C9pD,KAAK8pD,mBAAgBrmD,GAGlBsrB,QAAQ6P,SACnB,EAEQ,YAAAmrB,oBAAR,SAA4BtiD,GACxB,IAAMwiD,EAAkBryB,SAASsE,eAAez0B,GAC1C1F,EAAQ/B,KAAKmkC,OAAOznB,WACpBqG,EAAgB/iB,KAAK0pD,UACrB3nD,EAAM0jB,eAAeE,iBAAiB3lB,KAAK0pD,WAC3C,KACAppC,EAAcve,EAAM0qB,OAAOvM,iBAEjC,IAAK+pC,EACD,MAAM,IAAInrD,MAAM,wCAGpB,IAAKikB,EACD,MAAM,IAAI,GAAiB7L,GAAqBa,sBAGpD,IAAKuI,EACD,MAAM,IAAI,GAAqB,0CAGnC,IAAM4pC,EAAStyB,SAASW,cAAc,SAItC,GAFA2xB,EAAOvrD,KAAO,QAEVokB,EAAcytB,mBAAmBoZ,uBAAwB,CACzD,IAAMO,EAAYpnC,EAAc0J,OAAOwxB,SAAW,WAAa,GACvDpsB,EAAe9O,EAAcytB,mBAAkB,WAEjD5hB,EAAS,CACX,UAAUu6B,GAAanpD,KAAKypD,SAC5B,0CACA,cAAc53B,GAGlBq4B,EAAOnqB,IAAM,CACT,WAAWoqB,EAAS,8DACpBv7B,EAAOjvB,KAAK,MACdA,KAAK,I,MAEPuqD,EAAOnqB,IACH,4EAOR,OAJAkqB,EAAgB3tB,YAAY4tB,GAE5BA,EAAOxvB,iBAAiB,QAAS16B,KAAKgqD,0BAE/BE,CACX,EAEQ,YAAAE,yBAAR,WACI,IAAMroD,EAAQ/B,KAAKmkC,OAAOznB,WACpB2M,EAAWtnB,EAAMsnB,SAAS3L,cAC1BqF,EAAgB/iB,KAAK0pD,UACrB3nD,EAAM0jB,eAAeE,iBAAiB3lB,KAAK0pD,WAC3C,KAEN,IAAKrgC,EACD,MAAM,IAAI,GAAiBnS,GAAqBK,iBAGpD,IAAKwL,EACD,MAAM,IAAI,GAAiB7L,GAAqBa,sBAGpD,MAAO,CACH8Z,WAAY9O,EAAcytB,mBAAmB3e,WAC7Cw4B,iBAAkBtnC,EAAcytB,mBAAmB6Z,iBACnD11B,OAAQtL,EAAStiB,KAAKitB,WAAWlxB,WACjCmxB,SAAU5K,EAAStiB,KAAKktB,SAAS3zB,KACjCquB,OAAQtF,EAAStiB,KAAKxB,GACtBkI,YCnJEmiB,OAAOkR,SAASlI,OAAhBhJ,4FDqJV,EAGQ,YAAAo6B,yBAAR,WACI,IAAKhqD,KAAK6pD,kBACN,MAAM,IAAI,GAAoBrtB,GAAwB8tB,8BAG1DtqD,KAAK6pD,kBAAkBxgC,SAASrpB,KAAKoqD,2BACzC,GANA,iBADC,I,6CAQL,C,CA5IA,GEKA,kBAGI,WACYjmB,EACAvO,EACA20B,EACA/F,EACAgG,QAAA,IAAAA,IAAAA,EAAA,IAJA,KAAArmB,OAAAA,EACA,KAAAvO,uBAAAA,EACA,KAAA20B,oBAAAA,EACA,KAAA/F,YAAAA,EACA,KAAAgG,MAAAA,CACT,CAkJP,OAhJI,YAAAnV,WAAA,SAAW9yC,GAAX,WACUkoD,EAAgBloD,EAAQs+C,OACxB9+C,EAAQ/B,KAAKmkC,OAAOznB,WACpBqG,EAAiB/iB,KAAK0qD,eAAiB3oD,EAAM0jB,eAAeE,iBAC9DpjB,EAAQgF,UAGZ,IAAKkjD,EACD,MAAM,IAAI,GAGd,IAAK1nC,EACD,MAAM,IAAI,GAAiB7L,GAAqBa,sBAGpD,OAAO/X,KAAKuqD,oBACPhN,WAAWx6B,EAAc0J,OAAOs2B,YAChC7zB,MAAK,SAAC2xB,G,UACH,IAAK99B,IAAkBA,EAAc0J,OAAOs2B,WACxC,MAAM,IAAI,GAAiB7rC,GAAqBa,sBAGpD,IAAMgrC,EAAahgC,EAAc0J,OAAOs2B,WAClC2C,EAAM3iC,EAAc0J,OAAOwxB,SAAW,UAAY,aAClDgC,IAAW,MAAyByF,GAAM+E,EAAcE,SAAQ,GAEhEC,EAAsB/J,EAAOwE,QAAQ4C,QAAU,SAC/C4C,EAAiBJ,EAAcK,YAAc,CAACF,GAAuB,GACrEG,EAAqBN,EAAcK,YAAsC,GAAxB,CAACF,GAExD,OAAO/J,EAAOmK,OAAO1tB,OACjB,CACIooB,IAAG,EACHtF,OAAQH,EACRyC,OAAQ+H,EAAcvF,qBACtB+F,QAAS,CACLC,QAASL,EACTM,WAAYJ,GAEhB3sB,OAAO,8BACHqlB,MAAO,GAA6B2H,OACjC,IAAAv8C,MACC47C,EAAcrsB,MACd,SACA,QACA,QACA,QACA,UACA,iBACH,CACDb,KACyB,kBAArBxa,EAAcxd,IACgB,WAAX,QAAnB,EAAAklD,EAAcrsB,aAAK,eAAEb,MACf,GAA4B8tB,WACT,QAApB,EAACZ,EAAcrsB,aAAK,eAAEb,OAEnC1vB,QAAS,SAACsS,EAAGmrC,GACT,SAAK1F,cAAc7C,EAAYuI,EAASb,EAAcpE,eAAtD,EACJkF,YAAa,SAACxnD,EAAMunD,GAChB,SAAKvF,iBACDhiD,EACAunD,EACAb,EAAcvF,qBACduF,EAActF,iBAJlB,GAOR5iD,EAAQkF,YAEhB,GACR,EAEA,YAAA+zC,aAAA,WAGI,OAFAx7C,KAAK0qD,oBAAiBjnD,EAEfsrB,QAAQ6P,SACnB,EAEQ,YAAAgnB,cAAR,SACI7C,EACAuI,EACA9K,GAHJ,WAKI,IAAK8K,EACD,MAAM,IAAI,GAAoB9uB,GAAwB8tB,8BAG1D,OAAOtqD,KAAKmkC,OACPuT,SAAS13C,KAAK41B,uBAAuBhD,uBACrC1D,MAAK,SAACntB,GACH,IAAMgF,EAAOhF,EAAMgF,KAAKsY,UAClBsP,EAAS5nB,EAAOA,EAAKxB,GAAK,GAEhC,OAAO+lD,EAAQpb,QAAQje,KAChB,EAAKu4B,MAAK,wCACb,CAAEzH,WAAU,EAAEp0B,OAAM,GACpB,CACIxvB,SAAS,eACL,iBAAkB4wB,IACfC,KAInB,IACCd,MAAK,SAACs8B,GAAQ,OAAAA,EAAIjmD,EAAJ,IACd6pB,OAAM,SAAC1vB,GAKJ,MAJI8gD,GACAA,EAAQ9gD,GAGNA,CACV,GACR,EAEQ,YAAAqmD,iBAAR,SACIhiD,EACAunD,EACApG,EACAuG,GAJJ,WAMI,IAAKzrD,KAAK0qD,eACN,MAAM,IAAI,GAAoBluB,GAAwB8tB,8BAG1D,IAAKgB,EACD,MAAM,IAAI,GAAoB9uB,GAAwB8tB,8BAG1D,IAAKvmD,EAAK2nD,YAAc3nD,EAAK4nD,QACzB,MAAM,IAAI,GAAiBz0C,GAAqBW,gBAGpD,IAAMtQ,EAAWvH,KAAK0qD,eAAenlD,GAErC,OAAO+lD,EAAQz9C,QAAQ/P,IAAIiG,EAAK2nD,WAAWx8B,MAAK,SAAC/sB,GAC7C,EAAKqiD,YAAY2C,SAAS,gBAAiB,CACvCC,aAAc,SACd3tC,SAAUlS,EACVvF,OAAQkjD,EAAuB,kBAAoB,wBACnD/6B,UAAWpmB,EAAK2nD,UAChBE,QAAS7nD,EAAK4nD,QACdE,UAAWn3C,KAAKC,UAAUxS,EAAQ2pD,MAAMC,aAEhD,GACJ,EACJ,EA3JA,G,YCzBe,SAASC,KACpB,IACI,OAAOC,QAAQvG,IAAIwG,UAAY,C,CACjC,MAAOvgC,GACL,MAAO,a,CAEf,CCJA,kBACI,WAAoBwgC,GAAA,KAAAA,SAAAA,CAAqB,CA6B7C,OA3BI,YAAAC,IAAA,W,IAAI,sDACApsD,KAAKqsD,cAAa,MAAlBrsD,MAAI,qBAAe,OAAUssD,GACjC,EAEA,YAAArf,KAAA,W,IAAK,sDACDjtC,KAAKqsD,cAAa,MAAlBrsD,MAAI,qBAAe,QAAWssD,GAClC,EAEA,YAAAC,KAAA,W,IAAK,sDACDvsD,KAAKqsD,cAAa,MAAlBrsD,MAAI,qBAAe,QAAWssD,GAClC,EAEA,YAAA5sD,MAAA,W,IAAM,sDACFM,KAAKqsD,cAAa,MAAlBrsD,MAAI,qBAAe,SAAYssD,GACnC,EAEA,YAAAE,MAAA,W,IAAM,sDACFxsD,KAAKqsD,cAAa,MAAlBrsD,MAAI,qBAAe,SAAYssD,GACnC,EAEQ,YAAAD,cAAR,SAAsB1tD,G,UAAqB,oDAClCqB,KAAKmsD,UAAansD,KAAKmsD,SAASxtD,KAIrC,EAAAqB,KAAKmsD,SAASxtD,IAAMR,KAAI,8BAAC6B,KAAKmsD,UAAaG,GAC/C,EACJ,EA9BA,G,eCAA,wBAUA,QATI,YAAAF,IAAA,WAAa,EAEb,YAAAnf,KAAA,WAAc,EAEd,YAAAsf,KAAA,WAAc,EAEd,YAAA7sD,MAAA,WAAe,EAEf,YAAA8sD,MAAA,WAAe,EACnB,EAVA,GCGA,ICDqCC,GDC/BC,SCD+B,KAAAD,GDCY,SAArBT,QCDSS,IAAA,GAC5BA,GAIE,IAAI,GAAcE,SAHd,IAAI,ICAnB,cAGI,WAAoB3N,QAAA,IAAAA,IAAAA,GAAA,QAAAA,aAAAA,EAChBh/C,KAAK07C,UAAY,IAAI,GAAS,CAC1ByD,cAAen/C,KAAK4sD,cAAcxyB,KAAKp6B,MACvCi/C,YAAaj/C,KAAKg/C,cAE1B,CA0EJ,OAxEI,YAAAlhD,IAAA,SAAI+uD,GACA,OAAO7sD,KAAK07C,UAAU59C,IAAIkC,KAAK8sD,aAAaD,GAChD,EAEA,YAAA5sD,SAAA,SAAS4sD,EAAmBhgC,GACxB7sB,KAAK07C,UAAUz7C,SAASD,KAAK8sD,aAAaD,GAAYhgC,EAC1D,EAEQ,YAAAigC,aAAR,SAAqBD,GACjB,OAAOp4C,KAAKC,KAAKC,UAAUk4C,GAC/B,EAEQ,YAAAE,aAAR,SAAqBn/C,GACjB,OAAO8G,KAAKs4C,MAAMC,KAAKr/C,GAC3B,EAEQ,YAAAg/C,cAAR,SAAsBh/C,EAAes/C,GAArC,I,EAAA,OACU/mC,EAAQnmB,KAAK+sD,aAAan/C,GAE1Bu/C,EAAuE,GAE7ED,EAAiBv5C,SAAQ,SAACy5C,GAKtB,IAJA,IAAMC,EAAa,EAAKN,aAAaK,GAE/B3tD,EAAS,CAAEmO,MAAOw/C,EAAiBE,QAAS,EAAG1sD,SAAS,GAEnC,MAAAjD,OAAO4vD,QAAQF,GAAf,eAA4B,CAA5C,WAAC5vD,EAAG,KAAEa,EAAK,KAClB,GAAIb,KAAO0oB,GAASA,EAAM1oB,KAASa,EAAO,CACtCmB,EAAO6tD,QAAU,EACjB,K,CAGA7vD,KAAO0oB,GAASA,EAAM1oB,KAASa,GAC/BmB,EAAO6tD,UAGC,YAAR7vD,IAA+B,IAAVa,IACrBmB,EAAOmB,SAAU,E,CAIzBusD,EAAQn+C,KAAKvP,EACjB,IAEA,IAAM+tD,EAAiBL,EAClBn5C,MAAK,SAAC1W,EAAGgI,GAAM,OAAAA,EAAEgoD,QAAUhwD,EAAEgwD,OAAd,IACftqD,QAAO,SAACvD,GAAW,OAAAA,EAAO6tD,QAAU,CAAjB,IAEpBE,EAAeptD,OAAS,GAAKotD,EAAe,GAAGF,UAAYE,EAAe,GAAGF,SACpD,gBAArBtB,MFzDLU,GE0DwBH,KACf,wJAKZ,IAAMkB,EAAUD,EAAe,GAE/B,GAAIC,GAAWA,EAAQ7/C,MACnB,OAAO6/C,EAAQ7/C,MAGnB,GAAI5N,KAAKg/C,aAAc,CACnB,IAAMD,EAAuD,QAA3C,EAAGoO,EAAQztC,MAAK,SAACjgB,GAAW,OAAAA,EAAOmB,OAAP,WAAe,eAAEgN,MAE/D,GAAImxC,EACA,OAAOA,C,CAIf,MAAM,IAAIjgD,MAAM,mEACpB,EACJ,EAlFA,G,qBCCA,YACI,WAAYN,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKE,KAAO,uBACZ,EAAKC,KAAO,mB,CAChB,CACJ,OAPkD,oBAOlD,EAPA,CAAkD,GCLlD,IAAY,IAAZ,SAAYuY,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAY,QAAoB,K,SAyBhC,YACI,WAAmBC,GAAnB,MACI,YAOR,SAAyBxY,GACrB,OAAQA,GACJ,KAAK,GAAqByY,sBACtB,MAAO,iEAEX,KAAK,GAAqBC,YACtB,MAAO,sDAEX,KAAK,GAAqBC,oBACtB,MAAO,8DAEX,KAAK,GAAqBC,gBACtB,MAAO,0DAEX,KAAK,GAAqBC,gBACtB,MAAO,0DAEX,KAAK,GAAqBC,sBAC1B,KAAK,GAAqBC,mBACtB,MAAO,+DAEX,KAAK,GAAqBC,aACtB,MAAO,uDAEX,KAAK,GAAqBC,eACtB,MAAO,0EAEX,KAAK,GAAqBC,eACtB,MAAO,yDAEX,KAAK,GAAqBC,oBACtB,MAAO,+EAEX,KAAK,GAAqBC,qBACtB,MAAO,2FAEX,KAAK,GAAqBE,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CAjDc,CAAgBd,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAKzY,KAAO,mBACZ,EAAKC,KAAO,e,CAChB,CACJ,OAP8C,oBAO9C,EAPA,CAA8C,GCvB/B,SAAS+uD,GAAuB3mD,GAC3C,OCDsC0hB,EDCb1hB,EAAK0hB,UAAUC,cAAc1lB,QAAO,SAAC2L,GAAS,OAACA,EAAK07B,gBAAN,KCAhE,IAAA7qC,QAAOipB,GAAW,SAACklC,EAAOh/C,GAAmB,OAAAg/C,EAAQh/C,EAAK+lB,QAAb,GAAuB,GADhE,IAA2BjM,CDE1C,CENe,SAAS,GAASnqB,EAAUoa,GACvC,GAAIpa,QACA,MAAMoa,EAAeA,IAAiB,IAAI5Z,MAAM,qCAGpD,OAAOR,CACX,CCJA,IAAY,IAAZ,SAAYk+B,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAY,QAAuB,K,SAanC,YACI,WAAmBrlB,GAAnB,MACI,YAOR,SAAyBxY,GACrB,OAAQA,GACJ,KAAK,GAAwB89B,uBACzB,MAAO,oFAEX,KAAK,GAAwBC,sBACzB,MAAO,mFAEX,KAAK,GAAwBC,uBACzB,MAAO,oFAEX,KAAK,GAAwBC,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBc,CAAgBzlB,KAAS,K,OADhB,EAAAA,QAAAA,EAGf,EAAKzY,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OAPiD,oBAOjD,EAPA,CAAiD,GCuL1C,IAQKivD,GAYAC,GAkBAC,GAOAC,GAQAC,GAMAC,GA3DCC,GAAgD,CACzDjF,GAAI,KACJkF,GAAI,KACJxF,GAAI,KACJyF,GAAI,OAIR,SAAYR,GACR,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,eACH,CARD,CAAYA,KAAAA,GAA2B,KAYvC,SAAYC,GAER,cAGA,oBAGA,cAGA,sBAGA,eACH,CAfD,CAAYA,KAAAA,GAAoB,KAkBhC,SAAYC,GACR,YACA,YACA,YACA,WACH,CALD,CAAYA,KAAAA,GAAyB,KAOrC,SAAYC,GAER,0BAGA,mBACH,CAND,CAAYA,KAAAA,GAAqB,KAQjC,SAAYC,GACR,cACA,wBACA,qBACH,CAJD,CAAYA,KAAAA,GAAsB,KAMlC,SAAYC,GACR,eACH,CAFD,CAAYA,KAAAA,GAAuB,KC9NnC,kBAMI,WAAoBI,GAAA,KAAAA,wBAAAA,CAAmD,CA+S3E,OA7SU,YAAAhZ,WAAN,SAAiBtyB,G,4HACS,OAAtB,EAAA/iB,KAAsB,GAAMA,KAAKquD,wBAAwB9xB,KAAKxZ,I,cAA9D,EAAKurC,eAAiB,SACtBtuD,KAAKuuD,sBACDvuD,KAAKuuD,uBAAyBvuD,KAAKwuD,uC,YAG3C,YAAAhT,aAAA,W,MAMI,OALAx7C,KAAKyuD,uBAAoBhrD,EACC,QAA1B,EAAAzD,KAAKuuD,6BAAqB,SAAE3G,SAC5B5nD,KAAKuuD,2BAAwB9qD,EAC7BzD,KAAKsuD,oBAAiB7qD,EAEfsrB,QAAQ6P,SACnB,EAEA,YAAA8vB,WAAA,SACIC,EACAC,EACAC,GAEA7uD,KAAK8uD,oBAAoBC,IAAIC,iBAAiB,IAAIL,EAAY,CAC1DM,wBAAyBL,EACzBC,aAAY,GAEpB,EAEA,YAAAK,aAAA,SAAaznD,EAAqBlF,GAC9BvC,KAAKyuD,kBAAoBzuD,KAAK8uD,oBAAoBC,IAAII,aAClD,IAAI1nD,EACJlF,EAER,EAEA,YAAA6sD,gBAAA,SAAgBC,GAAhB,WACUC,EAAgBtvD,KAAKuvD,qBAAqBF,GAEhDrvD,KAAKwvD,uBAAuBC,SAAQ,WAChC,EAAKD,uBAAuBE,aAAaJ,EAC7C,GACJ,EAEA,YAAAK,yCAAA,SACIC,GADJ,WAUI5vD,KAAKwvD,uBAAuBC,SAAQ,6D,yEACjB,SAAMG,K,cAAfnjC,EAAS,YAGL6iC,EAAgBtvD,KAAKuvD,qBACvB9iC,EAAO4iC,4BACP5iC,EAAOojC,qBACPpjC,EAAOqjC,aAGX9vD,KAAKwvD,uBAAuBE,aAAaJ,I,aAGrD,EAEM,YAAAS,QAAN,W,+FAKI,OAJI/vD,KAAKsuD,gBACLtuD,KAAKsuD,eAAeS,IAAIgB,UAGrB,CAAP,EAAOhhC,QAAQ6P,U,QAGnB,YAAAoxB,sBAAA,SAAsB,G,IAClBC,EAAW,cACXxgB,EAAa,gBACbhoC,EAAW,cACX,IAAAyoD,2BAAAA,OAA0B,IAAG,GAAK,EAClC3oD,EAAQ,WACRhF,EAAO,UACP6jD,EAAS,YACT,IAAA+J,0BAAAA,OAAyB,IAAG,GAAK,EAE3BjzB,EAAYtF,SAASiG,cAA2B,IAAIp2B,GAE1D,IAAKy1B,EACD,MAAM,IAAI,GACN,gFAIA,IAAIkzB,EAAsBlzB,EAAUZ,YAAYt8B,KAAKqwD,4BAA2B,GAEpF9tD,GAAW4tD,IACX5tD,EAAQ+tD,OAASrC,GAAwBsC,OAG7C,IAAMC,EACFjuD,QAAAA,EACAvC,KAAKywD,4BACDhhB,EACAloC,EACA6+C,EACA8J,EACAD,GAKR,OAFAjwD,KAAKkvD,aAAakB,EAAmBI,GAE9BxwD,KAAKqwD,0BAChB,EAEA,YAAAK,qBAAA,SAAqBC,GACjB3wD,KAAK2wD,aAAevrC,QAAQurC,EAChC,EAKA,YAAAC,aAAA,SACI//B,EACAggC,GAEA,IAAMD,IAAiB//B,EAAS,+BAC1BigC,IAAgBjgC,EAAS,mCAE/B,OAAI+/B,GAAgBE,EACY,OAArBD,EAGJD,CACX,EAEQ,YAAArB,qBAAR,SACIF,EACAQ,EACAC,GAEQ,IAAAiB,EAAkC1B,EAA2B,YAA7C2B,GAAa,YAAK3B,EAApC,iBAEN,OAAO,8BACHA,4BAA6BrvD,KAAKixD,sBAAsBF,GAClDC,EACA3B,GACFQ,GAAwB,CAAEA,qBAAoB,IAC9CC,GAAe,CAAEA,YAAW,GAExC,EAEQ,YAAAtB,qCAAR,WACI,IAAM0C,EAAM1nC,KAAK2nC,SAASruD,SAAS,IAAIsuD,QAAQ,GACzCC,EAAkBz5B,SAASW,cAAc,OAI/C,OAFA84B,EAAgB9rD,GAAK,qCAAqC2rD,EAEnDG,CACX,EAEQ,YAAAZ,4BAAR,SACIhhB,EACAloC,EACA6+C,EACA8J,EACAD,G,WADA,IAAAC,IAAAA,GAAA,QACA,IAAAD,IAAAA,EAAcjC,GAAuBsD,MAE/B,MACFtxD,KAAKuxD,iBAAiB9hB,GADlBpwB,EAAO,UAAE3B,EAAW,cAAE6C,EAAqB,wBAE7C,GAGFqF,EALwE,2BAKlBre,GAFtD,IAAAklB,OAAUs2B,EAAU,aAAE9E,EAAQ,WAC9BzN,EAAkB,qBAGtB,IAAKA,EACD,MAAM,IAAI,GAAiB,GAAqBz4B,sBAIhD,IAAAy5C,EAOAhhB,EAAkB,iBANlBihB,EAMAjhB,EAAkB,sBALlB6e,EAKA7e,EAAkB,4BAJlBkhB,EAIAlhB,EAAkB,+BAHlBmhB,EAGAnhB,EAAkB,eAFlB,EAEAA,EAAkB,YAFlBugB,OAAW,IAAG,KAAE,EAChBZ,EACA3f,EAAkB,0BAEtB,IAAKuS,IAAe4O,IAAmBtC,EACnC,MAAM,IAAI,GAAiB,GAAqBt3C,sBAGpD,IAAM65C,GAAgB,eAClB7O,WAAU,EACV4O,eAAc,EACdH,iBAAgB,EAChBpL,UAAS,EACT6J,YAAW,GACPE,EAA4B,CAAEG,OAAQrC,GAAwBsC,OAAU,CAAC,GAGjF,GAAIvwD,KAAK2wD,aACL,OAAO,gCACAiB,GAAgB,CACnBC,UAAW5T,IAInB,IAAMl3C,EAAOsY,IAEbuyC,EAAiB9B,YACb/oD,GAAyC,IAAjC2mD,GAAuB3mD,GACzBgnD,GAAsB+D,QACtB/D,GAAsBgE,WAE1B,MAGFxxC,IAFoBsQ,EAAQ,4BAC5B,IAAAwf,aAAgB2hB,EAAQ,WAAEnB,EAAgB,mBAG9C,GAAI7wD,KAAK4wD,aAAa//B,EAAUggC,GAAmB,CAC/C,IAAMl8B,EAAsB,QAAhB,EAAGjX,WAAa,eAAEgM,mBAAmB5mB,WAC3C+4C,EAAe90C,aAAI,EAAJA,EAAMktB,SAAS3zB,KAC9B2xD,GAAa,iBAAoCL,GACnDM,OAAS,EAkBb,OAhBIlyD,KAAKixD,sBAAsBF,IAC3BkB,EAAclB,YAAcA,EAC5BmB,EAAY7C,IAEZ4C,EAAcJ,UAAY5T,EAC1BiU,GAAY,gCAAK7C,GAA2B,CAAE0B,YAAW,KAGxDb,IACD+B,EAAc5C,4BAA8B6C,GAG5Cv9B,GAAUknB,IACVoW,EAAcpC,qBAAuB,CAAEl7B,OAAM,EAAEknB,aAAY,IAGxDoW,C,CAGX,IAAME,EAAwB,CAC1Bz4C,OAAQ+3C,EACRrhC,IAAKS,EAAS,gCACR,oBAAoBtpB,EAAQ,mBACzByqD,EAAQ,oBAAoBzqD,EAAQ,mBAC7CmqD,+BAA8B,GAGlC,OAAO,gCACAE,GAAgB,CACnBO,sBAAqB,EACrBN,UAAW5T,GAEnB,EAEQ,YAAAgT,sBAAR,SAA8BF,GAC1B,MAAO,kBAAkB14B,KAAK04B,EAClC,EAEQ,YAAAjC,kBAAR,WACI,OAAO9uD,KAAKoyD,WAAWpyD,KAAKsuD,eAChC,EAEQ,YAAA+B,yBAAR,WACI,OAAOrwD,KAAKoyD,WAAWpyD,KAAKuuD,sBAChC,EAEQ,YAAAiB,qBAAR,WACI,OAAOxvD,KAAKoyD,WAAWpyD,KAAKyuD,kBAChC,EAEQ,YAAA2D,WAAR,SAAsB9zD,GAClB,OAAO,GACHA,GACA,WAAM,WAAI,GAAoB,GAAwBo+B,sBAAhD,GAEd,EAGQ,YAAA60B,iBAAR,SACI9hB,GAKA,MCtU6B,iBAHjC4iB,EDyUoC5iB,ICrUV,OAAtB4iB,GACA,SAAUA,GACV,aAAcA,GACd,WAAYA,GACZ,mBAAoBA,EDkUT,CACHhzC,QAASowB,EAAc1oC,KAAKsY,QAC5B3B,YAAa+xB,EAAcpmB,SAAS3L,YACpC6C,sBAAuBkvB,EAAchjB,OAAOlM,sBAC5CqF,wBAAyB,SAAIre,GACzB,OAAAkoC,EAAchqB,eAAeG,wBAA2Bre,EAAxD,GAILkoC,ECpVR,IACH4iB,CDoVA,EACJ,EArTA,G,YErBA,kBACI,WACYrzB,EACAszB,QAAA,IAAAA,IAAAA,EAAA1iC,QADA,KAAAoP,aAAAA,EACA,KAAAszB,oBAAAA,CACT,CAkBP,OAhBU,YAAA/1B,KAAN,SAAW7iB,G,gIAMP,OALQ82B,EAAuB92B,EAAM,mBAC/BgS,GAAS8kB,aAAkB,EAAlBA,EAAoB9kB,SAAU,KAEvC6mC,EAAoBrE,GAAmBxiC,GAE7C,GAAM1rB,KAAKg/B,aAAaF,WACpB,kBAAkByzB,EAAiB,qC,OAGvC,GAJA,UAIKvyD,KAAKsyD,oBAAoBE,OAC1B,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOxyD,KAAKsyD,oBAAoBE,Q,QAExC,EAtBA,G,YCZe,SAASC,GACpBv1D,EACAw1D,GAEA,OAAO/0D,OAAOkW,OAAO3W,EAAQ,CAAEw1D,WAAU,GAC7C,C,SCDA,YACI,WAAYl0D,GAAZ,MACI,YACIA,GACI,mGACP,K,OAED,EAAKE,KAAO,0BACZ,EAAKC,KAAO,8B,CAChB,CACJ,OAVqD,oBAUrD,EAVA,CAAqD,G,GCJrD,YACI,WAAYH,GAAZ,MACI,YACIA,GACI,6FACP,K,OAED,EAAKE,KAAO,iCACZ,EAAKC,KAAO,sC,CAChB,CACJ,OAV4D,oBAU5D,EAVA,CAA4D,GCArD,SAASg0D,GAAqBpwD,GACjC,OAAMA,aAAmB5E,QAIlB,4BAA6B4E,CACxC,CCkBA,kBAGI,WACYqwD,EACAC,EACAC,GAFA,KAAAF,0BAAAA,EACA,KAAAC,4BAAAA,EACA,KAAAC,+BAAAA,CACT,CA+GP,OA7GU,YAAAzd,WAAN,SACI9yC,G,gJAKA,GAHQgF,EAAqChF,EAAO,SAAlCkF,EAA2BlF,EAAO,YAArBwwD,EAAcxwD,EAAO,UAC5C0tD,GAAgB8C,GAAa,CAAC,GAAC,aAElCxrD,IAAaE,EACd,MAAM,IAAI,GACN,mFASR,OALQme,EAA4B5lB,KAAK4yD,0BAA0Bl2C,WAAU,wBAEvEqG,EAAgB6C,EAAsDre,GACpEipC,EAAuBztB,EAAa,mBAE5C,GAAM/iB,KAAK6yD,4BAA4Bxd,WAAWtyB,I,cAAlD,SAEKgwC,EAAD,MACA,GAAM/yD,KAAK4yD,0BAA0BhgC,uB,OAArC,S,wBAGEogC,EAAgCL,GAAqBI,QACrDtvD,EACAsvD,EAGFJ,GAAqBI,IACkD,mBAA/B,QAAxC,EAAOA,EAAUrO,+BAAuB,eAAEoC,4BAE1C9mD,KAAKizD,yBAA2BF,EAAUrO,wBAC1C1kD,KAAK6yD,4BAA4BnC,sBAAqB,IAG1D1wD,KAAK6yD,4BAA4B7C,sBAAsB,CACnDvgB,cAAezvC,KAAK4yD,0BAA0Bl2C,WAC9CjV,YAAW,EACXF,SAAQ,EACRhF,QAASywD,EACT5M,UAAWyH,GAAqBqF,KAChCjD,YAAW,EACXE,0BAA2B3f,aAAkB,EAAlBA,EAAoB2f,4BAG/CnwD,KAAKizD,0BACLjzD,KAAK6yD,4BAA4BlD,yCAC7B3vD,KAAKmzD,kCAAkC/4B,KAAKp6B,O,YAKxD,YAAAw7C,aAAA,WACI,OAAOx7C,KAAK6yD,4BAA4BrX,cAC5C,EAEc,YAAA4X,yBAAd,W,oIAGI,KAFMvb,EAA+E,QAA1D,EAAgC,QAAhC,EAAG73C,KAAKizD,gCAAwB,eAAEnM,gCAAwB,wBAGjF,MAAM,IAAI,GAAiB,GAAqBzvC,a,iBAI7B,O,sBAAA,GAAMrX,KAAK4yD,0BAA0BzgC,iBACpD0lB,I,OAGJ,MAAO,CAAP,EAJmB,U,OAMnB,M,SAAM,IAAI,G,yBAIJ,YAAAwb,sBAAd,SACI9tD,G,kIAKQ,O,sBAAA,GAAMvF,KAAK8yD,+BAA+BlD,qBAAqBrqD,I,OAEnE,OAHI,EACA,SAAkE,KAD1DpD,EAAO,UAAEmxD,EAAU,aAAKC,GAAI,cAA9B,0BAGH,CAAP,kBACIC,YAAarxD,EACb4uD,YAAauC,GACVC,I,OAGP,M,SAAM,IAAI,G,yBAIJ,YAAAJ,kCAAd,W,8HACuB,SAAMnzD,KAAKozD,4B,OAKM,OAL9BK,EAAa,SACb5D,EAAuB,CACzBl7B,OAAQ++B,OAAOD,EAAW/lB,YAC1BmO,aAAc4X,EAAWx/B,SAAS3zB,MAEF,GAAMN,KAAKqzD,sBAAsBI,EAAWluD,K,OAEhF,MAAO,CAAP,EAAO,CACH8pD,4BAHgC,SAIhCQ,qBAAoB,EACpBC,YAC2C,IAAvCpC,GAAuB+F,GACjB1F,GAAsB+D,QACtB/D,GAAsBgE,a,QAG5C,EAtHA,G,YC1BO,ICAF,GDAQ,GACT,2ECDJ,SAAKjiC,GACD,0BACA,qCACH,CAHD,CAAK,QAAW,KAKhB,YCLO,IAAM,GAAsB,CAAE,yBAA0B,W,SCc/D,WACI,WAAoBvB,GAAA,KAAAA,eAAAA,CAAgC,CAYxD,OAVI,YAAAqhC,qBAAA,SAAqBjhC,GACjB,IAAMzvB,EAAO,CAAEyvB,OAAM,GACfxvB,GAAU,eACZ,iBAAkB,GAClB,eAAgB,GAAYw0D,MACzB,IAGP,OAAO3zD,KAAKuuB,eAAe0D,KAAK,oCAAqC,CAAE9yB,QAAO,EAAED,KAAI,GACxF,EACJ,EAbA,GCWA,GAAeuzD,IAdmF,SAC9FG,GAEA,IAAMgB,GAAgB,IAAAC,uBAChBC,EAA2B,IAAI,GAAyBF,GACxDf,ECVC,IAAI,GAA4B,IAAI,IAAwB,KAAAkB,qBDYnE,OAAO,IAAI,GACPnB,EACAC,EACAiB,EAER,GAEmE,CAAC,CAAEvuD,GAAI,e,SEnB1E,YACI,WAAY/G,GAAZ,MACI,YAAMA,GAAW,8BAA4B,K,OAE7C,EAAKE,KAAO,0BACZ,EAAKC,KAAO,sB,CAChB,CACJ,OAPqD,oBAOrD,EAPA,CAAqD,GCiIrD,IAAYq1D,GA8TAC,GA6KAC,GAQAC,IAnfZ,SAAYH,GACR,wBACA,gBACA,2CACH,CAJD,CAAYA,KAAAA,GAAoB,KA8ThC,SAAYC,GACR,wBACA,kBACA,uBACA,6BACH,CALD,CAAYA,KAAAA,GAAoC,KA6KhD,SAAYC,GACR,sBACA,sBACA,oBACA,sBACA,mBACH,CAND,CAAYA,KAAAA,GAAkB,KAQ9B,SAAYC,GACR,oDACH,CAFD,CAAYA,KAAAA,GAAkB,KCpmB9B,kBAWI,WAAoBC,GAAA,KAAAA,sBAAAA,CAA+C,CA0MvE,OAxMI,YAAA/e,WAAA,SAAW4K,GACPjgD,KAAKq0D,eAAepU,EACxB,EAEM,YAAAzE,aAAN,W,sHACI,SAAMx7C,KAAKs0D,eAAet0D,KAAKu0D,gB,cAA/B,SAEAv0D,KAAKu0D,mBAAgB9wD,E,YASnB,YAAA08C,UAAN,W,uIACSngD,KAAKogD,OAAN,OACMH,EAAcjgD,KAAKw0D,wBACH,GAAMx0D,KAAKo0D,sBAAsBjX,e,OAEzC,OAFRsX,EAAgB,SAEtB,EAAAz0D,KAAc,GAAMy0D,EAAc37C,OAAO,CAAEunC,cAAeJ,K,OAA1D,EAAKG,OAAS,S,iBAGlB,MAAO,CAAP,EAAOpgD,KAAKogD,Q,QASV,YAAAsU,wBAAN,SACInyD,G,yIAEMoyD,EAAqB,CACvB3S,gBAAYv+C,EACZw+C,SAAU,WAAM,OAAAlzB,QAAQ6P,SAAR,GAGf5+B,KAAKu0D,cAAN,Y,iBAEmB,O,sBAAA,GAAMv0D,KAAKmgD,a,OACJ,OADhBC,EAAS,SACO,GAAMpgD,KAAKo0D,sBAAsB3W,qB,OAQlC,OARf8W,EAAgB,SAEhBK,GAAmB,eACrBxU,OAAM,EACN2B,OAAO,GACJx/C,GAGP,EAAAvC,KAAqB,GAAMu0D,EAAcz7C,OAAO87C,I,cAAhD,EAAKL,cAAgB,S,aAErB,GCvFyB70D,E,WAC9B0lB,QACc,iBAAV1lB,GACO,OAAVA,IACC,SAAUA,GAAS,YAAaA,GAAS,SAAUA,KDmFjB,EAAMY,OAAS6zD,GAAmBU,gBAC7D,MAAO,CAAP,EAAOF,GAGX,MAAM,E,OAId,MAAO,CAAP,EAAO30D,KAAKu0D,eC/FL,IAA0B70D,C,QDwG/B,YAAAo1D,0BAAN,W,yIACS90D,KAAK+0D,cAAN,MACyC,GAAMhmC,QAAQC,IAAI,CACvDhvB,KAAKmgD,YACLngD,KAAKo0D,sBAAsBzW,uB,OAGV,OALf,EAAmC,SAAlCyC,EAAM,KAAE4U,EAAsB,KAKrC,EAAAh1D,KAAqB,GAAMg1D,EAAuBl8C,OAAO,CAAEsnC,OAAM,K,OAAjE,EAAK2U,cAAgB,S,iBAGzB,MAAO,CAAP,EAAO/0D,KAAK+0D,e,QASV,YAAAE,oBAAN,W,yIACSj1D,KAAKk1D,QAAN,MAC+B,GAAMnmC,QAAQC,IAAI,CAC7ChvB,KAAKmgD,YACLngD,KAAKo0D,sBAAsBxW,a,OAGhB,OALT,EAAyB,SAAxBwC,EAAM,KAAE+U,EAAY,KAK3B,EAAAn1D,KAAe,GAAMm1D,EAAar8C,OAAO,CAAEsnC,OAAM,EAAEwB,QAAS,K,OAA5D,EAAKsT,QAAU,S,iBAGnB,MAAO,CAAP,EAAOl1D,KAAKk1D,S,QASV,YAAAE,iBAAN,W,uIACSp1D,KAAKq1D,cAAN,MACe,GAAMr1D,KAAKmgD,a,OACJ,OADhBC,EAAS,SACO,GAAMpgD,KAAKo0D,sBAAsB1W,qB,OAElC,OAFf2X,EAAgB,SAEtB,EAAAr1D,KAAqB,GAAMq1D,EAAcv8C,OAAO,CAAEsnC,OAAM,K,OAAxD,EAAKiV,cAAgB,S,iBAGzB,MAAO,CAAP,EAAOr1D,KAAKq1D,e,QAShB,YAAAC,yBAAA,WAQI,OAPKt1D,KAAKu1D,eACNv1D,KAAKu1D,aAAexmC,QAAQC,IAAI,CAC5BhvB,KAAKmgD,YACLngD,KAAKo0D,sBAAsBvW,qBAC5B3uB,MAAK,SAAC,G,IAACkxB,EAAM,KAAc,OAAN,KAAatnC,OAAO,CAAEsnC,OAAM,GAAtB,KAG3BpgD,KAAKu1D,YAChB,EAQM,YAAAC,mBAAN,SAAyBvX,G,mIAChBj+C,KAAKy1D,gBAAN,OACA,EAAAz1D,KAAuB,GAAMA,KAAKo0D,sBAAsBpW,oBAAoBC,K,OAA5E,EAAKwX,gBAAkB,S,iBAG3B,MAAO,CAAP,EAAOz1D,KAAKy1D,iB,QASV,YAAAC,wBAAN,W,yIACS11D,KAAK21D,eAAN,MACe,GAAM31D,KAAKmgD,a,OACJ,OADhBC,EAAS,SACO,GAAMpgD,KAAKo0D,sBAAsBtW,qB,OAQxB,OARzBqD,EAAgB,SAEhBC,EAAsB,CACxBhB,OAAM,EACNiB,cAAc,EACdC,mBAAoB,aAGO,GAAMH,EAAcroC,OAAOsoC,I,OAE1D,KAFMI,EAAyB,UAEJC,qBAGvB,MAAM,IAAI,GAFVzhD,KAAK21D,eAAiBnU,E,iBAM9B,MAAO,CAAP,EAAOxhD,KAAK21D,gB,QAQR,YAAAtB,eAAR,SAAuBpU,GACnBjgD,KAAKigD,YAAcA,CACvB,EAEQ,YAAAuU,sBAAR,WACI,IAAKx0D,KAAKigD,YACN,MAAM,IAAI,GAAoB,GAAwBvjB,uBAG1D,OAAO18B,KAAKigD,WAChB,EAEQ,YAAAqU,eAAR,SAAuBp3D,GACnB,OAAOA,EAASA,EAAO+kD,WAAalzB,QAAQ6P,SAChD,EACJ,EArNA,G,eEfA,YACI,WAAYpgC,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKE,KAAO,8BACZ,EAAKC,KAAO,oB,CAChB,CACJ,OAPyD,oBAOzD,EAPA,CAAyD,GCPzD,IAAYi3D,GCQL,SAAS,GAAqBhmC,GACjC,IALJ,SAA0BA,GACtB,MAAO,oBAAqBA,CAChC,CAGS,CAAiBA,GAClB,MAAM,IAAI9wB,MAAM,6BAExB,EDZA,SAAY82D,GACR,uBACH,CAFD,CAAYA,KAAAA,GAAmB,K,SCc/B,wBAMA,QALI,YAAA98C,OAAA,SAAOo3B,GAGH,OAFA,GAAqBtgB,QAEd,IAAIimC,gBAAgB,EAAG3lB,EAClC,EACJ,EANA,GCcA,IAGK4lB,IAAL,SAAKA,GACD,sBACA,qBACH,CAHD,CAAKA,KAAAA,GAAa,KASlB,kBASI,WACYvnC,EACAwnC,EACAC,EACAC,GAHA,KAAA1nC,eAAAA,EACA,KAAAwnC,2BAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,cAAAA,EARJ,KAAAC,qBAAuB,EAAAxzB,KACvB,KAAAyzB,eAAyBL,GAAcM,SACvC,KAAAC,eAAyBP,GAAcQ,QAO5C,CA+kBP,OA7kBU,YAAAjhB,WAAN,SACI9yC,G,gJAMA,GAJQgF,EAAoChF,EAAO,SAAjCkF,EAA0BlF,EAAO,YAApBg0D,EAAah0D,EAAO,SAEnD,GAAqBqtB,SAEhBroB,IAAagvD,EACd,MAAM,IAAI,GAAiB,GAAqBx+C,sB,OAG5Cy+C,EACJD,EAAQ,gBADaE,EACrBF,EAAQ,mBADiC7R,EACzC6R,EAAQ,wBAD0DG,EAClEH,EAAQ,iBAEZv2D,KAAK22D,kBAAoBD,EAEzB12D,KAAKizD,yBAA2BvO,EAEhC1kD,KAAKk2D,qBAAuBO,EAEvB/R,EAAD,MACA,GAAM1kD,KAAK+1D,2BAA2BnjC,uB,OAAtC,S,iBAGJ,SAAM5yB,KAAK+1D,2BAA2B9mC,kBAAkB1nB,I,cAAxD,SAEMxF,EAAQ/B,KAAK+1D,2BAA2Br5C,WAE9C1c,KAAK0qD,eAAiB3oD,EAAM6jB,wBAAwBre,GAEvCxF,EAAMsd,UAGf,GAAMrf,KAAK+1D,2BAA2BtgB,gCADtC,M,OACA,S,wBAGsC,QAAtC,EAAAz1C,KAAK0qD,eAAela,0BAAkB,eAAErhC,WAAYymD,GAAoBgB,UAAxE,MACA,GAAM52D,KAAK62D,2B,OAAX,S,iBAMJ,OAHA72D,KAAK82D,gBAAkB92D,KAAK+2D,cAActvD,EAAa+uD,GACvDx2D,KAAK82D,gBAAgBp8B,iBAAiB,QAAS16B,KAAKgqD,yBAAyB5vB,KAAKp6B,OAE3E,CAAP,EAAO+uB,QAAQ6P,W,QAGnB,YAAA4c,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAm4B,cAAR,SACItvD,EACA+uD,QAAA,IAAAA,IAAAA,EAAA,6BAEA,IAAMt5B,EAAYtF,SAASsE,eAAez0B,GAE1C,IAAKy1B,EACD,MAAM,IAAI,GACN,8DAIRtF,SAAS14B,KAAK83D,UAAUC,IAAI,uBAE5B,IAAM/M,EAAStyB,SAASW,cAAc,OAOtC,OALA2xB,EAAO7tB,aAAa,QAASm6B,GAC7BtM,EAAO7tB,aAAa,OAAQ,UAC5B6tB,EAAO7tB,aAAa,aAAc,oBAClCa,EAAUZ,YAAY4tB,GAEfA,CACX,EAEc,YAAAF,yBAAd,SAAuC3wB,G,iIAGnC,GAFAA,EAAM69B,kBAEDl3D,KAAK0qD,iBAAmB1qD,KAAK0qD,eAAela,mBAC7C,MAAM,IAAI,GAAiB,GAAqBz4B,sB,OAIhD/X,KAAKizD,0BAC6D,mBAA3DjzD,KAAKizD,yBAAyBnM,0BAE/B,EAMF9mD,KAAK0qD,eAAela,mBALpB30B,EAAW,cACXggC,EAAY,eACZsb,EAAoB,uBACpBC,EAAiB,oBACjBC,EAAS,YAGPnnB,EAAUlwC,KAAKs3D,0BACjBz7C,EACAggC,EACAub,EACAD,GAGAn3D,KAAK22D,oBACgC,QAArC,EAAAzmB,EAAQqnB,qCAA6B,SAAEvoD,KAAK,kBAG1CwoD,EAAkBx3D,KAAKg2D,gBAAgBl9C,OAAOo3B,GAEpDlwC,KAAKy3D,sBAAsBD,EAAiBx3D,KAAK0qD,eAAgB2M,GAEjEG,EAAgBE,UAEV31D,EAAQ/B,KAAK+1D,2BAA2Br5C,WACxC3V,EAAOhF,EAAMud,iBACbmN,EAAS1qB,EAAMwe,wBACf8I,EAAWtnB,EAAMmnB,qBACjBgnB,EAAUlwC,KAAK23D,gBAAgB5wD,EAAMsiB,EAAUoD,EAAQzsB,KAAK0qD,gBAC5D8M,EAAkBx3D,KAAKg2D,gBAAgBl9C,OAAOo3B,GAEpDlwC,KAAKy3D,sBACDD,EACAx3D,KAAK0qD,eACLj+B,EAAO4jB,aAAagnB,WAGxBG,EAAgBE,S,WAIhB,YAAAJ,0BAAR,SACIz7C,EACAggC,EACAub,EACAD,GAEA,MAAO,CACHt7C,YAAW,EACXggC,aAAY,EACZub,kBAAiB,EACjBD,qBAAoB,EACpBxJ,MAAO,CAAEhpC,MAAO,GAAIgQ,OAAQ,IAAKh2B,KAAM,WACvCi5D,6BAA8B,CAAC,iBAC/BL,8BAA+B,CAAC,QAAS,SAEjD,EAEQ,YAAAI,gBAAR,SACI5wD,EACAsiB,EACAoD,EACA1J,G,MAGI,EACA0J,EAAM,aADUokC,EAAgB,mBAAEwG,EAAS,YAG3C,EACAtwD,EAAI,SADQzG,EAAI,OAAEyoC,EAAa,gBAI/B,EACAhmB,EAAa,mBADSo0C,EAAoB,uBAAEC,EAAiB,oBAG3DV,EAAmB3vD,EAAK0hB,UAAUC,cAActoB,OAAS,EAazD8vC,EAA6C,CAC/C0nB,6BAA8B,CAAC,iBAC/BL,8BAA+B,CAAC,QAAS,SACzC17C,YAAag1C,EACbhV,aAAcv7C,EACd62D,qBAAoB,EACpBC,kBAAiB,EACjB3uC,UAAW,GACXklC,MApBuC+I,EACrC,CACI/xC,MAAO0yC,EACP1iC,OAAQ,GAAGtL,EAASC,WAAWuuC,QAAQ9uB,GACvCpqC,KAAM,WAEV,CACIgmB,MAAO0yC,EACP1iC,OAAQ,GAAGtL,EAASC,WAAWuuC,QAAQ9uB,GACvCpqC,KAAM,UAchB,GAAI+3D,EACqC,QAArC,EAAAxmB,EAAQqnB,qCAA6B,SAAEvoD,KAAK,qBACzC,CACH,IAAM,EAA2C,CAC7C,CACI2V,MAAO3kB,KAAKm2D,eACZxhC,OAAQ,GAAGtL,EAASwiB,SAASgsB,QAAQ9uB,KAI7C1f,EAAS2iB,MAAMr4B,SAAQ,SAACmkD,GACpB,SAAU9oD,KAAK,CACX2V,MAAOmzC,EAAIp5D,KACXi2B,OAAQ,GAAGmjC,EAAInjC,OAAOkjC,QAAQ9uB,IAFlC,IAMJmH,EAAQznB,UAAY,C,CAGxB,OAAOynB,CACX,EAEQ,YAAAunB,sBAAR,SACID,EACAz0C,EACAs0C,GAHJ,WAKIG,EAAgBO,mBAAqB,SAAO1+B,GAAK,kD,uEAEP,O,sBAAA,GAAMr5B,KAAKg4D,oBACzCj1C,EACAsW,I,cAFU4+B,EAAoB,SAGjC,KAEDT,EAAgBU,2BAA2BD,G,aAE3C,M,SAAM,IAAIn5D,MAAM,8B,yBAIpBkB,KAAKizD,2BAA6BjzD,KAAK22D,oBACvCa,EAAgBW,wBAA0B,6D,iEACtC,SAAMn4D,KAAKsmD,qB,cAAX,SACAtmD,KAAKo4D,6BAA6BZ,G,aAI1CA,EAAgBa,0BAA4B,SAAOh/B,GAAK,kD,wEAChDr5B,KAAKizD,0BAA4BjzD,KAAK22D,kBACtC,GAAM32D,KAAKsmD,qBADX,M,OACA,S,iBAGJ,SAAMtmD,KAAKs4D,+BAA+Bd,EAAiBH,EAAWh+B,I,cAAtE,S,YAGJm+B,EAAgBe,yBAA2B,SAAOl/B,GAAK,kD,iEACnD,SAAMr5B,KAAKw4D,8BAA8BhB,EAAiBH,EAAWh+B,I,cAArE,S,YAGJm+B,EAAgBiB,SAAW,6D,uEAInB,O,sBAFMroC,EAAM,oBAAoBrN,EAAcxd,GAAE,WAEhD,GAAMvF,KAAKuuB,eAAezwB,IAAIsyB,I,OAEvB,OAFP,SAEO,GAAMpwB,KAAK+1D,2BAA2BxjC,gB,OAA7C,MAAO,CAAP,EAAO,U,OAEP,M,SAAM,IAAI,G,yBAIlBilC,EAAgBkB,oBAAsB,SAAOr/B,GAAK,4FAC9C,SAAAr5B,KAAK24D,qBAAqBt/B,EAAOm+B,EAAiBz0C,G,OAC1D,EAEc,YAAAujC,kBAAd,W,sIAIQ,G,wBAFMS,EAAyE,QAA1D,EAAgC,QAAhC,EAAG/mD,KAAKizD,gCAAwB,eAAEnM,gCAAwB,wBAG3E,MAAM,IAAI,GAAiB,GAAqBzvC,aAGjC,SAAMrX,KAAK+1D,2BAA2B5jC,iBACrD40B,I,OAGJ,OAJM0M,EAAa,SAInB,GAAMzzD,KAAK+1D,2BAA2BxjC,aAAakhC,EAAWluD,K,cAA9D,S,aAEA,M,SAAM,IAAI,G,yBAIV,YAAA6yD,6BAAR,SAAqCZ,GACjC,IAAMz1D,EAAQ/B,KAAK+1D,2BAA2Br5C,WACxC3V,EAAOhF,EAAMud,iBACbmN,EAAS1qB,EAAMwe,wBACf8I,EAAWtnB,EAAMmnB,qBAEvB,IAAKlpB,KAAK0qD,iBAAmB1qD,KAAK0qD,eAAela,mBAC7C,MAAM,IAAI,GAAiB,GAAqBz4B,sBAGpD,IAAMm4B,EAAUlwC,KAAK23D,gBAAgB5wD,EAAMsiB,EAAUoD,EAAQzsB,KAAK0qD,uBAE3Dxa,EAAQyd,MAAMhvD,KAErB64D,EAAgBoB,+BAA+B,CAC3CC,SAAU3oB,EAAQyd,MAClBmL,aAAc5oB,EAAQznB,WAE9B,EAEc,YAAA6vC,+BAAd,SACId,EACAH,EACAh+B,G,wJAEMlV,EAAkBnkB,KAAK+4D,2BAA2B1/B,EAAM2/B,iB,iBAG1D,O,sBAAA,GAAMh5D,KAAK+1D,2BAA2Bne,sBAAsBzzB,I,cAA5D,S,aAIA,M,SAFAqzC,EAAgByB,QAEV,IAAIn6D,MAAM,kC,OAuCpB,GApCIiD,EAAQ/B,KAAK+1D,2BAA2Br5C,WAE5BqsB,EACZhnC,EAAMud,iBAAgB,uBACtB+J,EAAWtnB,EAAMmnB,qBACfgwC,EAA2E,QAAlD,EAAG7vC,EAASzW,aAAa,GAAGoV,8BAAsB,eAAEziB,GAC7E4zD,EAAmB9vC,EAASzW,aAAa,GAAGwmD,yBAC5CC,EAAiBF,aAAgB,EAAhBA,EAAkBz5C,MAAK,SAAC,GAAW,OAAP,OAAcw5C,CAAP,IACpDI,EAAoBH,aAAgB,EAAhBA,EAAkBn2D,QACxC,SAAConC,GAAW,OAAAA,EAAO7kC,KAAO2zD,CAAd,IAEVK,EAAuDF,EACvD,CACI,CACI10C,MAAO00C,EAAe5qB,YACtB9Z,OAAQ,GAAG0kC,EAAelqB,KAAK0oB,QAAQ9uB,GACvC7oC,OAAQm5D,EAAeG,sBACvBC,WAAYJ,EAAe9zD,KAGnC,GAEF+zD,IACA,oBACOA,EAAkBt2D,QAAO,SAAConC,GAAW,OAAAA,EAAOiF,aAAP,IACrCiqB,EAAkBt2D,QAAO,SAAConC,GAAW,OAACA,EAAOiF,aAAR,KAC1C17B,SAAQ,SAACy2B,GACP,OAAAmvB,EAAgBvqD,KAAK,CACjB2V,MAAOylB,EAAOqE,YACd9Z,OAAQ,GAAGyV,EAAO+E,KAAK0oB,QAAQ9uB,GAC/B7oC,OAAQkqC,EAAOovB,sBACfC,WAAYrvB,EAAO7kC,IAJvB,MASe4zD,aAjXDt5D,OAkXlB,MAAM,IAAIf,MAAM,mCAGpB,GAAgC,IAA5Bq6D,EAAiB/4D,OAYjB,OAXAo3D,EAAgBkC,iCACZ7D,gBAAgB8D,uCAChB,GACA,CACIh7D,KAAM,UACNgmB,MAAO0yC,EACP1iC,OAAQ,GAAGtL,EAASC,WAAWuuC,QAAQ9uB,IAE3C,IAGJ,IAGE6wB,EAAoBT,EAAiBz5C,MAAK,SAAC0qB,GAAW,OAAAA,EAAOiF,aAAP,IAEtDwqB,EAAWD,EAAoBA,EAAkBr0D,GAAK4zD,EAAiB,GAAG5zD,GAC1Eu0D,EAAmBT,EAAiBA,EAAe9zD,GAAKs0D,E,iBAG1D,O,sBAAA,GAAM75D,KAAK+5D,sBAAsBD,I,cAAjC,S,aAEA,M,SAAM,IAAIh7D,MAAM,kC,cAGpBiD,EAAQ/B,KAAK+1D,2BAA2Br5C,WACxC2M,EAAWtnB,EAAMmnB,qBAEjBsuC,EAAgBkC,iCAAiC,CAC7CM,mBAAoBT,EACpBV,SAAU,CACNl6D,KAAM,QACNgmB,MAAO0yC,EACP1iC,OAAQ,GAAGtL,EAASC,WAAWuuC,QAAQ9uB,IAE3C+vB,aAAc94D,KAAKi6D,qBAAqB5wC,EAAU0f,K,YAI5C,YAAAyvB,8BAAd,SACIhB,EACAH,EACAh+B,G,kIAGkCwgC,EAC9BxgC,EAAK,0B,iBAGL,O,sBAAA,GAAMr5B,KAAK+5D,sBAAsBF,I,cAAjC,S,aAIA,M,SAFArC,EAAgByB,QAEV,IAAIn6D,MAAM,4C,cAGdiD,EAAQ/B,KAAK+1D,2BAA2Br5C,WAE9BqsB,EACZhnC,EAAMud,iBAAgB,uBACpB+J,EAAWtnB,EAAMmnB,qBAEvBsuC,EAAgB0C,gCAAgC,CAC5CrB,SAAU,CACNl6D,KAAM,QACNgmB,MAAO0yC,EACP1iC,OAAQ,GAAGtL,EAASC,WAAWuuC,QAAQ9uB,IAE3C+vB,aAAc94D,KAAKi6D,qBAAqB5wC,EAAU0f,K,YAIlD,YAAAkxB,qBAAR,SACI5wC,EACA0f,GAEA,IAAMtgB,EAA2C,CAC7C,CACI9D,MAAO3kB,KAAKm2D,eACZxhC,OAAQ,GAAGtL,EAASwiB,SAASgsB,QAAQ9uB,KAe7C,OAXA1f,EAAS2iB,MAAMr4B,SAAQ,SAACmkD,GACpB,OAAArvC,EAAUzZ,KAAK,CACX2V,MAAOmzC,EAAIp5D,KACXi2B,OAAQ,GAAGmjC,EAAInjC,OAAOkjC,QAAQ9uB,IAFlC,IAKJtgB,EAAUzZ,KAAK,CACX2V,MAAO3kB,KAAKq2D,eACZ1hC,OAAQ,GAAGtL,EAASkiB,kBAAkBssB,QAAQ9uB,KAG3CtgB,CACX,EAEc,YAAAsxC,sBAAd,SAAoCF,G,+FAChC,MAAO,CAAP,EAAO75D,KAAK+1D,2BAA2B7hB,qBAAqB2lB,G,QAGlD,YAAA7B,oBAAd,SACI1zB,EACAjL,G,qGASA,OAPMn6B,EAAO,CACT,iBAAiBm6B,EAAM8gC,cACvB,sBAAsB71B,EAAYkM,mBAAmBuS,WACrD,eAAeze,EAAYkM,mBAAmB6mB,UAC9C,cAAcznC,OAAOkR,SAASpI,UAChC/4B,KAAK,KAEA,CAAP,EAAOK,KAAKuuB,eAAe0D,MA/ePmoC,EAgfG91B,EAAYkM,mBAAmB6pB,YA/evDD,EAAc,sDAgfT,CACI1pC,aAAa,EACbvxB,QAAS,CACL+wB,OAAQ,mBACR,eAAgB,oCAChB,eAAgB,MAEpBhxB,KAAI,KAxfO,IAACk7D,C,QA6fV,YAAAzB,qBAAd,SACIt/B,EACAm+B,EACAz0C,G,iKAEM,EAA6CsW,EAAMxrB,QAAjDD,EAAK,QAAE0sD,EAAc,iBAAEtB,EAAe,kBACxCj3D,EAAQ/B,KAAK+1D,2BAA2Br5C,WACxC3V,EAAOhF,EAAMud,iBACbo3C,EAAmB3vD,EAAK0hB,UAAUC,cAActoB,OAAS,GAI3B,QAAhC,EAAA2iB,EAAcytB,0BAAkB,eAAErhC,WAAYymD,GAAoBgB,UAAlE,MACkB,GAAM52D,KAAKu6D,2B,OAA7BjrC,EAAkB,S,iBAGhBzhB,EAAmB,CACrBtG,SAAUwb,EAAcxd,GACxB++B,YAAa,CACThV,gBAAe,EACf8W,iBAAkB,CACdo0B,gBAAiB,CACbC,aAAc7sD,EAAM02B,YACpBo2B,eAAgB9sD,EAAMmV,cACtB43C,eAAgB/sD,EAAMgtD,0BAMhCC,EAA4B76D,KAAK+4D,2BAA2BuB,GAC5DQ,EAA6B96D,KAAK+4D,2BAA2BC,GAC7D+B,EAAe/B,aAAe,EAAfA,EAAiB+B,aAChCh/C,GAAQi9C,aAAe,EAAfA,EAAiBgC,cAAe,G,iBAG1C,O,uBAAA,GAAMh7D,KAAK+1D,2BAA2Bpe,sBAAqB,gCACpDkjB,GAAyB,CAC5BrpC,MAAOupC,EACPh/C,MAAK,M,cAHT,SAMI26C,EACA,GAAM12D,KAAK+1D,2BAA2Bne,sBAClCkjB,IAFJ,M,OACA,S,iBAKJ,SAAM96D,KAAK+1D,2BAA2B5wB,YAAY,CAC9C/b,gBAAgB,K,OAGpB,OAJA,SAIA,GAAMppB,KAAK+1D,2BAA2BpvB,cAAc94B,I,OAGpD,OAHA,SACA2pD,EAAgByD,gBAAgBpF,gBAAgBqF,gBAEzC,CAAP,EAAOl7D,KAAKk2D,wB,OAGZ,M,SADAsB,EAAgByD,gBAAgBpF,gBAAgBsF,gBAC1C,IAAIr8D,MAAM,2B,0BAIhB,YAAAi6D,2BAAR,SACIqC,GAEA,MAAO,CACH9/C,WAAW8/C,aAAO,EAAPA,EAASC,YAAa,GACjC9/C,UAAU6/C,aAAO,EAAPA,EAASE,aAAc,GACjC3/C,MAAMy/C,aAAO,EAAPA,EAASG,WAAY,GAC3B//C,QAAS,GACTC,UAAW2/C,aAAO,EAAPA,EAASI,eAAgBJ,EAAQI,aAAa,IAAO,GAChE9/C,UAAW0/C,aAAO,EAAPA,EAASI,eAAgBJ,EAAQI,aAAa,IAAO,GAChE1/C,YAAYs/C,aAAO,EAAPA,EAASt/C,aAAc,GACnCD,aAAau/C,aAAO,EAAPA,EAASv/C,cAAe,GACrCE,OAAOq/C,aAAO,EAAPA,EAASJ,cAAe,GAC/Bp/C,iBAAiBw/C,aAAO,EAAPA,EAASK,qBAAsB,GAChDj0B,qBAAqB4zB,aAAO,EAAPA,EAASK,qBAAsB,GACpDz/C,aAAc,GAEtB,EAEc,YAAAu+C,wBAAd,W,sHAE+B,O,sBAAA,GAAMv6D,KAAKi2D,cAAcvB,2B,OAEhD,MAAO,CAAP,EAFuB,SAAkD,Y,sDAQnE,YAAAmC,wBAAd,W,8HAEI,SAAM72D,KAAK+1D,2BAA2B9mC,kBAAkB2mC,GAAoBgB,Y,OAK5E,OALA,SAEM70D,EAAQ/B,KAAK+1D,2BAA2Br5C,YACxCg/C,EAAyB35D,EAAM4jB,iBAAiBiwC,GAAoBgB,aAIrE8E,EAAuBzb,aACvByb,EAAuBlrB,oBAK5BxwC,KAAKi2D,cAAc5gB,WAAWqmB,EAAuBzb,a,KAHjD,I,QAKZ,EA7lBA,G,YCfA,GAAewS,IAb6E,SACxFG,GAEQ,IAAAjyC,EAAYiyC,EAA0Bl2C,WAAU,QAExD,OAAO,IAAI,IACP,IAAAm3C,qBAAoB,CAAEjzC,KAAMD,MAC5BiyC,EACA,IAAI,GACJ,IAAI,GAAa,IAAI,IAAsB,KAAAmB,mBAAmBnkC,SAEtE,GAEgE,CAAC,CAAErqB,GAAI,cCzBjE,GAA+BhH,QAAQ,gB,GCM7C,YACI,WAAYC,GAAZ,MACI,YAAMA,GAAW,qBAAmB,K,OAEpC,EAAKE,KAAO,sBACZ,EAAKC,KAAO,kB,CAChB,CACJ,OAPiD,oBAOjD,EAPA,CAAiD,GC4CjD,IAAYg9D,GA+DAC,GAMAC,IArEZ,SAAYF,GACR,6BACA,6BACA,oCACH,CAJD,CAAYA,KAAAA,GAAiB,KA+D7B,SAAYC,GACR,gBACA,kBACA,eACH,CAJD,CAAYA,KAAAA,GAAe,KAM3B,SAAYC,GACR,cACA,aACH,CAHD,CAAYA,KAAAA,GAAgB,KCnG5B,kBACI,WACYjJ,EACAkJ,EACDC,QAAA,IAAAA,IAAAA,EAAA,QAFC,KAAAnJ,0BAAAA,EACA,KAAAkJ,iBAAAA,EACD,KAAAC,eAAAA,CACR,CA8JP,OA5JU,YAAA1mB,WAAN,SACI9yC,G,oJAKA,GAHQoY,EAAgCpY,EAAO,KAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SACvCmiD,GAAF,EAAqC/pC,GAAQ,CAAC,GAArB,wBAAEyjB,EAAK,SAEjC72B,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAKkT,EACD,MAAM,IAAI,GACN,iFAMR,IAFqByK,QAAQs/B,GAGzB,MAAM,IAAI,GAAoB,oDAGlC,KACKA,aAAuB,EAAvBA,EAAyBsX,qBAC4B,iBAA/CtX,EAAwBsX,mBAE/B,MAAM,IAAI,GACN,+FASR,OALMj6D,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvCqG,EAAmChhB,EAAM6jB,wBAAwBre,GAC/DipC,EAA+BztB,EAAa,mBAAxB0J,EAAW1J,EAAa,OAC5Ck5C,GAAF,EAAsCzrB,GAAsB,CAAC,GAA7C,eAAE0rB,EAAe,kBAEvC,GAAMl8D,KAAK87D,iBAAiBK,eACxBF,EACAxvC,EAAOwxB,SACPie,EACA,cACAxX,EAAwBsX,qB,cAL5B,SAQAh8D,KAAKmvD,aAAa1nD,EAAasb,EAAeqb,G,YAGlD,YAAAod,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAuwB,aAAR,SACI1nD,EACAsb,EACAqb,G,MAEyE,mBAA/B,QAAtC,EAAOp+B,KAAK+7D,eAAeK,mBAAW,eAAEC,4BAI5Cr8D,KAAKs8D,mBAAmB70D,EAAasb,EAAeqb,GACpDp+B,KAAK+7D,eAAeK,YAAYC,2BACpC,EAEQ,YAAAC,mBAAR,SACI70D,EACAsb,EACAqb,GAEA,IAAMlB,EAAYtF,SAASsE,eAAez0B,GAE1C,GAAKy1B,EAAL,CAIA,IAAMq/B,EAAsB3kC,SAASW,cAAc,OAC7CikC,EAAmB5kC,SAASW,cAAc,UAEhDgkC,EAAoBlgC,aAAa,KAAM,iCACvCkgC,EAAoBlgC,aAAa,QAAS,uBAC1CkgC,EAAoBlgC,aAAa,QAAS,gBAC1CkgC,EAAoBlgC,aAAa,WAAY,iCAE7CmgC,EAAiBngC,aAAa,OAAQr8B,KAAKy8D,kBAAkB15C,EAAeqb,IAC5Eo+B,EAAiBngC,aAAa,QAAS,gCAEvCkgC,EAAoBG,OAAOF,GAC3Bt/B,EAAUy/B,UAAY,GACtBz/B,EAAUw/B,OAAOH,E,CACrB,EAEQ,YAAAE,kBAAR,SACI15C,EACAqb,GAEQ,IAAAoS,EAA+BztB,EAAa,mBAAxB0J,EAAW1J,EAAa,OAC9C,EAAsCytB,GAAsB,CAAC,EAA3DyrB,EAAc,iBAAEC,EAAe,kBAEjCU,EAAY58D,KAAK87D,iBAAiBe,eAAepwC,EAAOwxB,SAAUie,GAClEY,EAAe98D,KAAK+8D,gBAAgB3+B,aAAK,EAALA,EAAOb,MAC3Cy/B,EAAqBh9D,KAAKi9D,sBAAsB7+B,aAAK,EAALA,EAAOqlB,MAAOqZ,GAEpE,OAAO,KAAAI,cAAa,CAChB9sC,IAAK,WAAWwsC,EAAS,sBACzBz2C,MAAO,CACHg3C,gBAAiBlB,EACjBmB,QAAS,MACTn9B,OAAQ68B,EACRO,cAAeL,IAG3B,EAEQ,YAAAD,gBAAR,SAAwBO,GACpB,GAAKA,EAIL,OAAQA,GACJ,KAAK1B,GAAgB2B,MACjB,OAAO,GAEX,KAAK3B,GAAgB4B,MACjB,OAAO,GAEX,KAAK5B,GAAgB6B,OACrB,QACI,OAAO,GAEnB,EAEQ,YAAAR,sBAAR,SACIS,EACAZ,GAEA,GAAKY,EAIL,OAAQA,GACJ,KAAK7B,GAAiB8B,KAClB,OAAOb,EAAetzC,KAAKoe,MAAMk1B,EAAe,QAAKr5D,EAEzD,KAAKo4D,GAAiB+B,KACtB,QACI,OAAO,EAEnB,EACJ,EAnKA,G,YCLA,kBACI,WACY5+B,EACD+8B,QAAA,IAAAA,IAAAA,EAAA,QADC,KAAA/8B,aAAAA,EACD,KAAA+8B,eAAAA,CACR,CA8FP,OA5FU,YAAAI,eAAN,SACIF,EACAhe,EACA4f,EACAlvC,EACAqtC,G,sHAEA,GAAIh8D,KAAK+7D,eAAe+B,aACpB,MAAO,CAAP,EAAO99D,KAAK+7D,eAAe+B,cAG/B,IAAK7B,EACD,MAAM,IAAI,GACN,mFAIR,SAAMj8D,KAAKg/B,aAAaF,WACpB,KAAK9+B,KAAK68D,eAAe5e,EAAU4f,GAAoB,0BACvD79D,KAAK+9D,iBAAiB,eAAgB9B,EAAgBttC,EAAQqtC,K,OAElE,OAJA,SAIA,GAAMh8D,KAAKg/B,aAAaF,WACpB,KAAK9+B,KAAK68D,eAAe5e,EAAU4f,GAAoB,YACvD79D,KAAK+9D,iBAAiB,aAAc9B,K,OAIxC,GANA,UAMKj8D,KAAK+7D,eAAe+B,aACrB,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO99D,KAAK+7D,eAAe+B,c,QAGzB,YAAAE,iBAAN,SACI/B,EACAhe,EACA4f,G,4HASA,OAPMt7D,EAA6B,CAC/B47C,OAAO,EACP7f,WAAY,CACR/4B,GAAI,kBAIZ,GAAMvF,KAAKg/B,aAAaF,WACpB,KAAK9+B,KAAK68D,eAAe5e,EAAU4f,GAAoB,YACvDt7D,I,OAGJ,GALA,UAKKvC,KAAK+7D,eAAekC,KACrB,MAAM,IAAI,GAGd,MAAO,CAAP,EAAOj+D,KAAK+7D,eAAekC,KAAKhC,I,QAGpC,YAAAY,aAAA,SAAa5e,EAAmB4f,GAC5B,IAAK5f,EACD,MAAO,mBAGX,GAAI4f,EACA,OAAQA,EAAoBK,eACxB,KAAKvC,GAAkBwC,YACnB,MAAO,2BAEX,KAAKxC,GAAkByC,gBACnB,MAAO,WAAWP,EAAoBQ,gBAIlD,MAAO,0BACX,EAEQ,YAAAN,iBAAR,SACIx4D,EACA02D,EACAttC,EACAqtC,GAEA,MAAO,CACH7d,OAAO,EACP7f,YAAY,8BACR/4B,GAAE,EACF,uBAAwB02D,GACpBttC,GAAU,CAAE,wBAAyBA,IACrCqtC,GAAsB,CAAE,4BAA6BA,IAGrE,EACJ,EAlGA,G,YCIA,GAAevJ,IATqE,SAChFG,GAEA,OAAO,IAAI,GACPA,EACA,IAAI,IAAiB,KAAAmB,oBAE7B,GAE4D,CAAC,CAAExuD,GAAI,UCEnE,kBACI,WACYqtD,EACA0L,EACAC,GAFA,KAAA3L,0BAAAA,EACA,KAAA0L,WAAAA,EACA,KAAAC,aAAAA,CACT,CAsLP,OApLU,YAAAlpB,WAAN,SAAiB9yC,G,2JAGb,GAFQkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAGrC,MAAM,IAAI,GACN,qFAIR,IAAKkF,EACD,MAAM,IAAI,GACN,wFAIR,SAAMzH,KAAK4yD,0BAA0B3jC,kBAAkB1nB,I,OAMvD,GANA,SAEMxF,EAAQ/B,KAAK4yD,0BAA0Bl2C,WAEvC,EAA8C3a,EAAM6jB,wBAAwBre,GAA1E04C,EAAW,cAAEzP,EAAkB,qBAAE/jB,EAAM,UAE1CwzB,IAAgBzP,EACjB,MAAM,IAAI,GAAiB,GAAqBz4B,sBAKtB,OAF9B/X,KAAKu+D,aAAalpB,WAAW4K,GAEC,GAAMjgD,KAAKu+D,aAAajJ,4B,OAOzB,OAPvBkJ,EAAwB,SAExB,EAGFz8D,EAAMud,iBAFMhf,EAAI,gBAChB0zB,EAAU,aAGe,GAAMh0B,KAAKu+D,aAAa/I,mBAAmB/oC,EAAOwxB,W,OAgB/E,OAhBMwgB,EAAuB,SAEvBC,EAAcF,EAAsBG,kBAAkB,CACxDC,eAAgB,CACZ/iB,aAAcv7C,EACdurC,SAAU6nB,OAAO1/B,IAErB6qC,SAAU,CACN1sD,SAAU,CACN2sD,iBAAiB,MAK7B9+D,KAAK++D,mBAAmBt3D,GAExB,GAAMg3D,EAAqBO,KAAKN,I,cAAhC,SAEAD,EAAqBhrC,GAAG,mBAAmB,SAAO5lB,GAAO,kD,iEACrD,SAAM7N,KAAKi/D,eAAeT,EAAuB3wD,I,cAAjD,S,0BAIR,YAAA2tC,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEc,YAAAqgC,eAAd,SACIT,EACA3wD,G,0GAEA,MAAO,CAAP,EAAOkhB,QAAQC,IAAI,CACfwvC,EAAsBU,SAASrxD,GAC/B7N,KAAKu+D,aAAa7J,4BACnBxlC,MAAK,SAAC,G,IAAC/sB,EAAO,KAAE6/C,EAAU,KACnBjgD,EAAQ,EAAK6wD,0BAA0Bl2C,WAEvCvK,EAAWpQ,EAAM4b,qBACjB1L,EAAUlQ,EAAMoa,oBAGlB,EAEAha,EAAO,gBAFPgiB,OAAe,IAAG,IAAKg7C,sBAAsBhtD,GAAS,EACtD,EACAhQ,EAAO,eADPqC,OAAc,IAAG,IAAK26D,sBAAsBltD,GAAQ,EAGxD,OAAO,EAAKk1C,UAAS,gCAEVhlD,GAAO,CACVgiB,gBAAe,EACf3f,eAAc,IAElBw9C,EAER,I,QAGI,YAAAmF,SAAR,SACI7iB,EACAiwB,GAEQ,IAAA6K,EAAwE96B,EAAW,SAAzE9/B,EAA8D8/B,EAAW,eAAzDngB,EAA8CmgB,EAAW,gBAA/B+6B,EAAoB/6B,EAAW,QACnFg7B,EAAcF,EAAQ,UACtBpd,EAAeuS,EAAa,WAEpC,OAAOv0D,KAAKs+D,WAAWnX,SAAS,gBAAiB,CAC7CC,aAAc9iB,EAAY3lC,KAC1BmsB,MAAOwZ,EAAYxZ,MACnBrR,SAAU,wBACVzX,OAAQ,wBACRqlD,YAAarF,EACbud,iBAAkB7qD,KAAKC,UAAU,CAC7BhW,KAAM0gE,EAAgBj8B,SACtB0J,OAAQuyB,EAAgBG,UAE5BlY,gBAAiB5yC,KAAKC,UAAU3U,KAAKy/D,WAAWH,EAAW96D,IAC3D+iD,iBAAkB7yC,KAAKC,UAAU3U,KAAKy/D,WAAWH,EAAWn7C,KAEpE,EAEQ,YAAAg7C,sBAAR,SAA8B9jD,GAC1B,OAAKA,EAIE,CACHC,UAAWD,EAAQC,UACnBC,SAAUF,EAAQE,SAClBy/C,YAAa3/C,EAAQU,MACrB2jD,cAAerkD,EAAQI,SACvBkkD,gBAAiBtkD,EAAQK,SACzB6/C,SAAUlgD,EAAQM,KAClB+P,OAAQrQ,EAAQmsB,oBAChB3rB,YAAaR,EAAQQ,YACrBC,WAAYT,EAAQS,YAZb,CAAC,CAchB,EAEQ,YAAA2jD,WAAR,SAAmBjuC,EAAenW,GAC9B,YAD8B,IAAAA,IAAAA,EAAA,IACvB,CACHmW,MAAK,EACLuyB,WAAY1oC,EAAQC,UACpB0oC,UAAW3oC,EAAQE,SACnB0oC,aAAc5oC,EAAQ2/C,YACtB9W,eAAgB7oC,EAAQqkD,cACxBvb,eAAgB9oC,EAAQskD,gBACxBhkD,KAAMN,EAAQkgD,SACdx5D,MAAOsZ,EAAQqQ,OACf04B,aAAc/oC,EAAQQ,YACtBwoC,YAAahpC,EAAQS,WAE7B,EAEQ,YAAAijD,mBAAR,SAA2Bt3D,GACvB,IAAMy1B,EAAYtF,SAASiG,cAAc,IAAIp2B,GAE7C,IAAKy1B,EACD,MAAM,IAAIp+B,MAAM,wCAGpB,OAAOkB,KAAK4/D,yBAAyB1iC,EACzC,EAEQ,YAAA0iC,yBAAR,SAAiC1iC,GAC7B,IAWM2iC,EAAqBjoC,SAASW,cAAc,OAUlD,OARAsnC,EAAmBzhC,MAAM0hC,QAAU,OACnCD,EAAmBzhC,MAAM2hC,cAAgB,SACzCF,EAAmBzhC,MAAM4hC,WAAa,WAEtCH,EAAmBlD,UAfI,kdAiBvBz/B,EAAUZ,YAAYujC,GAEfA,CACX,EACJ,EA3LA,G,YCQA,GAAepN,IAXX,SAACG,GACD,IAAMqN,EAA2DrwC,OAC3D2uC,EAAe,IAAI,GAAa,IAAI,IAAsB,KAAAxK,mBAAmBkM,IAEnF,OAAO,IAAI,GACPrN,GACA,IAAAsN,oBACA3B,EAER,GAE6E,CACzE,CAAEh5D,GAAI,2BC1BK,SAAS,GACpBu+C,GAEQ,IAAAt/C,EAAuEs/C,EAAO,eAA9DtyB,EAAuDsyB,EAAO,MAAvDxoC,EAAgDwoC,EAAO,UAA5CvoC,EAAqCuoC,EAAO,SAAlC/nC,EAA2B+nC,EAAO,MAA3B3/B,EAAoB2/B,EAAO,gBAEhFzoC,EAAU7W,GAAkB2f,EAElC,MAAO,CACHqN,MAAK,EACLuyB,WAAYzoC,EACZ0oC,UAAWzoC,EACX0oC,aAAcloC,EACdmoC,eAAgB7oC,aAAO,EAAPA,EAAS8nC,MACzBgB,eAAgB9oC,aAAO,EAAPA,EAAS+nC,MACzBznC,KAAMN,aAAO,EAAPA,EAASM,KACf5Z,MAAOsZ,aAAO,EAAPA,EAAStZ,MAChBqiD,aAAc/oC,aAAO,EAAPA,EAASQ,YACvBwoC,YAAahpC,aAAO,EAAPA,EAASS,WAE9B,CCnBe,SAAS,GACpBgoC,GAEQ,IAAAtyB,EAAkCsyB,EAAO,MAAlC/nC,EAA2B+nC,EAAO,MAA3B3/B,EAAoB2/B,EAAO,gBAG3C,IADgB3/B,aAAe,EAAfA,EAAiB++B,gBAAiB,IACZjiD,MAAM,KAElD,MAAO,CACHuwB,MAAK,EACLuyB,WAJY,MAIa,GACzBC,UALsB,MAKC,GACvBC,aAAcloC,EACdmoC,eAAgB//B,aAAe,EAAfA,EAAiBg/B,MACjCgB,eAAgBhgC,aAAe,EAAfA,EAAiBi/B,MACjCznC,KAAMwI,aAAe,EAAfA,EAAiBxI,KACvB5Z,MAAOoiB,aAAe,EAAfA,EAAiBpiB,MACxBqiD,aAAcjgC,aAAe,EAAfA,EAAiBtI,YAC/BwoC,YAAalgC,aAAe,EAAfA,EAAiBrI,WAEtC,CCMA,IAAMqkD,GAAsB,SAACt/B,GACjB,IAEau/B,EAFb9c,EAAkBziB,EAAM,MAAjBZ,EAAWY,EAAM,OAUhC,MAAO,CACHw/B,iBATiBD,EASY9c,GAAS,GARlC8c,IAAMzgB,GAA6B2gB,MAC5B,UAGJ,WAKPC,mBAAoB,UACpBC,eAAgB,YAChBC,gBAAiB,sDACbnd,IAAU3D,GAA6B2gB,MACjC3gB,GAA6B+gB,KAC7B/gB,GAA6B2gB,OAAK,SAE5CK,iBAAkB,YAClBC,aAAc,MACdC,OAAQ,UACRC,WAAY,YACZC,WAAc9gC,GCtDc,IDsDuB,KACnD+gC,SAAU,QACV/gC,OAAQ,OACRE,MAAO,OACPH,OAAQsjB,IAAU3D,GAA6B2gB,MAAQ,kBAAoB,OAEnF,EAUA,cAGI,WACY1N,EACA0L,EACAC,GAFA,KAAA3L,0BAAAA,EACA,KAAA0L,WAAAA,EACA,KAAAC,aAAAA,EALJ,KAAA/d,QAAU,EAAA9d,IAMf,CA2KP,OAzKU,YAAA2S,WAAN,SACI9yC,G,kJAIA,GAFQ0+D,EAA0C1+D,EAAO,eAAjCkF,EAA0BlF,EAAO,cAApBgF,EAAahF,EAAO,UAGrD,MAAM,IAAI,GACN,qFAWR,GAPMR,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvCqG,EAAgBhhB,EAAM6jB,wBAAwBre,GAC5C04C,EAAmDl9B,EAAa,YAAnDytB,EAAsCztB,EAAa,mBAChEm+C,EAAwB1wB,EAAkB,oBAC1C2wB,GAAqBD,GAAuB,CAAC,GAAC,iBAChDrgC,GAASogC,aAAc,EAAdA,EAAgB7iC,QAAS+iC,GAEnClhB,IAAgBzP,EACjB,MAAM,IAAI,GAAiB,GAAqBz4B,sBAGpD,IAAKtQ,EACD,MAAM,IAAI,GACN,wFAIRzH,KAAKwgD,SAAUygB,aAAc,EAAdA,EAAgBzgB,UAAWxgD,KAAKohE,YAC/CphE,KAAKu+D,aAAalpB,WAAW4K,G,iBAGM,O,sBAAA,GAAMjgD,KAAKu+D,aAAa7I,2B,cAAjDlU,EAAyB,SAE/BxhD,KAAKqhE,kBACD7f,EACA/5C,EACAw5D,aAAc,EAAdA,EAAgBvc,wBAChB7jB,G,+BAGJ7gC,KAAKshE,+BAA+B,EAAO75D,G,+BAI7C,YAAA+zC,aAAN,W,sHACI,SAAMx7C,KAAKu+D,aAAa/iB,gB,OAExB,OAFA,SAEO,CAAP,EAAOzsB,QAAQ6P,W,QAGX,YAAAwiC,YAAR,SAAoB1hE,GAChB,MAAM,IAAIZ,MAAMY,EAAMlB,QAC1B,EAEc,YAAA2zB,iBAAd,SACIuyB,G,+HAEiE,mBAAtDA,aAAuB,EAAvBA,EAAyBoC,0BAAhC,YAGA,KAFMC,EAAkBrC,aAAuB,EAAvBA,EAAyBoC,4BAG7C,MAAM,IAAI,GAAiB,GAAqBzvC,a,iBAI7B,O,sBAAA,GAAMrX,KAAK4yD,0BAA0BzgC,iBACpD40B,I,OAGJ,MAAO,CAAP,EAJmB,U,OAMnB,M,SAAM,IAAI,G,OAIlB,MAAO,CAAP,OAAOtjD,G,QAGH,YAAA69D,+BAAR,SACI5hE,EACA+H,GAIA,OAFAzH,KAAKuhE,qBAAqB95D,GAEnBzH,KAAKwgD,QAAQ9gD,EACxB,EAEQ,YAAA6hE,qBAAR,SAA6B95D,GACzB,IAAMwiD,EAAkBryB,SAASsE,eAAez0B,GAE5CwiD,GACAA,EAAgBrC,QAExB,EAEQ,YAAAyZ,kBAAR,SACI7f,EACA/5C,EACAi9C,EACA8c,GAJJ,WAMUC,EAAc7pC,SAASsE,eAAez0B,GACpC67C,GAAUke,GAAgB,CAAC,GAAC,MAEpC,IAAKC,EACD,MAAM,IAAI,GACN,8DAIRA,EAAYplC,aAAa,aAAc,SACvC1+B,OAAOkW,OAAO4tD,EAAYrjC,MAAO+hC,GAAoBqB,GAAgB,CAAC,IAGtEC,EAAY/mC,iBAAiB,SAAS,6D,8EAGf,OAFnB+mC,EAAYplC,aAAa,WAAY,QAElB,GAAMr8B,KAAKmyB,iBAAiBuyB,I,cAAzCgd,EAAa,SAEflgB,EAAuB0d,UACvB1d,EAAuB0d,UACnB,SACIx/D,EACAyC,GAAiC,kD,iEAQjC,OANAs/D,EAAYE,gBAAgB,YAExBjiE,GACAM,KAAKwgD,QAAQ9gD,GAGjB,GAAMM,KAAK4hE,eAAez/D,EAASu/D,aAAU,EAAVA,EAAYn8D,K,cAA/C,S,4BAMZ+9C,IAAU3D,GAA6B+gB,OACvCe,EAAY/mC,iBAAiB,cAAc,WACvC+mC,EAAYrjC,MAAMiiC,gBA5Jb,SA6JT,IAEAoB,EAAY/mC,iBAAiB,cAAc,WACvC+mC,EAAYrjC,MAAMiiC,gBAAkBF,GAChCqB,GAAgB,CAAC,GACnBnB,eACN,IAER,EAEc,YAAAuB,eAAd,SACIz/D,EACA+kD,G,gIAEuB,SAAMlnD,KAAKu+D,aAAa7J,2B,cAAvC1S,EAAe,SAAiD,WAChEl3B,EAAmB3oB,EAAO,MAAnB2hD,EAAY3hD,EAAO,QAElCnC,KAAKs+D,WAAWnX,SAAS,iBAAiB,eACtCr8B,MAAK,EACLrR,SAAU,iBACV2tC,aAAc,SACdC,YAAarF,EACbhgD,OAAQ,wBACRslD,gBAAiB5yC,KAAKC,UAAU,GAA0BmvC,IAC1DyD,iBAAkB7yC,KAAKC,UAAU,GAA2BmvC,KACxDoD,GAAgB,CAAEM,QAASN,K,YAG3C,EAlLA,G,YEvCA,GAAeuL,IAdX,SAACG,GACD,IAAM3V,EAA2CrtB,OAC3CoP,GAAe,KAAA+0B,mBACfK,EAAwB,IAAI,GAAsBp1B,EAAcie,GAEhEshB,EAAe,IAAI,GAAanK,GAEtC,OAAO,IAAI,GACPxB,GACA,IAAAsN,oBACA3B,EAER,GAEsE,CAAC,CAAEh5D,GAAI,oBC3B7E,kBAOI,WAAYs8D,GACR,IAAKA,EACD,MAAM,IAAI/iE,MAAM,6BAGZ,IAAAiqC,EACJ84B,EAAgB,cADGC,EACnBD,EAAgB,eADmBE,EACnCF,EAAgB,OAD2BG,EAC3CH,EAAgB,mBAD+CI,EAC/DJ,EAAgB,iBAEpB,GAC8B,iBAAnBC,GACW,iBAAXC,GACuB,iBAAvBC,GACqB,iBAArBC,GACkB,iBAAlBl5B,EAEP,MAAM,IAAI,GAAqB,sCAGnC/oC,KAAK0nC,eAAiBw6B,SAASn5B,EAAe,IAC9C/oC,KAAKmiE,gBAAkBL,EACvB9hE,KAAKoiE,QAAUL,EACf/hE,KAAKqiE,oBAAsBL,EAC3BhiE,KAAKsiE,kBAAoBL,CAC7B,CAyCJ,OAvCI,YAAAz1B,OAAA,SAAO7X,GACH,GAAsB,iBAAXA,EACP,MAAM,IAAI,GAAqB,2BAGnC,IAAM4tC,EAAkBviE,KAAKwiE,cAAc7tC,GAErC8tC,EAAoBziE,KAAK0iE,gBAAgBH,GAE/C,OAAO5tC,EAAS,EAAI,IAAI8tC,EAAsBA,CAClD,EAEQ,YAAAD,cAAR,SAAsB7tC,GAClB,IAAMguC,EAAiBn5C,KAAKo5C,IAAIjuC,GAC1B,EAAsC30B,KAAK6iE,SAC7CF,EACA3iE,KAAK0nC,gBACPzmC,MAAM,KAHDmoC,EAAa,KAAE,OAAA05B,OAAa,IAAG,KAAE,EAIlCC,EAAsB35B,EAAc9lC,QACtC,wBACAtD,KAAKqiE,qBAGT,OAAIriE,KAAK0nC,eAAiB,EACfq7B,EAGJ,CAACA,EAAqBD,GAAenjE,KAAKK,KAAKsiE,kBAC1D,EAEQ,YAAAI,gBAAR,SAAwBH,GACpB,MAA8C,SAAvCviE,KAAKmiE,gBAAgB9Y,cACtB,GAAGrpD,KAAKoiE,QAAUG,EAClB,GAAGA,EAAkBviE,KAAKoiE,OACpC,EAEQ,YAAAS,SAAR,SAAiBvkE,EAAe0kE,GAC5B,SAAYx5C,KAAKoe,QAAUtpC,EAAK,IAAI0kE,IAAY,KAAKA,IAAanL,QAAQmL,EAC9E,EACJ,EAvEA,G,eCMA,WAOI,WAAoBC,GAAA,KAAAA,aAAAA,EAChBjjE,KAAKkjE,mBAAqB,IAAI,GAAkBljE,KAAKijE,aAAaE,iBAClEnjE,KAAKojE,gBAAkB,IAAI,GAAkBpjE,KAAKijE,aAAahvC,SACnE,CAWJ,OATI,YAAAovC,mBAAA,SAAmB1uC,GACf,IAAM2uC,EAAetjE,KAAKijE,aAAaE,gBAAgBG,aAEvD,OAAOtjE,KAAKkjE,mBAAmB12B,OAAO7X,EAAS2uC,EACnD,EAEA,YAAAC,gBAAA,SAAgB5uC,GACZ,OAAO30B,KAAKojE,gBAAgB52B,OAAO7X,EACvC,GApBgC,iBADnC,IACoB6uC,E,CAArB,GCFA,IAAYC,GAKAC,GAQAC,GAQA,GAiBA,GAeAC,GA+EAC,GA2CAC,GCrLG,SAASC,GACpBzgD,GAEA,OAAOA,KAAQsgD,EACnB,EDEA,SAAYH,GACR,wBACA,mBACH,CAHD,CAAYA,KAAAA,GAAoB,KAKhC,SAAYC,GACR,kBACA,sBACA,kBACA,YACA,2BACH,CAND,CAAYA,KAAAA,GAAgB,KAQ5B,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAYA,KAAAA,GAAgB,KAQ5B,SAAY9H,GACR,cACA,aACH,CAHD,CAAY,QAAgB,KAiB5B,SAAY7H,GACR,wBACA,gBACA,2CACH,CAJD,CAAY,QAAoB,KAehC,SAAY4P,GACR,cACA,sBACA,oBACA,YACA,kBACA,aACH,CAPD,CAAYA,KAAAA,GAAoB,KA+EhC,SAAYC,GACR,gBACA,gDACA,sCACA,mCACH,CALD,CAAYA,KAAAA,GAAmB,KA2C/B,SAAYC,GACR,0BACA,oCACA,sCACA,eACH,CALD,CAAYA,KAAAA,GAAmB,KEjJ/B,kBAMI,WACYE,EACAjO,GADA,KAAAiO,mBAAAA,EACA,KAAAjO,2BAAAA,EANJ,KAAAkO,eAAgB,CAOrB,CA0XP,OAxXI,YAAAC,gCAAA,SAAgC,G,IAC5B//C,EAAe,kBAEf,GAAKA,EAAL,CAIM,MACFnkB,KAAK+1D,2BAA2Br5C,WAAWiB,sBAAwB,CAAC,EADhE,IAAAnC,QAAAA,OAAO,IAAG,KAAE,EAAE,IAAAO,MAAAA,OAAK,IAAG,KAAE,EAGhC,OAAO/b,KAAKmkE,yBAAyBhgD,EAAiB3I,EAASO,E,CACnE,EAEA,YAAAqoD,+BAAA,SACI/kE,GAEQ,IAAAmF,EAAmBnF,EAASglE,kBAAkBp3B,KAAI,eAE1D,GAAKzoC,EAAL,CAIM,MAIFxE,KAAK+1D,2BAA2Br5C,WAAWP,qBAAuB,CAAC,EAHnE,IAAAX,QAAAA,OAAO,IAAG,KAAE,EACZ,IAAAO,MAAAA,OAAK,IAAG,KAAE,EACVyV,EAAK,QAGT,OAAO,gCACAxxB,KAAKmkE,yBAAyB3/D,EAAgBgX,EAASO,IAAM,CAChEyV,MAAOA,GAASnyB,EAASmyB,O,CAEjC,EAEA,YAAA8yC,0BAAA,SACIjlE,G,MAGI,EAIAA,EAAQ,kBAHuByrB,EAAK,yBAChC,IAAAmiB,KAAqBtuC,EAAI,cAAemuC,EAAM,cAItD,OAAO/d,QAAQ6P,SAAQ,eACnB9T,MAAK,EACLy0C,iBAAkB,CAAE5gE,KAAI,EAAEmuC,OAAM,IAC5B9sC,KAAKikE,eAAiB,CACtBzc,QAA6D,QAAtD,EAAExnD,KAAK+1D,2BAA2Br5C,WAAW2C,iBAAS,eAAE9Z,KAG3E,EAEM,YAAAg/D,gBAAN,W,sIAGI,OAFMxgE,EAAqC,CAAEygE,eAAe,GAEvDxkE,KAAKykE,6BAII,GAAMzkE,KAAK+1D,2BAA2Bje,yBAHzC,CAAP,EAAO/zC,G,OAMX,OAHMhC,EAAQ,SACR2iE,EAAkD,QAA/B,EAAG3iE,EAAMmlB,8BAAsB,eAAE7mB,KAAI,SAACokB,GAAY,OAAAA,EAAQnkB,IAAR,IAEpE,CAAP,mCACOyD,GAAI,CACP4gE,yBAAyB,EACzBC,2BAA2B,eACvBC,qBAAqB,GACjBH,GAAuB,CAAEA,oBAAmB,IAEpDI,uBAAwB9kE,KAAK+kE,0C,QAIrC,YAAAC,mBAAA,WACI,OAAIhlE,KAAK+kE,wCAA0C/kE,KAAKykE,6BAC7C,CACHZ,GAAoBoB,MACpBpB,GAAoBqB,iBACpBrB,GAAoBsB,iBAIrB,CAACtB,GAAoBoB,MAChC,EAEA,YAAAG,oBAAA,WACI,IAAMC,EAAsCrlE,KAAK+kE,uCAgBjD,MAAO,CACHO,kBAhBsBD,EACpB,CACIvB,GAAoByB,WACpBzB,GAAoBoB,iBACpBpB,GAAoBqB,iBAExB,CAACrB,GAAoByB,YAWvBC,sBAV0B,CAAC1B,GAAoByB,YAW/CE,sBAV0BJ,EACxB,CAACvB,GAAoByB,WAAYzB,GAAoBoB,kBACrD,GASFQ,8BARkCL,EAChC,CAACvB,GAAoBqB,iBACrB,GAQV,EAEA,YAAAQ,SAAA,SAASp+D,G,MACCujB,EAGiB,QAHZ,EAAG9qB,KAAK+1D,2BACdr5C,WACAkJ,wBAAqDre,GACrDipC,0BAAkB,eAAE1lB,MAEzB,IAAKA,EACD,MAAM,IAAI,GAAiB,GAAqBhT,qBAGpD,OAAOiX,QAAQ6P,QAAQ9T,EAC3B,EAEA,YAAA86C,iBAAA,WACI,OAAO72C,QAAQ6P,aAAQn7B,EAC3B,EAEA,YAAAoiE,gBAAA,WACU,MAIF7lE,KAAK8lE,iCAET,MAAO,CAAEC,aAL2B,qBAKbhjB,WAJS,mBAIGijB,QAHT,gBAI9B,EAEA,YAAAC,mBAAA,WACI,IAAIpqB,EAGAA,EADA77C,KAAKikE,cACUjkE,KAAKkmE,2BAIL5mD,EAFYtf,KAAK+1D,2BAA2Br5C,WAAU,kBAErCuX,SAAS3zB,KAG7C,IAAMub,EAAc7b,KAAK8lE,iCAAiCK,aAE1D,OAAO,gCACCtqD,GAAe,CAAEA,YAAW,IAAG,CACnCggC,aAAY,EACZuqB,iBAAkB,GAAqBC,UACvCC,WAAY,KAEpB,EAEA,YAAAC,4BAAA,WAGI,IAAMC,EAAoBxmE,KAAK8lE,iCAAiCU,kBAEhE,IAAKA,EACD,MAAM,IAAI,GAAqB,oDAGnC,MAAO,CACHr3D,QAASnP,KAAKgkE,mBACdwC,kBAAiB,EAEzB,EAEA,YAAAC,kBAAA,WAKI,MAAO,CACHC,mBAAoB,CAAC,WAAY,kBACjCC,oBANwB3mE,KAAK2lB,mBAC5BihD,eAAe5jE,OAAO+gE,IACtB1jE,KAAI,SAAC5C,GAAQ,OAAAmmE,GAAqBnmE,EAArB,IAKdopE,wBAAwB,EACxBC,yBAA0B,CACtBt6B,OAAQ,OACRq4B,qBAAqB,GAGjC,EAEA,YAAAxvB,WAAA,SACI1vB,EACAgrC,EACA9U,GAUA,OARA77C,KAAK+mE,oBAAsBphD,EAC3B3lB,KAAKikE,cAAgB7+C,QAAQurC,GAC7B3wD,KAAKgnE,cAAgBnrB,EAEjB77C,KAAKikE,eACLjkE,KAAKkmE,0BAGFn3C,QAAQ6P,SACnB,EAEM,YAAAqoC,4BAAN,SACI9iD,G,yJAEIA,IACAA,EAAgBzlB,KAAOylB,EAAgBzlB,MAAQ,GAC/CylB,EAAgB1I,SAAW0I,EAAgB1I,UAAY,KAGrDyrD,EAAwBlnE,KAAKkkE,gCAAgC,CAC/D//C,gBAAe,KAIf,GAAMnkB,KAAK+1D,2BAA2Bne,sBAAsBsvB,IAD5D,M,OACA,S,iBAMJ,OAHMnlE,EAAQ/B,KAAK+1D,2BAA2Br5C,YAGzC9J,OAFCA,EAAe7Q,EAAM0lB,wBAEV,EAAZ7U,EAAe,KAKdkU,EAAclU,EAAa,GAC3B0N,EAAcve,EAAMwe,wBAErBvgB,KAAKmnE,mBACNnnE,KAAKmnE,iBCrQN,IAAI,GDqQ2C7mD,KAG5C84C,GAA4BtyC,EAAYsyC,0BAA4B,IAAI/4D,IAC1EL,KAAKonE,4BAA4BhtC,KAAKp6B,QAGbI,QACnBinE,GACgC,QAAlC,EAAAvgD,EAAYkB,8BAAsB,eAAEziB,MAAiC,QAA/B,EAAI6zD,EAAyB,UAAE,eAAE7zD,KAEpC,QAAnC,EAACuhB,EAAYkB,8BAAsB,eAAEziB,MAAM6zD,EAAyB,GAApE,MACA,GAAMp5D,KAAKsnE,2BAA2BlO,EAAyB,GAAG7zD,MALtE,OAdA,I,OAmBI,S,iBAGJ,MAAO,CAAP,EAAO,CACHgiE,wBAAyBF,EACzB9N,gBAAiBH,I,yBAKvB,YAAAkO,2BAAN,SAAiCzN,G,+FAC7B,MAAiB,+BAAbA,EACA,IAGG,CAAP,EAAO75D,KAAK+1D,2BAA2B7hB,qBAAqB2lB,G,QAGhE,YAAA2N,cAAA,WACU,MAAyCxnE,KAAK+1D,2BAA2Br5C,WAAvEwM,EAAkB,qBAClB6f,GAAkBzpB,EADgB,oBACC2U,SAAQ,cAKnD,OAJmB,IAAA2T,OAAM1e,IAAqBQ,mBAAoBqf,GAAe8uB,QAC7E9uB,EAIR,EAEU,YAAA+8B,+BAAV,WACI,OAAO,GACH9lE,KAAK2lB,mBAAmB6qB,oBACxB,WAAM,WAAI,GAAqB,+BAAzB,GAEd,EAEU,YAAA7qB,iBAAV,WACI,OAAO,GACH3lB,KAAK+mE,qBACL,WAAM,WAAI,GAAoB,GAAwBrqC,sBAAhD,GAFH,EAIX,EAEU,YAAA+qC,qBAAV,WACI,OAAOznE,KAAKgkE,kBAChB,EAEU,YAAA0D,qBAAV,SAA+Bv4D,GAC3BnP,KAAKgkE,mBAAqB70D,GAAWnP,KAAKynE,sBAC9C,EAEQ,YAAA1C,qCAAR,WACI,QAAS/kE,KAAK8lE,iCAAiC6B,wBACnD,EAEQ,YAAAlD,2BAAR,WACU,IE5VgB19D,EAAa0lB,EF4V7B,EACFzsB,KAAK+1D,2BAA2Br5C,WAD5B4C,EAAc,iBAAEY,EAAc,iBAGtC,YAC6Bzc,KAAzBka,EAJsD,0BE5VpC5W,EFiWGuY,IEjWUmN,EFiWQvM,MEhW1CnZ,MAIDA,EAAK0hB,UAAUC,cAAcjJ,MAAK,SAACksB,GAAa,OAAAA,EAASC,kBAAT,QAIhDnf,IAAU1lB,EAAK0hB,UAAUmsB,cAClB7tC,EAAK0hB,UAAUmsB,YAAYx0C,OAAS,GFyV/C,EAEQ,YAAA+jE,yBAAR,SACI9oD,EACAG,EACAO,GAGI,IAAArd,EASA2c,EAAO,KARPI,EAQAJ,EAAO,SAPPK,EAOAL,EAAO,SANPusD,EAMAvsD,EAAO,SALGM,EAKVN,EAAO,SAJamsB,EAIpBnsB,EAAO,mBAHPQ,EAGAR,EAAO,YAFPS,EAEAT,EAAO,WADP2/C,EACA3/C,EAAO,YACL,EAAwBrb,KAAK6nE,qBAAqBnpE,GAExD,MAAO,CACH4c,UAHY,KAIZC,SAJsB,KAKtBC,QAAO,EACPC,SAAQ,EACRC,UAAaA,EAAQ,IAAIksD,GAAWE,OACpCnsD,KAAI,EACJC,gBAAiB4rB,EACjBA,oBAAmB,EACnB3rB,YAAW,EACXC,WAAU,EACVC,MAAOi/C,GAAej/C,EACtBC,aAAc,GAEtB,EAEQ,YAAA6rD,qBAAR,SAA6Bx7B,GACzB,IAAM07B,EAAY17B,EAASprC,MAAM,KAEjC,OAAyB,IAArB8mE,EAAU3nE,OACH,CAACisC,EAAU,IAMf,CAHW07B,EAAU5zC,MAAM,GAAI,GAAGx0B,KAAK,KAC7BooE,EAAUA,EAAU3nE,OAAS,GAGlD,EAEQ,YAAA8lE,wBAAR,WACI,OAAO,GACHlmE,KAAKgnE,eACL,WACI,WAAI,GACA,wFADJ,GAIZ,EAEQ,YAAAI,4BAAR,SAAoC,G,MAAE7hE,EAAE,KAAE4pC,EAAI,OAG1C,MAAO,CACH5pC,GAAE,EACFof,MALmD,cAMnD8pB,aALuC,QAAxB,EAAGzuC,KAAKmnE,wBAAgB,eAAE9D,mBAAmBl0B,KAK9BA,EAEtC,EACJ,EAnYA,G,YGdA,mBAII,WAAY64B,EAA4C/R,GAAxD,MACI,YAAM,YAAa+R,IAAQ,K,OADyB,EAAA/R,cAAAA,EAGpD,EAAKgS,SAAWD,E,CACpB,CAqIJ,OA7IuD,oBAU7C,YAAA3yB,WAAN,SACI1vB,EACAgrC,EACA9U,G,8HAEA,SAAM,YAAMxG,WAAU,UAAC1vB,EAAkBgrC,EAAc9U,I,OAIvD,GAJA,WAEM94B,EAAgB,YAAM4C,iBAAgB,YAEzBs6B,cAAgBl9B,EAAcytB,mBAC7C,MAAM,IAAI,GAAiB,GAAqBz4B,sBAIrB,OAD/B/X,KAAKi2D,cAAc5gB,WAAWtyB,EAAck9B,aAC5C,EAAAjgD,KAA+B,GAAMA,KAAKi2D,cAAcnB,6B,OAExD,OAFA,EAAKoT,wBAA0B,SAExB,CAAP,EAAOn5C,QAAQ6P,W,QAGb,YAAA+mC,SAAN,SAAep+D,G,gJACG,SAAM,YAAMo+D,SAAQ,UAACp+D,I,OAInC,GAJMujB,EAAQ,SAER,EAAsC,YAAMnF,iBAAgB,WAA1Ds6B,EAAW,cAAEzP,EAAkB,sBAElCyP,IAAgBzP,KAA0D,QAApC,EAACA,EAAmB+uB,wBAAgB,eAAEh8B,KAC7E,MAAM,IAAI,GAAiB,GAAqBxrB,sB,OAIhDowD,EAEA33B,EAAkB,sBADEjN,EACpBiN,EAAkB,qBAElB23B,EACqB,GAAMnoE,KAAKi2D,cAAchB,uBAD9C,M,OAKqB,OAJfE,EAAe,SAEblnB,EAAgBjuC,KAAKioE,SAASvrD,WAAWqN,kBAAiB,YAE7C,GAAM/pB,KAAKooE,8BAC5BjT,EACAlnB,EACAnjB,EACAyY,I,OAGJ,MAAO,CAAP,EAPqB,SAODzY,O,OAGxB,MAAO,CAAP,EAAOA,G,QAGL,YAAA86C,iBAAN,W,4HAEyB,O,KAAA,GAAM5lE,KAAKu6D,2B,OADhC,MAAO,CAAP,GACI,EAAAjrC,gBAAiB,S,YAInB,YAAAg1C,0BAAN,SACIjlE,G,8HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAA7C0E,EAAO,SAIb,IACI6J,EAAQ8G,KAAKs4C,MAAMjpD,EAAK+mB,M,CAC1B,MAAOprB,GACL,MAAM,IAAI,GAAqB,4C,CAQnC,OClGO,SACXkO,GAEA,IAPJ,SAAyCA,GACrC,MAAwB,iBAAVA,GAAgC,OAAVA,GAAkB,oBAAqBA,CAC/E,CAKSy6D,CAAgCz6D,GACjC,MAAM,IAAI,GAAiB,GAAqBkK,oBAExD,CDuFQwwD,CAAsC16D,GAEtC7J,EAAK+mB,MAAQld,EAAM26D,gBAAgB,GAAGz9C,MACtC/mB,EAAKw7D,iBAAiBh8B,IAAM31B,EAAM26D,gBAAgB,GAAGzkB,QAAQvgB,IAEtD,CAAP,EAAOx/B,G,QAGX,YAAA0iE,kBAAA,WACI,OAAO,YAAMA,kBAAiB,UAClC,EAEM,YAAAF,4BAAN,W,kIAUY,OATFvR,EAAyBh1D,KAAK80D,4BAEpB,KAAAE,GAAuBwT,yB,IACnCC,aAAc,YAAM5C,gBAAe,WACnC6C,gBAAiB,YAAMzC,mBAAkB,WACzC0C,iBAAkB,CACd9B,wBAAwB,EACxB+B,qBAAsB,UAEtB,GAAM,YAAMrE,gBAAe,Y,OAGnC,MAAO,CAAP,EAVgB,6CAOR,cAGOsE,oCAAoCC,Y,QAG/C,YAAAhU,0BAAR,WACI,IAAK90D,KAAKkoE,wBACN,MAAM,IAAI,GAAiB,GAAqBnwD,sBAGpD,OAAO/X,KAAKkoE,uBAChB,EAEc,YAAA3N,wBAAd,W,sHAC2B,SAAMv6D,KAAKi2D,cAAcvB,2B,OAEhD,MAAO,CAAP,EAFuB,SAAkD,Y,QAKrE,YAAA0T,8BAAR,SACIjT,EACAxgC,EACA7J,EACAyY,GAaA,OAXqB,IAAI,GACrB4xB,EAAa4T,WAAW,CACpBp0C,OAAM,EACN4O,IAAG,EACHzY,MAAK,EACLk+C,iBAAkB,SAACC,EAAOp6C,GACtBA,GACJ,KAIYiI,OACxB,EACJ,EA7IA,CAAuD,I,eEjBvD,YACI,WAAYt4B,GAAZ,MACI,YACIA,GACI,qGACP,K,OAED,EAAKE,KAAO,2BACZ,EAAKC,KAAO,gC,CAChB,CACJ,OAVsD,oBAUtD,EAVA,CAAsD,GCyDtD,IAAYuqE,IAAZ,SAAYA,GACR,8BACA,8BACA,wCACA,qBACA,iCACA,4CACA,sCACA,0CACA,6BACA,2BACA,kCACA,4CACA,wCACH,CAdD,CAAYA,KAAAA,GAAY,KCjCxB,kBAQI,WACYnT,EACAoT,GADA,KAAApT,2BAAAA,EACA,KAAAoT,2BAAAA,CACT,CAuQP,OArQU,YAAA9zB,WAAN,SACI9yC,G,kJAEA,IAAKA,EAAQgF,WC7CkB9J,ED6CU8E,EAAQgF,UC5C9C5J,OAAOgiB,OAAeupD,IAAch2C,SAASz1B,ID6C5C,MAAM,IAAI,GACN,4DAMR,GAFAuC,KAAK0pD,UAAYnnD,EAAQgF,UAEpBhF,EAAQkF,YACT,MAAM,IAAI,GACN,+DAMR,KAFM2hE,EAAmB7mE,EAAQvC,KAAKqpE,sBAGlC,MAAM,IAAI,GAAqB,4CAG3B3kB,EACJ0kB,EAAgB,wBADavtB,EAC7ButB,EAAgB,aAD2BnZ,EAC3CmZ,EAAgB,YADwCE,EACxDF,EAAgB,WADoD5oB,EACpE4oB,EAAgB,QAEhBrnE,EAAQ/B,KAAK+1D,2BAA2Br5C,W,8CAIxCqG,EAAgBhhB,EAAM6jB,wBAAwB5lB,KAAKqpE,qB,aAE3C,O,SAAA,GAAMrpE,KAAK+1D,2BAA2B9mC,kBAC1CjvB,KAAKqpE,sB,cADTtnE,EAAQ,SAGRghB,EAAgBhhB,EAAM6jB,wBAAwB5lB,KAAKqpE,qB,gBAGvDrpE,KAAKupE,aAA+C,QAAnC,EAAGxmD,EAAcytB,0BAAkB,eAAE21B,cAElDzhB,EAAA,YACA,IAAK7I,EACD,MAAM,IAAI,GACN,yFAOR,OAHA77C,KAAKgnE,cAAgBnrB,EACrB77C,KAAKizD,yBAA2BvO,EAEhC,GAAM1kD,KAAKmpE,2BAA2B9zB,YAClC,WAAM,OAAAtyB,CAAA,GACN/iB,KAAKwpE,+BACH9kB,EACF7I,I,cAJJ,S,aAOA,SAAM77C,KAAK+1D,2BAA2BnjC,uB,OACtC,OADA,SACA,GAAM5yB,KAAKmpE,2BAA2B9zB,YAClC,WAAM,OAAAtyB,CAAA,GACN/iB,KAAKwpE,+B,OAFT,S,wBAMJxpE,KAAKypE,eACkB,QADJ,EACfzpE,KAAKypE,sBAAc,QACnBzpE,KAAKmpE,2BAA2BO,iBAAiBnnE,EAAQkF,YAAa,CAClEwoD,YAAaA,QAAAA,EAAe,UAC5BqZ,WAAYA,QAAAA,EAAc,QAC1B7Z,QAASzvD,KAAK2pE,aAAanpB,K,IC/G5B,IAAwB/iD,C,QDmHnC,YAAA+9C,aAAA,W,MAKI,OAJmB,QAAnB,EAAAx7C,KAAKypE,sBAAc,SAAE7hB,SACrB5nD,KAAKypE,oBAAiBhmE,EACtBzD,KAAK0pD,eAAYjmD,EAEVsrB,QAAQ6P,SACnB,EAEQ,YAAA+qC,aAAR,SACInpB,GADJ,WAGI,OAAO,SAAOnnB,GAAiB,kD,yEAC3BA,EAAM69B,iB,8CAGEl3D,KAAKizD,yBACL,GAAMjzD,KAAKozD,yBAAyBpzD,KAAKizD,2BADzC,M,cACA,S,aAEA,SAAMjzD,KAAK+1D,2BAA2BnjC,uB,OAAtC,S,iBAGJ,SAAM5yB,KAAKmpE,2BAA2BS,oB,OACtC,OADA,SACA,GAAM5pE,KAAK6pE,6B,cAAX,S,aAIA,G,WAFIC,EAAe,EE1IP,iBADmBpqE,EF6IJ,IE5IO,OAAVA,GAAkB,eAAgBA,EF4IvB,CAC/B,GAAyB,aAArB,EAAMqqE,WACN,MAAM,IAAI,GAGdD,EAAM,IAAI,GAAyBp1D,KAAKC,UAAU,G,CAStD,MANA6rC,SAAAA,EACI,IAAI,GACA,wEAIFspB,E,iBE3JP,IAAgCpqE,C,OF8J3C,EAEc,YAAAmqE,0BAAd,W,wIACqB,SAAM7pE,KAAKmpE,2BAA2Ba,oB,cAAjD3qE,EAAW,SACXmF,EACFxE,KAAKmpE,2BAA2B/E,+BAA+B/kE,GAC7D8kB,EACFnkB,KAAKmpE,2BAA2BjF,gCAAgC7kE,GAC9D4qE,EAC2B,uBAA7Br6C,OAAOkR,SAAShI,SACV94B,KAAK+1D,2BAA2Br5C,WAAW6D,wBAAwByhB,MAAMioC,cACzExmE,EAENe,EACA,GAAMxE,KAAK+1D,2BAA2Bpe,qBAAqBnzC,IAD3D,M,OACA,S,wBAGA2f,IAAoC,QAAjB,EAACnkB,KAAKumD,mBAAW,eAAE99B,UAAUyL,aAAa9zB,QAA7D,MACA,GAAMJ,KAAK+1D,2BAA2Bne,sBAAsBzzB,I,OAA5D,S,iBAGJ,SAAMnkB,KAAKmpE,2BAA2Be,wBAClClqE,KAAKqpE,oBACLhqE,EACA4qE,I,cAHJ,S,YAOI,YAAAT,2BAAR,sBACI,MAAO,CACHW,qBAAsB,CAClBC,qBAAsB,SAAO,G,IACzBC,EAAe,kBACflmD,EAAe,kBACfmmD,EAAkB,qB,mIAQlB,OANM,EAIFtqE,KAAKmpE,2BAA2B/D,sBAHhCE,EAAiB,oBACjBG,EAAqB,wBACrBC,EAA6B,gCAG5BJ,EAAkBpyC,SAASm3C,GAIC5E,EAAsBvyC,SAASm3C,GAC1D,GAAMrqE,KAAKmpE,2BAA2BlC,4BAClC9iD,IAFuB,MAH7B,I,cAIE,W,aAGA,OAAA1gB,E,wBAJA21D,EAA2B,EAM7BsM,EAA8BxyC,SAASm3C,GACvC,GAAMrqE,KAAKmpE,2BAA2B7B,2BAClCgD,EAAmB/kE,KAFvB,M,OACA,S,iBAKJ,OAAIvF,KAAKizD,yBACE,CAAP,EAAOjzD,KAAKuqE,0BAA0BnR,IAGnC,CAAP,EAAOp5D,KAAKwqE,oBAAoBpR,I,SAIhD,EAEc,YAAAhG,yBAAd,SACI1O,G,mIAEiE,mBAAtDA,aAAuB,EAAvBA,EAAyBoC,0BAAhC,YACMC,EAAkBrC,EAAwBoC,2B,iBAGzB,O,sBAAnB,EAAA9mD,KAAmB,GAAMA,KAAK+1D,2BAA2B5jC,iBACrD40B,I,OAGJ,OAJA,EAAKR,YAAc,SAInB,GAAMvmD,KAAK+1D,2BAA2BxjC,aAAavyB,KAAKumD,YAAYhhD,K,cAApE,S,aAEA,M,WAAM,IAAI,GAAwB,G,yBAKtC,YAAAglE,0BAAR,SAAkCnR,GAC9B,GAAKp5D,KAAKumD,YAAV,CAIQ,IAAAvyB,EAAeh0B,KAAKumD,YAAW,WAEjC+f,EAAatmE,KAAKmpE,2BAA2B3B,gBAEnD,OAAO,eACHiD,oBAAoB,gCACZzqE,KAAKupE,cAAgB,CAAE1tD,YAAa7b,KAAKupE,eAAe,CAC5D1tB,aAAc77C,KAAKkmE,0BACnBI,WAAYA,GAAc5S,OAAO1/B,GACjCoyC,iBAAkB,GAAqBsE,SAEvCtR,GAA4B,CAC5BuR,4BAA6BvR,G,CAGzC,EAEc,YAAAoR,oBAAd,SAAkCpR,G,8HAC9B,SAAMp5D,KAAK+1D,2BAA2BxjC,gB,OAOtC,OAPA,SAEM+zC,EAAatmE,KAAKmpE,2BAA2B3B,gBACrC3rB,EAAiB77C,KAAK+1D,2BAC/Br5C,WACA4C,iBAAiB2U,SAAQ,KAEvB,CAAP,kBACIw2C,oBAAoB,gCACZzqE,KAAKupE,cAAgB,CAAE1tD,YAAa7b,KAAKupE,eAAe,CAC5D1tB,aAAY,EACZuqB,iBAAkB,GAAqBsE,MACvCpE,WAAU,KAEVlN,GAA4B,CAC5BuR,4BAA6BvR,K,QAKjC,YAAAiQ,kBAAR,WACI,OAAO,GACHrpE,KAAK0pD,WACL,WAAM,WAAI,GAAoB,GAAwBhtB,sBAAhD,GAEd,EAEQ,YAAAwpC,wBAAR,WACI,OAAO,GACHlmE,KAAKgnE,eACL,WACI,WAAI,GACA,wFADJ,GAIZ,EACJ,EAlRA,G,YGEA,kBAQI,WACYxoC,EACAosC,EACAr8C,EACAi2B,GAHA,KAAAhmB,cAAAA,EACA,KAAAosC,SAAAA,EACA,KAAAr8C,eAAAA,EACA,KAAAi2B,YAAAA,EAVJ,KAAAqmB,aAA4C,CAAEC,WAAY,EAAGC,gBAAiB,EAWnF,CAwOP,OAtOU,YAAA11B,WAAN,SACI1vB,EACAqlD,EACAra,EACA9U,G,4HAEuB,OAAvB,EAAA77C,KAAuB,GAAMA,KAAKw+B,cAAcysC,wBAC5CtlD,IAAmB8G,OAAOwxB,SAC1B+sB,I,OAGJ,OALA,EAAKE,gBAAkB,SAKvB,GAAMlrE,KAAK4qE,SAASv1B,WAAW1vB,EAAkBgrC,EAAc9U,I,cAA/D,SAEA77C,KAAKmrE,uB,YAGH,YAAAvB,iBAAN,W,sHACI,SAAM5pE,KAAKorE,wB,OAEX,OAFA,SAEA,GAAMprE,KAAKqrE,4B,cAAX,SAEArrE,KAAKsrE,6B,YAGT,YAAA3F,SAAA,SAASp+D,GACL,OAAOvH,KAAK4qE,SAASjF,SAASp+D,EAClC,EAEM,YAAAq+D,iBAAN,W,+FACI,MAAO,CAAP,EAAO5lE,KAAK4qE,SAAShF,mB,QAGzB,YAAA8D,iBAAA,SACIjiE,EACAlF,GAEA,IAAM26B,EAAYtF,SAASiG,cAA2B,IAAIp2B,GAE1D,IAAKy1B,EACD,MAAM,IAAI,GACN,gFAIR,IAAMquC,EAAgBvrE,KAAKwrE,qBAAqBtc,cAAa,gCACtD3sD,GAAO,CACVkpE,sBAAuB,CAACzrE,KAAK0rE,gCAGjC,OAAOxuC,EAAUZ,YAAYivC,EACjC,EAEM,YAAAvB,iBAAN,W,qGAGI,OAFM2B,EAAqB3rE,KAAK4rE,yBAEzB,CAAP,EAAO5rE,KAAKwrE,qBAAqBK,gBAAgBF,G,QAG/C,YAAAG,uBAAN,SACIryD,EACApa,G,+FAEA,MAAO,CAAP,EAAOW,KAAK+rE,qBAAqBtyD,EAAUpa,G,QAGzC,YAAA6qE,wBAAN,SACIzwD,EACApa,EACA4qE,G,+FAEA,MAAO,CAAP,EAAOjqE,KAAK+rE,qBAAqBtyD,EAAUpa,GAAU,EAAM4qE,G,QAG/D,YAAA7F,+BAAA,SACI/kE,GAEA,OAAOW,KAAK4qE,SAASxG,+BAA+B/kE,EACxD,EAEA,YAAA6kE,gCAAA,SACI7kE,GAEA,OAAOW,KAAK4qE,SAAS1G,gCAAgC7kE,EACzD,EAEA,YAAA2sE,wBAAA,SAAwBtsE,GACpB,MChIG,4BDgI2CM,KAAK4qE,SAC7C5qE,KAAK4qE,SAASoB,wBAAwBtsE,GACtCqvB,QAAQiI,OAAOt3B,EACzB,EAEM,YAAAkzC,QAAN,SAAcroB,G,sHACV,SAAMvqB,KAAKuuB,eAAezwB,IAAI,oBAAoBysB,EAAU,a,cAA5D,S,YAGJ,YAAA66C,oBAAA,WACI,OAAOplE,KAAK4qE,SAASxF,qBACzB,EAEM,YAAA6B,4BAAN,SACI9iD,G,+FAEA,MAAO,CAAP,EAAOnkB,KAAK4qE,SAAS3D,4BAA4B9iD,G,QAG/C,YAAAmjD,2BAAN,SAAiCzN,G,sHAC7B,SAAM75D,KAAK4qE,SAAStD,2BAA2BzN,I,cAA/C,S,YAGJ,YAAA2N,cAAA,WACI,OAAOxnE,KAAK4qE,SAASpD,eACzB,EAEM,YAAAuE,qBAAN,SACItyD,EACApa,EACA4sE,EACAhC,G,YADA,IAAAgC,IAAAA,GAAA,I,gIAOQ,OAJF77C,EAAM,gB,IAERpuB,OAAQ,wBACRyX,SAAQ,IACJ,GAAMzZ,KAAK4qE,SAAStG,0BAA0BjlE,I,OAGtD,OANMH,EAAO,kCAGL,YAGJ+sE,EACO,CAAP,EAAO,IAAIl9C,SAAQ,SAAC6P,GAChB,EAAK4lB,YAAY2C,SACb8iB,EAAcA,EAAQ,YAAc75C,GAAG,gCAEhClxB,GAAI,CACPqgE,iBAAkB7qD,KAAKC,UAAUzV,EAAKqgE,oBAE1C3gC,EAER,KAGJ,GAAM5+B,KAAKuuB,eAAe0D,KAAK7B,EAAK,CAChCjxB,SAAS,eACL+wB,OAAQ,YACR,eAAgB,qCACb,IAEPhxB,KAAI,K,cANR,S,YAUI,YAAAosE,2BAAR,WACI,IAAMK,EAAqB3rE,KAAK4rE,yBAEhCD,EAAmBjD,gBAAkB1oE,KAAK4qE,SAAS3E,qBAEnDjmE,KAAKwrE,qBAAqBU,oBAAoBP,EAClD,EAEc,YAAAN,yBAAd,W,4HAE2B,O,sBAAA,GAAMrrE,KAAKwrE,qBAAqBW,aAC/CnsE,KAAKosE,4B,OAGT,IAAe,IAJI,SAElB,OAGG,MAAM,IAAI,GACN,qG,mBAIR,I,sBAAqB,GACjB,MAAM,EAGV,MAAM,IAAI,G,yBAIV,YAAAjB,qBAAR,WACInrE,KAAKqsE,uBAAyB,CAC1B1tE,KAAM,OACNmqE,WAAY9oE,KAAK4qE,SAASnE,oBAElC,EAEc,YAAA2E,qBAAd,W,wIAOwB,OANdkB,EAAwBtsE,KAAK0rE,4BAEnC,EAAA1rE,K,qBACOssE,I,QAEC3tE,KAAM,mBACM,GAAMqB,KAAK4qE,SAASrE,+B,OAQhC,OAZR,EAAKgG,mBAAqB,mCAEtB,EAAAC,2BAEI,EAAA1D,WAAY,S,SAGpB,EAAA9oE,K,oCACOA,KAAK6qE,cAAY,CACpBY,sBAAuB,CAACzrE,KAAKusE,oBAC7B7D,gBAAiB1oE,KAAK4qE,SAAS3E,qBAC/BwC,aAAczoE,KAAK4qE,SAAS/E,qBACxB,GAAM7lE,KAAK4qE,SAASrG,mB,cAL5B,EAAKkI,oBAAsB,2DAKnB,YAAsC,CAC1CC,gBAAiB1sE,KAAK4qE,SAAS5F,wBAEnChlE,KAAK2sE,sBAAuB,gCACrB3sE,KAAK6qE,cAAY,CACpBY,sBAAuB,CAACa,K,YAIxB,YAAAZ,0BAAR,WACI,OAAO1rE,KAAK4sE,YAAY5sE,KAAKqsE,uBACjC,EAEQ,YAAAT,uBAAR,WACI,OAAO5rE,KAAK4sE,YAAY5sE,KAAKysE,oBACjC,EAEQ,YAAAL,wBAAR,WACI,OAAOpsE,KAAK4sE,YAAY5sE,KAAK2sE,qBACjC,EAEQ,YAAAnB,mBAAR,WACI,OAAOxrE,KAAK4sE,YAAY5sE,KAAKkrE,gBACjC,EAEQ,YAAA0B,YAAR,SAAuBtuE,GACnB,OAAO,GACHA,GACA,WAAM,WAAI,GAAoB,GAAwBo+B,sBAAhD,GAEd,EACJ,EArPA,G,YE3BO,IAEP,cAII,WAAoB8B,GAAA,KAAAA,cAAAA,EAFZ,KAAAvG,QAA+BrI,MAEW,CAqBtD,OAnBU,YAAAq7C,wBAAN,SACIhtB,EACA17C,G,YADA,IAAA07C,IAAAA,GAAA,I,+GAGA,SAAMj+C,KAAKw+B,cAAcM,WAZC,0C,OAc1B,GAFA,UAEK9+B,KAAKi4B,QAAQ40C,OACd,MAAM,IAAI,GAUd,YAP6BppE,IAAzBzD,KAAKkrE,kBACLlrE,KAAKkrE,gBAAkB,IAAIlrE,KAAKi4B,QAAQ40C,OAAO5iD,SAAS6iD,IAAIC,gBAAe,eACvEC,YAAa/uB,EAAW,OAAS,cAC7B17C,QAAAA,EAAW,CAAC,KAIjB,CAAP,EAAOvC,KAAKkrE,iB,QAEpB,EAzBA,G,YCJe,SAAS+B,KACpB,OAAO,IAAI,IAAsB,KAAAlZ,mBACrC,CCkCA,SAAetB,IAnBX,SAACG,GACD,IAAMgB,GAAgB,IAAAC,uBAEhB5W,EAA2CrtB,OAC3C2uC,EAAe,IAAI,GACrB,IAAI,IAAsB,KAAAxK,mBAAmB9W,IAGjD,OAAO,IAAI,GACP2V,EACA,IAAI,GACAqa,KACA,IAAI,GAA0Bra,EAA2B2L,GACzD3K,GACA,IAAAsM,qBAGZ,GAE0E,CACtE,CAAE36D,GAAI,wBCtBV,mBAII,WACIyiE,EACQkF,GAFZ,MAII,YAAM,WAAYlF,IAAQ,K,OAFlB,EAAAkF,2BAAAA,EAIR,EAAKlF,QAAUA,E,CACnB,CA4DJ,OAvE4D,oBAalD,YAAA3yB,WAAN,SACI1vB,EACAgrC,EACA9U,G,gJAIA,KAFM5nB,EAAkE,QAA1D,EAA2C,QAA3C,EAAGj0B,KAAKgoE,QAAQtrD,WAAWwD,wBAAgB,eAAE+T,SAAS3zB,YAAI,QAAIu7C,GAGxE,MAAM,IAAI,GAAiB,GAAqB9jC,sBAGpD,SAAM,YAAMs9B,WAAU,UAAC1vB,EAAkBgrC,EAAc18B,I,OAIvD,GAJA,WAEMlR,EAAgB,YAAM4C,iBAAgB,YAEzB6qB,mBACf,MAAM,IAAI,GAAiB,GAAqBz4B,sBAKpD,OC9BO,SACXhU,GAEA,IAlBJ,SACIA,GAEA,QAAIA,EAAKysC,oBAED,kBAAmBzsC,EAAKysC,oBACxB,mBAAoBzsC,EAAKysC,oBACzB,uBAAwBzsC,EAAKysC,oBAC7B,4BAA6BzsC,EAAKysC,kBAK9C,CAKS28B,CAAuCppE,GACxC,MAAM,IAAI,GAAiB,GAAqBgU,qBAExD,CDsBQq1D,CAA8CrqD,GAE9C,GAAM/iB,KAAKktE,2BAA2BG,aAAatqD,EAAekR,I,OAE3C,OAFvB,SAEA,EAAAj0B,KAAuB,GAAMA,KAAKktE,2BAA2BI,6B,cAA7D,EAAKC,gBAAkB,SAEf9B,EAA0BzrE,KAAKutE,gBAAe,sBAEtDvtE,KAAK0nE,qBAC8D,QAD1C,EAC8B,QAD9B,EACG,QADH,EACrB+D,EAAsB,UAAE,eAAEe,iCAAyB,eAAE1D,kBAAU,eAAE35D,S,YAIzE,YAAAo3D,4BAAA,WACI,GAAIvmE,KAAKutE,gBAAiB,CACd,IACA/G,EAD0BxmE,KAAKutE,gBAAe,sBAE5B,GAAGf,0BAA0B1D,WAAU,kBAEjE,MAAO,CACH35D,QAASnP,KAAKynE,uBACdjB,kBAAiB,E,CAIzB,MAAO,CACHr3D,QAASnP,KAAKynE,uBAEtB,EAEM,YAAAnD,0BAAN,SACIjlE,G,4HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAInD,OAJM0E,EAAO,UAER+mB,MAAQrW,KAAK1Q,EAAK+mB,OAEhB,CAAP,EAAO/mB,G,QAEf,EAvEA,CAA4D,I,YEC5D,kBAII,WAAoBi7B,GAAA,KAAAA,aAAAA,EAChBh/B,KAAK4vB,OAASA,MAClB,CAyKJ,OAvKU,YAAAy9C,aAAN,SACItqD,EACA84B,EACA2xB,EACAC,G,qGAQA,OANMC,EAAwB1tE,KAAK2tE,gCAC/B5qD,EACA84B,EACA2xB,GAGG,CAAP,EAAOxtE,KAAK8gD,cAAc4sB,EAAuBD,G,QAG/C,YAAAH,0BAAN,W,4HACI,IAAKttE,KAAK4vB,OAAOixB,OACb,MAAM,IAAI,G,OAGT7gD,KAAKutE,gBAAN,OACA,EAAAvtE,KAAuB,GAAMA,KAAK4vB,OAAOixB,OAAO+sB,YAAYnhD,W,OAA5D,EAAK8gD,gBAAkB,S,iBAG3B,MAAO,CAAP,EAAOvtE,KAAKutE,iB,QAGF,YAAAzsB,cAAd,SACI4sB,EACAD,G,YAAA,IAAAA,IAAAA,GAAA,I,kIAEKztE,KAAK4vB,OAAOixB,SAAU4sB,EAAvB,OACMlrE,EAAUvC,KAAK6tE,gBACjBH,EAAsBnrE,SAEpB+7B,EAAat+B,KAAK6tE,gBACpBH,EAAsBpvC,YAIpBwvC,EAAc,IAAIC,gBAAgBxrE,GAASO,WAC3CkgD,EAAegrB,iCAAgBF,EAErC,GAAM9tE,KAAKg/B,aAAaF,WAAWkkB,EAAW,CAAE7E,OAAO,EAAM7f,WAAU,M,OAAvE,S,iBAGJ,IAAKt+B,KAAK4vB,OAAOixB,OACb,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO7gD,KAAK4vB,OAAOixB,Q,QAGf,YAAA8sB,gCAAR,SACI5qD,EACA84B,EACA2xB,QAAA,IAAAA,IAAAA,GAAA,GAEQ,IAAAjoE,EAAwCwd,EAAa,GAAjDk9B,EAAoCl9B,EAAa,YAApCytB,EAAuBztB,EAAa,mBAE7D,KAAKytB,aAAkB,EAAlBA,EAAoBma,UACrB,MAAM,IAAI,GAAiB,GAAqB5yC,sBAIhD,IAAA0qC,EAYAjS,EAAkB,OAXlBma,EAWAna,EAAkB,SAVlBuS,EAUAvS,EAAkB,WATlBy9B,EASAz9B,EAAkB,aARlB09B,EAQA19B,EAAkB,cAPlB29B,EAOA39B,EAAkB,eANlB49B,EAMA59B,EAAkB,wBALlB69B,EAKA79B,EAAkB,wBAJlB89B,EAIA99B,EAAkB,0BAHlB,EAGAA,EAAkB,mCAHlB+9B,OAAkC,IAAG,KAAE,EACvC,EAEA/9B,EAAkB,iCAFlBg+B,OAAgC,IAAG,KAAE,EACrCC,EACAj+B,EAAkB,mBAEhBkS,EAAS0rB,GAA2BZ,EAEpCkB,EAA0B,8BAAPnpE,EACnBopE,EAAoBD,EAAmB,CAAC,QAAU,GAClDE,EAAsBF,EAA8B,GAAX,CAAC,QAC1CG,EAA4CrB,EAC5C,CAAC,eACD,GAEAsB,EAAsBT,EAA0B,CAAC,SAAU,YAAc,GACzEU,EAAwBV,EAAmD,GAAzB,CAAC,SAAU,YAE7DW,EAAmBxB,IAA8B9qB,EACjDusB,EAAqBD,GAAoBb,EAAiB,CAAC,SAAW,GACtEe,EAAuBF,GAAqBb,EAA6B,GAAZ,CAAC,SAC9DgB,EAAoBH,EAAmBR,EAAmC,GAC1EY,EAAqBJ,EACrBT,EAAmCvrE,QAC/B,SAACqsE,GAAgB,OAACb,EAAiCt7C,SAASm8C,EAA3C,IAErBd,EAEAe,GAAc,oBACbV,EACAG,EACAG,EACAE,GAEDG,GAAa,oBACZZ,EACAG,EACAG,EACAE,GAEDK,EAA2Cf,EAAqB,CAAC,aAAe,GAEtF,MAAO,CACHlsE,SAAS,eACL,YAAaooD,EACb,cAAe5H,EACf,iBAAkBwsB,EAAcnvE,OAAS,EAAImvE,OAAgB9rE,EAC7D,kBAAmB6rE,EAAelvE,OAAS,EAAIkvE,OAAiB7rE,EAChEi/C,OAAM,EACNF,YAAY,qBACR,UACA,gBACA,WACA,iBACA,SACGgtB,EACAX,GAEP56C,SAAU4nB,EACV4G,OAAM,GACF6rB,GAA6B,CAAE,gBAAiBL,IAExD3vC,WAAY,CACR,8BAA+B4vC,EAC/B,oBAAqBjuB,GAGjC,EAEQ,YAAA4tB,gBAAR,SAA2DphD,GACvD,IAAIgjD,EAAoB,CAAC,EAsBzB,OApBa9xE,OAAOwF,KAAKspB,GAEpB9Y,SAAQ,SAAClW,G,MACJa,EAAQmuB,EAAOhvB,GAGjBa,SAEU,KAAVA,GACCuB,MAAMC,QAAQxB,IAA2B,IAAjBA,EAAM8B,SAKnCqvE,GAAoB,gCACbA,KAAiB,MACnBhyE,GAAMoC,MAAMC,QAAQxB,GAASA,EAAMqB,KAAK,KAAOrB,EAAK,IAE7D,IAEOmxE,CACX,EACJ,EA/KA,G,YCaA,GAAehd,IAfX,SAACG,GACD,OAAO,IAAI,GACPA,EACA,IAAI,GACAqa,KACA,IAAI,GACAra,EACA,IAAI,IAA2B,KAAAmB,sBAEnC,IAAAF,wBACA,IAAAqM,qBAGZ,GAE+E,CAC3E,CAAE36D,GAAI,6BCLV,GAAektD,IAdX,SAACG,GACD,IAAMgB,GAAgB,IAAAC,uBAEtB,OAAO,IAAI,GACPjB,EACA,IAAI,GACAqa,KACA,IAAI,GAAiB,QAASra,GAC9BgB,GACA,IAAAsM,qBAGZ,GAEwE,CACpE,CAAE36D,GAAI,sBCDV,GAAektD,IAdX,SAACG,GACD,IAAMgB,GAAgB,IAAAC,uBAEtB,OAAO,IAAI,GACPjB,EACA,IAAI,GACAqa,KACA,IAAI,GAAiB,QAASra,GAC9BgB,GACA,IAAAsM,qBAGZ,GAEwE,CACpE,CAAE36D,GAAI,sBCnBV,mBACI,WAAYyiE,G,OACR,YAAM,eAAgBA,IAAQ,IAClC,CAsBJ,OAzB0D,oBAKhD,YAAA1D,0BAAN,SACIjlE,G,4HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAInD,OAJM0E,EAAO,UAER+mB,MAAQrW,KAAK1Q,EAAK+mB,OAEhB,CAAP,EAAO/mB,G,QAGX,YAAAwiE,4BAAA,WACI,IAAMxiE,EAAO/D,KAAK8lE,iCAIlB,OClBO,SACX/hE,GAEA,IATJ,SACIA,GAEA,MAAO,qBAAsBA,CACjC,CAKS2rE,CAA0C3rE,GAC3C,MAAM,IAAI,GAAiB,GAAqBgU,qBAExD,CDUQ43D,CAAiD5rE,GAE1C,CACHoL,QAASnP,KAAKynE,uBACdjB,kBAAmBziE,EAAK6rE,iBAEhC,EACJ,EAzBA,CAA0D,I,YEe1D,GAAend,IAXX,SAACG,GACD,WAAI,GACAA,EACA,IAAI,GACAqa,KACA,IAAI,GAA6Bra,IACjC,IAAAiB,wBACA,IAAAqM,qBANR,GAUyE,CACzE,CAAE36D,GAAI,2BCpBV,GAJuB,SAAC7F,GACpB,MAAwB,iBAAVA,GAAgC,OAAVA,GAAkB,SAAUA,CACpE,ECQe,SAASmwE,GACpB9rE,GAEA,IATJ,SACIA,GAEA,MAAO,mBAAoBA,CAC/B,CAKS+rE,CAAyC/rE,GAC1C,MAAM,IAAI,GAAiB,GAAqBgU,qBAExD,CCIA,mBAII,WAAYiwD,EAA4Cz5C,GAAxD,MACI,YAAM,cAAey5C,IAAQ,K,OADuB,EAAAz5C,eAAAA,E,CAExD,CAsEJ,OA3EY,oBAOR,YAAAy9C,wBAAA,SAAwBtsE,GACpB,OAAO,IAAIqvB,SAAQ,SAACghD,EAAU/4C,GAC1B,GACI,GAAet3B,IC9BxB,SACHR,G,MAEA,GAAoB,iBAATA,GAA8B,OAATA,EAC5B,OAAO,EAGX,IAAM8wE,EAAc9wE,EAEpB,MACoD,iBAAd,QAAlC,EAAO8wE,EAAYC,uBAAe,eAAEC,UACQ,iBAArCF,EAAYC,gBAAgB3vE,IAE3C,CDkBgB6vE,CAA8BzwE,EAAMR,OACA,4BAApCQ,EAAMR,KAAK+wE,gBAAgB3vE,KAE3B,OAAOsvB,OAAOkR,SAASjtB,OAAOnU,EAAMR,KAAK+wE,gBAAgBC,SAG7Dl5C,EAAOt3B,EACX,GACJ,EAEM,YAAA4kE,0BAAN,SACIjlE,G,gIAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAA7C0E,EAAO,SAIb,IACI6J,EAAQ8G,KAAKs4C,MAAMjpD,EAAK+mB,M,CAC1B,MAAOprB,GACL,MAAM,IAAI,GAAqB,4C,CAKtB,OE3CN,SACXkO,GAEA,IAbJ,SAAgCA,GAC5B,MACqB,iBAAVA,GACG,OAAVA,GACA,oBAAqBA,GACrB,cAAeA,GACf,kBAAmBA,CAE3B,CAKSwiE,CAAuBxiE,GACxB,MAAM,IAAI,GAAiB,GAAqBkK,oBAExD,CFmCQu4D,CAA6BziE,GAE7B,EAAA7J,EAAa,GAAM/D,KAAKswE,UAAU1iE,I,OAElC,OAFA,EAAKkd,MAAQ,SAEN,CAAP,EAAO/mB,G,QAGX,YAAAwiE,4BAAA,WACI,IAAMxiE,EAAO/D,KAAK8lE,iCAIlB,OAFA+J,GAA+C9rE,GAExC,CACHoL,QAASnP,KAAKynE,uBACdjB,kBAAmBziE,EAAKwsE,eAEhC,EAEc,YAAAD,UAAd,SAAwBE,G,8HAQH,OAPXpgD,EAAMpwB,KAAK2lB,mBAAmB8G,OAAOwxB,SACrC,0CACA,kCAGN4xB,GAFM9rE,EAAO/D,KAAK8lE,kCAID,GAAM9lE,KAAKuuB,eAAe0D,KAAsC7B,EAAK,CAClFM,aAAa,EACbxxB,KAAM,CACFP,KAAM,YACN6xE,WAAU,GAEdrxE,QAAS,CACLsxE,cAAe1sE,EAAKwsE,eACpB,eAAgB,GAAY5c,KAC5B,eAAgB,S,OAIxB,MAAO,CAAP,EAbiB,SAWf,KAEU/lD,O,QAEpB,EA5EA,CACY,I,YGKZ,GAAe6kD,IAdX,SAACG,GACD,IAAMgB,GAAgB,IAAAC,uBAEtB,OAAO,IAAI,GACPjB,EACA,IAAI,GACAqa,KACA,IAAI,GAA4Bra,EAA2BgB,GAC3DA,GACA,IAAAsM,qBAGZ,GAE4E,CACxE,CAAE36D,GAAI,0BCxBV,mBACI,WAAYyiE,G,OACR,YAAM,cAAeA,IAAQ,IACjC,CAWJ,OAdyD,oBAK/C,YAAA1D,0BAAN,SACIjlE,G,4HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAInD,OAJM0E,EAAO,UAER+mB,MAAQrW,KAAK1Q,EAAK+mB,OAEhB,CAAP,EAAO/mB,G,QAEf,EAdA,CAAyD,I,YCoBzD,GAAe0uD,IAXX,SAACG,GACD,WAAI,GACAA,EACA,IAAI,GACAqa,KACA,IAAI,GAA4Bra,IAChC,IAAAiB,wBACA,IAAAqM,qBANR,GAUwE,CACxE,CAAE36D,GAAI,0BACN,CAAEA,GAAI,kBCtBV,mBACI,WAAYyiE,G,OACR,YAAM,QAASA,IAAQ,IAC3B,CAWJ,OAdqD,oBAK3C,YAAA1D,0BAAN,SACIjlE,G,4HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAInD,OAJM0E,EAAO,UAER+mB,MAAQrW,KAAK1Q,EAAK+mB,OAEhB,CAAP,EAAO/mB,G,QAEf,EAdA,CAAqD,I,YCoBrD,GAAe0uD,IAXX,SAACG,GACD,WAAI,GACAA,EACA,IAAI,GACAqa,KACA,IAAI,GAAwBra,IAC5B,IAAAiB,wBACA,IAAAqM,qBANR,GAUoE,CACpE,CAAE36D,GAAI,sBCZV,mBACI,WAAYyiE,G,OACR,YAAM,SAAUA,IAAQ,IAC5B,CAmCJ,OAtCoD,oBAK1C,YAAA1D,0BAAN,SACIjlE,G,8HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAA7C0E,EAAO,SAIb,IACI6J,EAAQ8G,KAAKs4C,MAAMjpD,EAAK+mB,M,CAC1B,MAAOprB,GACL,MAAM,IAAI,GAAqB,4C,CAOnC,OC1BO,SACXkO,GAEA,IAPJ,SAAsCA,GAClC,MAAwB,iBAAVA,GAAgC,OAAVA,GAAkB,OAAQA,CAClE,CAKS8iE,CAA6B9iE,GAC9B,MAAM,IAAI,GAAiB,GAAqBkK,oBAExD,CDgBQ64D,CAAmC/iE,GAEnC7J,EAAK+mB,MAAQld,EAAMrI,GAEZ,CAAP,EAAOxB,G,QAGX,YAAAwiE,4BAAA,WACI,IAAMxiE,EAAO/D,KAAK8lE,kCExBX,SACX/hE,GAEA,IAbJ,SACIA,GAEA,MACI,2BAA4BA,GAC5B,yBAA0BA,GAC1B,kBAAmBA,CAE3B,CAKS6sE,CAAoC7sE,GACrC,MAAM,IAAI,GAAiB,GAAqBgU,qBAExD,CFoBQ84D,CAA2C9sE,GAEnC,IAAA+sE,EAAgE/sE,EAAI,cAArDgtE,EAAiDhtE,EAAI,qBAA/BitE,EAA2BjtE,EAAI,uBAE5E,MAAO,CACHoL,QAASnP,KAAKynE,uBACd,iBAAkBqJ,EAClB,wBAA4BC,EAAoB,IAAIC,EAE5D,EACJ,EAtCA,CAAoD,I,YGWpD,GAAeve,IAXX,SAACG,GACD,WAAI,GACAA,EACA,IAAI,GACAqa,KACA,IAAI,GAAuBra,IAC3B,IAAAiB,wBACA,IAAAqM,qBANR,GAUmE,CACnE,CAAE36D,GAAI,mBACN,CAAEA,GAAI,wBCtBV,mBACI,WAAYyiE,G,OACR,YAAM,WAAYA,IAAQ,IAC9B,CAWJ,OAd4D,oBAKlD,YAAA1D,0BAAN,SACIjlE,G,4HAEa,SAAM,YAAMilE,0BAAyB,UAACjlE,I,OAInD,OAJM0E,EAAO,UAER+mB,MAAQrW,KAAK1Q,EAAK+mB,OAEhB,CAAP,EAAO/mB,G,QAEf,EAdA,CAA4D,I,YCoB5D,GAAe0uD,IAXX,SAACG,GACD,WAAI,GACAA,EACA,IAAI,GACAqa,KACA,IAAI,GAA+Bra,IACnC,IAAAiB,wBACA,IAAAqM,qBANR,GAU2E,CAC3E,CAAE36D,GAAI,6B,GCpBV,YACI,WAAY0rE,GAAZ,WACQzyE,EAAU,yE,OAEVyyE,IACAzyE,EAAaA,EAAO,2DAA2DyyE,EAActxE,KACzF,MACH,MAGL,cAAMnB,IAAQ,MAETE,KAAO,8B,CAChB,CACJ,OAdyD,oBAczD,EAdA,CAAyD,ICMzD,mBACI,WAAYspE,EAA4C1J,GAAxD,MACI,YAAM,cAAe0J,IAAQ,K,OADuB,EAAA1J,WAAAA,E,CAExD,CAkCJ,OArC0D,oBAKhD,YAAAsH,iBAAN,W,+FACI,MAAO,CAAP,EAAO72C,QAAQ6P,QAAQ,CAAEsyC,cChBrBC,EAAcvhD,OAAM,UAKxBgzB,EADAuuB,EAAUvuB,SACCuuB,EAAUvuB,SAETuuB,EAAkBC,aAG3B,CACHC,YAAazhD,OAAO0hD,OAAOC,YAAc,GACzCC,aAA+C,mBAA1BL,EAAUM,aAA6BN,EAAUM,cACtE7uB,SAAQ,EACR8uB,cAAe9hD,OAAO0hD,OAAOrxC,OAC7B0xC,aAAc/hD,OAAO0hD,OAAOnxC,MAC5ByxC,kBAAkB,IAAIlvE,MAAOmvE,oBAAoB/uE,gBAjB1C,IAGP8/C,EAFIuuB,C,QDmBF,YAAAnF,wBAAN,SAA8BtsE,G,oHAC1B,IEFD,SACHA,GAEA,OAAO,GAAeA,KAjBtBoyE,EAiB+DpyE,EAAMR,MAdjE,IAAA6yE,UAASD,IACY,iBAAdA,GACP,WAAYA,GACZ,oBAAqBA,IACrB,IAAAhyE,SAASgyE,EAA2CxyE,UACpD,IAAAmgB,MAAMqyD,EAA2CxyE,OAAQ,CACrDgB,KAAM,6BAVlB,IACIwxE,CAkBJ,CFFaE,CAA+BtyE,GAChC,MAAMA,EAUV,GAPyBuyE,EAAgDvyE,EAAMR,KAAI,gBAEtEgzE,GADP,EAIFD,GAAiB,CAAC,GAHF,QACIE,EAAkB,qBACvBC,EAAI,iBAGlBF,IAAYC,IAAuBC,EACpC,MAAM,IAAI,GAA4B,CAAC,UAAW,qBAAsB,SAG5E,MAAO,CAAP,EAAO,IAAIrjD,SAAQ,SAAC6P,GAChB,EAAK0/B,WAAWnX,SACZ+qB,EACA,CACIC,mBAAkB,EAClBC,KAAI,GAERxzC,EACA,OAER,I,QAER,EArCA,CAA0D,I,YGa1D,GAAe6zB,IAXX,SAACG,GACD,WAAI,GACAA,EACA,IAAI,GACAqa,KACA,IAAI,GAA6Bra,GAA2B,IAAAsN,sBAC5D,IAAArM,wBACA,IAAAqM,qBANR,GAUyE,CACzE,CAAE36D,GAAI,2BC3BV,IAAY8sE,GCmDAC,GAkKA,GAoQA,GAQA,GAQA,GAkFAC,GA0BAC,IDrlBZ,SAAYH,GACR,kBACH,CAFD,CAAYA,KAAAA,GAAU,KCmDtB,SAAYC,GACR,sBACA,UACA,mBACH,CAJD,CAAYA,KAAAA,GAAkB,KAkK9B,SAAY7O,GACR,wBACA,mBACH,CAHD,CAAY,QAAoB,KAoQhC,SAAYC,GACR,kBACA,sBACA,kBACA,YACA,2BACH,CAND,CAAY,QAAgB,KAQ5B,SAAYC,GACR,cACA,cACA,kBACA,gBACA,eACH,CAND,CAAY,QAAgB,KAQ5B,SAAY9H,GACR,cACA,aACH,CAHD,CAAY,QAAgB,KAkF5B,SAAY0W,GACR,aACH,CAFD,CAAYA,KAAAA,GAAmC,KA0B/C,SAAYC,GACR,sBACA,oBACA,8CACA,6BACA,8BACH,CAND,CAAYA,KAAAA,GAAiB,KCpjB7B,kBAGI,WACYlU,EACA1L,EACA6f,EACAvF,GAHA,KAAA5O,WAAAA,EACA,KAAA1L,0BAAAA,EACA,KAAA6f,4BAAAA,EACA,KAAAvF,2BAAAA,CACT,CA2SP,OApSU,YAAAwF,cAAN,SACInrE,EACAorE,EACAnF,EACAC,G,kIAOiB,OALX1rE,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvCm/B,EAAe82B,GAAwB5wE,EAAMud,iBAAiB2U,SAAS3zB,KACvEyiB,EACFhhB,EAAM6jB,wBAA0Dre,GAEpE,EAAAvH,KAAiB,GAAMA,KAAKktE,2BAA2BG,aACnDtqD,EACA84B,EACA2xB,EACAC,I,OAGJ,OAPA,EAAKmF,UAAY,SAOV,CAAP,EAAO5yE,KAAK4yE,W,QAGhB,YAAAC,oBAAA,WACI,IAAK7yE,KAAK4yE,UACN,MAAM,IAAI,GAGd,OAAO5yE,KAAK4yE,SAChB,EAOM,YAAAE,wBAAN,SACIpuB,G,4HAIA,KAFMqC,EAAkBrC,EAAwBoC,4BAG5C,MAAM,IAAI,GAAiB,GAAqBzvC,a,iBAIzC,O,sBAAA,GAAMrX,KAAK4yD,0BAA0BzgC,iBAAiB40B,I,OAA7D,MAAO,CAAP,EAAO,U,OAEP,M,SAAM,IAAI,G,yBASZ,YAAApB,YAAN,SACIp7B,EACAwoD,G,4HAIoB,OAFdpkD,EAAS3uB,KAAK4yD,0BAA0Bl2C,WAAW4C,iBAAiB/Z,GAEtD,GAAMvF,KAAKyyE,4BAA4B9sB,YAAYp7B,GAAY,eAC/EoE,OAAM,GACHokD,K,OAGP,MAAO,CAAP,EALoB,SAGlB,S,QAKA,YAAAC,sBAAN,SACIzoD,EACAwoD,G,kIAIgC,OAF1BpkD,EAAS3uB,KAAK4yD,0BAA0Bl2C,WAAW4C,iBAAiB/Z,GAE1C,GAAMvF,KAAKyyE,4BAA4B9sB,YACnEp7B,GAAU,eAENoE,OAAM,GACHokD,K,OAIX,OARM,EAA0B,SAAxBh8D,EAAO,UAAEk8D,EAAU,aAQpB,CAAP,kBAASl8D,QAAO,GAAMk8D,EAAa,CAAEA,WAAU,GAAK,CAAC,I,QAGnD,YAAAC,YAAN,W,gIACUnxE,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvC3V,EAAOhF,EAAMud,iBACbwH,EAAc/kB,EAAM2lB,yBAAyB,G,iBAG/C,O,sBAAA,GAAM1nB,KAAKyyE,4BAA4BS,YAAY,CAC/C9Z,yBAA0BtyC,EAAYsyC,yBACtCzqC,OAAQ5nB,EAAKxB,GACbyiB,uBAAwBlB,EAAYkB,0B,cAHxC,S,aAMA,M,SAAM,IAAI,E,yBAIZ,YAAAmrD,eAAN,SAAqB5rE,EAAmBhF,G,sHAEb,O,sBAAA,GAAMvC,KAAKyyE,4BAA4BU,eACtD5rE,EACAhF,I,OAGJ,MAAO,CAAP,EALmB,SAGlB,Q,OAID,M,SAAM,IAAI,E,yBASlB,YAAAykD,gBAAA,SAAgBz/C,EAAkBwP,GAC9B,IAAMhQ,EAAO/G,KAAK4yD,0BAA0Bl2C,WAAW4C,iBAEvD,IAAKvI,EACD,MAAM,IAAI,GAAiB,GAAqBa,gBAGpD,OAAO5X,KAAKs+D,WAAWnX,SAAS,iBAAiB,eAC7CC,aAAc,SACdplD,OAAQ,wBACRyX,SAAUlS,EACV6rE,SAAUr8D,GACNhQ,EAAKqpC,SAAWiiC,GAAWgB,QAAU,CAAE7rB,QAASzgD,EAAKxB,KAEjE,EAEM,YAAAohC,cAAN,SAAoBp/B,EAAkBwP,EAAiB/G,G,4HAanD,OAZMs0B,EAAc,CAChB8B,iBAAkB,CACdE,yBAA0B,KAC1BC,iCAAkC,KAClC+sC,YAAa,KACbC,UAAWhsE,EACXisE,eAAgB,CACZJ,SAAUr8D,KAKtB,GAAM/W,KAAK4yD,0BAA0BjsB,eAAc,eAC/Cp/B,SAAQ,EACR+8B,YAAW,GACPt0B,EAAY,CAAEA,UAAS,GAAK,CAAC,K,cAHrC,S,YAYJ,YAAAyjE,yBAAA,SAAyBpM,GACrB,IACMvgD,EADQ9mB,KAAK4yD,0BAA0Bl2C,WACnBgL,yBAAyB,GAE7C0xC,EAA2BtyC,EAAYsyC,0BAA4B,GAEnEsa,EAA4Bta,EAAyB15C,MACvD,SAAC0qB,GAAW,OAAAA,EAAOiF,aAAP,IAGVrnB,EAAyBq/C,EACzBjO,EAAyB15C,MAAK,SAAC0qB,GAAW,OAAAA,EAAO7kC,KAAO8hE,CAAd,IAC1CjO,EAAyB15C,MACrB,SAAC0qB,GAAM,MAAK,OAAAA,EAAO7kC,MAAyC,QAAvC,EAAKuhB,EAAYkB,8BAAsB,eAAEziB,GAAE,IAGpEouE,EACF3rD,GAA0B0rD,GAA6Bta,EAAyB,GAEpF,IAAKua,EACD,MAAM,IAAI70E,MAAM,+CAGpB,OAAO60E,CACX,EAOA,YAAAlU,WAAA,SAAWpkD,GACP,MAAO,CACHC,WAAWD,aAAO,EAAPA,EAASC,YAAa,GACjCC,UAAUF,aAAO,EAAPA,EAASE,WAAY,GAC/BiW,OAAOnW,aAAO,EAAPA,EAASmW,QAAS,GACzBzV,MAAO,GACPP,QAAS,GACTC,UAAUJ,aAAO,EAAPA,EAASI,WAAY,GAC/BC,SAAU,GACVC,MAAMN,aAAO,EAAPA,EAASM,OAAQ,GACvBE,aAAaR,aAAO,EAAPA,EAASQ,cAAe,GACrCC,YAAYT,aAAO,EAAPA,EAASS,aAAc,GACnCF,gBAAiB,GACjB4rB,qBAAqBnsB,aAAO,EAAPA,EAASmsB,sBAAuB,GACrDxrB,aAAc,GAEtB,EAEA,YAAA43D,kCAAA,SAAkC,G,IAAE9nB,EAAK,QACrC,OAAO9rD,KAAKy/D,WAAW,CACnBnkD,UAAWwwC,EAAMptD,KAAKm1E,WACtBt4D,SAAUuwC,EAAMptD,KAAKo1E,QACrBtiD,MAAOs6B,EAAMioB,cACbt4D,SAAUqwC,EAAMzwC,QAAQ6oC,eACxBvoC,KAAMmwC,EAAMzwC,QAAQ24D,aACpBn4D,YAAaiwC,EAAMzwC,QAAQ+oC,aAC3BtoC,WAAYgwC,EAAMzwC,QAAQgpC,YAC1B7c,oBAAqBskB,EAAMzwC,QAAQ44D,cAE3C,EAEA,YAAAC,mCAAA,SACIC,G,QAEQroB,EAA0BqoB,EAAY,MACxChwD,GAA6C,QAA3B,EAAiB,QAAjB,EADUgwD,EAAY,eACP,UAAE,eAAEhiE,gBAAQ,eAAEkJ,UAAW,CAAC,EAEjE,OAAOrb,KAAKy/D,WAAW,CACnBnkD,UAAWwwC,EAAMptD,KAAKm1E,WACtBt4D,SAAUuwC,EAAMptD,KAAKo1E,QACrBtiD,MAAOs6B,EAAMioB,cACbt4D,SAAU0I,EAAgB+/B,eAC1BvoC,KAAMwI,EAAgB6vD,aACtBn4D,YAAasI,EAAgBigC,aAC7BtoC,WAAYqI,EAAgBkgC,YAC5B7c,oBAAqBrjB,EAAgB8vD,cAE7C,EAOA,YAAA5wB,oBAAA,SAAoBjlB,GACV,MAAkCA,GAAS,CAAC,EAA1CklB,EAAK,QAAErjB,EAAM,SAAEtb,EAAK,QAAE8+B,EAAK,QAE7BE,EAAc,CAChBL,MAAOA,GAAS,GAAiBA,GAASA,OAAQ7/C,EAClDw8B,OAAQjgC,KAAK4jD,eAAe3jB,GAC5Btb,MAAOA,GAAS,GAAiBA,GAASA,OAAQlhB,EAClDggD,MAAOA,GAAS,GAAiBA,GAASA,OAAQhgD,GAGtD,OAAO,IAAA5B,QAAO8hD,EAAa,EAAA9d,MAC/B,EAEA,YAAA+d,eAAA,SAAe3jB,GAKX,OAAKA,GAA4B,iBAAXA,EAIlBA,EANc,MAUdA,EAXc,MAeXA,EAhBe,EAiB1B,EAOA,YAAAm0C,cAAA,SAAczsB,GACV,IAAM/pB,EAAU+pB,GAAa/vB,SAASsE,eAAeyrB,GAEjD/pB,IAEAA,EAAQQ,MAAM0hC,QAAU,OAEhC,EACJ,EAnTA,G,YChBA,kBACI,WAAoBlM,GAAA,KAAAA,cAAAA,CAA+B,CAqDvD,OAnDU,YAAAjO,YAAN,SACIp7B,EACAwoD,G,gIAUY,OARN3iD,EAAM,2BAA2B7F,EACjCrrB,EAAO6zE,EACP5zE,GAAU,eACZ,iBAAkB,GAClB,eAAgB,GAAYw0D,MACzB,IAGK,GAAM3zD,KAAK4zD,cAAc3hC,KAAsB7B,EAAK,CAAEjxB,QAAO,EAAED,KAAI,K,OAE/E,MAAO,CAAP,EAFY,SAEDA,M,QAGT,YAAAg0E,YAAN,SACIH,G,8HAUY,OAPN7zE,EAAO6zE,EACP5zE,GAAU,eACZ,iBAAkB,GAClB,eAAgB,GAAYw0D,MACzB,IAGK,GAAM3zD,KAAK4zD,cAAc1hC,IARzB,gDAQ6D,CAAE/yB,QAAO,EAAED,KAAI,K,OAExF,MAAO,CAAP,EAFY,SAEDA,M,QAGT,YAAAi0E,eAAN,SACI5rE,EACAhF,G,YADA,IAAAgF,IAAAA,EAAA,mB,uHAUY,OAPN6oB,EAAM,kCAAkC7oB,EACxCpI,GAAU,eACZ,iBAAkB,GAClB,eAAgB,GAAYw0D,MACzB,IAGK,GAAM3zD,KAAK4zD,cAAc91D,IAA2BsyB,GAAK,eACjEjxB,QAAO,GACJoD,K,OAGP,MAAO,CAAP,EALY,SAKDrD,M,QAEnB,EAtDA,G,YCCA,kBAGI,WAAoB8/B,GAAA,KAAAA,aAAAA,EAChBh/B,KAAK4vB,OAASA,MAClB,CA2JJ,OAzJU,YAAAy9C,aAAN,SACItqD,EACA84B,EACA2xB,EACAC,G,qGAQA,OANMC,EAAwB1tE,KAAK2tE,gCAC/B5qD,EACA84B,EACA2xB,GAGG,CAAP,EAAOxtE,KAAK8gD,cAAc4sB,EAAuBD,G,QAGvC,YAAA3sB,cAAd,SACI4sB,EACAD,G,YAAA,IAAAA,IAAAA,GAAA,I,kIAEKztE,KAAK4vB,OAAOixB,SAAU4sB,EAAvB,OACMlrE,EAAUvC,KAAK6tE,gBACjBH,EAAsBnrE,SAEpB+7B,EAAat+B,KAAK6tE,gBACpBH,EAAsBpvC,YAIpBwvC,EAAc,IAAIC,gBAAgBxrE,GAASO,WAC3CkgD,EAAegrB,iCAAgBF,EAErC,GAAM9tE,KAAKg/B,aAAaF,WAAWkkB,EAAW,CAAE7E,OAAO,EAAM7f,WAAU,M,OAAvE,S,iBAGJ,IAAKt+B,KAAK4vB,OAAOixB,OACb,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO7gD,KAAK4vB,OAAOixB,Q,QAGf,YAAA8sB,gCAAR,SACI5qD,EACA84B,EACA2xB,QAAA,IAAAA,IAAAA,GAAA,GAEQ,IAAAjoE,EAAwCwd,EAAa,GAAjDk9B,EAAoCl9B,EAAa,YAApCytB,EAAuBztB,EAAa,mBAE7D,KAAKytB,aAAkB,EAAlBA,EAAoBma,UACrB,MAAM,IAAI,GAAiB,GAAqB5yC,sBAIhD,IAAA0qC,EAYAjS,EAAkB,OAXlBma,EAWAna,EAAkB,SAVlBuS,EAUAvS,EAAkB,WATlBy9B,EASAz9B,EAAkB,aARlB09B,EAQA19B,EAAkB,cAPlB29B,EAOA39B,EAAkB,eANlB49B,EAMA59B,EAAkB,wBALlB69B,EAKA79B,EAAkB,wBAJlB89B,EAIA99B,EAAkB,0BAHlB,EAGAA,EAAkB,mCAHlB+9B,OAAkC,IAAG,KAAE,EACvC,EAEA/9B,EAAkB,iCAFlBg+B,OAAgC,IAAG,KAAE,EACrCC,EACAj+B,EAAkB,mBAEhBkS,EAAS0rB,GAA2BZ,EAEpCkB,EAA0B,8BAAPnpE,EACnBopE,EAAoBD,EAAmB,CAAC,QAAU,GAClDE,EAAsBF,EAA8B,GAAX,CAAC,QAE1CI,EAAsBT,EAA0B,CAAC,SAAU,YAAc,GACzEU,EAAwBV,EAAmD,GAAzB,CAAC,SAAU,YAE7DW,EAAmBxB,IAA8B9qB,EACjDusB,EAAqBD,GAAoBb,EAAiB,CAAC,SAAW,GACtEe,EAAuBF,GAAqBb,EAA6B,GAAZ,CAAC,SAC9DgB,EAAoBH,EAAmBR,EAAmC,GAC1EY,EAAqBJ,EACrBT,EAAmCvrE,QAC/B,SAACqsE,GAAgB,OAACb,EAAiCt7C,SAASm8C,EAA3C,IAErBd,EACAiB,EAA2Cf,EAAqB,CAAC,aAAe,GAChFI,EAA4CrB,EAC5C,CAAC,eACD,GACA8B,GAAc,oBACbV,EACAG,EACAG,EACAE,GAEDG,GAAa,oBACZZ,EACAG,EACAG,EACAE,GAGP,MAAO,CACH5sE,SAAS,eACL,YAAaooD,EACb,cAAe5H,EACf,iBAAkBwsB,EAAcnvE,OAAS,EAAImvE,OAAgB9rE,EAC7D,kBAAmB6rE,EAAelvE,OAAS,EAAIkvE,OAAiB7rE,EAChEi/C,OAAM,EACNF,YAAY,qBACR,UACA,gBACA,iBACA,SACGgtB,EACAX,GAEP56C,SAAU4nB,EACV4G,OAAM,GACF6rB,GAA6B,CAAE,gBAAiBL,IAExD3vC,WAAY,CACR,8BAA+B4vC,EAC/B,oBAAqBjuB,GAGjC,EAEQ,YAAA4tB,gBAAR,SAA2DphD,GACvD,IAAIgjD,EAAoB,CAAC,EAsBzB,OApBa9xE,OAAOwF,KAAKspB,GAEpB9Y,SAAQ,SAAClW,G,MACJa,EAAQmuB,EAAOhvB,GAGjBa,SAEU,KAAVA,GACCuB,MAAMC,QAAQxB,IAA2B,IAAjBA,EAAM8B,SAKnCqvE,GAAoB,gCACbA,KAAiB,MACnBhyE,GAAMoC,MAAMC,QAAQxB,GAASA,EAAMqB,KAAK,KAAOrB,EAAK,IAE7D,IAEOmxE,CACX,EACJ,EAhKA,G,YCOA,GAb+C,SAC3C7c,GAEQ,IAAAjyC,EAAYiyC,EAA0Bl2C,WAAU,QAExD,OAAO,IAAI,IACP,IAAAwjD,oBACAtN,EACA,IAAI,IAA4B,IAAAiB,qBAAoB,CAAEjzC,KAAMD,OAC5D,IAAI,IAA2B,KAAAozC,oBAEvC,ECEA,kBACI,WACYnB,EACAyhB,GADA,KAAAzhB,0BAAAA,EACA,KAAAyhB,iCAAAA,CACT,CAuPP,OArPU,YAAAh/B,WAAN,SACI9yC,G,0IAMA,GAJQ2Y,EAA0C3Y,EAAO,eAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAEnDouD,EAAevrC,QAAQlK,aAAc,EAAdA,EAAgBwpC,0BAExCn9C,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAKyT,EACD,MAAM,IAAI,GACN,2FAIR,GAAIy1C,IAAiBz1C,EAAe2gC,aAChC,MAAM,IAAI,GACN,wGAIR,GACI8U,GAC4E,mBAA/B,QAA7C,EAAOz1C,EAAewpC,+BAAuB,eAAEoC,0BAE/C,MAAM,IAAI,GACN,oK,OAIH6J,EAAD,MAGA,GAAM3wD,KAAK4yD,0BAA0BhgC,uB,OAArC,S,iBAUJ,OAJMipB,EAAe8U,EACfz1C,EAAe2gC,aACf77C,KAAK4yD,0BAA0Bl2C,WAAW4C,iBAAiB2U,SAAS3zB,KAE1E,GAAMN,KAAKq0E,iCAAiC3B,cAAcnrE,EAAUs0C,GAAc,I,cAAlF,SAEA77C,KAAKmvD,aAAa1nD,EAAaF,EAAU2T,G,YAG7C,YAAAsgC,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAuwB,aAAR,SACI1nD,EACAF,EACA2T,GAHJ,I,EAAA,OAKYwpC,EAA+CxpC,EAAc,wBAApCkjB,EAAsBljB,EAAc,MAA7Bo5D,EAAep5D,EAAc,WAE/D03D,EAAY5yE,KAAKq0E,iCAAiCxB,sBAClD9wE,EAAQ/B,KAAK4yD,0BAA0Bl2C,WAGrC0xD,GADJrsE,EAAM6jB,wBAA0Dre,GAClBipC,oBAAsB,CAAC,GAAC,wBAEpE+jC,EAAmB,CACrB5uB,YAAa,WAAM,SAAK0uB,iCAAiC1uB,YAAY,iBAAlD,EACnBE,UAAW,SAAC,G,IAAE2uB,EAAO,UACjB,SAAKH,iCAAiCrtB,gBAAgBz/C,EAAUitE,EAAhE,GAGFC,EAAsB,CACxBhlB,QAAS,WAAM,SAAKilB,YAAYhwB,EAAjB,EACfiwB,SAAU,WAAM,SAAK/hB,0BAA0BhgC,qBAA/B,GAQdgiD,GAJoB,QADmB,EACzC7yE,EAAMme,wBAAgB,eAAE0Q,iBAAiBC,SACrC,0CAIF,CACIgkD,wBAAyB,SAAC9wE,GACtB,SAAK8wE,wBAAwB9wE,EAA7B,EACJ+wE,wBAAyB,SAAC/wE,GACtB,SAAK+wE,wBAAwB/wE,EAA7B,GAER,CACIgxE,iBAAkB,SAAChxE,GACf,SAAKgxE,iBAAiBhxE,EAAtB,GAGRixE,GAA0B,gCACzBJ,GAAyB,CAC5B/uB,UAAW,SAAC9hD,EAA8BunD,GACtC,SAAK2pB,wBAAwBlxE,EAAMunD,EAAS/jD,EAAU+sE,EAAtD,IAGFY,GAAmB,6CACrB9vB,cAAewtB,EAAUvtB,QAAQC,OACjClnB,MAAOp+B,KAAKq0E,iCAAiChxB,oBAAoBjlB,IAC9Dm2C,GACC7vB,GAA2B+vB,GAC3BrG,GAA2B4G,GAG7BG,EAAevC,EAAUntB,QAAQyvB,GAEnCC,EAAanvB,aACbmvB,EAAa73C,OAAO,IAAI71B,GAExBzH,KAAKq0E,iCAAiCD,cAAc3sE,EAE5D,EAEc,YAAAitE,YAAd,SACIhwB,G,mIAEIA,EACmB,GAAM1kD,KAAKq0E,iCAAiCvB,wBAC3DpuB,IAFJ,M,OAKA,OAJM+O,EAAa,SAInB,GAAMzzD,KAAK4yD,0BAA0BrgC,aAAakhC,EAAWluD,K,OAA7D,S,mCAIM,YAAA0vE,wBAAd,SACIlxE,EACAunD,EACA/jD,EACA+sE,G,sIAEA,IAAKvwE,EAAKywE,QACN,MAAM,IAAI,GAAiB,GAAqB58D,gBAK/B,OAFf7V,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvC3V,EAAOhF,EAAMud,iBACE,GAAMgsC,EAAQ59C,MAAM5P,O,OAAnCq2E,EAAe,S,iBAQjB,O,uBALM3vE,EACFxE,KAAKq0E,iCAAiCT,kCAClCO,GAGR,GAAMn0E,KAAK4yD,0BAA0Bjb,qBAAqBnzC,I,cAA1D,SAEIuC,EAAK0hB,UAAUC,cAActoB,OAAS,GAChC+jB,EACFnkB,KAAKq0E,iCAAiCH,mCAClCC,GAGR,GAAMn0E,KAAK4yD,0BAA0Bhb,sBAAsBzzB,KAN3D,M,OAOA,OADA,SACA,GAAMnkB,KAAKq0E,iCAAiCnB,e,OAA5C,S,iBAGJ,SAAMlzE,KAAK4yD,0BAA0BztB,YAAY,CAAC,EAAG,CAAEvW,OAAQ,CAAErnB,SAAQ,M,OACzE,OADA,SACA,GAAMvH,KAAKq0E,iCAAiC1tC,cAAcp/B,EAAUxD,EAAKywE,U,OAMzE,OANA,SAEIF,GAAoC,mBAAfA,GACrBA,IAGG,CAAP,GAAO,G,OAEP,M,WAAM,IAAIx1E,MAAM,G,0BAIV,YAAA+1E,wBAAd,SACI9wE,G,gIAEMsX,EAAUrb,KAAKq0E,iCAAiC5U,WAAW,CAC7D9jD,KAAM5X,EAAKogB,gBAAgBxI,KAC3BE,YAAa9X,EAAKogB,gBAAgBtI,YAClCC,WAAY/X,EAAKogB,gBAAgBrI,WACjC0rB,oBAAqBzjC,EAAKogB,gBAAgBpiB,Q,iBAM1C,O,sBAAA,GAAM/B,KAAK4yD,0BAA0Bjb,qBAAqBt8B,I,OAC1D,OADA,SACA,GAAMrb,KAAK4yD,0BAA0Bhb,sBAAsBv8B,I,OAI3D,OAJA,SAEMu0B,EAAiB5vC,KAAKq0E,iCAAiCZ,2BAE7D,GAAMzzE,KAAK4yD,0BAA0B1e,qBAAqBtE,EAAerqC,K,OACzE,OADA,SACA,GAAMvF,KAAKq0E,iCAAiCnB,e,cAA5C,S,aAEA,M,WAAM,IAAIp0E,MAAM,G,yBAIV,YAAAg2E,wBAAd,SACI/wE,G,8HAEM6rC,EAAiB5vC,KAAKq0E,iCAAiCZ,yBACzD1vE,EAAKikB,uBAAuBziB,I,iBAI5B,O,sBAAA,GAAMvF,KAAK4yD,0BAA0B1e,qBAAqBtE,EAAerqC,K,OACzE,OADA,SACA,GAAMvF,KAAKq0E,iCAAiCnB,e,cAA5C,S,aAEA,M,WAAM,IAAIp0E,MAAM,G,yBAIV,YAAAi2E,iBAAd,SAA+BhxE,G,sIACrBsX,EAAUrb,KAAKq0E,iCAAiC5U,WAAW,CAC7D9jD,KAAM5X,EAAKwjD,iBAAiB5rC,KAC5BE,YAAa9X,EAAKwjD,iBAAiBnD,aACnCtoC,WAAY/X,EAAKwjD,iBAAiBlD,YAClC7c,oBAAqBzjC,EAAKwjD,iBAAiBxlD,Q,iBAI3C,O,sBAAA,GAAM/B,KAAK4yD,0BAA0Bjb,qBAAqBt8B,I,OAC1D,OADA,SACA,GAAMrb,KAAK4yD,0BAA0Bhb,sBAAsBv8B,I,OAM3D,OANA,SAEMu0B,EAAiB5vC,KAAKq0E,iCAAiCZ,yBAC5B,QADoD,EACjF1vE,EAAKqxE,gCAAwB,eAAE7vE,IAGnC,GAAMvF,KAAK4yD,0BAA0B1e,qBAAqBtE,EAAerqC,K,OACzE,OADA,SACA,GAAMvF,KAAKq0E,iCAAiCnB,e,cAA5C,S,aAEA,M,WAAM,IAAIp0E,MAAM,G,yBAG5B,EA3PA,G,YCRA,GAAe2zD,IANX,SAACG,GACD,WAAI,GACAA,EACA,GAAuCA,GAF3C,GAKkE,CAAC,CAAErtD,GAAI,oBCA7E,kBAGI,WAAoBy5B,GAAA,KAAAA,aAAAA,EAChBh/B,KAAK4vB,OAASA,MAClB,CAkOJ,OAhOU,YAAAylD,qBAAN,SACItyD,EACA84B,EACA+S,G,mIAEK5uD,KAAK4vB,OAAO0lD,kBAAb,OACM7oD,EAASzsB,KAAKu1E,kCAChBxyD,EACA84B,EACA+S,GAGJ,GAAM5uD,KAAK0yE,cAAcjmD,K,OAEzB,GAFA,UAEKzsB,KAAK4vB,OAAO0lD,kBACb,MAAM,IAAI,G,iBAIlB,MAAO,CAAP,EAAOt1E,KAAK4vB,OAAO0lD,mB,QAGjB,YAAAE,iBAAN,SACIzyD,EACA84B,G,mIAEK77C,KAAK4vB,OAAO6lD,WAAb,OACMhpD,EAASzsB,KAAK01E,6BAA6B3yD,EAAe84B,GAEhE,GAAM77C,KAAK0yE,cAAcjmD,K,OAEzB,GAFA,UAEKzsB,KAAK4vB,OAAO6lD,WACb,MAAM,IAAI,G,iBAIlB,MAAO,CAAP,EAAOz1E,KAAK4vB,OAAO6lD,Y,QAGjB,YAAAE,kBAAN,SACI5yD,EACA84B,G,mIAEK77C,KAAK4vB,OAAOgmD,eAAb,OACMC,EAA0B71E,KAAK81E,kCACjC/yD,EACA84B,GAGJ,GAAM77C,KAAK0yE,cAAcmD,K,OAEzB,GAFA,UAEK71E,KAAK4vB,OAAOgmD,eACb,MAAM,IAAI,G,iBAIlB,MAAO,CAAP,EAAO51E,KAAK4vB,OAAOgmD,gB,QAST,YAAAlD,cAAd,SAA4B,G,IAAEnwE,EAAO,UAAE+7B,EAAU,a,kIAQ7C,OAPMy3C,EAAgB/1E,KAAK6tE,gBAA4CtrE,GACjEyzE,EAAmBh2E,KAAK6tE,gBAA+CvvC,GAGvEwvC,EAAc,IAAIC,gBAAgBgI,GAAejzE,WACjDkgD,EAAegrB,iCAAgBF,EAErC,GAAM9tE,KAAKg/B,aAAaF,WAAWkkB,EAAW,CAC1C7E,OAAO,EACP7f,WAAY03C,K,cAFhB,S,YAWI,YAAAT,kCAAR,SACIxyD,EACA84B,EACA+S,GAEQ,IAAA3O,EAAoCl9B,EAAa,YAApCytB,EAAuBztB,EAAa,mBAEzD,IAAKytB,IAAuBA,EAAmBma,SAC3C,MAAM,IAAI,GAAiB,GAAqB5yC,sBAIhD,IAAA0qC,EAKAjS,EAAkB,OAJlBma,EAIAna,EAAkB,SAHlBuS,EAGAvS,EAAkB,WAFlB09B,EAEA19B,EAAkB,cADlBylC,EACAzlC,EAAkB,mBAEtB,MAAO,CACHjuC,QAAS,CACL,YAAaooD,EACb,cAAe5H,EACfL,QAAQ,EACRF,WAAY,CAAC,YACbvuB,SAAU4nB,EACV4G,OAAM,GAEVnkB,WAAY,CACR,0BAA2BswB,EAAUtrD,QAAQ,KAAM,IACnD,iBAAkB,oBAClB,8BAA+B4qE,EAC/B,qBAAsB+H,GAAsBh2B,GAGxD,EAEQ,YAAAy1B,6BAAR,SACI3yD,EACA84B,GAEQ,IAAArL,EAAuBztB,EAAa,mBAE5C,IAAKytB,IAAuBA,EAAmBma,SAC3C,MAAM,IAAI,GAAiB,GAAqB5yC,sBAIhD,IAAA0qC,EAQAjS,EAAkB,OAPlBma,EAOAna,EAAkB,SANlBuS,EAMAvS,EAAkB,WALlBy9B,EAKAz9B,EAAkB,aAJlB09B,EAIA19B,EAAkB,cAHlB89B,EAGA99B,EAAkB,0BAFlB,EAEAA,EAAkB,mCAFlB+9B,OAAkC,IAAG,KAAE,EACvC,EACA/9B,EAAkB,iCADlBg+B,OAAgC,IAAG,KAAE,EAGnCW,EAAoBX,EACpBY,EAAqBb,EAAmCvrE,QAC1D,SAACqsE,GAAgB,OAACb,EAAiCt7C,SAASm8C,EAA3C,IAGrB,MAAO,CACH9sE,SAAS,eACL,YAAaooD,EACb,cAAe5H,EACf,iBAAkBosB,EAAkB/uE,OAAS,EAAI+uE,OAAoB1rE,EACrE,kBAAmB2rE,EAAmBhvE,OAAS,EAAIgvE,OAAqB3rE,EACxEi/C,QAAQ,EACRF,WAAY,CAAC,UAAW,kBACxBvuB,SAAU4nB,EACV4G,OAAM,GACF6rB,GAA6B,CAAE,gBAAiBL,IAExD3vC,WAAY,CACR,8BAA+B4vC,EAC/B,iBAAkB,cAG9B,EAEQ,YAAA4H,kCAAR,SACI/yD,EACA84B,GAEQ,IAAArL,EAAuBztB,EAAa,mBAE5C,IAAKytB,IAAuBA,EAAmBma,SAC3C,MAAM,IAAI,GAAiB,GAAqB5yC,sBAG5C,IAAA4yC,EACJna,EAAkB,SADJuS,EACdvS,EAAkB,WADQ09B,EAC1B19B,EAAkB,cADuB89B,EACzC99B,EAAkB,0BADkDy9B,EACpEz9B,EAAkB,aAEtB,MAAO,CACHjuC,SAAS,eACL,YAAaooD,EACb,cAAe5H,EACfP,WAAY,CAAC,YACbvuB,SAAU4nB,GACNyyB,GAA6B,CAAE,gBAAiBL,IAExD3vC,WAAY,CACR,iBAAkB,iBAClB,8BAA+B4vC,GAG3C,EAOQ,YAAAL,gBAAR,SAA2DphD,GACvD,IAAIgjD,EAAoB,CAAC,EAsBzB,OApBa9xE,OAAOwF,KAAKspB,GAEpB9Y,SAAQ,SAAClW,G,MACJa,EAAQmuB,EAAOhvB,GAGjBa,SAEU,KAAVA,GACCuB,MAAMC,QAAQxB,IAA2B,IAAjBA,EAAM8B,SAKnCqvE,GAAoB,gCACbA,KAAiB,MACnBhyE,GAAMoC,MAAMC,QAAQxB,GAASA,EAAMqB,KAAK,KAAOrB,EAAK,IAE7D,IAEOmxE,CACX,EACJ,EAvOA,G,YCaA,kBACI,WACY7c,EACAyhB,EACA6B,GAFA,KAAAtjB,0BAAAA,EACA,KAAAyhB,iCAAAA,EACA,KAAA6B,kBAAAA,CACT,CA4SP,OA1SU,YAAA7gC,WAAN,SACI9yC,G,kJAWA,GATQ4zE,EAAgD5zE,EAAO,qBAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAE3DmiD,GADE,EAIFyxB,GAAwB,CAAC,GAHF,wBACTxD,EAAoB,eAClCluB,EAAoB,uBAGlBkM,IAAiBjM,GAElBn9C,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAK0uE,EACD,MAAM,IAAI,GACN,iGAIR,GAAIxlB,IAAiBgiB,EACjB,MAAM,IAAI,GACN,8GAIR,GACIhiB,GAC6D,mBAAtDjM,aAAuB,EAAvBA,EAAyBoC,0BAEhC,MAAM,IAAI,GACN,0K,OAIH6J,EAAD,MAGA,GAAM3wD,KAAK4yD,0BAA0BhgC,uB,OAArC,S,iBAYJ,OATM7wB,EAAQ/B,KAAK4yD,0BAA0Bl2C,WAKvCm/B,EAAe8U,EACfgiB,EACA5wE,EAAMud,iBAAiB2U,SAAS3zB,KAEtC,GAAMN,KAAKq0E,iCAAiC3B,cAAcnrE,EAAUs0C,GAAc,I,cAAlF,SAEA77C,KAAKmvD,aAAa1nD,EAAaF,EAAU4uE,GAErCt6B,GAAgB4I,GACV1hC,EACFhhB,EAAM6jB,wBAA0Dre,GAElD,GAAMvH,KAAKk2E,kBAAkBP,kBAC3C5yD,EACA84B,KANJ,M,OAIM+2B,EAAY,SAKlB5yE,KAAKo2E,eAAexD,EAAWnuB,G,mCAIvC,YAAAjJ,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAuwB,aAAR,SACI1nD,EACAF,EACA4uE,GAHJ,I,EAAA,OAKYzxB,EAA+CyxB,EAAoB,wBAA1C/3C,EAAsB+3C,EAAoB,MAAnC7B,EAAe6B,EAAoB,WAErEvD,EAAY5yE,KAAKq0E,iCAAiCxB,sBAClD9wE,EAAQ/B,KAAK4yD,0BAA0Bl2C,WAGrC0xD,GADJrsE,EAAM6jB,wBAA0Dre,GAClBipC,oBAAsB,CAAC,GAAC,wBAEpE+jC,EAAmB,CACrB5uB,YAAa,WACT,SAAK0uB,iCAAiC1uB,YAAY,uBAAlD,EACJE,UAAW,SAAC,G,IAAE2uB,EAAO,UACjB,SAAKH,iCAAiCrtB,gBAAgBz/C,EAAUitE,EAAhE,GAGFC,EAAsB,CACxBhlB,QAAS,WAAM,SAAKilB,YAAYhwB,EAAjB,EACfiwB,SAAU,WAAM,SAAK/hB,0BAA0BhgC,qBAA/B,GAQdgiD,GAJoB,QADmB,EACzC7yE,EAAMme,wBAAgB,eAAE0Q,iBAAiBC,SACrC,0CAIF,CACIgkD,wBAAyB,SAAC9wE,GACtB,SAAK8wE,wBAAwB9wE,EAA7B,EACJ+wE,wBAAyB,SAAC/wE,GACtB,SAAK+wE,wBAAwB/wE,EAA7B,GAER,CACIgxE,iBAAkB,SAAChxE,GACf,SAAKgxE,iBAAiBhxE,EAAtB,GAGRixE,GAA0B,gCACzBJ,GAAyB,CAC5B/uB,UAAW,SAAC9hD,EAA8BunD,GACtC,SAAK2pB,wBAAwBlxE,EAAMunD,EAAS/jD,EAAU+sE,EAAtD,IAGFvsB,EAAiB,CAAC6qB,EAAUvtB,QAAQ2C,SAAU4qB,EAAUvtB,QAAQ4C,QAClEH,GAAyB,EAE7BC,EAAep0C,SAAQ,SAACyxC,GACpB,IAAK0C,EAAwB,CACzB,IAAMotB,GAAmB,6CACrB9vB,cAAa,EACbhnB,MAAO,EAAKi2C,iCAAiChxB,oBAAoBjlB,IAC9Dm2C,GACC7vB,GAA2B+vB,GAC3BrG,GAA2B4G,GAG7BG,EAAevC,EAAUntB,QAAQyvB,GAEnCC,EAAanvB,eACbmvB,EAAa73C,OAAO,IAAI71B,GACxBqgD,GAAyB,E,CAGrC,IAEKA,GACD9nD,KAAKq0E,iCAAiCD,cAAc3sE,EAE5D,EAEc,YAAAitE,YAAd,SACIhwB,G,mIAEIA,EACmB,GAAM1kD,KAAKq0E,iCAAiCvB,wBAC3DpuB,IAFJ,M,OAKA,OAJM+O,EAAa,SAInB,GAAMzzD,KAAK4yD,0BAA0BrgC,aAAakhC,EAAWluD,K,OAA7D,S,mCAIM,YAAA0vE,wBAAd,SACIlxE,EACAunD,EACA/jD,EACA+sE,G,sIAEA,IAAKvwE,EAAKywE,QACN,MAAM,IAAI,GAAiB,GAAqB58D,gBAK/B,OAFf7V,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvC3V,EAAOhF,EAAMud,iBACE,GAAMgsC,EAAQ59C,MAAM5P,O,OAAnCq2E,EAAe,S,iBAQjB,O,uBALM3vE,EACFxE,KAAKq0E,iCAAiCT,kCAClCO,GAGR,GAAMn0E,KAAK4yD,0BAA0Bjb,qBAAqBnzC,I,cAA1D,SAEIuC,EAAK0hB,UAAUC,cAActoB,OAAS,GAChC+jB,EACFnkB,KAAKq0E,iCAAiCH,mCAClCC,GAGR,GAAMn0E,KAAK4yD,0BAA0Bhb,sBAAsBzzB,KAN3D,M,OAOA,OADA,SACA,GAAMnkB,KAAKq0E,iCAAiCnB,e,OAA5C,S,iBAGJ,SAAMlzE,KAAK4yD,0BAA0BztB,YAAY,CAAC,EAAG,CAAEvW,OAAQ,CAAErnB,SAAQ,M,OACzE,OADA,SACA,GAAMvH,KAAKq0E,iCAAiC1tC,cAAcp/B,EAAUxD,EAAKywE,U,OAMzE,OANA,SAEIF,GAAoC,mBAAfA,GACrBA,IAGG,CAAP,GAAO,G,OAEP,M,WAAM,IAAIx1E,MAAM,G,0BAIV,YAAA+1E,wBAAd,SACI9wE,G,gIAEMsX,EAAUrb,KAAKq0E,iCAAiC5U,WAAW,CAC7D9jD,KAAM5X,EAAKogB,gBAAgBxI,KAC3BE,YAAa9X,EAAKogB,gBAAgBtI,YAClCC,WAAY/X,EAAKogB,gBAAgBrI,WACjC0rB,oBAAqBzjC,EAAKogB,gBAAgBpiB,Q,iBAM1C,O,sBAAA,GAAM/B,KAAK4yD,0BAA0Bjb,qBAAqBt8B,I,OAC1D,OADA,SACA,GAAMrb,KAAK4yD,0BAA0Bhb,sBAAsBv8B,I,OAI3D,OAJA,SAEMu0B,EAAiB5vC,KAAKq0E,iCAAiCZ,2BAE7D,GAAMzzE,KAAK4yD,0BAA0B1e,qBAAqBtE,EAAerqC,K,OACzE,OADA,SACA,GAAMvF,KAAKq0E,iCAAiCnB,e,cAA5C,S,aAEA,M,WAAM,IAAIp0E,MAAM,G,yBAIV,YAAAg2E,wBAAd,SACI/wE,G,8HAEM6rC,EAAiB5vC,KAAKq0E,iCAAiCZ,yBACzD1vE,EAAKikB,uBAAuBziB,I,iBAI5B,O,sBAAA,GAAMvF,KAAK4yD,0BAA0B1e,qBAAqBtE,EAAerqC,K,OACzE,OADA,SACA,GAAMvF,KAAKq0E,iCAAiCnB,e,cAA5C,S,aAEA,M,WAAM,IAAIp0E,MAAM,G,yBAIV,YAAAi2E,iBAAd,SAA+BhxE,G,sIACrBsX,EAAUrb,KAAKq0E,iCAAiC5U,WAAW,CAC7D9jD,KAAM5X,EAAKwjD,iBAAiB5rC,KAC5BE,YAAa9X,EAAKwjD,iBAAiBnD,aACnCtoC,WAAY/X,EAAKwjD,iBAAiBlD,YAClC7c,oBAAqBzjC,EAAKwjD,iBAAiBxlD,Q,iBAI3C,O,sBAAA,GAAM/B,KAAK4yD,0BAA0Bjb,qBAAqBt8B,I,OAC1D,OADA,SACA,GAAMrb,KAAK4yD,0BAA0Bhb,sBAAsBv8B,I,OAM3D,OANA,SAEMu0B,EAAiB5vC,KAAKq0E,iCAAiCZ,yBAC5B,QADoD,EACjF1vE,EAAKqxE,gCAAwB,eAAE7vE,IAGnC,GAAMvF,KAAK4yD,0BAA0B1e,qBAAqBtE,EAAerqC,K,OACzE,OADA,SACA,GAAMvF,KAAKq0E,iCAAiCnB,e,cAA5C,S,aAEA,M,WAAM,IAAIp0E,MAAM,G,yBAIhB,YAAAs3E,eAAR,SACIC,EACA5xB,GAEA,GAAIA,GAAwB7sB,SAASsE,eAAeuoB,GAAuB,CACvE,IAIM6xB,EAA0C,CAC5C3hD,OALa30B,KAAK4yD,0BAA0Bl2C,WAAWwM,qBAE/BQ,mBAIxB08B,UAAW,OACXhoB,MAAO,CACHolB,OAAQ,SAIO6yB,EAAkBlwB,SAASmwB,GAEnCh5C,OAAO,IAAImnB,E,CAElC,EACJ,EAjTA,G,YCXA,GAAegO,IAPX,SAACG,GACD,WAAI,GACAA,EACA,GAAuCA,GCVpC,IAAI,IAAkB,KAAAhuB,uBDQ7B,GAMwE,CACxE,CAAEr/B,GAAI,0BEAV,kBACI,WACYqtD,EACAyhB,GADA,KAAAzhB,0BAAAA,EACA,KAAAyhB,iCAAAA,CACT,CAgIP,OA9HU,YAAAh/B,WAAN,SACI9yC,G,0IAQA,GANQg0E,EAA+Ch0E,EAAO,oBAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SACtDmiD,GAAF,EACF6xB,GAAuB,CAAC,GADG,wBAAgB5D,EAAoB,eAG7DhiB,IAAiBjM,GAElBn9C,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAK8uE,EACD,MAAM,IAAI,GACN,gGAIR,GAAI5lB,IAAiBgiB,EACjB,MAAM,IAAI,GACN,6GAIR,GACIhiB,GAC6D,mBAAtDjM,aAAuB,EAAvBA,EAAyBoC,0BAEhC,MAAM,IAAI,GACN,yK,OAIH6J,EAAD,MAGA,GAAM3wD,KAAK4yD,0BAA0BhgC,uB,OAArC,S,iBAUJ,OAJMipB,EAAe8U,EACfgiB,EACA3yE,KAAK4yD,0BAA0Bl2C,WAAW4C,iBAAiB2U,SAAS3zB,KAE1E,GAAMN,KAAKq0E,iCAAiC3B,cAAcnrE,EAAUs0C,GAAc,I,cAAlF,SAEA77C,KAAKmvD,aAAa1nD,EAAaF,EAAUgvE,G,YAG7C,YAAA/6B,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAuwB,aAAR,SACI1nD,EACAF,EACAgvE,GAHJ,WAKY7xB,EAAmC6xB,EAAmB,wBAA7Bn4C,EAAUm4C,EAAmB,MAExD3D,EAAY5yE,KAAKq0E,iCAAiCxB,sBAClDztB,EAAgBwtB,EAAUvtB,QAAQmxB,MAElCjC,EAAmB,CACrB5uB,YAAa,WACT,SAAK0uB,iCAAiC1uB,YAAY,sBAAlD,EACJE,UAAW,SAAC,G,IAAE2uB,EAAO,UACjB,SAAKH,iCAAiCrtB,gBAAgBz/C,EAAUitE,EAAhE,GAGFC,EAAsB,CACxBhlB,QAAS,WAAM,SAAKilB,YAAYhwB,EAAjB,EACfiwB,SAAU,WAAM,SAAK/hB,0BAA0BhgC,qBAA/B,GAGdsiD,GAAmB,8BACrB9vB,cAAa,EACbhnB,MAAOp+B,KAAKy2E,0BAA0Br4C,IACnCm2C,GACC7vB,GAA2B+vB,GAG7BjvB,EAAqBotB,EAAUntB,QAAQyvB,GAEzC1vB,EAAmBQ,aACnBR,EAAmBloB,OAAO,IAAI71B,GAE9BzH,KAAKq0E,iCAAiCD,cAAc3sE,EAE5D,EAEQ,YAAAgvE,0BAAR,SAAkCr4C,GAC9B,IAAMmnB,EAAmBvlD,KAAKq0E,iCAAiChxB,oBAAoBjlB,GAEnF,OAAImnB,EAAiBjC,QAAU,GAAiBozB,MACrC,gCACAnxB,GAAgB,CACnBjC,WAAO7/C,IAIR8hD,CACX,EAEc,YAAAmvB,YAAd,SACIhwB,G,mIAEIA,EACmB,GAAM1kD,KAAKq0E,iCAAiCvB,wBAC3DpuB,IAFJ,M,OAKA,OAJM+O,EAAa,SAInB,GAAMzzD,KAAK4yD,0BAA0BrgC,aAAakhC,EAAWluD,K,OAA7D,S,mCAGZ,EApIA,G,YCHA,GAAektD,IANX,SAACG,GACD,WAAI,GACAA,EACA,GAAuCA,GAF3C,GAKuE,CACvE,CAAErtD,GAAI,yBCAV,kBAGI,WACYqtD,EACAyhB,GADA,KAAAzhB,0BAAAA,EACA,KAAAyhB,iCAAAA,CACT,CAqIP,OAnIU,YAAAh/B,WAAN,SACI9yC,G,4IAYA,GATQo0E,EAA4Dp0E,EAAO,iCAAjCkF,EAA0BlF,EAAO,YAApBgF,EAAahF,EAAO,SAEvE8sE,GADE,EAIFsH,GAAoC,CAAC,GAHlC,IACHjyB,EAAuB,0BACTiuB,EAAoB,eAGhChiB,IAAiBjM,GAElBn9C,EACD,MAAM,IAAI,GACN,qFAIR,IAAKE,EACD,MAAM,IAAI,GACN,wFAIR,IAAKkvE,EACD,MAAM,IAAI,GACN,6GAIR,IAAKtH,EACD,MAAM,IAAI,GACN,iHAIR,GAAI1e,IAAiBgiB,EACjB,MAAM,IAAI,GACN,0HAIR,GACIhiB,GAC6D,mBAAtDjM,aAAuB,EAAvBA,EAAyBoC,0BAEhC,MAAM,IAAI,GACN,sL,OAIH6J,EAAD,MAGA,GAAM3wD,KAAK4yD,0BAA0BhgC,uB,OAArC,S,iBAUJ,OAJMipB,EAAe8U,EACfgiB,EACA3yE,KAAK4yD,0BAA0Bl2C,WAAW4C,iBAAiB2U,SAAS3zB,KAE1E,GAAMN,KAAKq0E,iCAAiC3B,cAAcnrE,EAAUs0C,GAAc,I,cAAlF,SAEA77C,KAAKmvD,aAAa1nD,EAAaF,EAAUovE,G,YAG7C,YAAAn7B,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAuwB,aAAR,SACI1nD,EACAF,EACAovE,GAHJ,WAKYtH,EAAwCsH,EAAgC,IAAnEjyB,EAAmCiyB,EAAgC,wBAA1Cv4C,EAAUu4C,EAAgC,MAE1E/D,EAAY5yE,KAAKq0E,iCAAiCxB,sBAGxD,IAFiCl1E,OAAOgiB,OAAOizD,EAAUvtB,SAASnyB,SAASm8C,GAGvE,MAAM,IAAI,GACN,mIAIR,IAAMkF,EAAmB,CACrB5uB,YAAa,WACT,SAAK0uB,iCAAiC1uB,YAClC,kCADJ,EAGJE,UAAW,SAAC,G,IAAE2uB,EAAO,UACjB,SAAKH,iCAAiCrtB,gBAAgBz/C,EAAUitE,EAAhE,GAGFC,EAAsB,CACxBhlB,QAAS,WAAM,SAAKilB,YAAYhwB,EAAjB,EACfiwB,SAAU,WAAM,SAAK/hB,0BAA0BhgC,qBAA/B,GAGdsiD,GAAmB,8BACrB9vB,cAAeiqB,EACfjxC,MAAOp+B,KAAKq0E,iCAAiChxB,oBAAoBjlB,IAC9Dm2C,GACC7vB,GAA2B+vB,GAG7BjvB,EAAqBotB,EAAUntB,QAAQyvB,GAEzC1vB,EAAmBQ,aACnBR,EAAmBloB,OAAO,IAAI71B,GAE9BzH,KAAKq0E,iCAAiCD,cAAc3sE,EAE5D,EAEc,YAAAitE,YAAd,SACIhwB,G,mIAEIA,EACmB,GAAM1kD,KAAKq0E,iCAAiCvB,wBAC3DpuB,IAFJ,M,OAKA,OAJM+O,EAAa,SAInB,GAAMzzD,KAAK4yD,0BAA0BrgC,aAAakhC,EAAWluD,K,OAA7D,S,mCAGZ,EA3IA,G,YCDA,GAAektD,IANX,SAACG,GACD,WAAI,GACAA,EACA,GAAuCA,GAF3C,GAKoF,CACpF,CAAErtD,GAAI,sCC8BV,IAAY,GAKA,GAOA,GAOA,GAQA,IA3BZ,SAAYk6C,GACR,0BACA,qBACH,CAHD,CAAY,QAA6B,KAKzC,SAAYC,GACR,gBACA,kBACA,gBACA,yBACH,CALD,CAAY,QAA2B,KAOvC,SAAYC,GACR,cACA,cACA,kBACA,eACH,CALD,CAAY,QAA4B,KAOxC,SAAYC,GACR,sBACA,YACA,kBACA,kBACA,iBACH,CAND,CAAY,QAA4B,KAQxC,SAAYC,GACR,cACA,aACH,CAHD,CAAY,QAA4B,KC/CxC,kBACI,WACY+S,EACAgkB,EACAtY,GAFA,KAAA1L,0BAAAA,EACA,KAAAgkB,0BAAAA,EACA,KAAAtY,WAAAA,CACT,CA+IP,OA7IU,YAAAjpB,WAAN,SACI9yC,G,gIAKA,GAHMR,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvCqG,EAAgBhhB,EAAM6jB,wBAAwBrjB,EAAQgF,WAEvDhF,EAAQs+C,OACT,MAAM,IAAI,GAGd,IAAK99B,EAAc0J,OAAOs2B,WACtB,MAAM,IAAI,GAAiB,GAAqBhrC,sBAGlC,SAAM/X,KAAK42E,0BAA0BC,cACnD9zD,EAAc0J,OAAOs2B,a,cADnB+zB,EAAY,SAIlB92E,KAAKmvD,aAAa5sD,EAASu0E,G,YAG/B,YAAAt7B,aAAA,WACI,OAAOzsB,QAAQ6P,SACnB,EAEQ,YAAAuwB,aAAR,SACI5sD,EACAu0E,G,MAFJ,OAIYrvE,EAAkClF,EAAO,YAA5BgF,EAAqBhF,EAAO,SAAlBs+C,EAAWt+C,EAAO,OACzCuoD,EAAuEjK,EAAM,YAAhE8J,EAA0D9J,EAAM,SAAtDwF,EAAgDxF,EAAM,eAAtCqE,EAAgCrE,EAAM,qBAAhBziB,EAAUyiB,EAAM,MAG/E99B,EADQ/iB,KAAK4yD,0BAA0Bl2C,WACjBkJ,wBAAwBrjB,EAAQgF,UAE5D,IAAKwb,EAAc0J,OAAOs2B,WACtB,MAAM,IAAI,GAAiB,GAAqBhrC,sBAGpD,IAAMgrC,EAAahgC,EAAc0J,OAAOs2B,WAClC2C,EAAM3iC,EAAc0J,OAAOwxB,SAAW,UAAY,aAClDgC,IAAW,MAAyByF,GAAMiF,EAAQ,GAClDC,EAAsBksB,EAAUzxB,QAAQ4C,QAAU,SAClD4C,EAAiBC,EAAc,CAACF,GAAuB,GACvDG,EAAqBD,EAAsC,GAAxB,CAACF,GAE1C,OAAOksB,EAAU9rB,OAAO1tB,OACpB,CACIooB,IAAG,EACHtF,OAAQH,EACRyC,OAAQwC,EACR+F,QAAS,CACLC,QAASL,EACTM,WAAYJ,GAEhB3sB,MAAOp+B,KAAK+2E,SAAS34C,GACrBvwB,QAAS,SAACsS,EAAGmrC,GAAY,SAAK0rB,aAAaj0B,EAAYuI,EAASjF,EAAvC,EACzBkF,YAAa,SAACxnD,EAAMunD,GAChB,SAAKtE,gBAAgBjjD,EAAMwD,EAAU+jD,EAASpG,EAA9C,GAERz9C,EAER,EAEQ,YAAAsvE,SAAR,SAAiB34C,GACP,MAA+DA,GAAS,CAAC,EAAvEklB,EAAK,QAAEC,EAAY,eAAE5+B,EAAK,QAAE6+B,EAAM,SAAEC,EAAK,QAAElmB,EAAI,OAAEmmB,EAAO,UAEhE,MAAO,CACHJ,MAAK,EACLC,aAAY,EACZ5+B,MAAK,EACL6+B,OAAM,EACNC,MAAOA,GAAS,GAA6B2H,KAC7C7tB,KAAe,UAATA,EAAmB,GAA4B8tB,WAAa9tB,EAClEmmB,QAAO,EAEf,EAEc,YAAAszB,aAAd,SACIj0B,EACAuI,EACA9K,G,kIAEA,IAAK8K,EACD,MAAM,IAAI,GAAoB,GAAwBhB,8B,iBAIxC,O,sBAAA,GAAMtqD,KAAK4yD,0BAA0BhgC,uB,OAI5B,OAJjB7wB,EAAQ,SACF4sB,EAAW5sB,EAAMud,iBAAgB,GACvCsB,EAAO7e,EAAM4e,WAAa,GAET,GAAM2qC,EAAQpb,QAAQje,KACtCrR,EAAI,wCACP,CAAEmiC,WAAU,EAAEp0B,OAAM,GACpB,CACIxvB,SAAS,eACL,iBAAkB,IACf,O,OAKf,MAAO,CAAP,EAXuB,SAWDoG,I,OAMtB,M,WAJIi7C,GACAA,EAAQ,GAGN,E,yBAIA,YAAAwG,gBAAd,SACIjjD,EACAwD,EACA+jD,EACApG,G,gIAEA,IAAKoG,EACD,MAAM,IAAI,GAAoB,GAAwBhB,8BAG1D,IAAKvmD,EAAK2nD,YAAc3nD,EAAK4nD,QACzB,MAAM,IAAI,GAAiB,GAAqB9zC,gBAM7B,OAHjB9V,EAAQ/B,KAAK4yD,0BAA0Bl2C,WACvCqG,EAAgBhhB,EAAM6jB,wBAAwBre,GAE7B,GAAM+jD,EAAQz9C,QAAQ/P,IAAIiG,EAAK2nD,Y,OAEtD,OAFMurB,EAAiB,SAEhB,CAAP,EAAOj3E,KAAKs+D,WAAWnX,SAAS,gBAAiB,CAC7CC,aAAc,SACd3tC,SAAUsJ,EAAcxd,GACxBvD,OAAQkjD,EAAuB,kBAAoB,wBACnD/6B,UAAWpmB,EAAK2nD,UAChBE,QAAS7nD,EAAK4nD,QACdE,UAAWn3C,KAAKC,UAAUsiE,EAAenrB,MAAMC,e,QAG3D,EApJA,G,YCtBA,kBAGI,WAAoB/sB,GAAA,KAAAA,aAAAA,EAChBh/B,KAAK4vB,OAASA,MAClB,CAoBJ,OAlBU,YAAAinD,cAAN,SAAoB9zB,G,YAAA,IAAAA,IAAAA,EAAA,K,qHAUhB,OARMxgD,GAAO,eACT47C,OAAO,EACP7f,WAAY,CAAE,mBAAoBykB,IAC9BA,GAAc,CACdzkB,WAAY,CAAE,mBAAoBykB,KAI1C,GAAM/iD,KAAKg/B,aAAaF,WATN,8CAS4Bv8B,I,OAE9C,GAFA,UAEKvC,KAAK4vB,OAAOixB,OACb,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO7gD,KAAK4vB,OAAOixB,Q,QAE3B,EAzBA,G,YCcA,GAAe4R,IARX,SAACG,GACD,OAAO,IAAI,GACPA,EACA,IAAI,IAA0B,KAAAmB,qBAC9B,IAAAmM,oBAER,GAEqE,CAAC,CAAE36D,GAAI,mBCiB7D,SAAS2xE,GACpB30E,GAEM,MAA0BA,QAAAA,EAAW,CAAC,EAApCqe,EAAI,OAAE,IAAAE,OAAAA,OAAM,IAAG,OAAI,EAWrBuN,EAAQ1B,GAAoB,CAAEF,OATR,CACxBnlB,KAAM,CACFsZ,KAAMre,aAAO,EAAPA,EAASqe,KACfE,OAAQve,aAAO,EAAPA,EAASue,QAErBxhB,OAAQ,CAAC,EACTsE,SAAU,CAAC,KAITgwD,GAAgB,IAAAC,qBAAoB,CAAEjzC,KAAI,IAC1C09C,GAAa,IAAA4B,kBAAiB,CAAEt/C,KAAI,IAEpCu2D,ECxCK,SACXvkB,EACAwkB,QAAA,IAAAA,IAAAA,EAAA,GAOA,IALA,IAAMC,EAAW,IAAI,G,WAKPC,GAGV,ICzBO,SACXp6E,GAEA,MAAO,eAAgBA,CAC3B,CDsBaq6E,CAGCD,G,iBAKN,IAAyB,UAAAA,EAA6B5kB,WAA7B,eAAyC,CAA7D,IAAMrF,EAAU,KACjBgqB,EAASp3E,SAASotD,GAAY,WAC1B,OAAAiqB,EAA6B1kB,EAA7B,G,GAdmC,MAAAj1D,OAAO4vD,QAClD6pB,GAD2C,e,EAApC,KAA+B,IAmB1C,OAAOC,CACX,CDWuB,CGPR,SACXhpD,GAGI,MACAA,EAAM3R,WAAU,OADNiE,EAAO,UAAEE,EAAS,YAG1B+yC,GAAgB,IAAAC,qBAAoB,CAAEjzC,KAAMD,MAE5C62D,EAAyB,IAAI,GAC/BnhC,IAGEohC,EAAwB,IAAI,GAC9B,IAAI,GAAsB7jB,GAC1B,IAAI,GAAoB,IAAI,GAAoBA,IAChD,IAAI,GAAwB,IAAI,GAAwBA,KAGtD8jB,EAAoB,IAAI,GAAkB,IAAI,GAAsB9jB,IAEpE+jB,EAAoB,IAAI,GAAkBtpD,GAE1CupD,EAAqB,IAAI,GAC3B,IAAI,GAAmBhkB,GACvB,IAAI,GAAkB,IAAI,GAAsBA,KAG9CikB,EAA8B,IAAI,GACpC,IAAI,GAA4BjkB,GAChC,IAAI,GAA2B,IAAI,GAA2BA,KAG5DkkB,EAA2B,IAAI,GACjC,IAAI,GAAyBlkB,GAC7B,IAAI,GAAsBA,IAGxBmkB,EAA6B,IAAI,GACnC,IAAI,GAA2BnkB,IAG7BokB,EAAuB,IAAI,GAC7B,IAAI,GCtFG,SAA6B3pD,GACxC,IAAM4pD,GAAgB,qBAatB,OAXA5pD,EAAMipB,WACF,SAACv1C,GACG,IAAM0qB,EAAS1qB,EAAM0qB,OAAOvM,iBAExBuM,GACAwrD,EAAcC,QAAQzrD,EAAO0rD,gBAAgBC,cAErD,IACA,SAACr2E,GAAU,OAAAA,EAAM0qB,OAAOvM,gBAAb,IAGR+3D,CACX,CDuEiCI,CAAoBhqD,IAC7CupD,EACA,IAAI,GACJ,IAAI,GAAgC74C,IAAqB,KAAA6F,yBAGvD0zC,EAAkC,IAAI,GACxCv5C,IAAqB,KAAA6F,wBAGnB2zC,EAAwB,IAAI,GAC9B,IAAI,GAAsB3kB,GAC1B6jB,EACA,IAAI,GACA14C,IAAqB,KAAA6F,uBACrB,IAAI,GAA4BgvB,KAIlC4kB,EAA2B,IAAI,GACjC,IAAI,GAAyB5kB,IAG3B6kB,EAAiB15C,IAAqB,KAAA6F,uBACtC8zC,EAA8B,IAAI,GAA4B9kB,GAC9D+kB,EAA8B,IAAI,GACpCF,EACAC,GAGEE,EAAoB,IAAI,GAAkBhlB,GAE1CilB,EAAuC,IAAI,GAE3CC,EAA+B,IAAI,GACrC,IAAI,GAA6BllB,EAAe,CAAE9yC,OAAQD,MAC1DwN,GAGE0qD,EAA8B,IAAI,GACpC,IAAI,GAA4BnlB,GAChC6jB,GAGEuB,EAAqC,IAAI,GAE/C,OAAO,IAAI,GACP3qD,EACAmpD,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAM,EACAC,EACAK,EACAJ,EACAG,EACAE,EACAC,EACAC,EACAC,EAER,CHxGsCC,CAAgC5qD,IAGlE,OAAO,IAAI,GACPA,EACA,IAAI,GKpCG,SACXA,EACAulC,EACA0K,EACAx9C,EACAF,GAEA,IAAMy2D,EAAW,IAAI,GACfr4C,GAAe,KAAA+0B,mBACfmlB,EAAwB,IAAI,GAAsBtlB,GAClD6jB,EAAwB,IAAI,GAC9ByB,EACA,IAAI,GAAoB,IAAI,GAAoBtlB,IAChD,IAAI,GAAwB,IAAI,GAAwBA,KAGtDulB,EAAsB,IAAI,GAC5B,IAAI,GAAsBn6C,EAAcpP,SAEtCgpD,EAAoB,IAAI,GAAkBhlB,GAmDhD,OAjDAyjB,EAASp3E,SACL,GAAyBywC,kBACzB,WACI,WAAI,GACAriB,EACAopD,EACAmB,EACAO,EACA7a,EACA1uC,OANJ,IAURynD,EAASp3E,SACL,GAAyBm5E,yBACzB,WACI,WAAI,GACA/qD,EACAopD,EACAmB,EACAO,EACA7a,EACA1uC,OANJ,IAURynD,EAASp3E,SACL,GAAyBo5E,YACzB,WACI,WAAI,GACAhrD,EACAopD,EACA,IAAI,GAAuBz4C,GAC3Ble,EAJJ,IAQRu2D,EAASp3E,SACL,GAAyBq5E,eACzB,WACI,WAAI,GACAjrD,EACAopD,EACA,IAAI,GAAmBz4C,GACvBs/B,EACA19C,EALJ,IASDy2D,CACX,CLlCYkC,CAA6BlrD,EAAOulC,EAAe0K,EAAYx9C,EAAQF,GACvEu2D,EACA,IAAI,GAA2B,IAAI,GAA2BvjB,KAG1E,C","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-widget-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"query-string\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/utils/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-stripe-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport {\n    ErrorResponseBody,\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeErrors?: { [key: string]: Error };\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Extension } from './extension';\n\nexport enum ExtensionActionType {\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\n}\n\nexport type ExtensionAction =\n    | LoadExtensionsRequestedAction\n    | LoadExtensionsSucceededAction\n    | LoadExtensionsFailedAction\n    | RenderExtensionRequestedAction\n    | RenderExtensionSucceededAction\n    | RenderExtensionFailedAction;\n\nexport interface LoadExtensionsRequestedAction extends Action {\n    type: ExtensionActionType.LoadExtensionsRequested;\n}\n\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\n    type: ExtensionActionType.LoadExtensionsSucceeded;\n}\n\nexport interface LoadExtensionsFailedAction extends Action<Error> {\n    type: ExtensionActionType.LoadExtensionsFailed;\n}\n\nexport interface RenderExtensionRequestedAction extends Action {\n    type: ExtensionActionType.RenderExtensionRequested;\n}\n\nexport interface RenderExtensionSucceededAction extends Action {\n    type: ExtensionActionType.RenderExtensionSucceeded;\n}\n\nexport interface RenderExtensionFailedAction extends Action<Error> {\n    type: ExtensionActionType.RenderExtensionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeErrors: { ...errors.initializeErrors },\n                initializeMethodId: errors.initializeMethodId\n                    ? errors.initializeMethodId\n                    : undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeErrors: {\n                    ...errors.initializeErrors,\n                    [action.meta && action.meta.methodId]: action.payload,\n                },\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Extension } from './extension';\n\nexport interface ExtensionState {\n    data?: Extension[];\n    errors: ExtensionErrorsState;\n    statuses: ExtensionStatusesState;\n}\n\nexport interface ExtensionErrorsState {\n    loadError?: Error;\n    renderError?: Error;\n}\n\nexport interface ExtensionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ExtensionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport { Extension } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport {\n    DEFAULT_STATE,\n    ExtensionErrorsState,\n    ExtensionState,\n    ExtensionStatusesState,\n} from './extension-state';\n\nexport function extensionReducer(\n    state: ExtensionState = DEFAULT_STATE,\n    action: Action,\n): ExtensionState {\n    const reducer = combineReducers<ExtensionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Extension[] | undefined,\n    action: ExtensionAction,\n): Extension[] | undefined {\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\n        return arrayReplace(data, action.payload);\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\n    action: ExtensionAction,\n): ExtensionErrorsState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n        case ExtensionActionType.LoadExtensionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ExtensionActionType.RenderExtensionRequested:\n        case ExtensionActionType.RenderExtensionSucceeded:\n            return objectSet(errors, 'renderError', undefined);\n\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ExtensionActionType.RenderExtensionFailed:\n            return objectSet(errors, 'renderError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\n    action: ExtensionAction,\n): ExtensionStatusesState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ExtensionActionType.LoadExtensionsSucceeded:\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum PaymentProviderCustomerType {\n    UpdatePaymentProviderCustomer = 'UPDATE_PAYMENT_PROVIDER_CUSTOMER',\n}\n\nexport type PaymentProviderCustomerAction = UpdatePaymentProviderCustomerAction;\n\nexport interface UpdatePaymentProviderCustomerAction extends Action {\n    type: PaymentProviderCustomerType.UpdatePaymentProviderCustomer;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: true,\n                    },\n                });\n            }\n\n            break;\n        }\n\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: false,\n                    },\n                });\n            }\n        }\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { PaymentProviderCustomer } from './payment-provider-customer';\n\nexport default interface PaymentProviderCustomerState {\n    data: PaymentProviderCustomer;\n}\n\nexport const DEFAULT_STATE = {\n    data: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerType,\n    UpdatePaymentProviderCustomerAction,\n} from './payment-provider-customer-actions';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\ntype ReducerActionType = UpdatePaymentProviderCustomerAction;\n\nexport default function paymentProviderCustomerReducer(\n    state: PaymentProviderCustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): PaymentProviderCustomerState {\n    const reducer = combineReducers<PaymentProviderCustomerState, ReducerActionType>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentProviderCustomer = DEFAULT_STATE.data,\n    action: ReducerActionType,\n): PaymentProviderCustomer {\n    switch (action.type) {\n        case PaymentProviderCustomerType.UpdatePaymentProviderCustomer:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentProviderCustomer,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingPaymentProviderCustomer:\n            return 'Unable to proceed because payment provider customer is unavailable.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    braintreeach: {\n        provider: 'braintree',\n        method: 'ach',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.credit_card': {\n        provider: 'bluesnapdirect',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.ecp': {\n        provider: 'bluesnapdirect',\n        method: 'ecp',\n    },\n    'bluesnapdirect.sepa_direct_debit': {\n        provider: 'bluesnapdirect',\n        method: 'sepa_direct_debit',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n    squarev2: {\n        provider: 'squarev2',\n        method: 'credit_card',\n    },\n    paypalcommercecreditcards: {\n        provider: 'paypalcommerce',\n        method: 'credit_card',\n    },\n    paypalcommerce: {\n        provider: 'paypalcommerce',\n        method: 'paypal',\n    },\n    tdonlinemart: {\n        provider: 'tdonlinemart',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createExtensionSelectorFactory } from '../extension';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createPaymentProviderCustomerSelectorFactory } from '../payment-provider-customer';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createPaymentProviderCustomerSelector = createPaymentProviderCustomerSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n    const createExtensionSelector = createExtensionSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const extensions = createExtensionSelector(state.extensions);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentProviderCustomer = createPaymentProviderCustomerSelector(\n            state.paymentProviderCustomer,\n        );\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            extensions,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentProviderCustomer,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\nexport default interface PaymentProviderCustomerSelector {\n    getPaymentProviderCustomer(): PaymentProviderCustomer | undefined;\n    getPaymentProviderCustomerOrThrow(): PaymentProviderCustomer;\n}\n\nexport type PaymentProviderCustomerSelectorFactory = (\n    state: PaymentProviderCustomerState,\n) => PaymentProviderCustomerSelector;\n\nexport function createPaymentProviderCustomerSelectorFactory(): PaymentProviderCustomerSelectorFactory {\n    const getPaymentProviderCustomer = createSelector(\n        (state: PaymentProviderCustomerState) => state.data,\n        (data) => () => data,\n    );\n\n    const getPaymentProviderCustomerOrThrow = createSelector(\n        getPaymentProviderCustomer,\n        (getPaymentProviderCustomer) => () => {\n            return guard(\n                getPaymentProviderCustomer(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentProviderCustomer),\n            );\n        },\n    );\n\n    return memoizeOne(\n        (state: PaymentProviderCustomerState = DEFAULT_STATE): PaymentProviderCustomerSelector => {\n            return {\n                getPaymentProviderCustomer: getPaymentProviderCustomer(state),\n                getPaymentProviderCustomerOrThrow: getPaymentProviderCustomerOrThrow(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\n            if (!initializeMethodId || !initializeErrors) {\n                return;\n            }\n\n            if (methodId) {\n                return initializeErrors[methodId];\n            }\n\n            return initializeErrors[initializeMethodId];\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\ninterface InitiaizedQuery {\n    methodId: string;\n    gatewayId?: string;\n}\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(query: InitiaizedQuery): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (key?: string) => {\n            if (key && initializeMethodId !== key) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (query: InitiaizedQuery) => {\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\n\n            return !!(data[key] && data[key].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { Extension, ExtensionRegion } from './extension';\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\n\nexport interface ExtensionSelector {\n    getExtensions(): Extension[] | undefined;\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\n\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\n    const getExtensions = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => () => data,\n    );\n\n    const getExtensionByRegion = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\n    );\n\n    const getLoadError = createSelector(\n        (state: ExtensionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ExtensionState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\n        return {\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { extensionReducer } from '../extension';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { paymentProviderCustomerReducer } from '../payment-provider-customer';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        extensions: extensionReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        paymentProviderCustomer: paymentProviderCustomerReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { isEqual } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()), { isEqual });\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction, { isEqual });\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nconst isPaymentMethod = (value: PaymentMethod | undefined): value is PaymentMethod => {\n    return !!value;\n};\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethodsById(\n        methodIds: string[],\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n                Promise.all(\n                    methodIds.map(async (id) => {\n                        try {\n                            const response = await this._requestSender.loadPaymentMethod(id, {\n                                ...options,\n                                params,\n                            });\n\n                            return response.body;\n                        } catch (_e) {\n                            return undefined;\n                        }\n                    }),\n                )\n                    .then((response) => {\n                        const paymentMethods = response.filter(isPaymentMethod);\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                paymentMethods,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                        observer.complete();\n                    });\n            });\n    }\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { isEmpty } from 'lodash';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const isBillingFixExperimentEnabled =\n                state.config.getConfig()?.storeConfig.checkoutSettings.features[\n                    'CHECKOUT-8392.fix_billing_creation_in_checkout'\n                ] ?? true;\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            const hasBillingAddress = !isEmpty(billingAddress);\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            isBillingFixExperimentEnabled,\n                            hasBillingAddress,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const isBillingFixExperimentEnabled =\n                    state.config.getConfig()?.storeConfig.checkoutSettings.features[\n                        'CHECKOUT-8392.fix_billing_creation_in_checkout'\n                    ] ?? true;\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                const hasBillingAddress = !isEmpty(billingAddress);\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(\n                    checkout.id,\n                    billingAddressRequestBody,\n                    isBillingFixExperimentEnabled,\n                    hasBillingAddress,\n                    options,\n                )\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        isBillingFixExperimentEnabled: boolean,\n        hasBillingAddress: boolean,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (isBillingFixExperimentEnabled) {\n            if (!hasBillingAddress) {\n                return this._requestSender.createAddress(checkoutId, address, options);\n            }\n\n            return this._requestSender.updateAddress(checkoutId, address, options);\n        }\n\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator, StoreConfig } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            return concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                        params: { checkoutId: id },\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(() => {\n                    return this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) => {\n                            return createAction(\n                                CheckoutActionType.LoadCheckoutSucceeded,\n                                this._shouldTransformCustomerAddress(\n                                    store.getState().config.getStoreConfigOrThrow(),\n                                )\n                                    ? this._transformCustomerAddresses(body)\n                                    : body,\n                            );\n                        });\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n        };\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(\n                        CheckoutActionType.LoadCheckoutSucceeded,\n                        this._shouldTransformCustomerAddress(state.config.getStoreConfigOrThrow())\n                            ? this._transformCustomerAddresses(body)\n                            : body,\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n\n    private _shouldTransformCustomerAddress(storeConfig: StoreConfig): boolean {\n        return (\n            storeConfig.checkoutSettings.features[\n                'CHECKOUT-8183.set_shouldSaveAddress_false_for_existing_address'\n            ] ?? true\n        );\n    }\n\n    private _transformCustomerAddresses(body: Checkout): Checkout {\n        return {\n            ...body,\n            customer: {\n                ...body.customer,\n                addresses: body.customer.addresses.map((address) => ({\n                    ...address,\n                    shouldSaveAddress: false,\n                })),\n            },\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\n        Response<InternalCustomerResponseBody>\n    > {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { appendWww, parseUrl } from '../url';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\ntype EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitStoredCardForm(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<HostedInputStoredCardSucceededEvent> {\n        const promise = this._eventPoster.post<HostedInputStoredCardSucceededEvent>(\n            {\n                type: HostedFieldEventType.StoredCardRequested,\n                payload: { fields, data },\n            },\n            {\n                successType: HostedInputEventType.StoredCardSucceeded,\n                errorType: HostedInputEventType.StoredCardFailed,\n            },\n        );\n\n        return this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async submitStoredCard(payload: {\n        fields: StoredCardHostedFormInstrumentFields;\n        data: StoredCardHostedFormData;\n    }): Promise<HostedInputStoredCardSucceededEvent | void> {\n        return this._getFirstField().submitStoredCardForm(payload.fields, payload.data);\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.physicalItems.categories',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n            'lineItems.digitalItems.categories',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes(include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { Observable, of } from 'rxjs';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerAction,\n    PaymentProviderCustomerType,\n} from './payment-provider-customer-actions';\n\nexport default class PaymentProviderCustomerActionCreator {\n    updatePaymentProviderCustomer(\n        providerCustomerData: PaymentProviderCustomer,\n    ): Observable<PaymentProviderCustomerAction> {\n        return of(\n            createAction(\n                PaymentProviderCustomerType.UpdatePaymentProviderCustomer,\n                providerCustomerData,\n            ),\n        );\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\n\nimport { PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyWidgetAction } from './payment-strategy-actions';\n\nexport default class PaymentStrategyWidgetActionCreator {\n    widgetInteraction(\n        method: () => Promise<unknown>,\n        options?: PaymentRequestOptions,\n    ): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() =>\n                    createAction(\n                        PaymentStrategyActionType.WidgetInteractionFinished,\n                        undefined,\n                        meta,\n                    ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta),\n            ),\n        );\n    }\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport CheckoutStore from '../checkout/checkout-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender,\n        private _store: CheckoutStore,\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        const { checkout } = this._store.getState();\n        const { channelId } = checkout.getCheckoutOrThrow();\n\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender\n                .loadCountries(channelId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(\n                            ShippingCountryActionType.LoadShippingCountriesSucceeded,\n                            response.body.data,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingCountryActionType.LoadShippingCountriesFailed,\n                            response,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries(\n        channelId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<CountryResponseBody>> {\n        const url = `/internalapi/v1/shipping/countries?channel_id=${channelId}`;\n\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow, getOutstandingBalance },\n    config: {\n        getContextConfig,\n        getHost,\n        getLocale,\n        getStoreConfig,\n        getStoreConfigOrThrow,\n        getConfig,\n    },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    countries: { getCountries },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: {\n        getCardInstrument,\n        getCardInstrumentOrThrow,\n        getInstruments,\n        getInstrumentsMeta,\n    },\n    order: { getOrder, getOrderOrThrow, getOrderMeta },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow, getPaymentMethodsMeta },\n    paymentProviderCustomer: { getPaymentProviderCustomer, getPaymentProviderCustomerOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n    shippingCountries: { getShippingCountries },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getCountries: clone(getCountries),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConfig: clone(getConfig),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getContextConfig: clone(getContextConfig),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getInstruments: clone(getInstruments),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getOrderMeta: clone(getOrderMeta),\n        getInstrumentsMeta: clone(getInstrumentsMeta),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getPaymentMethodsMeta: clone(getPaymentMethodsMeta),\n        getPaymentProviderCustomer: clone(getPaymentProviderCustomer),\n        getPaymentProviderCustomerOrThrow: clone(getPaymentProviderCustomerOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        getShippingCountries: clone(getShippingCountries),\n        getOutstandingBalance: clone(getOutstandingBalance),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport {\n    PaymentProviderCustomer,\n    PaymentProviderCustomerActionCreator,\n} from '../payment-provider-customer';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator } from '../remote-checkout';\nimport { InitializePaymentOptions } from '../remote-checkout/remote-checkout-request-sender';\nimport { ConsignmentActionCreator, ShippingCountryActionCreator } from '../shipping';\nimport { PaymentHumanVerificationHandler, SpamProtectionActionCreator } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _checkoutValidator: CheckoutValidator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _paymentStrategyWidgetActionCreator: PaymentStrategyWidgetActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethods(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n\n    async applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\n        const { checkout } = this._store.getState();\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n        if (shouldExecuteSpamCheck) {\n            await this._store.dispatch(\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\n            );\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCurrentOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async updatePaymentProviderCustomer(\n        paymentProviderCustomer: PaymentProviderCustomer,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer(\n                paymentProviderCustomer,\n            ),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadShippingCountries(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._shippingCountryActionCreator.loadCountries(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.deleteConsignment(consignmentId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, params, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async forgetCheckout(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async remoteCheckoutSignOut(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._remoteCheckoutActionCreator.signOut(methodId, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async validateCheckout(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        await this._checkoutValidator.validate(checkout, options);\n    }\n\n    async handlePaymentHumanVerification(\n        errorOrId: Error | string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this._paymentHumanVerificationHandler.handle(errorOrId, key ?? '');\n        }\n\n        return this._paymentHumanVerificationHandler.handle(errorOrId);\n    }\n\n    async widgetInteraction(\n        callback: () => Promise<unknown>,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentStrategyWidgetActionCreator.widgetInteraction(callback),\n            { queueId: 'widgetInteraction' },\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    LocalPaymentInstance,\n    BraintreeLocalPaymentCreateConfig\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface LocalPaymentInstanceConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: onPaymentStartData, start: () => Promise<void>): void;\n}\n\nexport interface StartPaymentError {\n    code: string;\n}\n\nexport interface onPaymentStartData {\n    paymentId: string;\n}\n\nexport interface LocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface LocalPaymentInstance extends BraintreeModule {\n    startPayment(\n        config: LocalPaymentInstanceConfig,\n        callback: (\n            startPaymentError: StartPaymentError,\n            payload: LocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\nexport type GetLocalPaymentInstance = (localPaymentInstance: LocalPaymentInstance) => void;\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import { BraintreeModuleName } from './braintree';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BraintreeModuleName.Client]:\n        'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n    [BraintreeModuleName.PaypalCheckout]:\n        'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n    [BraintreeModuleName.Paypal]:\n        'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n    [BraintreeModuleName.LocalPayment]:\n        'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n    [BraintreeModuleName.DataCollector]:\n        'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n    [BraintreeModuleName.UsBankAccount]:\n        'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n    [BraintreeModuleName.GooglePayment]:\n        'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n    [BraintreeModuleName.ThreeDSecure]:\n        'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n    [BraintreeModuleName.VisaCheckout]:\n        'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n    [BraintreeModuleName.Venmo]:\n        'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n    [BraintreeModuleName.HostedFields]:\n        'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n    [BraintreeModuleName.Fastlane]:\n        'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport { BRAINTREE_SDK_STABLE_VERSION } from './braintree-sdk-verison';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    private braintreeSdkVersion = BRAINTREE_SDK_STABLE_VERSION;\n\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadBraintreeLocalMethods(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const scriptPath = `//js.braintreegateway.com/web/${this.braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = this.getIntegrityValuesByModuleName(braintreeModuleName);\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(moduleName: BraintreeModuleName): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","export const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeScriptLoader,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    PAYPAL_COMPONENTS,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(\n                    this._getPayPalSDKConfig(config),\n                    paypalSdkLoadCallback,\n                );\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module\n            ? module\n                  .then((mod) => mod.teardown())\n                  .catch((error) => {\n                      if (error.code !== 'METHOD_CALLED_AFTER_TEARDOWN') {\n                          throw error;\n                      }\n                  })\n            : Promise.resolve();\n    }\n\n    private _getPayPalSDKConfig(config: Partial<BraintreePaypalSdkCreatorConfig>) {\n        return {\n            currency: config.currency,\n            ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n            components: PAYPAL_COMPONENTS.toString(),\n            intent: config.intent,\n            commit: false,\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () =>\n                    this._setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const { checkout } = this._store.getState();\n            const grandTotal = checkout.getCheckoutOrThrow().outstandingBalance;\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: grandTotal,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onClick?(): void;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { getDefaultLogger } from '../log';\nimport { getEnvironment } from '../utility';\n\nimport Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] !== value) {\n                    result.matches = 0;\n                    break;\n                }\n\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matchedResults = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0);\n\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\n            if (getEnvironment() === 'development') {\n                getDefaultLogger().warn(\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\n                );\n            }\n        }\n\n        const matched = matchedResults[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency || !createCheckoutSessionConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","export * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } =\n            applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.setAttribute('class', buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BraintreeScriptLoader, BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(new BraintreeScriptLoader(getScriptLoader(), window)),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"query-string\");","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { stringifyUrl } from 'query-string';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltButtonStyleOptions,\n    BoltHostWindow,\n    BoltPaymentMethod,\n    StyleButtonShape,\n    StyleButtonSize,\n} from './bolt';\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\n    ): Promise<void> {\n        const { bolt, containerId, methodId } = options;\n        const { buyNowInitializeOptions, style } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bolt) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\n            );\n        }\n\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\n\n        if (!isBuyNowFlow) {\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\n        }\n\n        if (\n            !buyNowInitializeOptions?.storefrontApiToken ||\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            config.testMode,\n            developerConfig,\n            'BigCommerce',\n            buyNowInitializeOptions.storefrontApiToken,\n        );\n\n        this.renderButton(containerId, paymentMethod, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\n            return;\n        }\n\n        this.addButtonContainer(containerId, paymentMethod, style);\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\n    }\n\n    private addButtonContainer(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            return;\n        }\n\n        const boltButtonContainer = document.createElement('div');\n        const boltButtonObject = document.createElement('object');\n\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\n        boltButtonContainer.setAttribute('style', 'display:none');\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\n\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\n\n        boltButtonContainer.append(boltButtonObject);\n        container.innerHTML = '';\n        container.append(boltButtonContainer);\n    }\n\n    private getBoltObjectData(\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): string {\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\n        const buttonHeight = this.getButtonHeight(style?.size);\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\n\n        return stringifyUrl({\n            url: `https://${domainUrl}/v1/checkout_button`,\n            query: {\n                publishable_key: publishableKey,\n                variant: 'ppc',\n                height: buttonHeight,\n                border_radius: buttonBorderRadius,\n            },\n        });\n    }\n\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\n        if (!buttonSize) {\n            return;\n        }\n\n        switch (buttonSize) {\n            case StyleButtonSize.Small:\n                return 25;\n\n            case StyleButtonSize.Large:\n                return 45;\n\n            case StyleButtonSize.Medium:\n            default:\n                return 40;\n        }\n    }\n\n    private getButtonBorderRadius(\n        buttonShape?: StyleButtonShape,\n        buttonHeight?: number,\n    ): number | undefined {\n        if (!buttonShape) {\n            return;\n        }\n\n        switch (buttonShape) {\n            case StyleButtonShape.Pill:\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\n\n            case StyleButtonShape.Rect:\n            default:\n                return 4;\n        }\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltButtonStrategy from './bolt-button-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltButtonStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSdk = new BraintreeSdk(new BraintreeScriptLoader(getScriptLoader(), hostWindow));\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    DefaultCheckoutButtonHeight,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || DefaultCheckoutButtonHeight}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            this.handleInitializationVenmoError(error, containerId);\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader, braintreeHostWindow);\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): Promise<(NewTransactionInfo & NewShippingOptionParameters) | void>;\n    };\n}\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => void;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    isShippingOptionsEnabled?: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId?: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\nimport itemsRequireShipping from '../utils/items-require-shipping';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: this._isGooglePayShippingOptionsAvailable(),\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isGooglePayShippingOptionsAvailable() && this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const isGooglePayShippingOptionsAvailable = this._isGooglePayShippingOptionsAvailable();\n        const availableTriggers = isGooglePayShippingOptionsAvailable\n            ? [\n                  CallbackTriggerType.INITIALIZE,\n                  CallbackTriggerType.SHIPPING_ADDRESS,\n                  CallbackTriggerType.SHIPPING_OPTION,\n              ]\n            : [CallbackTriggerType.INITIALIZE];\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = isGooglePayShippingOptionsAvailable\n            ? [CallbackTriggerType.INITIALIZE, CallbackTriggerType.SHIPPING_ADDRESS]\n            : [];\n        const shippingOptionsChangeTriggers = isGooglePayShippingOptionsAvailable\n            ? [CallbackTriggerType.SHIPPING_OPTION]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id || availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(availableShippingOptions[0].id);\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isGooglePayShippingOptionsAvailable(): boolean {\n        return !!this.getGooglePayInitializationData().isShippingOptionsEnabled;\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({ id, cost, description }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart, StoreConfig } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    IntermediatePaymentData,\n    NewTransactionInfo,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                }: IntermediatePaymentData): Promise<NewTransactionInfo | void> => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(availableShippingOptions);\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                throw new BuyNowCartCreationError(error);\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(availableShippingOptions?: ShippingOptionParameters) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(availableShippingOptions?: ShippingOptionParameters) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Google Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(\n        service: PaymentIntegrationService,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        await this.paypalCommerceScriptLoader.getPayPalSDK(paymentMethod, currency);\n\n        this.googlepayConfig = await this.paypalCommerceScriptLoader.getGooglePayConfigOrThrow();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    GooglePayConfig,\n    PayPalCommerceHostWindow,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './types';\n\nexport default class GooglePayPayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n    private googlepayConfig?: GooglePayConfig;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    async getGooglePayConfigOrThrow() {\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (!this.googlepayConfig) {\n            this.googlepayConfig = await this.window.paypal.Googlepay().config();\n        }\n\n        return this.googlepayConfig;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'messages',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import {\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('stripe', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayStripeGateway from '../../gateways/google-pay-stripe-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n    paypalLoadScript?: (options: PayPalCommerceScriptParams) => Promise<{ paypal: PayPalSDK }>;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingChange?(data: ShippingChangeCallbackPayload): Promise<void>;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ShippingChangeCallbackPayload {\n    orderID: string;\n    shipping_address: PaypalAddressCallbackData;\n    selected_shipping_option: PayPalSelectedShippingOption;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n *\n */\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: shippingAddress.address_line_1,\n            city: shippingAddress.admin_area_2,\n            countryCode: shippingAddress.country_code,\n            postalCode: shippingAddress.postal_code,\n            stateOrProvinceCode: shippingAddress.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const isPaypalShippingCallbacksExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'PAYPAL-4387.paypal_shipping_callbacks'\n            ];\n\n        const onShippingChangeCallbacks = isPaypalShippingCallbacksExperimentIsOn\n            ? {\n                  onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                      this.onShippingAddressChange(data),\n                  onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                      this.onShippingOptionsChange(data),\n              }\n            : {\n                  onShippingChange: (data: ShippingChangeCallbackPayload) =>\n                      this.onShippingChange(data),\n              };\n\n        const hostedCheckoutCallbacks = {\n            ...onShippingChangeCallbacks,\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingChange(data: ShippingChangeCallbackPayload): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shipping_address.city,\n            countryCode: data.shipping_address.country_code,\n            postalCode: data.shipping_address.postal_code,\n            stateOrProvinceCode: data.shipping_address.state,\n        });\n\n        try {\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n                data.selected_shipping_option?.id,\n            );\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n\n            if (!this.window.paypalMessages) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            connectClientToken, // TODO: remove when PPCP Fastlane A/B testing will be finished\n        } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-user-id-token': connectClientToken || clientToken,\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    MessagingOptions,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        if (currencyCode && messagingContainerId) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const isPaypalShippingCallbacksExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'PAYPAL-4387.paypal_shipping_callbacks'\n            ];\n\n        const onShippingChangeCallbacks = isPaypalShippingCallbacksExperimentIsOn\n            ? {\n                  onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                      this.onShippingAddressChange(data),\n                  onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                      this.onShippingOptionsChange(data),\n              }\n            : {\n                  onShippingChange: (data: ShippingChangeCallbackPayload) =>\n                      this.onShippingChange(data),\n              };\n\n        const hostedCheckoutCallbacks = {\n            ...onShippingChangeCallbacks,\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingChange(data: ShippingChangeCallbackPayload): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shipping_address.city,\n            countryCode: data.shipping_address.country_code,\n            postalCode: data.shipping_address.postal_code,\n            stateOrProvinceCode: data.shipping_address.state,\n        });\n\n        try {\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n                data.selected_shipping_option?.id,\n            );\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n    ): void {\n        if (messagingContainerId && document.getElementById(messagingContainerId)) {\n            const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n            const grandTotal = checkout.outstandingBalance;\n\n            const paypalMessagesOptions: MessagingOptions = {\n                amount: grandTotal,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style } = paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { ConfigState } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n\n    const config: ConfigState = {\n        meta: {\n            host: options?.host,\n            locale: options?.locale,\n        },\n        errors: {},\n        statuses: {},\n    };\n\n    const store = createCheckoutStore({ config });\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { PaymentProviderCustomerActionCreator } from '../payment-provider-customer';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n} from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost, getLocale },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const checkoutValidator = new CheckoutValidator(new CheckoutRequestSender(requestSender));\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    const paymentProviderCustomerActionCreator = new PaymentProviderCustomerActionCreator();\n\n    const shippingCountryActionCreator = new ShippingCountryActionCreator(\n        new ShippingCountryRequestSender(requestSender, { locale: getLocale() }),\n        store,\n    );\n\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender),\n        checkoutActionCreator,\n    );\n\n    const paymentStrategyWidgetActionCreator = new PaymentStrategyWidgetActionCreator();\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        checkoutValidator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        paymentHumanVerificationHandler,\n        customerActionCreator,\n        cartRequestSender,\n        storeCreditActionCreator,\n        spamProtectionActionCreator,\n        paymentProviderCustomerActionCreator,\n        shippingCountryActionCreator,\n        remoteCheckoutActionCreator,\n        paymentStrategyWidgetActionCreator,\n    );\n}\n","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BraintreeScriptLoader } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport { CartRequestSender } from '../cart';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n} from './strategies/braintree';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const braintreeSdkCreator = new BraintreeSDKCreator(\n        new BraintreeScriptLoader(scriptLoader, window),\n    );\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    return registry;\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","OrderActionType","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","ExtensionActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeErrors","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","FormFieldsActionType","extensionReducer","LoadExtensionsSucceeded","LoadExtensionsRequested","RenderExtensionRequested","RenderExtensionSucceeded","LoadExtensionsFailed","RenderExtensionFailed","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","PaymentActionType","PaymentMethodActionType","orderBillingAddressReducer","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","PaymentProviderCustomerType","paymentStrategyReducer","gatewayId","initializeError","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","InstrumentActionType","paymentProviderCustomerReducer","UpdatePaymentProviderCustomer","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sortedArray","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingPaymentProviderCustomer","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","trap","createProxy","ACKNOWLEDGE","FINALIZE","provider","method","barclays","braintree","braintreepaypal","braintreeach","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","squarev2","paypalcommercecreditcards","paypalcommerce","tdonlinemart","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getPaymentProviderCustomer","getPaymentProviderCustomerOrThrow","getCheckout","getShippingAddress","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","getOrderBillingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","query","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createPaymentProviderCustomerSelector","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","shippingConsignments","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","createExtensionSelector","getExtensions","getExtensionByRegion","region","e","createExtensionSelectorFactory","checkoutButton","customerStrategies","extensions","form","orderBillingAddress","paymentProviderCustomer","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","instanceMethods","set","Observable","shareReplay","store","isPaymentMethod","_requestSender","loadPaymentMethodsById","methodIds","observer","cartId","params","next","createAction","Promise","all","loadPaymentMethod","then","complete","catch","loadPaymentMethods","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","createErrorAction","window","isApplePayWindow","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","JsonV1","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isBillingFixExperimentEnabled","checkoutSettings","features","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","hasBillingAddress","isEmpty","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","createBuyNowCart","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","_shouldTransformCustomerAddress","_transformCustomerAddresses","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","addresses","shouldSaveAddress","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","isSpamProtectionExecuteSucceededAction","succeededAction","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","delete","_formFieldsRequestSender","loadFields","promise","cancellable","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_context","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","setContext","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","messageEvent","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","callbackName","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","submitStoredCardForm","StoredCardRequested","StoredCardSucceeded","StoredCardFailed","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","otherField","submit","additionalActionData","additionalAction","submitStoredCard","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","BRAINTREE_VENMO","BRAINTREE_PAYPAL","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","updatePaymentProviderCustomer","providerCustomerData","widgetInteraction","_remoteCheckoutRequestSender","initializeBilling","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","initializeShipping","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","initializePayment","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","loadSettings","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","signOut","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","forgetCheckout","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","methodName","generateToken","trackAuthorizationEvent","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","_shippingCountryRequestSender","loadCountries","channelId","_config","initialize","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutFailed","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_paymentProviderCustomerActionCreator","_shippingCountryActionCreator","_remoteCheckoutActionCreator","_paymentStrategyWidgetActionCreator","_storeProjection","createHostedForm","subscribe","subscriber","filters","initializeOffsitePaymentConfig","dispatch","updateBillingAddress","updateShippingAddress","buyNowCartRequestBody","loadShippingCountries","remoteCheckoutSignOut","validateCheckout","handlePaymentHumanVerification","queueId","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","selectorDecorator","resolver","memoizedMethod","cachedValue","isPrivate","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","uniqueId","setUniqueElementId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","braintreeHostWindow","braintreeSdkVersion","loadClient","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadBraintreeLocalMethods","loadDataCollector","loadUsBankAccount","loadGooglePayment","load3DS","loadVisaCheckout","loadVenmoCheckout","loadHostedFields","loadVisaCheckoutSdk","testMode","V","async","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","scriptPath","getIntegrityValuesByModuleName","moduleName","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","client","authorization","getPaypalCheckout","onSuccess","onError","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypal","loadPayPalSDK","_getPayPalSDKConfig","_paypalCheckout","getVenmoCheckout","_venmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","version","getDataCollector","cached","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","createHostedFields","_teardown","mod","isCreditEnabled","components","intent","commit","useMasterpassSrc","language","sourceUrl","masterpass","merchantId","scriptSrc","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","details","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_braintreeSDKCreator","_formPoster","messagingContainerId","buyNowInitializeOptions","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","createOrder","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","placement","onPaymentError","_createBuyNowCart","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","getBuyNowCartRequestBody","cartRequestBody","tokenizePayment","tokenizePayload","buyNowCartId","postForm","payment_type","device_data","billing_address","shipping_address","cart_id","buttonContainerId","onErrorCallback","elementId","remove","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","_methodId","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","_createSignInButton","_handleWalletButtonClick","buttonContainer","button","subdomain","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","_paymentMethod","clientId","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","_onError","paymentID","payerID","payerId","payerInfo","payer","payer_info","getEnvironment","process","NODE_ENV","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","_resolveToken","resolveId","_encodeToken","_decodeToken","parse","atob","registeredTokens","results","registeredToken","resolverId","matches","entries","matchedResults","matched","getShippableItemsCount","total","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","amazonPayV2Regions","jp","us","amazonPayV2ScriptLoader","amazonPayV2SDK","buttonParentContainer","createAmazonPayButtonParentContainer","amazonPayV2Button","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","decoupleCheckoutInitiation","isButtonMicroTextDisabled","parentContainerId","getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","isPh4Enabled","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","random","substr","parentContainer","Gold","getCheckoutState","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","shopPath","buttonOptions","tmpConfig","createCheckoutSession","getOrThrow","checkoutSelectors","windowWithAmazonPay","amazonPayV2Region","amazon","toResolvableModule","resolveIds","isWithBuyNowFeatures","paymentIntegrationService","amazonPayV2PaymentProcessor","amazonPayV2ConfigRequestSender","amazonpay","initializeAmazonButtonOptions","_buyNowInitializeOptions","Cart","_getCheckoutCreationRequestConfig","_createBuyNowCartOrThrow","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","Json","requestSender","createRequestSender","amazonPayV2RequestSender","getScriptLoader","TotalPriceStatusType","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","braintreeScriptLoader","setClientToken","teardownModule","dataCollector","getClientTokenOrThrow","clientCreator","getDataCollectorOrThrow","emptyDataCollector","dataCollectorConfig","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","getUsBankAccount","usBankAccount","getBraintreeVisaCheckout","visaCheckout","getVisaCheckoutSdk","visaCheckoutSDK","getVenmoCheckoutOrThrow","braintreeVenmo","ApplePayGatewayType","ApplePaySession","DefaultLabels","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","requiresShipping","_requiresShipping","BRAINTREE","_initializeBraintreeSdk","_applePayButton","_createButton","classList","add","preventDefault","merchantCapabilities","supportedNetworks","storeName","_getRequestWithEmptyTotal","requiredShippingContactFields","applePaySession","_handleApplePayEvents","begin","_getBaseRequest","requiredBillingContactFields","toFixed","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onpaymentmethodselected","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","completePaymentMethodSelection","newTotal","newLineItems","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","_getBraintreeDeviceData","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phoneNumber","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","locality","addressLines","administrativeArea","braintreePaymentMethod","BoltDeveloperMode","StyleButtonSize","StyleButtonShape","boltScriptLoader","boltHostWindow","storefrontApiToken","publishableKey","developerConfig","loadBoltClient","BoltConnect","setupProductPageCheckout","addButtonContainer","boltButtonContainer","boltButtonObject","getBoltObjectData","append","innerHTML","domainUrl","getDomainURL","buttonHeight","getButtonHeight","buttonBorderRadius","getButtonBorderRadius","stringifyUrl","publishable_key","variant","border_radius","buttonSize","Small","Large","Medium","buttonShape","Pill","Rect","developerModeParams","BoltCheckout","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","formPoster","braintreeSdk","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","settings","collectShipping","createSignInButton","init","paymentSuccess","tokenize","toVisaCheckoutAddress","userData","cardInformation","userEmail","card_information","lastTwo","getAddress","streetAddress","extendedAddress","insertVisaCheckoutButton","visaCheckoutButton","display","flexDirection","alignItems","hostWindow","createFormPoster","getVenmoButtonStyle","c","backgroundColor","WHITE","backgroundPosition","backgroundSize","backgroundImage","BLUE","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","braintreevenmo","paymentButtonStyles","cartButtonStyles","handleError","renderVenmoButton","handleInitializationVenmoError","removeVenmoContainer","buttonStyles","venmoButton","buyBowCart","removeAttribute","handlePostForm","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","GooglePayCardNetwork","CallbackIntentsType","CallbackTriggerType","isGooglePayCardNetworkKey","_gatewayIdentifier","_isBuyNowFlow","mapToShippingAddressRequestBody","_mapToAddressRequestBody","mapToBillingAddressRequestBody","paymentMethodData","mapToExternalCheckoutData","getRequiredData","emailRequired","_isShippingAddressRequired","allowedCountryCodes","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","_isGooglePayShippingOptionsAvailable","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayShippingOptionsAvailable","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","getNonce","extraPaymentData","getMerchantInfo","getGooglePayInitializationData","merchantName","authJwt","getTransactionInfo","_getCurrencyCodeOrThrow","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","getCardParameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressRequired","billingAddressParameters","_getPaymentMethodFn","_currencyCode","handleShippingAddressChange","mappedShippingAddress","_currencyService","_getGooglePayShippingOption","selectedShippingOptionId","handleShippingOptionChange","defaultSelectedOptionId","getTotalPrice","getGatewayIdentifier","setGatewayIdentifier","isShippingOptionsEnabled","address3","_getFirstAndLastName","trim","nameParts","service","_service","_braintreeGooglePayment","isThreeDSecureEnabled","_braintreePresent3DSChallenge","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","createPaymentDataRequest","merchantInfo","transactionInfo","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","parameters","verifyCard","onLookupComplete","_data","GooglePayKey","_googlePayPaymentProcessor","googlePayOptions","_getMethodOrThrow","buttonType","_countryCode","_getGooglePayClientOptions","_paymentButton","addPaymentButton","_handleClick","initializeWidget","_interactWithPaymentSheet","err","statusCode","showPaymentSheet","siteLink","setExternalCheckoutForm","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","shippingOptionData","_getBuyNowTransactionInfo","_getTransactionInfo","newTransactionInfo","FINAL","newShippingOptionParameters","_gateway","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","getGooglePaymentsClient","_paymentsClient","_buildButtonPayloads","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","paymentButton","_getPaymentsClient","allowedPaymentMethods","_getBaseCardPaymentMethod","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","_setExternalCheckout","processAdditionalAction","useFormPoster","prefetchPaymentData","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","callbackIntents","_isReadyToPayRequest","_getOrThrow","google","api","PaymentsClient","environment","createGooglePayScriptLoader","paypalCommerceScriptLoader","isGooglePayPaypalCommercePaymentMethod","assertsIsGooglePayPayPalCommercePaymentMethod","getPayPalSDK","getGooglePayConfigOrThrow","googlepayConfig","initializesOnCheckoutPage","forceLoad","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","Googlepay","transformConfig","scriptQuery","URLSearchParams","paypalSdkUrl","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","shouldEnableCard","enableCardFunding","disableCardFunding","cardFieldsComponent","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","googlePayComponent","transformedConfig","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","_resolve","threeDSBody","three_ds_result","acs_url","isGooglePayThreeDSecureResult","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","Authorization","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","isGooglePayStripeInitializationData","assertsIsGooglePayStripeInitializationData","stripeVersion","stripePublishableKey","stripeConnectedAccount","invalidFields","browser_info","navigator","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","screen_width","time_zone_offset","getTimezoneOffset","errorBody","isObject","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","threeDSSessionData","creq","CartSource","LiabilityShiftEnum","NonInstantAlternativePaymentMethods","PayPalOrderStatus","paypalCommerceRequestSender","loadPayPalSdk","providedCurrencyCode","paypalSdk","getPayPalSdkOrThrow","createBuyNowCartOrThrow","requestBody","createOrderCardFields","setupToken","updateOrder","getOrderStatus","order_id","BuyNow","device_info","method_id","paypal_account","getShippingOptionOrThrow","recommendedShippingOption","shippingOptionToSelect","getBillingAddressFromOrderDetails","given_name","surname","email_address","admin_area_2","admin_area_1","getShippingAddressFromOrderDetails","orderDetails","removeElement","paypalCommerceIntegrationService","onComplete","defaultCallbacks","orderID","buyNowFlowCallbacks","handleClick","onCancel","onShippingChangeCallbacks","onShippingAddressChange","onShippingOptionsChange","onShippingChange","hostedCheckoutCallbacks","onHostedCheckoutApprove","buttonRenderOptions","paypalButton","selected_shipping_option","getPayPalFastlaneSdk","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","connectClientToken","paypalCommerceSdk","paypalcommercecredit","renderMessages","paypalMessagesSdk","paypalMessagesOptions","paypalcommercevenmo","VENMO","getValidVenmoButtonStyles","gold","paypalcommercealternativemethods","paypalExpressScriptLoader","loadPaypalSDK","paypalSDK","getStyle","setupPayment","getPaymentData","createCheckoutButtonInitializer","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","storeProjectionFactory","checkoutActionCreator","checkoutValidator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","paymentClient","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","paymentHumanVerificationHandler","customerActionCreator","storeCreditActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","cartRequestSender","paymentProviderCustomerActionCreator","shippingCountryActionCreator","remoteCheckoutActionCreator","paymentStrategyWidgetActionCreator","createPaymentIntegrationService","checkoutRequestSender","braintreeSdkCreator","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","PAYPALEXPRESS","createCheckoutButtonRegistry"],"sourceRoot":""}